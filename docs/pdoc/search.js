window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = {"version": "0.9.5", "fields": ["qualname", "fullname", "annotation", "default_value", "signature", "bases", "doc"], "ref": "fullname", "documentStore": {"docs": {"howard": {"fullname": "howard", "modulename": "howard", "kind": "module", "doc": "<p></p>\n"}, "howard.functions": {"fullname": "howard.functions", "modulename": "howard.functions", "kind": "module", "doc": "<p></p>\n"}, "howard.functions.commons": {"fullname": "howard.functions.commons", "modulename": "howard.functions.commons", "kind": "module", "doc": "<p></p>\n"}, "howard.functions.commons.file_folder": {"fullname": "howard.functions.commons.file_folder", "modulename": "howard.functions.commons", "qualname": "file_folder", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/Users/lebechea/BIOINFO/git/HOWARD/howard/functions&#x27;"}, "howard.functions.commons.subfolder_plugins": {"fullname": "howard.functions.commons.subfolder_plugins", "modulename": "howard.functions.commons", "qualname": "subfolder_plugins", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;plugins&#x27;"}, "howard.functions.commons.folder_main": {"fullname": "howard.functions.commons.folder_main", "modulename": "howard.functions.commons", "qualname": "folder_main", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/Users/lebechea/BIOINFO/git/HOWARD&#x27;"}, "howard.functions.commons.folder_config": {"fullname": "howard.functions.commons.folder_config", "modulename": "howard.functions.commons", "qualname": "folder_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/Users/lebechea/BIOINFO/git/HOWARD/config&#x27;"}, "howard.functions.commons.folder_user_home": {"fullname": "howard.functions.commons.folder_user_home", "modulename": "howard.functions.commons", "qualname": "folder_user_home", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/Users/lebechea&#x27;"}, "howard.functions.commons.folder_howard_home": {"fullname": "howard.functions.commons.folder_howard_home", "modulename": "howard.functions.commons", "qualname": "folder_howard_home", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/Users/lebechea/howard&#x27;"}, "howard.functions.commons.folder_plugins": {"fullname": "howard.functions.commons.folder_plugins", "modulename": "howard.functions.commons", "qualname": "folder_plugins", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/Users/lebechea/BIOINFO/git/HOWARD/plugins&#x27;"}, "howard.functions.commons.comparison_map": {"fullname": "howard.functions.commons.comparison_map", "modulename": "howard.functions.commons", "qualname": "comparison_map", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;gt&#x27;: &#x27;&gt;&#x27;, &#x27;gte&#x27;: &#x27;&gt;=&#x27;, &#x27;lt&#x27;: &#x27;&lt;&#x27;, &#x27;lte&#x27;: &#x27;&lt;=&#x27;, &#x27;equals&#x27;: &#x27;=&#x27;, &#x27;contains&#x27;: &#x27;SIMILAR TO&#x27;}"}, "howard.functions.commons.code_type_map": {"fullname": "howard.functions.commons.code_type_map", "modulename": "howard.functions.commons", "qualname": "code_type_map", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;Integer&#x27;: 0, &#x27;String&#x27;: 1, &#x27;Float&#x27;: 2, &#x27;Flag&#x27;: 3}"}, "howard.functions.commons.code_type_map_to_sql": {"fullname": "howard.functions.commons.code_type_map_to_sql", "modulename": "howard.functions.commons", "qualname": "code_type_map_to_sql", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;Integer&#x27;: &#x27;INTEGER&#x27;, &#x27;String&#x27;: &#x27;VARCHAR&#x27;, &#x27;Float&#x27;: &#x27;FLOAT&#x27;, &#x27;Flag&#x27;: &#x27;VARCHAR&#x27;}"}, "howard.functions.commons.file_format_delimiters": {"fullname": "howard.functions.commons.file_format_delimiters", "modulename": "howard.functions.commons", "qualname": "file_format_delimiters", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;vcf&#x27;: &#x27;\\t&#x27;, &#x27;tsv&#x27;: &#x27;\\t&#x27;, &#x27;csv&#x27;: &#x27;,&#x27;, &#x27;psv&#x27;: &#x27;|&#x27;, &#x27;bed&#x27;: &#x27;\\t&#x27;}"}, "howard.functions.commons.file_format_allowed": {"fullname": "howard.functions.commons.file_format_allowed", "modulename": "howard.functions.commons", "qualname": "file_format_allowed", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;vcf&#x27;, &#x27;tsv&#x27;, &#x27;csv&#x27;, &#x27;psv&#x27;, &#x27;bed&#x27;, &#x27;json&#x27;, &#x27;parquet&#x27;, &#x27;duckdb&#x27;]"}, "howard.functions.commons.file_compressed_format": {"fullname": "howard.functions.commons.file_compressed_format", "modulename": "howard.functions.commons", "qualname": "file_compressed_format", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;gz&#x27;, &#x27;bgz&#x27;]"}, "howard.functions.commons.vcf_required_release": {"fullname": "howard.functions.commons.vcf_required_release", "modulename": "howard.functions.commons", "qualname": "vcf_required_release", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;##fileformat=VCFv4.2&#x27;"}, "howard.functions.commons.vcf_required_columns": {"fullname": "howard.functions.commons.vcf_required_columns", "modulename": "howard.functions.commons", "qualname": "vcf_required_columns", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;#CHROM&#x27;, &#x27;POS&#x27;, &#x27;ID&#x27;, &#x27;REF&#x27;, &#x27;ALT&#x27;, &#x27;QUAL&#x27;, &#x27;FILTER&#x27;, &#x27;INFO&#x27;]"}, "howard.functions.commons.vcf_required": {"fullname": "howard.functions.commons.vcf_required", "modulename": "howard.functions.commons", "qualname": "vcf_required", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;##fileformat=VCFv4.2&#x27;, &#x27;#CHROM\\tPOS\\tID\\tREF\\tALT\\tQUAL\\tFILTER\\tINFO&#x27;]"}, "howard.functions.commons.DEFAULT_TOOLS_FOLDER": {"fullname": "howard.functions.commons.DEFAULT_TOOLS_FOLDER", "modulename": "howard.functions.commons", "qualname": "DEFAULT_TOOLS_FOLDER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/Users/lebechea/howard/tools&#x27;"}, "howard.functions.commons.DEFAULT_TOOLS_BIN": {"fullname": "howard.functions.commons.DEFAULT_TOOLS_BIN", "modulename": "howard.functions.commons", "qualname": "DEFAULT_TOOLS_BIN", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;bcftools&#x27;: {&#x27;bin&#x27;: &#x27;bcftools&#x27;}, &#x27;bgzip&#x27;: {&#x27;bin&#x27;: &#x27;bgzip&#x27;}, &#x27;java&#x27;: {&#x27;bin&#x27;: &#x27;java&#x27;}, &#x27;snpeff&#x27;: {&#x27;jar&#x27;: &#x27;~/howard/tools/snpeff/current/bin/snpEff.jar&#x27;}, &#x27;annovar&#x27;: {&#x27;perl&#x27;: &#x27;~/howard/tools/annovar/current/bin/table_annovar.pl&#x27;}, &#x27;exomiser&#x27;: {&#x27;jar&#x27;: &#x27;~/howard/tools/exomiser/current/bin/exomiser.jar&#x27;}, &#x27;docker&#x27;: {&#x27;bin&#x27;: &#x27;docker&#x27;}, &#x27;splice&#x27;: {&#x27;docker&#x27;: {&#x27;image&#x27;: &#x27;bioinfochrustrasbourg/splice:0.2.1&#x27;, &#x27;entrypoint&#x27;: &#x27;/bin/bash&#x27;, &#x27;options&#x27;: None, &#x27;command&#x27;: None}}}"}, "howard.functions.commons.DEFAULT_ANNOVAR_URL": {"fullname": "howard.functions.commons.DEFAULT_ANNOVAR_URL", "modulename": "howard.functions.commons", "qualname": "DEFAULT_ANNOVAR_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;http://www.openbioinformatics.org/annovar/download&#x27;"}, "howard.functions.commons.DEFAULT_REFSEQ_URL": {"fullname": "howard.functions.commons.DEFAULT_REFSEQ_URL", "modulename": "howard.functions.commons", "qualname": "DEFAULT_REFSEQ_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;http://hgdownload.soe.ucsc.edu/goldenPath&#x27;"}, "howard.functions.commons.DEFAULT_DBNSFP_URL": {"fullname": "howard.functions.commons.DEFAULT_DBNSFP_URL", "modulename": "howard.functions.commons", "qualname": "DEFAULT_DBNSFP_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://dbnsfp.s3.amazonaws.com&#x27;"}, "howard.functions.commons.DEFAULT_EXOMISER_URL": {"fullname": "howard.functions.commons.DEFAULT_EXOMISER_URL", "modulename": "howard.functions.commons", "qualname": "DEFAULT_EXOMISER_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;http://data.monarchinitiative.org/exomiser&#x27;"}, "howard.functions.commons.DEFAULT_EXOMISER_REMM_URL": {"fullname": "howard.functions.commons.DEFAULT_EXOMISER_REMM_URL", "modulename": "howard.functions.commons", "qualname": "DEFAULT_EXOMISER_REMM_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://kircherlab.bihealth.org/download/ReMM&#x27;"}, "howard.functions.commons.DEFAULT_EXOMISER_CADD_URL": {"fullname": "howard.functions.commons.DEFAULT_EXOMISER_CADD_URL", "modulename": "howard.functions.commons", "qualname": "DEFAULT_EXOMISER_CADD_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://kircherlab.bihealth.org/download/CADD&#x27;"}, "howard.functions.commons.DEFAULT_ALPHAMISSENSE_URL": {"fullname": "howard.functions.commons.DEFAULT_ALPHAMISSENSE_URL", "modulename": "howard.functions.commons", "qualname": "DEFAULT_ALPHAMISSENSE_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://storage.googleapis.com/dm_alphamissense&#x27;"}, "howard.functions.commons.DEFAULT_DBSNP_URL": {"fullname": "howard.functions.commons.DEFAULT_DBSNP_URL", "modulename": "howard.functions.commons", "qualname": "DEFAULT_DBSNP_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://ftp.ncbi.nih.gov/snp/archive&#x27;"}, "howard.functions.commons.DEFAULT_DATABASE_FOLDER": {"fullname": "howard.functions.commons.DEFAULT_DATABASE_FOLDER", "modulename": "howard.functions.commons", "qualname": "DEFAULT_DATABASE_FOLDER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/Users/lebechea/howard/databases&#x27;"}, "howard.functions.commons.DEFAULT_ANNOTATIONS_FOLDER": {"fullname": "howard.functions.commons.DEFAULT_ANNOTATIONS_FOLDER", "modulename": "howard.functions.commons", "qualname": "DEFAULT_ANNOTATIONS_FOLDER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/Users/lebechea/howard/databases/annotations/current&#x27;"}, "howard.functions.commons.DEFAULT_GENOME_FOLDER": {"fullname": "howard.functions.commons.DEFAULT_GENOME_FOLDER", "modulename": "howard.functions.commons", "qualname": "DEFAULT_GENOME_FOLDER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/Users/lebechea/howard/databases/genomes/current&#x27;"}, "howard.functions.commons.DEFAULT_SNPEFF_FOLDER": {"fullname": "howard.functions.commons.DEFAULT_SNPEFF_FOLDER", "modulename": "howard.functions.commons", "qualname": "DEFAULT_SNPEFF_FOLDER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/Users/lebechea/howard/databases/snpeff/current&#x27;"}, "howard.functions.commons.DEFAULT_ANNOVAR_FOLDER": {"fullname": "howard.functions.commons.DEFAULT_ANNOVAR_FOLDER", "modulename": "howard.functions.commons", "qualname": "DEFAULT_ANNOVAR_FOLDER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/Users/lebechea/howard/databases/annovar/current&#x27;"}, "howard.functions.commons.DEFAULT_REFSEQ_FOLDER": {"fullname": "howard.functions.commons.DEFAULT_REFSEQ_FOLDER", "modulename": "howard.functions.commons", "qualname": "DEFAULT_REFSEQ_FOLDER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/Users/lebechea/howard/databases/refseq/current&#x27;"}, "howard.functions.commons.DEFAULT_DBNSFP_FOLDER": {"fullname": "howard.functions.commons.DEFAULT_DBNSFP_FOLDER", "modulename": "howard.functions.commons", "qualname": "DEFAULT_DBNSFP_FOLDER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/Users/lebechea/howard/databases/dbnsfp/current&#x27;"}, "howard.functions.commons.DEFAULT_EXOMISER_FOLDER": {"fullname": "howard.functions.commons.DEFAULT_EXOMISER_FOLDER", "modulename": "howard.functions.commons", "qualname": "DEFAULT_EXOMISER_FOLDER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/Users/lebechea/howard/databases/exomiser/current&#x27;"}, "howard.functions.commons.DEFAULT_DBSNP_FOLDER": {"fullname": "howard.functions.commons.DEFAULT_DBSNP_FOLDER", "modulename": "howard.functions.commons", "qualname": "DEFAULT_DBSNP_FOLDER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/Users/lebechea/howard/databases/exomiser/dbsnp&#x27;"}, "howard.functions.commons.DEFAULT_SPLICE_FOLDER": {"fullname": "howard.functions.commons.DEFAULT_SPLICE_FOLDER", "modulename": "howard.functions.commons", "qualname": "DEFAULT_SPLICE_FOLDER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/Users/lebechea/howard/databases/splice&#x27;"}, "howard.functions.commons.DEFAULT_SPLICEAI_FOLDER": {"fullname": "howard.functions.commons.DEFAULT_SPLICEAI_FOLDER", "modulename": "howard.functions.commons", "qualname": "DEFAULT_SPLICEAI_FOLDER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/Users/lebechea/howard/databases/spliceai&#x27;"}, "howard.functions.commons.DEFAULT_SPIP_FOLDER": {"fullname": "howard.functions.commons.DEFAULT_SPIP_FOLDER", "modulename": "howard.functions.commons", "qualname": "DEFAULT_SPIP_FOLDER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/Users/lebechea/howard/databases/spip&#x27;"}, "howard.functions.commons.DEFAULT_DATA_FOLDER": {"fullname": "howard.functions.commons.DEFAULT_DATA_FOLDER", "modulename": "howard.functions.commons", "qualname": "DEFAULT_DATA_FOLDER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/Users/lebechea/howard/data&#x27;"}, "howard.functions.commons.DEFAULT_ASSEMBLY": {"fullname": "howard.functions.commons.DEFAULT_ASSEMBLY", "modulename": "howard.functions.commons", "qualname": "DEFAULT_ASSEMBLY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;hg19&#x27;"}, "howard.functions.commons.DUCKDB_EXTENSION": {"fullname": "howard.functions.commons.DUCKDB_EXTENSION", "modulename": "howard.functions.commons", "qualname": "DUCKDB_EXTENSION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/Users/lebechea/BIOINFO/git/HOWARD/howard/functions/duckdb_extension&#x27;"}, "howard.functions.commons.MACHIN_LIST": {"fullname": "howard.functions.commons.MACHIN_LIST", "modulename": "howard.functions.commons", "qualname": "MACHIN_LIST", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;amd64&#x27;: &#x27;amd64&#x27;, &#x27;arm64&#x27;: &#x27;arm64&#x27;}"}, "howard.functions.commons.BCFTOOLS_FORMAT": {"fullname": "howard.functions.commons.BCFTOOLS_FORMAT", "modulename": "howard.functions.commons", "qualname": "BCFTOOLS_FORMAT", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;vcf&#x27;, &#x27;bed&#x27;]"}, "howard.functions.commons.LOG_FORMAT": {"fullname": "howard.functions.commons.LOG_FORMAT", "modulename": "howard.functions.commons", "qualname": "LOG_FORMAT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;#[%(asctime)s] [%(levelname)s] %(message)s&#x27;"}, "howard.functions.commons.CODE_TYPE_MAP": {"fullname": "howard.functions.commons.CODE_TYPE_MAP", "modulename": "howard.functions.commons", "qualname": "CODE_TYPE_MAP", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;Integer&#x27;: 0, &#x27;String&#x27;: 1, &#x27;Float&#x27;: 2, &#x27;Flag&#x27;: 3}"}, "howard.functions.commons.GENOTYPE_MAP": {"fullname": "howard.functions.commons.GENOTYPE_MAP", "modulename": "howard.functions.commons", "qualname": "GENOTYPE_MAP", "kind": "variable", "doc": "<p></p>\n", "default_value": "{None: &#x27;.&#x27;, -1: &#x27;A&#x27;, -2: &#x27;G&#x27;, -3: &#x27;R&#x27;}"}, "howard.functions.commons.DTYPE_LIMIT_AUTO": {"fullname": "howard.functions.commons.DTYPE_LIMIT_AUTO", "modulename": "howard.functions.commons", "qualname": "DTYPE_LIMIT_AUTO", "kind": "variable", "doc": "<p></p>\n", "default_value": "10000"}, "howard.functions.commons.DEFAULT_CHUNK_SIZE": {"fullname": "howard.functions.commons.DEFAULT_CHUNK_SIZE", "modulename": "howard.functions.commons", "qualname": "DEFAULT_CHUNK_SIZE", "kind": "variable", "doc": "<p></p>\n", "default_value": "1048576"}, "howard.functions.commons.remove_if_exists": {"fullname": "howard.functions.commons.remove_if_exists", "modulename": "howard.functions.commons", "qualname": "remove_if_exists", "kind": "function", "doc": "<p>The function removes a file if it exists at the specified filepath(s).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filepaths</strong>:  A list of file paths that you want to check for existence and remove if they exist</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepaths</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.set_log_level": {"fullname": "howard.functions.commons.set_log_level", "modulename": "howard.functions.commons", "qualname": "set_log_level", "kind": "function", "doc": "<p>It sets the log level of the Python logging module</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>verbosity</strong>:  The level of verbosity</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">verbosity</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">log_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.split_interval": {"fullname": "howard.functions.commons.split_interval", "modulename": "howard.functions.commons", "qualname": "split_interval", "kind": "function", "doc": "<p>It takes a start and end value, and either a step size or a number of cuts, and returns a list of\nvalues that split the interval into equal-sized pieces</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>start</strong>:  the start of the interval</li>\n<li><strong>end</strong>:  the end of the interval</li>\n<li><strong>step</strong>:  the step size between each cut</li>\n<li><strong>ncuts</strong>:  number of cuts to make</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of numbers.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">step</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">ncuts</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.commons.merge_regions": {"fullname": "howard.functions.commons.merge_regions", "modulename": "howard.functions.commons", "qualname": "merge_regions", "kind": "function", "doc": "<p>It takes a list of genomic regions and returns a list of genomic regions where overlapping regions\nhave been merged</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>regions</strong>:  A list of tuples representing genomic regions with the values of the chrom, start\nand end columns</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of tuples representing the merged regions with the values of the columns chrom,\n  start and end.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">regions</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.create_where_clause": {"fullname": "howard.functions.commons.create_where_clause", "modulename": "howard.functions.commons", "qualname": "create_where_clause", "kind": "function", "doc": "<p>It takes a list of merged regions and returns a SQL WHERE clause that can be used to filter variants\nin a SQL table</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>merged_regions</strong>:  a list of tuples representing the merged regions with the values of the\nchrom, start and end columns</li>\n<li><strong>table</strong>:  The name of the table to query, defaults to variants (optional)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A dictionary with the chromosome as key and the where clause as value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">merged_regions</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;variants&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.command": {"fullname": "howard.functions.commons.command", "modulename": "howard.functions.commons", "qualname": "command", "kind": "function", "doc": "<p>It runs a command in the shell and waits for it to finish</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>command</strong>:  The command to run</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The return value is the exit status of the process.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">command</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.run_parallel_commands": {"fullname": "howard.functions.commons.run_parallel_commands", "modulename": "howard.functions.commons", "qualname": "run_parallel_commands", "kind": "function", "doc": "<p>It takes a list of commands and a number of threads, and runs the commands in parallel</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>commands</strong>:  a list of commands to run</li>\n<li><strong>threads</strong>:  The number of threads to use</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of results from the commands.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">commands</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.run_parallel_functions": {"fullname": "howard.functions.commons.run_parallel_functions", "modulename": "howard.functions.commons", "qualname": "run_parallel_functions", "kind": "function", "doc": "<p>It takes a list of functions and a number of threads, and runs the functions in parallel using the\nnumber of threads specified</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>functions</strong>:  a list of functions to run in parallel</li>\n<li><strong>threads</strong>:  The number of threads to use</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of multiprocessing.pool.ApplyResult objects.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">functions</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.example_function": {"fullname": "howard.functions.commons.example_function", "modulename": "howard.functions.commons", "qualname": "example_function", "kind": "function", "doc": "<p><code>example_function</code> takes in a number and a word and returns a list of the number and the word</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>num</strong>:  a number</li>\n<li><strong>word</strong>:  a string</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>[num, word]</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num</span>, </span><span class=\"param\"><span class=\"n\">word</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.commons.find": {"fullname": "howard.functions.commons.find", "modulename": "howard.functions.commons", "qualname": "find", "kind": "function", "doc": "<p>It recursively walks the directory tree starting at the given path, and returns the first file it\nfinds with the given name</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong>:  The name of the file you're looking for</li>\n<li><strong>path</strong>:  The path to search for the file</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The path to the file.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.find_all": {"fullname": "howard.functions.commons.find_all", "modulename": "howard.functions.commons", "qualname": "find_all", "kind": "function", "doc": "<p>\"Walk the directory tree starting at path, and for each regular file with the name name, append its\nfull path to the result list.\"</p>\n\n<p>The os.walk function is a generator that yields a 3-tuple containing the name of a directory, a list\nof its subdirectories, and a list of the files in that directory. The name of the directory is a\nstring, and the lists of subdirectories and files are lists of strings</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong>:  The name of the file you're looking for</li>\n<li><strong>path</strong>:  The path to search in</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of all the files in the directory that have the name \"name\"</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.find_genome": {"fullname": "howard.functions.commons.find_genome", "modulename": "howard.functions.commons", "qualname": "find_genome", "kind": "function", "doc": "<p>The <code>find_genome</code> function checks if a genome file exists at the specified path, and if not, it\ntries to find it using the provided assembly name or file name.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>genome_path</strong>:  The path to the genome file</li>\n<li><strong>assembly</strong>:  The <code>assembly</code> parameter is a string that represents the name of the genome\nassembly. It is used to search for the genome file with the specified assembly name in the\n<code>genome_dir</code> directory. If a genome file with the assembly name is found, its path is returned</li>\n<li><strong>file</strong>:  The <code>file</code> parameter is the name of the genome file that you want to find</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the path to the genome file.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">genome_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">assembly</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.find_file_prefix": {"fullname": "howard.functions.commons.find_file_prefix", "modulename": "howard.functions.commons", "qualname": "find_file_prefix", "kind": "function", "doc": "<p>The function <code>find_file_prefix</code> is used to find a specific file based on input parameters such as\ninput file, folder, and assembly.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_file</strong>:  The input file is the file that you want to find the prefix for. It can be a file\npath or just the file name if it is in the current directory</li>\n<li><strong>folder</strong>:  The <code>folder</code> parameter is a string that represents the directory where the file is\nlocated</li>\n<li><strong>assembly</strong>:  The \"assembly\" parameter is a string that represents the assembly version of the\nfile you are looking for. It is used to search for files with the specific assembly version in their\nfilename</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the path of the output file.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">assembly</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.find_nomen": {"fullname": "howard.functions.commons.find_nomen", "modulename": "howard.functions.commons", "qualname": "find_nomen", "kind": "function", "doc": "<blockquote>\n  <p>This function takes a HGVS string and a list of transcripts and returns a dictionary with the best\n  NOMEN for each HGVS string</p>\n</blockquote>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>hgvs</strong>:  The HGVS string to parse</li>\n<li><strong>pattern</strong>:  This is the pattern that you want to use to construct the NOMEN. The default is\n\"GNOMEN:TNOMEN:ENOMEN:CNOMEN:RNOMEN:NNOMEN:PNOMEN\". This means that the NOMEN will be constructed by\njoining, defaults to GNOMEN:TNOMEN:ENOMEN:CNOMEN:RNOMEN:NNOMEN:PNOMEN (optional)</li>\n<li><strong>transcripts</strong>:  list of transcripts to use for ranking</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A dictionary with the following keys:\n      NOMEN\n      CNOMEN\n      RNOMEN\n      NNOMEN\n      PNOMEN\n      TVNOMEN\n      TNOMEN\n      TPVNOMEN\n      TPNOMEN\n      VNOMEN\n      ENOMEN\n      GNOMEN</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">hgvs</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">pattern</span><span class=\"o\">=</span><span class=\"s1\">&#39;GNOMEN:TNOMEN:ENOMEN:CNOMEN:RNOMEN:NNOMEN:PNOMEN&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">transcripts</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.explode_annotation_format": {"fullname": "howard.functions.commons.explode_annotation_format", "modulename": "howard.functions.commons", "qualname": "explode_annotation_format", "kind": "function", "doc": "<p>The <code>explode_annotation_format</code> function takes an annotation string and formats it into a specified\noutput format with optional customization parameters.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>annotation</strong>:  The <code>annotation</code> parameter is a string containing multiple annotations separated\nby commas and pipe symbols. Each annotation consists of different fields separated by pipe symbols.\nFor example, an annotation string could look like this: \"A|B|C,D|E|F\"</li>\n<li><strong>uniquify</strong>:  The <code>uniquify</code> parameter in the <code>explode_annotation_format</code> function is a boolean\nflag that determines whether to keep only unique values for each annotation field. If set to <code>True</code>,\nonly unique values will be retained for each field before joining them together. If set to <code>False</code>,\nall values, defaults to False</li>\n<li><strong>output_format</strong>:  The <code>output_format</code> parameter specifies the format in which you want the\noutput to be generated. The function supports two output formats: \"fields\" and \"JSON\". If you choose\n\"fields\", the output will be a string with annotations separated by semicolons. If you choose\n\"JSON\", the, defaults to fields</li>\n<li><strong>prefix</strong>:  The <code>prefix</code> parameter in the <code>explode_annotation_format</code> function is used to specify\nthe prefix that will be added to each annotation field when generating the exploded annotation\nstring. In the provided function, the default prefix value is set to \"ANN_\". You can customize this\nprefix value to suit your specific, defaults to ANN_</li>\n<li><strong>header</strong>:  The <code>header</code> parameter in the <code>explode_annotation_format</code> function is a list of\ncolumn names that will be used to create a DataFrame from the input annotation string. Each element\nin the <code>header</code> list corresponds to a specific field in the annotation data</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>explode_annotation_format</code> returns a string that contains the exploded and\n  formatted annotation information based on the input parameters provided. The format of the returned\n  string depends on the <code>output_format</code> parameter. If <code>output_format</code> is set to \"JSON\", the function\n  returns a JSON-formatted string. Otherwise, it returns a string with annotations formatted based on\n  the other parameters such as `uniquify</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">annotation</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">uniquify</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">output_format</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;fields&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ANN_&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">header</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;Allele&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Annotation&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Annotation_Impact&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Gene_Name&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Gene_ID&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Feature_Type&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Feature_ID&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Transcript_BioType&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Rank&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;HGVS.c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;HGVS.p&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;cDNA.pos / cDNA.length&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;CDS.pos / CDS.length&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;AA.pos / AA.length&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Distance&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ERRORS / WARNINGS / INFO&#39;</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.extract_snpeff_hgvs": {"fullname": "howard.functions.commons.extract_snpeff_hgvs", "modulename": "howard.functions.commons", "qualname": "extract_snpeff_hgvs", "kind": "function", "doc": "<p>This function extracts HGVS annotations from a given snpEff annotation string and returns them as a\ncomma-separated string.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>snpeff</strong>:  The <code>snpeff</code> parameter is a string that contains annotations for genetic variants in\na specific format. It is used as input to extract HGVS notation for the variants</li>\n<li><strong>header</strong>:  The header parameter is a list of column names that will be used to create a pandas\nDataFrame from the snpeff string input. It is used to extract specific information from the snpeff\nannotations</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a string that contains the HGVS annotations extracted from the input SNPEff annotation\n  string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">snpeff</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">header</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;Allele&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Annotation&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Annotation_Impact&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Gene_Name&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Gene_ID&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Feature_Type&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Feature_ID&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Transcript_BioType&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Rank&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;HGVS.c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;HGVS.p&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;cDNA.pos / cDNA.length&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;CDS.pos / CDS.length&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;AA.pos / AA.length&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Distance&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ERRORS / WARNINGS / INFO&#39;</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.explode_snpeff_ann": {"fullname": "howard.functions.commons.explode_snpeff_ann", "modulename": "howard.functions.commons", "qualname": "explode_snpeff_ann", "kind": "function", "doc": "<p>The <code>explode_snpeff_ann</code> function takes a string of SNPEff annotations, splits and processes them\nbased on specified parameters, and returns the processed annotations in a specified output format.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>snpeff</strong>:  The <code>snpeff</code> parameter is a string containing annotations separated by commas. Each\nannotation is further divided into different fields separated by pipes (|)</li>\n<li><strong>uniquify</strong>:  The <code>uniquify</code> parameter in the <code>explode_snpeff_ann</code> function is a boolean flag\nthat determines whether to keep only unique values for each annotation field or not. If <code>uniquify</code>\nis set to <code>True</code>, only unique values will be kept for each annotation field. If, defaults to False</li>\n<li><strong>output_format</strong>:  The <code>output_format</code> parameter in the <code>explode_snpeff_ann</code> function specifies\nthe format in which the output will be generated. The function supports two output formats: \"fields\"\nand \"JSON\", defaults to fields</li>\n<li><strong>prefix</strong>:  The <code>prefix</code> parameter in the <code>explode_snpeff_ann</code> function is used to specify the\nprefix that will be added to each annotation field in the output. For example, if the prefix is set\nto \"ANN_\", then the output annotations will be formatted as \"ANN_Annotation=example_annotation,\ndefaults to ANN_</li>\n<li><strong>header</strong>:  The <code>header</code> parameter in the <code>explode_snpeff_ann</code> function is a list of strings that\nrepresent the column names or fields for the output data. These strings include information such as\nallele, annotation, gene name, gene ID, feature type, transcript biotype, and various other details\nrelated</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>explode_snpeff_ann</code> returns a string that contains the exploded and formatted\n  SNPEff annotations based on the input parameters provided. The specific format of the returned\n  string depends on the <code>output_format</code>, <code>uniquify</code>, and other parameters specified in the function.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">snpeff</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">uniquify</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">output_format</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;fields&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ANN_&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">header</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;Allele&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Annotation&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Annotation_Impact&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Gene_Name&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Gene_ID&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Feature_Type&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Feature_ID&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Transcript_BioType&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Rank&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;HGVS.c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;HGVS.p&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;cDNA.pos / cDNA.length&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;CDS.pos / CDS.length&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;AA.pos / AA.length&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Distance&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ERRORS / WARNINGS / INFO&#39;</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.get_index": {"fullname": "howard.functions.commons.get_index", "modulename": "howard.functions.commons", "qualname": "get_index", "kind": "function", "doc": "<p>The function returns the index of a given value in a list, or -1 if the value is not in the list.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong>:  The value to search for in the list</li>\n<li><strong>values</strong>:  The parameter \"values\" is a list of values in which we want to find the index of a\nspecific value. It is an optional parameter with a default value of an empty list</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>get_index</code> returns the index of the first occurrence of the <code>value</code> parameter\n  in the <code>values</code> list. If the <code>value</code> parameter is not found in the <code>values</code> list, the function\n  returns -1.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.get_file_format": {"fullname": "howard.functions.commons.get_file_format", "modulename": "howard.functions.commons", "qualname": "get_file_format", "kind": "function", "doc": "<p>It takes a filename and returns the file format</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong>:  the name of the file you want to get the format of</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The file format of the file.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.findbypipeline": {"fullname": "howard.functions.commons.findbypipeline", "modulename": "howard.functions.commons", "qualname": "findbypipeline", "kind": "function", "doc": "<p>This function takes a dataframe and a list of samples, and returns the number of pipelines found in\nthe samples that have a non-null GT value.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>df</strong>:  The input dataframe containing genetic variant information</li>\n<li><strong>samples</strong>:  The <code>samples</code> parameter is a list of strings representing the names of the\nsamples/pipelines to be searched for in the input dataframe <code>df</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a string in the format of \"nb_pipeline_find/nb_pipeline\", where nb_pipeline_find is the\n  number of pipelines in the input list samples that have a non-null GT value in the input dataframe\n  df, and nb_pipeline is the total number of pipelines in the input list samples. If the input list\n  samples is empty, the function returns \"0/0\".</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">samples</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.commons.genotypeconcordance": {"fullname": "howard.functions.commons.genotypeconcordance", "modulename": "howard.functions.commons", "qualname": "genotypeconcordance", "kind": "function", "doc": "<p>The function checks the genotype concordance of a given list of samples in a dataframe.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>df</strong>:  The input dataframe containing genetic variant information, including genotype\ninformation for each sample/pipeline</li>\n<li><strong>samples</strong>:  The parameter \"samples\" is a list of sample/pipeline names that are present in the\ninput dataframe \"df\". These samples/pipelines have genotype information that will be used to\ncalculate genotype concordance</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a string that indicates whether the genotypes of the specified samples in the input\n  dataframe are concordant or not. The string is either \"TRUE\" or \"FALSE\", depending on whether all\n  the specified samples have the same genotype or not.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">samples</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.commons.genotype_compression": {"fullname": "howard.functions.commons.genotype_compression", "modulename": "howard.functions.commons", "qualname": "genotype_compression", "kind": "function", "doc": "<p>The function takes a genotype string, replaces dots with zeros, removes non-digit characters, sorts\nand removes duplicates, and returns the compressed genotype string.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>genotype</strong>:  The input genotype as a string. It is a DNA sequence that contains genetic\ninformation</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>genotype_compression</code> returns a compressed version of the input genotype\n  string. The compressed string has all dots replaced with 0s, all non-digit characters removed, and\n  duplicates removed and sorted. The compressed string is returned as a string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">genotype</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.genotype_barcode": {"fullname": "howard.functions.commons.genotype_barcode", "modulename": "howard.functions.commons", "qualname": "genotype_barcode", "kind": "function", "doc": "<p>This function takes a genotype string and compresses it, then returns a barcode string based on the\nlength and content of the compressed genotype.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>genotype</strong>:  The genotype parameter is a string that represents a genetic sequence or code</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>genotype_barcode</code> returns a string representing the barcode for a given\n  genotype. The barcode can be \"0\", \"1\", \"2\", or \"?\" depending on the length and content of the\n  compressed genotype string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">genotype</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.barcode": {"fullname": "howard.functions.commons.barcode", "modulename": "howard.functions.commons", "qualname": "barcode", "kind": "function", "doc": "<p>Generates a barcode based on the genotype of the specified samples.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>df</strong>:  A pandas DataFrame containing the genetic data.</p></li>\n<li><p><strong>samples</strong>:  A list of sample names to use for generating the barcode.</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A barcode string based on the genotype of the specified samples.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">samples</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.commons.trio": {"fullname": "howard.functions.commons.trio", "modulename": "howard.functions.commons", "qualname": "trio", "kind": "function", "doc": "<p>The function trio(df, samples:list = []) determines the type of variant (denovo, dominant, or\nrecessive) in a trio based on the barcode generated from the samples.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>df</strong>:  The input dataframe containing genetic variant information</li>\n<li><strong>samples</strong>:  A list of sample IDs to be used in the analysis</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>trio</code> returns a string that represents the type of variant in a trio\n  analysis, which can be \"denovo\", \"dominant\", \"recessive\", or \"unknown\".</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">samples</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.commons.vaf_normalization": {"fullname": "howard.functions.commons.vaf_normalization", "modulename": "howard.functions.commons", "qualname": "vaf_normalization", "kind": "function", "doc": "<p>This function takes in a row of data and a sample name, extracts the genotype information for that\nsample, calculates the variant allele frequency (VAF) from the genotype information, and adds the\nVAF to the genotype information before returning it.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>row</strong>:  The input row of a pandas DataFrame containing information about a genetic variant</li>\n<li><strong>sample</strong>:  The parameter \"sample\" is a string representing the name of the sample for which we\nwant to calculate the VAF (Variant Allele Frequency). It is used to extract the genotype information\nfor that particular sample from the input row</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a string that represents the genotype information for a given sample with an added \"VAF\"\n  field that represents the variant allele frequency.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">row</span>, </span><span class=\"param\"><span class=\"n\">sample</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.genotype_stats": {"fullname": "howard.functions.commons.genotype_stats", "modulename": "howard.functions.commons", "qualname": "genotype_stats", "kind": "function", "doc": "<p>This function computes statistics on a specified information field (e.g. VAF) for a given set of\nsamples in a pandas dataframe.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>df</strong>:  The input dataframe containing variant information</li>\n<li><strong>samples</strong>:  The list of sample/pipeline names for which to compute the genotype statistics. If\nempty, the function will return an empty dictionary</li>\n<li><strong>info</strong>:  The parameter \"info\" is a string that represents the type of information being analyzed\nin the function. In this case, it is used to compute statistics on the Variant Allele Frequency\n(VAF) of genetic variants, defaults to VAF</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a dictionary containing statistics related to a specified information field (default is\n  \"VAF\") for a given set of samples in a pandas DataFrame. The statistics include the number of\n  values, a list of values, minimum value, maximum value, mean, median, and standard deviation. If no\n  samples are specified, an empty dictionary is returned.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">samples</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>, </span><span class=\"param\"><span class=\"n\">info</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;VAF&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.commons.extract_file": {"fullname": "howard.functions.commons.extract_file", "modulename": "howard.functions.commons", "qualname": "extract_file", "kind": "function", "doc": "<p>The function extracts a compressed file in .zip or .gz format based on the file path provided.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_path</strong>:  The file path parameter is a string that represents the path to a file that needs\nto be extracted. The function checks if the file has a \".zip\" or \".gz\" extension and extracts it\naccordingly</li>\n<li><strong>path</strong>:  The <code>path</code> parameter is an optional string that represents the directory where the\nextracted files will be saved. If no <code>path</code> is provided, the function will use the directory of the\n<code>file_path</code> as the extraction destination</li>\n<li><strong>threads</strong>:  The <code>threads</code> parameter is an optional parameter that specifies the number of\nthreads to use for extraction. By default, it is set to 1, meaning the extraction will be done using\na single thread, defaults to 1</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.commons.download_file": {"fullname": "howard.functions.commons.download_file", "modulename": "howard.functions.commons", "qualname": "download_file", "kind": "function", "doc": "<p>The <code>download_file</code> function is a Python function that downloads a file from a given URL and saves\nit to a specified destination file path in chunks.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>url</strong>:  The <code>url</code> parameter is the URL of the file you want to download. It should be a string\nthat represents the complete URL, including the protocol (e.g., \"http://example.com/file.txt\")</li>\n<li><strong>dest_file_path</strong>:  The <code>dest_file_path</code> parameter is the path where the downloaded file will be\nsaved. It should be a string representing the file path, including the file name and extension. For\nexample, if you want to save the file as \"myfile.txt\" in the current directory, you can set `dest</li>\n<li><strong>chunk_size</strong>:  The <code>chunk_size</code> parameter determines the size of each chunk of data that is\ndownloaded at a time. In this case, the default value is set to 1 MB, which means that the file will\nbe downloaded in chunks of 1 MB at a time. This parameter can be adjusted according to</li>\n<li><strong>try_aria</strong>:  The <code>try_aria</code> parameter is a boolean value that determines whether to use the\nAria2c command-line tool for downloading the file. If set to <code>True</code>, the function will attempt to\ndownload the file using Aria2c. If set to <code>False</code>, the function will use the, defaults to True</li>\n<li><strong>aria_async_dns</strong>:  The <code>aria_async_dns</code> parameter is a boolean value that determines whether to\nuse asynchronous DNS resolution with Aria2c. If set to <code>True</code>, Aria2c will use asynchronous DNS\nresolution, which can improve download performance. If set to <code>False</code>, Aria2c will use synchronous,\ndefaults to False</li>\n<li><strong>threads</strong>:  The <code>threads</code> parameter specifies the number of threads to be used for downloading\nthe file. It determines the number of simultaneous connections that will be made to download the\nfile. By default, it is set to 1, which means that only one connection will be made at a time.\nIncreasing the value, defaults to 1</li>\n<li><strong>quiet</strong>:  The <code>quiet</code> parameter is a boolean value that determines whether to suppress the\noutput of the download process. If set to <code>True</code>, the output will be suppressed. If set to <code>False</code>,\nthe output will be displayed. By default, it is set to <code>True</code>, defaults to True</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a boolean value indicating whether the file was successfully downloaded and saved to the\n  specified destination file path.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">dest_file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">chunk_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1048576</span>,</span><span class=\"param\">\t<span class=\"n\">try_aria</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">aria_async_dns</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">quiet</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.commons.whereis_bin": {"fullname": "howard.functions.commons.whereis_bin", "modulename": "howard.functions.commons", "qualname": "whereis_bin", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bin_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.get_bin": {"fullname": "howard.functions.commons.get_bin", "modulename": "howard.functions.commons", "qualname": "get_bin", "kind": "function", "doc": "<p>The <code>get_bin</code> function retrieves the path to a specified binary file from a configuration dictionary\nor searches for it in the file system if it is not specified in the configuration.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>bin</strong>:  The <code>bin</code> parameter is a string or a pattern that represents the name of the binary file (e.g.,\n<code>snpEff.jar</code>, <code>exomiser-cli*.jar</code>) that you want to retrieve the path for</li>\n<li><strong>tool</strong>:  The <code>tool</code> parameter is a string that represents the name of the tool. It is used to\nretrieve the path to the tool's binary file</li>\n<li><strong>bin_type</strong>:  The <code>bin_type</code> parameter is a string that specifies the type of binary file to\nsearch for in the config dict (e.g., <code>jar</code>, <code>bin</code>). In this case, the default value is \"bin\". A value \"jar\" indicates that the function is searching\nfor a JAR file. Defaults to bin</li>\n<li><strong>config</strong>:  A dictionary containing configuration information for the snpEff tool, including the\npath to the snpEff jar file. If no configuration is provided, an empty dictionary is used</li>\n<li><strong>default_folder</strong>:  The <code>default_folder</code> parameter is a string that represents the default folder\nwhere the tool binaries are located. If the <code>bin_file</code> is not found in the configuration dictionary\nor in the file system, the function will search for it in this default folder</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the path to the snpEff.jar file. If the file is not found, it returns None.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"nb\">bin</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tool</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">bin_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;bin&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">default_folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/Users/lebechea/howard/tools&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">output_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;bin&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.get_bin_command": {"fullname": "howard.functions.commons.get_bin_command", "modulename": "howard.functions.commons", "qualname": "get_bin_command", "kind": "function", "doc": "<p>The function <code>get_bin_command</code> generates a command based on the tool type (jar, java, docker) and\nspecified parameters.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>bin</strong>:  The <code>bin</code> parameter in the <code>get_bin_command</code> function is used to specify the binary\nexecutable file that you want to run. It is a string that represents the path or name of the binary\nfile. If you provide this parameter, the function will attempt to locate the binary file based on\nthe</li>\n<li><strong>tool</strong>:  The <code>tool</code> parameter in the <code>get_bin_command</code> function represents the name of the tool\nfor which you want to retrieve the command. It is used to identify the specific tool for which the\ncommand is being generated</li>\n<li><strong>bin_type</strong>:  The <code>bin_type</code> parameter in the <code>get_bin_command</code> function specifies the type of\nbinary executable that the tool uses. It can have values like \"bin\", \"jar\", \"java\", \"docker\", etc.,\ndepending on the type of tool being executed. The function uses this parameter to determine,\ndefaults to bin</li>\n<li><strong>config</strong>:  The <code>config</code> parameter in the <code>get_bin_command</code> function is a dictionary that holds\nconfiguration settings for the tool being used. It can include various settings such as paths,\nenvironment variables, or any other configuration options needed for the tool to run properly</li>\n<li><strong>param</strong>:  The <code>param</code> parameter in the <code>get_bin_command</code> function is a dictionary that contains\nadditional parameters or configurations for the tool being executed. These parameters can be used to\ncustomize the behavior or settings of the tool when generating the command for execution. The\nfunction uses the <code>param</code> dictionary along with the</li>\n<li><strong>default_folder</strong>:  The <code>default_folder</code> parameter in the <code>get_bin_command</code> function is used to\nspecify the default folder where the tools are located. If a specific folder is not provided when\ncalling the function, it will default to the value of <code>DEFAULT_TOOLS_FOLDER</code></li>\n<li><strong>add_options</strong>:  The <code>add_options</code> parameter in the <code>get_bin_command</code> function allows you to pass\nadditional options or arguments to the command being constructed based on the tool type. These\nadditional options can be specific configurations, flags, or any other parameters that you want to\ninclude in the final command. When provided,</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The <code>get_bin_command</code> function returns a string representing the command to execute a\n  specific tool based on the provided parameters. The returned command can be either a Java command\n  for running a JAR file or a Docker command for running a Docker image/container. If the tool type is\n  not Java or Docker, it returns the default tool bin.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"nb\">bin</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tool</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">bin_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;bin&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">param</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">default_folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/Users/lebechea/howard/tools&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">add_options</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.get_tmp": {"fullname": "howard.functions.commons.get_tmp", "modulename": "howard.functions.commons", "qualname": "get_tmp", "kind": "function", "doc": "<p>The <code>get_tmp</code> function returns the value of the \"tmp\" parameter from either the <code>param</code> dictionary,\n<code>config</code> dictionary, or a default value \"/tmp\".</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>config</strong>:  Config is a dictionary that contains configuration settings for the function. It is\nan optional parameter with a default value of an empty dictionary. It can be used to provide\nadditional configuration settings to the function <code>get_tmp</code></li>\n<li><strong>param</strong>:  The <code>param</code> parameter is a dictionary containing parameters that can be passed to the\nfunction <code>get_tmp</code>. It can include various key-value pairs, but in this context, the function\nspecifically looks for the key \"tmp\" within the <code>param</code> dictionary to determine the temporary path\nvalue. If the \"</li>\n<li><strong>default_tmp</strong>:  The <code>default_tmp</code> parameter in the <code>get_tmp</code> function is a string that\nrepresents the default path for temporary files. If the \"tmp\" key is not found in the <code>param</code>\ndictionary or the <code>config</code> dictionary, the function will return this <code>default_tmp</code> value, which is,\ndefaults to /tmp</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>get_tmp</code> returns the value of the \"tmp\" key from the <code>param</code> dictionary if it\n  exists. If the \"tmp\" key is not found in the <code>param</code> dictionary, it returns the value of the \"tmp\"\n  key from the <code>config</code> dictionary. If neither key is found in <code>param</code> or <code>config</code>, it returns the\n  default value \"/tmp\".</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>, </span><span class=\"param\"><span class=\"n\">param</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">default_tmp</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/tmp&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.get_threads": {"fullname": "howard.functions.commons.get_threads", "modulename": "howard.functions.commons", "qualname": "get_threads", "kind": "function", "doc": "<p>This Python function retrieves the number of threads to use based on input parameters and system\nconfiguration.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>config</strong>:  The <code>config</code> parameter is a dictionary that contains configuration settings for the\nfunction <code>get_threads</code>. It can be used to provide default values for the number of threads to use in\nthe function</li>\n<li><strong>param</strong>:  The <code>param</code> parameter is a dictionary that may contain the key \"threads\" which\nspecifies the number of threads to use. If the \"threads\" key is not present in the <code>param</code>\ndictionary, the function will look for the \"threads\" key in the <code>config</code> dictionary. If neither</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>get_threads</code> returns the number of threads to be used based on the input\n  parameters.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>, </span><span class=\"param\"><span class=\"n\">param</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.get_memory": {"fullname": "howard.functions.commons.get_memory", "modulename": "howard.functions.commons", "qualname": "get_memory", "kind": "function", "doc": "<p>The <code>get_memory</code> function retrieves memory information using psutil and calculates a default memory\nvalue based on total memory, with the option to specify a custom memory value.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>config</strong>:  The <code>config</code> parameter is a dictionary that may contain configuration settings for\nthe function <code>get_memory</code>. It is used to provide default values or settings for the function</li>\n<li><strong>param</strong>:  The <code>param</code> parameter is a dictionary that may contain a key \"memory\" which represents\nthe amount of memory to be used. If the \"memory\" key is not present in the <code>param</code> dictionary, the\nfunction will try to retrieve the value from the <code>config</code> dictionary using the key \"</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>get_memory</code> returns a string representing the amount of memory to be used.\n  This memory value is calculated based on the total memory available on the system, with a default\n  value set to 80% of the total memory. The function first checks if a specific memory value is\n  provided in the <code>param</code> dictionary, and if not, it looks for a default value in the <code>config</code></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>, </span><span class=\"param\"><span class=\"n\">param</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.extract_float_from_str": {"fullname": "howard.functions.commons.extract_float_from_str", "modulename": "howard.functions.commons", "qualname": "extract_float_from_str", "kind": "function", "doc": "<p>The function <code>extract_float_from_str</code> extracts a float value from a given string input.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>text</strong>:  The <code>extract_float_from_str</code> function is designed to extract a floating-point number\nfrom a given string input. The function uses a regular expression to find the first occurrence of a\nfloating-point number in the input string and returns it as a float</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>extract_float_from_str</code> returns a float value extracted from the input text\n  string. If a float value is found in the text, it is returned as a float. If no float value is\n  found, it returns <code>None</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.extract_memory_in_go": {"fullname": "howard.functions.commons.extract_memory_in_go", "modulename": "howard.functions.commons", "qualname": "extract_memory_in_go", "kind": "function", "doc": "<p>The <code>extract_memory_in_go</code> function converts a memory size string in the format FLOAT[kMG] to an\ninteger value in Go memory units.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>memory_str</strong>:  The <code>memory_str</code> parameter should be a string representing a memory value with a\nunit suffix in the format FLOAT[kMG]. For example, it could be \"1G\", \"512M\", or \"2k\"</li>\n<li><strong>default</strong>:  The <code>default</code> parameter in the <code>extract_memory_in_go</code> function is used to specify a\ndefault integer value if the conversion of the memory size string fails or if the value cannot be\nextracted from the input string. If no valid value can be extracted from the input string, the\nfunction will return the, defaults to 1</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The <code>extract_memory_in_go</code> function is returning an integer value representing the memory\n  size in Go units based on the input memory string provided.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">memory_str</span>, </span><span class=\"param\"><span class=\"n\">default_value</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">default_unit</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;G&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.concat_file": {"fullname": "howard.functions.commons.concat_file", "modulename": "howard.functions.commons", "qualname": "concat_file", "kind": "function", "doc": "<p>This function concatenates multiple input files into a single output file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_files</strong>:  A list of file paths to the input files that need to be concatenated</li>\n<li><strong>output_file</strong>:  The parameter \"output_file\" is a string that represents the name of the file\nthat will be created by the function and will contain the concatenated content of all the input\nfiles</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a boolean value indicating whether the output file was successfully created or not. It\n  checks if the output file exists using the <code>os.path.exists()</code> function and returns <code>True</code> if it\n  exists and <code>False</code> otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_files</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">output_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.compress_file": {"fullname": "howard.functions.commons.compress_file", "modulename": "howard.functions.commons", "qualname": "compress_file", "kind": "function", "doc": "<p>This function compresses a file using the BGZF compression algorithm.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_file</strong>:  The path and name of the input file that needs to be compressed</li>\n<li><strong>output_file</strong>:  The output_file parameter is a string that represents the name and path of\nthe file where the compressed data will be written</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">output_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.get_compression_type": {"fullname": "howard.functions.commons.get_compression_type", "modulename": "howard.functions.commons", "qualname": "get_compression_type", "kind": "function", "doc": "<p>The function <code>get_compression_type</code> determines the compression type of a file based on its first few\nbytes.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filepath</strong>:  The <code>filepath</code> parameter is a string that represents the path to the file for which\nwe want to determine the compression type</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>get_compression_type</code> returns a string indicating the compression type of the\n  file specified by the <code>filepath</code> parameter. The possible return values are \"gzip\" if the file is\n  compressed using gzip, \"bgzip\" if the file is compressed using bgzip, \"unknown\" if the compression\n  type is unknown, and \"none\" if the file is not compressed.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.get_file_compressed": {"fullname": "howard.functions.commons.get_file_compressed", "modulename": "howard.functions.commons", "qualname": "get_file_compressed", "kind": "function", "doc": "<p>This function takes a filename as input and returns True if the file is compressed (in bgzip) and False if it\nis not</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong>:  the name of the file to be checked</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A boolean value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.concat_into_infile": {"fullname": "howard.functions.commons.concat_into_infile", "modulename": "howard.functions.commons", "qualname": "concat_into_infile", "kind": "function", "doc": "<p>The function <code>concat_into_infile</code> concatenates multiple input files into a compressed output file,\nwith support for different compression types and multi-threading.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_files</strong>:  A list of input file paths that need to be concatenated into the compressed file</li>\n<li><strong>compressed_file</strong>:  The <code>compressed_file</code> parameter is an object that represents the file where\nthe concatenated contents of the input files will be written. It is expected to be a file object\nthat has write capabilities</li>\n<li><strong>compression_type</strong>:  The <code>compression_type</code> parameter specifies the type of compression to be\nused for the output file. The default value is \"none\", which means no compression will be applied.\nOther possible values include \"bgzip\" and \"gzip\", which indicate that the output file should be\ncompressed using the bgzip and, defaults to none</li>\n<li><strong>threads</strong>:  The \"threads\" parameter specifies the number of threads to use for compression or\ndecompression. It determines how many parallel processes can be executed simultaneously, which can\nhelp improve performance when dealing with large files or multiple files, defaults to 1</li>\n<li><strong>block</strong>:  The <code>block</code> parameter is used to specify the size of the block when reading the input\nfiles. It is set to <code>10 ** 6</code>, which means 1 million bytes. This parameter determines how much data\nis read from the input files at a time</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a boolean value, specifically <code>True</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_files</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">compressed_file</span><span class=\"p\">:</span> <span class=\"nb\">object</span>,</span><span class=\"param\">\t<span class=\"n\">compression_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;none&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">block</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000000</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.concat_and_compress_files": {"fullname": "howard.functions.commons.concat_and_compress_files", "modulename": "howard.functions.commons", "qualname": "concat_and_compress_files", "kind": "function", "doc": "<p>The function <code>concat_and_compress_files</code> takes a list of input files, an output file name, and\noptional parameters for compression type, number of threads, block size, compression level, sorting,\nand indexing, and concatenates and compresses the input files into the output file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_files</strong>:  A list of input file paths that need to be concatenated and compressed</li>\n<li><strong>output_file</strong>:  The <code>output_file</code> parameter is a string that specifies the path and name of the\noutput file that will be created after concatenating and compressing the input files</li>\n<li><strong>compression_type</strong>:  The <code>compression_type</code> parameter specifies the type of compression to be\napplied to the output file. It can take one of three values: \"bgzip\", \"gzip\", or \"none\", defaults to\nbgzip</li>\n<li><strong>threads</strong>:  The <code>threads</code> parameter specifies the number of threads to use for compression and\ndecompression. It determines the level of parallelism in the compression process, allowing for\nfaster execution when multiple threads are used, defaults to 1</li>\n<li><strong>memory</strong>:  The <code>memory</code> parameter specifies the amount of max memory (in Gb) to use for sorting.\ndefaults to 1</li>\n<li><strong>block</strong>:  The <code>block</code> parameter specifies the size of the block used for reading and writing\ndata during compression. It is set to a default value of 10^6 (1 million) bytes</li>\n<li><strong>compression_level</strong>:  The <code>compression_level</code> parameter determines the level of compression to\nbe used when compressing the output file. It is an integer value ranging from 0 to 9, where 0\nindicates no compression and 9 indicates maximum compression. The higher the compression level, the\nsmaller the resulting compressed file size, defaults to 6</li>\n<li><strong>sort</strong>:  The <code>sort</code> parameter is a boolean flag that determines whether the output file should\nbe sorted or not. If <code>sort</code> is set to <code>True</code>, the output file will be sorted using\n<code>pysam.bcftools.sort</code> before renaming it. If <code>sort</code> is set to `False, defaults to False</li>\n<li><strong>index</strong>:  The <code>index</code> parameter is a boolean flag that determines whether or not to index the\noutput file after concatenation and compression. If <code>index</code> is set to <code>True</code>, the output file will\nbe indexed using the <code>pysam.tabix_index</code> function with the preset \"vcf\". Make sure VCF is sorted.\nDefaults to False</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a boolean value indicating whether the output file exists or not.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_files</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">output_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">compression_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;bgzip&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">memory</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">block</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000000</span>,</span><span class=\"param\">\t<span class=\"n\">compression_level</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">6</span>,</span><span class=\"param\">\t<span class=\"n\">sort</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.get_plateform_name_from_duckdb": {"fullname": "howard.functions.commons.get_plateform_name_from_duckdb", "modulename": "howard.functions.commons", "qualname": "get_plateform_name_from_duckdb", "kind": "function", "doc": "<p>The function <code>get_plateform_name_from_duckdb</code> returns the platform information from a DuckDB connection.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>conn</strong>:  The <code>conn</code> parameter is an instance of the <code>DuckDBPyConnection</code> class from the <code>duckdb</code>\nmodule. It represents a connection to a DuckDB database</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the platform information from the DuckDB connection.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">conn</span><span class=\"p\">:</span> <span class=\"n\">duckdb</span><span class=\"o\">.</span><span class=\"n\">duckdb</span><span class=\"o\">.</span><span class=\"n\">DuckDBPyConnection</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.get_duckdb_extension_file": {"fullname": "howard.functions.commons.get_duckdb_extension_file", "modulename": "howard.functions.commons", "qualname": "get_duckdb_extension_file", "kind": "function", "doc": "<p>This function returns the file path of a DuckDB extension based on the extension name and platform.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>extension_name</strong>:  The name of the DuckDB extension file that is being requested</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a string that represents the file path of a DuckDB extension file. The file path is\n  constructed using the constant <code>DUCKDB_EXTENSION</code>, the platform name obtained from the\n  <code>get_plateform_name_from_duckdb()</code> function, and the extension name passed as an argument to the function.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">extension_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">conn</span><span class=\"p\">:</span> <span class=\"n\">duckdb</span><span class=\"o\">.</span><span class=\"n\">duckdb</span><span class=\"o\">.</span><span class=\"n\">DuckDBPyConnection</span>,</span><span class=\"param\">\t<span class=\"n\">download</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.load_duckdb_extension": {"fullname": "howard.functions.commons.load_duckdb_extension", "modulename": "howard.functions.commons", "qualname": "load_duckdb_extension", "kind": "function", "doc": "<p>This function loads DuckDB extensions into a connection object and returns a boolean indicating\nwhether all extensions were successfully loaded.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>conn</strong>:  duckdb.DuckDBPyConnection object representing a connection to a DuckDB database</li>\n<li><strong>duckdb_extensions</strong>:  A list of strings representing the names of the DuckDB extensions to be\nloaded</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a boolean value indicating whether all the specified DuckDB extensions were successfully\n  loaded or not.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">conn</span><span class=\"p\">:</span> <span class=\"n\">duckdb</span><span class=\"o\">.</span><span class=\"n\">duckdb</span><span class=\"o\">.</span><span class=\"n\">DuckDBPyConnection</span>, </span><span class=\"param\"><span class=\"n\">duckdb_extensions</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.TimeoutException": {"fullname": "howard.functions.commons.TimeoutException", "modulename": "howard.functions.commons", "qualname": "TimeoutException", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, "howard.functions.commons.time_limit": {"fullname": "howard.functions.commons.time_limit", "modulename": "howard.functions.commons", "qualname": "time_limit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">seconds</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.commons.duckdb_execute": {"fullname": "howard.functions.commons.duckdb_execute", "modulename": "howard.functions.commons", "qualname": "duckdb_execute", "kind": "function", "doc": "<p>The <code>duckdb_execute</code> function executes a query using the DuckDB database engine and returns a\nboolean indicating whether the query was successful or not.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>query</strong>:  The <code>query</code> parameter is a string that represents the SQL query you want to execute in\nDuckDB. It can be any valid SQL statement, such as SELECT, INSERT, UPDATE, DELETE, etc</li>\n<li><strong>threads</strong>:  The \"threads\" parameter specifies the number of threads to use for executing the\nquery. By default, it is set to 1, meaning that the query will be executed using a single thread,\ndefaults to 1</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>duckdb_execute</code> returns a boolean value. It returns <code>True</code> if the query\n  execution is successful, and <code>False</code> if it is not successful.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.genome_build_switch": {"fullname": "howard.functions.commons.genome_build_switch", "modulename": "howard.functions.commons", "qualname": "genome_build_switch", "kind": "function", "doc": "<p>The <code>genome_build_switch</code> function takes an assembly name as input and returns a new\nassembly name if a different version of the same genome is available, otherwise it returns\nNone.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>assembly</strong>:  The <code>assembly</code> parameter is a string that represents the name or identifier\nof a genome assembly</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>genome_build_switch</code> returns a string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">assembly</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.get_argument": {"fullname": "howard.functions.commons.get_argument", "modulename": "howard.functions.commons", "qualname": "get_argument", "kind": "function", "doc": "<p>The <code>get_argument</code> function retrieves information about a specific argument from a dictionary, and\ncan also set its \"required\" status.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arguments</strong>:  A dictionary containing information about the arguments passed to a function or\nmethod</li>\n<li><strong>arg</strong>:  The <code>arg</code> parameter is a string that represents the name of the argument that you want\nto retrieve information for</li>\n<li><strong>required</strong>:  The <code>required</code> parameter is a boolean value that determines whether the argument is\nrequired or not. If set to True, the function will return an empty dictionary if the argument is not\nfound in the <code>arguments</code> dictionary. If set to False (default), the function will still return an\nempty dictionary if, defaults to False</li>\n<li><strong>remove_infos</strong>:  The <code>remove_infos</code> parameter is a list that contains the names of specific\ninformation that you want to remove from the argument dictionary. In the code, it is used to remove\nspecific argument information such as \"gooey\" from the <code>arg_infos</code> dictionary</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a dictionary containing information about a specific argument, specified by the <code>arg</code>\n  parameter. If the argument is found in the <code>arguments</code> dictionary, the function returns a dictionary\n  containing the information about that argument. If the argument is not found, an empty dictionary is\n  returned. The <code>required</code> parameter is used to specify whether the argument is required or not, and\n  this information is added to</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">arguments</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">arg</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">required</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">remove_infos</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;gooey&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;extra&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">add_metavar</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.get_argument_gooey": {"fullname": "howard.functions.commons.get_argument_gooey", "modulename": "howard.functions.commons", "qualname": "get_argument_gooey", "kind": "function", "doc": "<p>The function <code>get_argument_gooey</code> takes an argument and returns the corresponding widget and options\nfor the Gooey library in Python.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arg</strong>:  The <code>arg</code> parameter is a string that represents the name of the argument you want to\nretrieve information for</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>get_argument_gooey</code> returns two values: <code>widget</code> and <code>options</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arguments</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>, </span><span class=\"param\"><span class=\"n\">arg</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.commons.get_argument_to_mk": {"fullname": "howard.functions.commons.get_argument_to_mk", "modulename": "howard.functions.commons", "qualname": "get_argument_to_mk", "kind": "function", "doc": "<p>The function <code>get_argument_to_mk</code> generates a formatted string containing information about a\ncommand line argument, which can be output in either Markdown or HTML format.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arg</strong>:  The <code>arg</code> parameter is a string that represents the name of the argument. It is used to\ngenerate the header and text for the argument</li>\n<li><strong>argument</strong>:  The <code>argument</code> parameter is a dictionary that contains information about the\nargument. It has the following keys:</li>\n<li><strong>mode</strong>:  The <code>mode</code> parameter is used to specify the format of the output. It can have two\npossible values: \"mk\" or \"html\". If \"mk\" is specified, the output will be formatted using Markdown\nsyntax. If \"html\" is specified, the output will be formatted using HTML syntax, defaults to mk</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a formatted string that provides information about a command line argument. The format of\n  the string depends on the value of the <code>mode</code> parameter. If <code>mode</code> is set to \"html\", the string is\n  formatted as an HTML <code>&lt;pre&gt;</code> block. Otherwise, the string is formatted as a Markdown code block. The\n  string includes the argument name, metavariable, help text, required</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arg</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">argument</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>, </span><span class=\"param\"><span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;mk&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.help_generation_from_dict": {"fullname": "howard.functions.commons.help_generation_from_dict", "modulename": "howard.functions.commons", "qualname": "help_generation_from_dict", "kind": "function", "doc": "<p>The <code>help_generation_from_dict</code> function generates help documentation from a dictionary input,\nsupporting markdown and HTML output formats with specific sections like \"__help\", \"__format\",\n\"__default\", \"__examples\", \"__code\", and \"__examples_code\".</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>element</strong>:  The <code>element</code> parameter in the <code>help_generation_from_dict</code> function is a string that\nrepresents the current element or key in the dictionary for which help documentation is being\ngenerated. It is the specific key or element within the dictionary that you want to generate help\ndocumentation for</li>\n<li><strong>help_dict</strong>:  The <code>help_dict</code> parameter in the <code>help_generation_from_dict</code> function is a\ndictionary that contains the help documentation for various elements or keys. This dictionary\nstructure allows for organizing and storing information related to each element, such as help text,\nformatting details, default values, and examples. The function processes</li>\n<li><strong>previous</strong>:  The <code>previous</code> parameter in the <code>help_generation_from_dict</code> function is used to\nkeep track of the previous elements in the hierarchy. It is a string that represents the path to the\ncurrent element being processed. This parameter helps in maintaining the correct hierarchy level\nwhen generating help documentation for nested elements in a</li>\n<li><strong>output_type</strong>:  The <code>output_type</code> parameter in the <code>help_generation_from_dict</code> function\nspecifies the type of output format that you want the generated help documentation to be in. It can\ntake two possible values: \"markdown\" or \"html\". By default, the output type is set to markdown,\ndefaults to markdown</li>\n<li><strong>level</strong>:  The <code>level</code> parameter in the <code>help_generation_from_dict</code> function is used to keep\ntrack of the depth or level of recursion in the generation process. It starts at 1 for the initial\ncall and increments by 1 for each level of recursion into sub-elements. This parameter helps in\nformatting the, defaults to 1</li>\n<li><strong>table</strong>:  The <code>table</code> parameter in the <code>help_generation_from_dict</code> function is used to store the\ntable of contents for the generated help documentation. It is a string that contains the formatted\ntable of contents with links to different sections or elements within the documentation. This table\nhelps users navigate through the documentation easily</li>\n<li><strong>generate_table</strong>:  The <code>generate_table</code> parameter in the <code>help_generation_from_dict</code> function is\na boolean flag that determines whether the function should generate a table of contents for the help\ndocumentation. When set to <code>True</code>, the function will include a table of contents in the output based\non the hierarchy of elements in the, defaults to False</li>\n<li><strong>code_type</strong>:  The <code>code_type</code> parameter in the <code>help_generation_from_dict</code> function specifies\nthe type of code examples that will be included in the generated help documentation. It defaults to\n\"json\", meaning that the code examples provided in the \"__examples_code\" section of the dictionary\nwill be in JSON format</li>\n<li><strong>auto_default</strong>:  The <code>auto_default</code> parameter in the <code>help_generation_from_dict</code> function is a\nboolean flag that determines whether the function should automatically populate certain sections of\nthe help documentation based on the information available in the dictionary and the element's\narguments. When set to <code>True</code>, the function will automatically fill in sections, defaults to True</li>\n<li><strong>previous_sections</strong>:  The <code>previous_sections</code> parameter in the <code>help_generation_from_dict</code>\nfunction is a boolean flag that determines whether the function should include previous sections in\nthe hierarchy when generating help documentation for nested elements. When set to <code>True</code>, the\nfunction will maintain the previous sections in the hierarchy path, helping to provide, defaults to\nFalse</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The <code>help_generation_from_dict</code> function returns the generated help documentation based on\n  the input <code>help_dict</code> dictionary. The output is formatted based on the specified <code>output_type</code>\n  (either \"markdown\" or \"html\") and includes sections such as \"__help\", \"__format\", \"__default\", and\n  \"__examples\" if they are present in the <code>help_dict</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">element</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">help_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">previous</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">output_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;markdown&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">level</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">generate_table</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">code_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">auto_default</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">previous_sections</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.commons.help_generation_from_json": {"fullname": "howard.functions.commons.help_generation_from_json", "modulename": "howard.functions.commons", "qualname": "help_generation_from_json", "kind": "function", "doc": "<p>The <code>help_generation_from_json</code> function reads a JSON file containing help information, converts it\ninto a specified output format, and returns the generated help content.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>help_json_file</strong>:  The <code>help_json_file</code> parameter is a string that should contain the file path\nto the JSON file from which help information will be extracted. This JSON file likely contains\nstructured data that will be used to generate the help content</li>\n<li><strong>output_type</strong>:  The <code>output_type</code> parameter in the <code>help_generation_from_json</code> function\nspecifies the format in which the generated help content will be output. By default, it is set to\n\"markdown\", which means the help content will be formatted using Markdown syntax. However, you can\nalso specify other output formats such, defaults to markdown</li>\n<li><strong>title</strong>:  The <code>title</code> parameter in the <code>help_generation_from_json</code> function is a string that\nrepresents the title of the help documentation that will be generated. It is used to provide a title\nfor the help content to make it more organized and informative. By default, the title is set to\n\"Help\", defaults to Help (optional)</li>\n<li><strong>code_type</strong>:  The <code>code_type</code> parameter in the <code>help_generation_from_json</code> function is used to\nspecify the type of code examples that will be included in the generated help content. This\nparameter allows you to define the format or language of the code examples to be displayed alongside\nthe help information extracted from the JSON</li>\n<li><strong>include_toc</strong>:  The <code>include_toc</code> parameter in the <code>help_generation_from_json</code> function is a\nboolean flag that determines whether a table of contents (TOC) should be included in the generated\nhelp content. If <code>include_toc</code> is set to <code>True</code>, a table of contents will be generated based,\ndefaults to False</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>help_generation_from_json</code> returns the generated help content based on the\n  information stored in the JSON file provided as input.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">help_json_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">output_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;markdown&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;Help&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">code_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">include_toc</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"fullname": "howard.functions.commons.RawTextArgumentDefaultsHelpFormatter", "modulename": "howard.functions.commons", "qualname": "RawTextArgumentDefaultsHelpFormatter", "kind": "class", "doc": "<p>Help message formatter which adds default values to argument help.</p>\n\n<p>Only the name of this class is considered a public API. All the methods\nprovided by the class are considered an implementation detail.</p>\n", "bases": "argparse.ArgumentDefaultsHelpFormatter, argparse.RawTextHelpFormatter"}, "howard.functions.commons.help_generation": {"fullname": "howard.functions.commons.help_generation", "modulename": "howard.functions.commons", "qualname": "help_generation", "kind": "function", "doc": "<p>The <code>help_generation</code> function generates a parser object for command-line arguments, as well as\nmarkdown or HTML help documentation for those arguments.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arguments_dict: A dictionary containing the arguments for the function. It has three keys</strong>: </li>\n<li><strong>parser</strong>:  The <code>parser</code> parameter is an instance of the <code>argparse.ArgumentParser</code> class. It is\nused to define the command-line interface and parse the command-line arguments. If no <code>parser</code> is\nprovided, a new instance of <code>argparse.ArgumentParser</code> will be created</li>\n<li><strong>setup</strong>:  The <code>setup</code> parameter is a string that represents the path to a configuration file.\nThis file contains metadata about the program, such as its name, version, description, and long\ndescription content type</li>\n<li><strong>output_type</strong>:  The <code>output_type</code> parameter determines the format of the output. It can be one\nof the following values:, defaults to parser</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>help_generation</code> returns different outputs based on the value of the\n  <code>output_type</code> parameter.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">arguments_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">parser</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">setup</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">output_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;parser&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.commons.format_arg_help": {"fullname": "howard.functions.commons.format_arg_help", "modulename": "howard.functions.commons", "qualname": "format_arg_help", "kind": "function", "doc": "<p>The function <code>format_arg_help</code> formats a help message for a function argument, including a default\nvalue if provided.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>help_message</strong>:  The <code>help_message</code> parameter is a string that contains the description or help\nmessage for a function or method argument. It provides information about the purpose or usage of the\nargument</li>\n<li><strong>default_value</strong>:  The <code>default_value</code> parameter in the <code>format_arg_help</code> function is an optional\nparameter that specifies a default value for the argument being described in the help message. If a\ndefault value is provided, it will be included in the formatted help message to indicate the default\nvalue for that argument</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>format_arg_help</code> returns a formatted help message with a default value\n  appended at the end if provided.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">help_message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">default_value</span><span class=\"p\">:</span> <span class=\"nb\">object</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.bed_sort": {"fullname": "howard.functions.commons.bed_sort", "modulename": "howard.functions.commons", "qualname": "bed_sort", "kind": "function", "doc": "<p>The <code>bed_sort</code> function reads a tab-separated input file, sorts the data based on columns 0, 1, and\n2 in ascending order, and writes the sorted data to a tab-separated output file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input</strong>:  The <code>input</code> parameter is the path to the input file that contains the data to be\nsorted. This file should be in a tab-separated format</li>\n<li><strong>output</strong>:  The <code>output</code> parameter is a string that specifies the path and filename of the output\nfile where the sorted data will be saved</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">input</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">output</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.full_path": {"fullname": "howard.functions.commons.full_path", "modulename": "howard.functions.commons", "qualname": "full_path", "kind": "function", "doc": "<p>The function <code>full_path</code> takes a path string as input and returns the full expanded path.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong>:  The <code>full_path</code> function takes a string <code>path</code> as input and returns the full path by\nexpanding the user's home directory in the path if it is not None</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>full_path</code> is returning the expanded version of the input <code>path</code> using\n  <code>os.path.expanduser(path)</code>. This function expands the <code>~</code> character in the path to the user's home\n  directory.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.get_default_argument": {"fullname": "howard.functions.commons.get_default_argument", "modulename": "howard.functions.commons", "qualname": "get_default_argument", "kind": "function", "doc": "<p>The function <code>get_default_argument</code> retrieves the default value of a specified argument from a\ndictionary of arguments.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arguments_dict</strong>:  The <code>arguments_dict</code> parameter is a dictionary that contains information\nabout arguments</li>\n<li><strong>argument: The <code>get_default_argument</code> function takes in two parameters</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function is attempting to return the default value of a specific argument from a\n  dictionary of arguments. However, there is a mistake in the code. The correct key to access the\n  argument's default value should be \"argument\" instead of \"arguments\". Therefore, the function will\n  return the default value of the specified argument if it exists, otherwise it will return None.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arguments_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">argument</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.commons.set_param": {"fullname": "howard.functions.commons.set_param", "modulename": "howard.functions.commons", "qualname": "set_param", "kind": "function", "doc": "<p>The function <code>set_param</code> takes input arguments and adds them to a dictionary based on certain\nconditions.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>param</strong>:  The <code>param</code> parameter is a dictionary that stores configuration parameters or\nsettings. It is used to collect and store various arguments and their values based on the conditions\nspecified in the <code>set_param</code> function</li>\n<li><strong>args</strong>:  The <code>args</code> parameter in the <code>set_param</code> function is likely an instance of the\n<code>argparse.Namespace</code> class, which is typically used to store the command-line arguments parsed by\nthe <code>argparse</code> module in Python. It contains the values of the arguments provided by the user when\nthe script</li>\n<li><strong>arguments_dict</strong>:  The <code>arguments_dict</code> parameter seems to be a dictionary that likely contains\ninformation about arguments and their default values. This dictionary is used in the function\n<code>set_param</code> to determine whether a specific argument should be included in the <code>param</code> dictionary\nbased on certain conditions</li>\n<li><strong>argument</strong>:  The <code>argument</code> parameter in the <code>set_param</code> function represents the specific\nargument that you want to set in the <code>param</code> dictionary. It is the key that will be used to store\nthe value in the dictionary</li>\n<li><strong>section</strong>:  The <code>section</code> parameter in the <code>set_param</code> function is used to specify a section\nwithin the <code>param</code> dictionary where the argument value should be stored. If a <code>section</code> is provided,\nthe argument value will be stored under that section in the <code>param</code> dictionary. If no `section</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the updated <code>param</code> dictionary after setting the specified argument value based on the\n  conditions provided in the function.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">param</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;argparse&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;/usr/local/Caskroom/miniconda/base/envs/howard_devel/lib/python3.10/argparse.py&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">arguments_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">argument</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">section</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.add_value_into_dict": {"fullname": "howard.functions.commons.add_value_into_dict", "modulename": "howard.functions.commons", "qualname": "add_value_into_dict", "kind": "function", "doc": "<p>The function <code>add_value_into_dict</code> adds a value into a dictionary tree based on the provided\nsections.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dict_tree</strong>:  The <code>dict_tree</code> parameter is a dictionary representing a tree structure. It serves\nas the starting point for adding a value based on the provided sections</li>\n<li><strong>sections</strong>:  The <code>sections</code> parameter in the <code>add_value_into_dict</code> function represents a list of\nsections corresponding to successive keys in the dictionary. These sections are used to traverse the\ndictionary tree and determine the location where the value should be added. Each element in the\n<code>sections</code> list corresponds to a key in</li>\n<li><strong>value</strong>:  The <code>value</code> parameter in the <code>add_value_into_dict</code> function represents the value that\nyou want to add into the dictionary tree at the specified location determined by the <code>sections</code>\nlist. This value can be of any data type (e.g., int, str, list, dict, etc.)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>add_value_into_dict</code> returns the updated dictionary tree after adding the\n  value based on the given sections.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dict_tree</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">sections</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.commons.load_param": {"fullname": "howard.functions.commons.load_param", "modulename": "howard.functions.commons", "qualname": "load_param", "kind": "function", "doc": "<p>The function <code>load_param</code> takes command line arguments and returns a dictionary containing\nparameters loaded from a file or as JSON.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>args</strong>:  It seems like the code snippet you provided is a function named <code>load_param</code> that takes\nan argument <code>args</code> of type <code>argparse</code> and returns a dictionary. The function is intended to load\nparameters from a file or a string</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A dictionary containing the loaded parameters is being returned.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;argparse&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;/usr/local/Caskroom/miniconda/base/envs/howard_devel/lib/python3.10/argparse.py&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.load_config_args": {"fullname": "howard.functions.commons.load_config_args", "modulename": "howard.functions.commons", "qualname": "load_config_args", "kind": "function", "doc": "<p>The function <code>load_config_args</code> takes in arguments, extracts specific keys from them, and loads\nparameters in JSON format.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>args</strong>:  The <code>load_config_args</code> function takes in an <code>args</code> object as input. This <code>args</code> object\nseems to contain various configuration parameters that the function will use to load and return\nspecific values</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>load_config_args</code> returns the variables <code>arguments_dict</code>, <code>setup_cfg</code>,\n  <code>config</code>, and <code>param</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.commons.load_args": {"fullname": "howard.functions.commons.load_args", "modulename": "howard.functions.commons", "qualname": "load_args", "kind": "function", "doc": "<p>The <code>load_args</code> function processes arguments based on specified parameters and conditions, raising\nan error if a specified argument is not found.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>param</strong>:  The <code>param</code> parameter in the <code>load_args</code> function is a dictionary that stores the\narguments and their values. It is used to keep track of the arguments that have been loaded or\nprocessed during the argument parsing process</li>\n<li><strong>args</strong>:  The <code>args</code> parameter in the <code>load_args</code> function is an instance of the\n<code>argparse.ArgumentParser</code> class from the <code>argparse</code> module in Python. This object is used to parse\ncommand-line arguments and options. It contains information about the arguments passed to the script\nwhen it was executed</li>\n<li><strong>arguments_dict</strong>:  The <code>arguments_dict</code> parameter in the <code>load_args</code> function is a dictionary\nthat likely contains information about the arguments expected by the script. It may include details\nsuch as the argument names, their corresponding sections, and any additional parameters related to\neach argument. This dictionary is used within the `load_args</li>\n<li><strong>command</strong>:  The <code>command</code> parameter in the <code>load_args</code> function is a string that represents a\nspecific command or action for which arguments need to be loaded. This parameter is used to identify\nthe command-specific arguments that should be processed during argument parsing</li>\n<li><strong>arguments_list</strong>:  The <code>arguments_list</code> parameter in the <code>load_args</code> function is a dictionary\nthat contains the names of arguments that are expected to be present in the <code>args</code> object. This list\nis used to specify which arguments should be processed by the function <code>load_args</code> during the\nargument parsing process</li>\n<li><strong>strict</strong>:  The <code>strict</code> parameter in the <code>load_args</code> function is a boolean flag that determines\nwhether an error should be raised if an argument specified in the <code>arguments_list</code> list is not found\nin the <code>args</code> object. If <code>strict</code> is set to <code>True</code>, an error will be raised, defaults to False</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>load_args</code> is returning a dictionary named <code>param</code> after processing the\n  arguments based on the input parameters and conditions specified in the function.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">param</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;argparse&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;/usr/local/Caskroom/miniconda/base/envs/howard_devel/lib/python3.10/argparse.py&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">arguments_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">command</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">arguments_list</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">strict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">section_prefix</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.get_random": {"fullname": "howard.functions.commons.get_random", "modulename": "howard.functions.commons", "qualname": "get_random", "kind": "function", "doc": "<p>The function <code>get_random</code> generates a random string of uppercase letters and digits with a default\nlength of 10.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>N</strong>:  The parameter <code>N</code> in the <code>get_random</code> function represents the length of the random string\nthat will be generated. By default, if no value is provided for <code>N</code>, it will generate a random\nstring of length 10 consisting of uppercase letters and digits, defaults to 10</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A random string of length N consisting of uppercase letters and digits.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">N</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.transcripts_file_to_df": {"fullname": "howard.functions.commons.transcripts_file_to_df", "modulename": "howard.functions.commons", "qualname": "transcripts_file_to_df", "kind": "function", "doc": "<p>This Python function reads a transcripts file into a pandas DataFrame, filtering out comment lines.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>transcripts_file</strong>:  The <code>transcripts_file</code> parameter is a string that represents the file path\nto a file containing transcript information. This function is designed to read the contents of this\nfile and convert it into a pandas DataFrame. The file is expected to be tab-separated with two\ncolumns: \"transcript\" and \"gene</li>\n<li><strong>column_names</strong>:  The <code>column_names</code> parameter is a list that specifies the column names expected\nin the transcripts file. By default, it is set to <code>[\"transcript\", \"gene\"]</code>, indicating that the file\nshould have two columns named \"transcript\" and \"gene\". If the actual column names in the</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A pandas DataFrame containing transcript and gene information read from the specified file\n  after filtering out comment lines is being returned.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">transcripts_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">column_names</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;transcript&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;gene&#39;</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.identical": {"fullname": "howard.functions.commons.identical", "modulename": "howard.functions.commons", "qualname": "identical", "kind": "function", "doc": "<p>The <code>identical</code> function compares the contents of multiple VCF files to determine if they are\nidentical.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>vcf_list</strong>:  The <code>vcf_list</code> parameter is a list of file paths to VCF (Variant Call Format) files\nthat you want to compare for identity. The function reads the contents of these files and checks if\nthey are identical based on the specified conditions</li>\n<li><strong>begin</strong>:  The <code>begin</code> parameter in the <code>identical</code> function is used to specify a string that\nindicates the beginning of a line in the input files. If a line in the input file starts with the\nspecified <code>begin</code> string, it will be skipped and not included in the comparison process. By default,\ndefaults to ##</li>\n<li><strong>line_strip</strong>:  The <code>line_strip</code> parameter in the <code>identical</code> function is a boolean flag that\ndetermines whether each line read from the input files should be stripped of leading and trailing\nwhitespaces before being compared. If <code>line_strip</code> is set to <code>True</code>, each line will be stripped\nusing the `strip, defaults to True</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>identical</code> is returning a boolean value. It returns <code>True</code> if all the lines\n  in the VCF files provided in the <code>vcf_list</code> are identical, and <code>False</code> otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">vcf_list</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">begin</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;##&#39;</span>, </span><span class=\"param\"><span class=\"n\">line_strip</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.check_docker_image_exists": {"fullname": "howard.functions.commons.check_docker_image_exists", "modulename": "howard.functions.commons", "qualname": "check_docker_image_exists", "kind": "function", "doc": "<p>Checks if a Docker image with a specific tag exists in the local repository.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>image_with_tag: Image name with tag (e.g., \"image</strong>: version\")</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if the image exists, False otherwise</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image_with_tag</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.params_string_to_dict": {"fullname": "howard.functions.commons.params_string_to_dict", "modulename": "howard.functions.commons", "qualname": "params_string_to_dict", "kind": "function", "doc": "<p>The <code>params_string_to_dict</code> function in Python converts a string of parameters into a dictionary\nusing specified separators and clears certain characters from the parameter values.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>params</strong>:  The <code>params</code> parameter in the <code>params_string_to_dict</code> function is a string of\nparameters that you want to convert into a dictionary. It contains the information you want to parse\nand organize into key-value pairs</li>\n<li><strong>param_sep</strong>:  The <code>param_sep</code> parameter in the <code>params_string_to_dict</code> function is used to\nspecify the separator that separates different parameters in the input string <code>params</code>. By default,\nthe <code>param_sep</code> is set to \":\" in the function definition. This means that the function expects the\nparameters in the input, defaults to :</li>\n<li><strong>var_val_sep</strong>:  The <code>var_val_sep</code> parameter in the <code>params_string_to_dict</code> function is used to\nspecify the separator between the variable and value in the input string <code>params</code>. By default, it is\nset to <code>\"=\"</code>, which means that the function expects the format of each parameter in the <code>params</code>,\ndefaults to =</li>\n<li><strong>val_clear</strong>:  The <code>val_clear</code> parameter in the <code>params_string_to_dict</code> function is a dictionary\nthat contains key-value pairs used to clear specific characters from the parameter values before\nstoring them in the resulting dictionary</li>\n<li><strong>header</strong>:  The <code>header</code> parameter in the <code>params_string_to_dict</code> function is a boolean flag that\ndetermines whether the input string <code>params</code> has a header that should be skipped when processing the\nparameters. If <code>header</code> is set to <code>True</code>, the function will start processing parameters from the\nsecond line onwards, defaults to True</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>params_string_to_dict</code> returns a dictionary containing the parameters\n  extracted from the input string <code>params</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">param_sep</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;:&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">var_val_sep</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;=&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">val_clear</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;+&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;,&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39; &#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">}</span>,</span><span class=\"param\">\t<span class=\"n\">header</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.determine_value_type": {"fullname": "howard.functions.commons.determine_value_type", "modulename": "howard.functions.commons", "qualname": "determine_value_type", "kind": "function", "doc": "<p>The function <code>determine_value_type</code> determines the type of a given value in a string format,\nhandling lists of values separated by a specified separator and skipping specified null-like\nvalues.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong>:  The <code>value</code> parameter in the <code>determine_value_type</code> function is the input value\nthat you want to determine the type of. It can be a string containing one or more values\nseparated by a specified separator (default is ';')</li>\n<li><strong>sep</strong>:  The <code>sep</code> parameter in the <code>determine_value_type</code> function is used to specify the\nseparator character that is used to split the input <code>value</code> string into individual values. By\ndefault, the separator is set to \";\", but you can change it to a different character if needed,\ndefaults to ;</li>\n<li><strong>skip_null</strong>:  The <code>skip_null</code> parameter in the <code>determine_value_type</code> function is a list\nthat contains values that should be skipped during the type determination process. These values\nare considered as null-like or empty values and are not taken into account when determining the\ntype of the given value</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>determine_value_type</code> returns a string indicating the type of the given\n  value. The possible return values are:</p>\n  \n  <ul>\n  <li>\"VARCHAR\" if the value contains at least one non-numeric character</li>\n  <li>\"DOUBLE\" if the value contains at least one floating-point number</li>\n  <li>\"BIGINT\" if the value contains only integers</li>\n  <li>None if the value is empty or does not match any</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">sep</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;;&#39;</span>, </span><span class=\"param\"><span class=\"n\">skip_null</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;.&#39;</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.determine_column_types": {"fullname": "howard.functions.commons.determine_column_types", "modulename": "howard.functions.commons", "qualname": "determine_column_types", "kind": "function", "doc": "<p>The function <code>determine_column_types</code> analyzes a list of values to determine the predominant\ndata type among VARCHAR, DOUBLE, and BIGINT.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>values_list</strong>:  It seems like you have provided the code snippet for a function that\ndetermines the type of values in a list, but you have not provided the actual values_list that\nthe function will operate on. If you provide me with the values_list, I can help you test the\nfunction and see how it determines the</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the type of the column based on the types of values present in the input list. It will\n  return \"VARCHAR\" if the list contains any string values, \"DOUBLE\" if it contains any float\n  values, \"BIGINT\" if it contains any integer values, and \"VARCHAR\" if none of the specific types\n  are found.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values_list</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.detect_column_type": {"fullname": "howard.functions.commons.detect_column_type", "modulename": "howard.functions.commons", "qualname": "detect_column_type", "kind": "function", "doc": "<p>The function <code>detect_column_type</code> determines the type of a given column in a DataFrame as either\nDATETIME, BOOLEAN, DOUBLE, or VARCHAR.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>column</strong>:  The function <code>detect_column_type</code> takes a column as input and determines its data\ntype based on certain conditions. The conditions are as follows:</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>detect_column_type</code> returns a string indicating the type of data in the input\n  column. The possible return values are \"DATETIME\", \"BOOLEAN\", \"DOUBLE\", or \"VARCHAR\" based on the\n  conditions checked in the function.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">column</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.determine_column_number": {"fullname": "howard.functions.commons.determine_column_number", "modulename": "howard.functions.commons", "qualname": "determine_column_number", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values_list</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.commons.clean_annotation_field": {"fullname": "howard.functions.commons.clean_annotation_field", "modulename": "howard.functions.commons", "qualname": "clean_annotation_field", "kind": "function", "doc": "<p>The <code>clean_annotation_field</code> function removes characters from a string that are not alphanumeric or\nin a specified list.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong>:  The <code>name</code> parameter is a string that represents the input text that you want to clean.\nIt typically contains annotations or other text that you want to process</li>\n<li><strong>char_allowed</strong>:  The <code>char_allowed</code> parameter is a list that contains characters that are\nallowed to remain in the <code>name</code> string after cleaning. Any character in the <code>name</code> string that is\nnot alphanumeric and not in the <code>char_allowed</code> list will be removed during the cleaning process</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>clean_annotation_field</code> returns a cleaned version of the <code>name</code> string, where\n  only alphanumeric characters and characters from the <code>char_allowed</code> list are kept.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">char_allowed</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.databases": {"fullname": "howard.functions.databases", "modulename": "howard.functions.databases", "kind": "module", "doc": "<p></p>\n"}, "howard.functions.databases.generate_databases_param": {"fullname": "howard.functions.databases.generate_databases_param", "modulename": "howard.functions.databases", "qualname": "generate_databases_param", "kind": "function", "doc": "<p>This function generates database parameters based on specified arguments and assemblies.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>args</strong>:  The <code>args</code> parameter in the <code>generate_databases_param</code> function is expected to be an\ninstance of the <code>argparse</code> module, which is commonly used for parsing command-line arguments. This\nparameter is used to retrieve various arguments and options provided by the user when running the\nscript or program</li>\n<li><strong>assemblies</strong>:  The <code>assemblies</code> parameter is a list containing the assemblies for which\ndatabases will be generated. The function <code>generate_databases_param</code> takes various arguments using\nthe <code>argparse</code> module and generates database parameters based on these inputs. If the\n<code>generate_param</code> argument is provided and set to True,</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;argparse&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;/usr/local/Caskroom/miniconda/base/envs/howard_devel/lib/python3.10/argparse.py&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">assemblies</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.databases.query_and_concatenate_columns": {"fullname": "howard.functions.databases.query_and_concatenate_columns", "modulename": "howard.functions.databases", "qualname": "query_and_concatenate_columns", "kind": "function", "doc": "<p>This function performs an SQL query on a large Parquet file and concatenates multiple columns (if not empty),\nincluding the column name in the concatenation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>parquet_file</strong>:  The path to the Parquet file</li>\n<li><strong>output_file</strong>:  The path to the output file where the concatenated data will be written</li>\n<li><strong>columns</strong>:  The list of columns to concatenate</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parquet_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">output_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">columns</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.databases.databases_infos": {"fullname": "howard.functions.databases.databases_infos", "modulename": "howard.functions.databases", "qualname": "databases_infos", "kind": "function", "doc": "<p>The <code>databases_infos</code> function scans database folders and retrieves information about the databases\nfound, including their folder, release, assembly, subdatabase, format, header, and parameters.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>database_folders</strong>:  A list of folders where the databases are located</li>\n<li><strong>database_folder_releases</strong>:  A list of specific releases of the database folders to include in\nthe search. If None, all releases will be included</li>\n<li><strong>assembly</strong>:  The <code>assembly</code> parameter is a string that specifies the assembly version of the\ndatabases to be searched. It is used to filter the databases based on their assembly version. The\ndefault value is \"hg19\", defaults to hg19</li>\n<li><strong>database_formats</strong>:  The <code>database_formats</code> parameter is a list that specifies the formats of\nthe databases to include in the results. If this parameter is not provided or is set to <code>None</code>, all\ndatabase formats will be included</li>\n<li><strong>config</strong>:  The <code>config</code> parameter is a dictionary that contains configuration settings for the\nfunction. It has the following structure:</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The <code>databases_infos</code> function returns a dictionary containing information about the\n  databases found in the specified database folders. The keys of the dictionary are the paths to the\n  database files, and the values are dictionaries containing the following information: folder,\n  release, assembly, subdatabase, format, header, and parameters.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">database_folders</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">database_folder_releases</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;current&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">assembly</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;hg19&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">database_formats</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "howard.functions.databases.databases_param": {"fullname": "howard.functions.databases.databases_param", "modulename": "howard.functions.databases", "qualname": "databases_param", "kind": "function", "doc": "<p>The <code>databases_param</code> function takes in a dictionary of database information, an optional output\nfile path, and a boolean flag for bcftools preference, and returns a dictionary containing the\nparameters for parquet and bcftools annotations.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>databases_infos_dict</strong>:  A dictionary containing information about databases. Each key in the\ndictionary represents the name of a database, and the corresponding value is another dictionary\ncontaining information about the database, such as its format and parameters</li>\n<li><strong>output</strong>:  The <code>output</code> parameter is a string that specifies the path and filename of the output\nfile where the generated JSON object will be written. If this parameter is not provided or is set to\n<code>None</code>, the JSON object will not be written to a file</li>\n<li><strong>output_description</strong>:  The <code>output_description</code> parameter is a string that specifies the path\nand filename of the output file where the description of the databases will be written. If this\nparameter is not provided or is set to <code>None</code>, the description will not be written to a file</li>\n<li><strong>bcftools_preference</strong>:  The <code>bcftools_preference</code> parameter is a boolean flag that determines\nwhether to prioritize databases in the BCFTOOLS format. If <code>bcftools_preference</code> is set to <code>True</code>,\ndatabases in the BCFTOOLS format will be given priority over other formats. If `bcftools, defaults\nto False</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>databases_param</code> returns a dictionary object named \"param_stats_show\".</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">databases_infos_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">output</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">output_description</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">bcftools_preference</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "howard.functions.databases.databases_download_annovar": {"fullname": "howard.functions.databases.databases_download_annovar", "modulename": "howard.functions.databases", "qualname": "databases_download_annovar", "kind": "function", "doc": "<p>This function downloads and extracts Annovar databases for specified assemblies and files.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>folder</strong>:  The folder where the Annovar databases will be downloaded to</li>\n<li><strong>files</strong>:  The <code>files</code> parameter is a list of specific Annovar database files to download. If not\nprovided, only the mandatory files will be downloaded. If set to \"ALL\", all available files will be\ndownloaded</li>\n<li><strong>assemblies</strong>:  A list of genome assemblies for which Annovar databases will be downloaded.\nDefault is [\"hg19\"]</li>\n<li><strong>annovar_url</strong>:  The URL where Annovar databases can be downloaded from, defaults to\n<a href=\"http://www.openbioinformatics.org/annovar/download\">http://www.openbioinformatics.org/annovar/download</a></li>\n<li><strong>threads</strong>:  The \"threads\" parameter specifies the number of threads (parallel processes) to use\nfor download and extract/uncompress files. Default: 1</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">files</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">assemblies</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;hg19&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">annovar_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;http://www.openbioinformatics.org/annovar/download&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.functions.databases.databases_download_snpeff": {"fullname": "howard.functions.databases.databases_download_snpeff", "modulename": "howard.functions.databases", "qualname": "databases_download_snpeff", "kind": "function", "doc": "<p>The <code>databases_download_snpeff</code> function downloads and extracts snpEff databases for specified\ngenome assemblies.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>folder</strong>:  The <code>folder</code> parameter is a string that specifies the folder where the snpEff\ndatabases will be downloaded and stored. If the folder does not exist, it will be created</li>\n<li><strong>assemblies</strong>:  The <code>assemblies</code> parameter is a list of genome assemblies for which the snpEff\ndatabases need to be downloaded. It specifies the genome assemblies for which you want to download\nthe snpEff databases. For example, if you want to download the snpEff databases for the human genome\nassembly hg</li>\n<li><strong>config</strong>:  The <code>config</code> parameter is a dictionary that contains information about the tools and\ntheir configurations. It is used to retrieve the path to the Java binary and the path to the snpEff\nbinary</li>\n<li><strong>threads</strong>:  The <code>threads</code> parameter specifies the number of threads to be used for downloading\nthe snpEff databases. It determines the parallelism of the download process, allowing multiple files\nto be downloaded simultaneously, defaults to 1</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">assemblies</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;hg19&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.functions.databases.databases_download_genomes": {"fullname": "howard.functions.databases.databases_download_genomes", "modulename": "howard.functions.databases", "qualname": "databases_download_genomes", "kind": "function", "doc": "<p>This function downloads genome assemblies using genomepy package with options to specify genome\nfolder, provider, contig regex, and number of threads.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>assemblies</strong>:  a list of genome assembly names to download</li>\n<li><strong>genomes_folder</strong>:  The folder where the downloaded genome files will be saved. If no folder is\nspecified, the default folder will be used</li>\n<li><strong>provider</strong>:  The provider parameter specifies the source of the genome data. In this case, the\ndefault provider is set to \"UCSC\", which refers to the University of California, Santa Cruz Genome\nBrowser. Other possible providers could include NCBI or Ensembl, defaults to UCSC</li>\n<li><strong>contig_regex</strong>:  The contig_regex parameter is a regular expression used to filter the contigs\n(chromosomes or scaffolds) to be downloaded for a given genome assembly. It allows users to download\nonly a subset of the available contigs, based on their names or other characteristics. If\ncontig_regex is not specified</li>\n<li><strong>threads</strong>:  The \"threads\" parameter specifies the number of threads (parallel processes) to use\nfor downloading the genomes. This can speed up the process if the computer has multiple cores or\nprocessors. The default value is 1, meaning that the download will be done using a single thread,\ndefaults to 1</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None is being returned.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">assemblies</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">genomes_folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/Users/lebechea/howard/databases/genomes/current&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">provider</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;UCSC&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">contig_regex</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.functions.databases.databases_download_refseq": {"fullname": "howard.functions.databases.databases_download_refseq", "modulename": "howard.functions.databases", "qualname": "databases_download_refseq", "kind": "function", "doc": "<p>The <code>databases_download_refseq</code> function downloads RefSeq files for a list of assemblies and returns\na dictionary of installed RefSeq files for each assembly.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>assemblies</strong>:  A list of assemblies for which the RefSeq files need to be downloaded. Each\nassembly is represented as a string</li>\n<li><strong>refseq_folder</strong>:  The <code>refseq_folder</code> parameter is a string that specifies the folder where the\nRefSeq files will be downloaded and stored. If this parameter is not provided, a default folder will\nbe used</li>\n<li><strong>refseq_url</strong>:  The <code>refseq_url</code> parameter is a string that represents the URL where the RefSeq\nfiles can be downloaded from</li>\n<li><strong>refseq_prefix</strong>:  The <code>refseq_prefix</code> parameter is a string that specifies the prefix for the\ndownloaded RefSeq files. By default, it is set to \"ncbiRefSeq\". This prefix is used to identify the\nRefSeq files for each assembly. For example, if the prefix is set to \"ncbi, defaults to ncbiRefSeq</li>\n<li><strong>refseq_files</strong>:  The <code>refseq_files</code> parameter is a list of filenames that need to be downloaded\nfor each assembly. The default value is <code>[\"ncbiRefSeq.txt\", \"ncbiRefSeqLink.txt\"]</code>, but you can\nprovide your own list of filenames if needed</li>\n<li><strong>refseq_format_file</strong>:  The <code>refseq_format_file</code> parameter is a string that specifies the\nfilename of the RefSeq file that needs to be formatted. This file will be used as input for the\n<code>databases_format_refseq</code> function. By default, the value is set to \"ncbiRefSeq.txt\", defaults to\nncbiRefSeq.txt</li>\n<li><strong>refseq_format_file_output</strong>:  The <code>refseq_format_file_output</code> parameter is a string that\nspecifies the output file path for the formatted RefSeq file. This file will be generated by the\n<code>databases_format_refseq</code> function and will contain the formatted RefSeq data. If this parameter is\nnot provided, the formatted RefSeq</li>\n<li><strong>include_utr_5</strong>:  A boolean parameter that specifies whether to include the 5' untranslated\nregion (UTR) in the downloaded RefSeq files. If set to True, the 5' UTR will be included. If set to\nFalse, the 5' UTR will be excluded, defaults to True</li>\n<li><strong>include_utr_3</strong>:  The <code>include_utr_3</code> parameter is a boolean value that specifies whether to\ninclude the 3' untranslated region (UTR) in the downloaded RefSeq files. If set to <code>True</code>, the 3'\nUTR will be included. If set to <code>False</code>, the 3, defaults to True</li>\n<li><strong>include_chrM</strong>:  The <code>include_chrM</code> parameter is a boolean value that determines whether to\ninclude the mitochondrial chromosome (chrM) in the downloaded RefSeq files. If set to True, the chrM\nwill be included; if set to False, it will be excluded, defaults to True</li>\n<li><strong>include_non_canonical_chr</strong>:  The <code>include_non_canonical_chr</code> parameter is a boolean value that\ndetermines whether or not to include non-canonical chromosomes in the downloaded RefSeq files. If\nset to <code>True</code>, non-canonical chromosomes will be included. If set to <code>False</code>, non-canonical\nchromosomes will be excluded, defaults to True</li>\n<li><strong>include_non_coding_transcripts</strong>:  The <code>include_non_coding_transcripts</code> parameter is a boolean\nflag that determines whether non-coding transcripts should be included in the downloaded RefSeq\nfiles. If set to <code>True</code>, non-coding transcripts will be included. If set to <code>False</code>, non-coding\ntranscripts will be excluded, defaults to True</li>\n<li><strong>include_transcript_ver</strong>:  The <code>include_transcript_ver</code> parameter is a boolean value that\ndetermines whether to include the transcript version in the downloaded RefSeq files. If set to\n<code>True</code>, the transcript version will be included. If set to <code>False</code>, the transcript version will be\nexcluded, defaults to True</li>\n<li><strong>threads</strong>:  The <code>threads</code> parameter specifies the number of threads to use for downloading and\nextracting the RefSeq files. It determines the level of parallelism in the download and extraction\nprocess. By default, it is set to 1, which means that the download and extraction will be performed\nsequentially. If you want, defaults to 1</li>\n<li><strong>memory</strong>:  The <code>memory</code> parameter specifies the amount of max memory (in Gb) to use for sorting.\ndefaults to 1</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>databases_download_refseq</code> returns a dictionary <code>installed_refseq</code> which\n  contains information about the downloaded RefSeq files for each assembly. The keys of the dictionary\n  are the assembly names, and the values are lists of the installed RefSeq files for each assembly.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">assemblies</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">refseq_folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">refseq_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">refseq_prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ncbiRefSeq&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">refseq_files</span><span class=\"p\">:</span> <span class=\"n\">List</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;ncbiRefSeq.txt&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ncbiRefSeqLink.txt&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">refseq_format_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ncbiRefSeq.txt&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">refseq_format_file_output</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">include_utr_5</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">include_utr_3</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">include_chrM</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">include_non_canonical_chr</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">include_non_coding_transcripts</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">include_transcript_ver</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">memory</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "howard.functions.databases.databases_format_refseq": {"fullname": "howard.functions.databases.databases_format_refseq", "modulename": "howard.functions.databases", "qualname": "databases_format_refseq", "kind": "function", "doc": "<p>The <code>databases_format_refseq</code> function takes a RefSeq file as input, formats it according to\nspecified criteria, and outputs the formatted file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>refseq_file</strong>:  The <code>refseq_file</code> parameter is a string that represents the path to the input\nRefSeq file. This file contains information about gene annotations, including chromosome, start and\nend positions, strand, and other details</li>\n<li><strong>output_file</strong>:  The <code>output_file</code> parameter is a string that represents the name of the file\nwhere the formatted data will be written</li>\n<li><strong>include_utr_5</strong>:  The <code>include_utr_5</code> parameter is a boolean that determines whether to include\nthe 5' UTR (untranslated region) in the output file. If set to <code>True</code>, the 5' UTR will be included.\nIf set to <code>False</code>, the 5' U, defaults to True</li>\n<li><strong>include_utr_3</strong>:  A boolean parameter that determines whether to include the 3' UTR\n(untranslated region) in the output. If set to True, the 3' UTR will be included. If set to False,\nthe 3' UTR will be excluded, defaults to True</li>\n<li><strong>include_chrM</strong>:  The <code>include_chrM</code> parameter is a boolean that determines whether to include\ntranscripts from the mitochondrial chromosome (chrM or chrMT) in the output file. If set to True,\ntranscripts from the mitochondrial chromosome will be included. If set to False, transcripts from\nthe mitochondrial chromosome will be excluded, defaults to True</li>\n<li><strong>include_non_canonical_chr</strong>:  The parameter <code>include_non_canonical_chr</code> determines whether or\nnot to include non-canonical chromosomes in the output. If set to <code>True</code>, non-canonical chromosomes\nwill be included. If set to <code>False</code>, non-canonical chromosomes will be excluded, defaults to True</li>\n<li><strong>include_non_coding_transcripts</strong>:  The parameter <code>include_non_coding_transcripts</code> determines\nwhether non-coding transcripts should be included in the output file. If set to <code>True</code>, non-coding\ntranscripts will be included. If set to <code>False</code>, non-coding transcripts will be excluded, defaults\nto True</li>\n<li><strong>include_transcript_ver</strong>:  The <code>include_transcript_ver</code> parameter determines whether to include\nthe transcript version in the output file. If set to <code>True</code>, the transcript version will be included\nin the output file. If set to <code>False</code>, the transcript version will be removed from the output file.\nThe default value is `True, defaults to True</li>\n<li><strong>sort</strong>:  The <code>sort</code> parameter determines whether to sort the output file in ascending order\nbased on the chromosome and start position. If set to <code>True</code>, the file will be sorted. If set to\n<code>False</code>, the file will not be sorted. The default value is <code>False</code>, defaults to False</li>\n<li><strong>header</strong>:  The <code>header</code> parameter is a boolean that determines whether to include a header line\nin the output file. If set to <code>True</code>, a header line will be included. If set to <code>False</code>, no header\nline will be included. The default value is <code>False</code>, defaults to False</li>\n<li><strong>header_first_line</strong>:  The <code>header_first_line</code> parameter is a boolean that determines whether to\ninclude the header line as the first line in the output file. If set to <code>True</code>, the header line will\nbe included as the first line. If set to <code>False</code>, the header line will not be included as the first,\ndefaults to True</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>databases_format_refseq</code> returns the path of the output file.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">refseq_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">output_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">include_utr_5</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">include_utr_3</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">include_chrM</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">include_non_canonical_chr</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">include_non_coding_transcripts</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">include_transcript_ver</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">sort</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">header</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">header_first_line</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.databases.databases_download_dbnsfp": {"fullname": "howard.functions.databases.databases_download_dbnsfp", "modulename": "howard.functions.databases", "qualname": "databases_download_dbnsfp", "kind": "function", "doc": "<p>The <code>databases_download_dbnsfp</code> function is used to download and process dbNSFP databases for\nspecified genome assemblies, generating Parquet and VCF files based on the provided configurations.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>assemblies</strong>:  A list of genome assemblies for which to download and process dbNSFP data. Each\nassembly should be specified as a string</li>\n<li><strong>dbnsfp_folder</strong>:  The <code>dbnsfp_folder</code> parameter is a string that specifies the folder where the\ndbNSFP database files are located. If this parameter is not provided, the function will attempt to\ndownload the dbNSFP database files from the <code>dbnsfp_url</code> parameter</li>\n<li><strong>dbnsfp_url</strong>:  The <code>dbnsfp_url</code> parameter represents the URL from which the dbNSFP database\nfiles can be downloaded. This URL is used by the function to fetch the necessary database files for\nprocessing</li>\n<li><strong>dbnsfp_release</strong>:  The <code>dbnsfp_release</code> parameter specifies the version of the dbNSFP database\nto be used. The default value is \"4.4a\", but you can specify a different version if needed, defaults\nto 4.4a</li>\n<li><strong>threads</strong>:  The <code>threads</code> parameter specifies the number of threads to use for parallel\nprocessing. Increasing the number of threads can potentially speed up the execution time of the\nfunction, especially if there are multiple cores available on the machine. It determines how many\ntasks can be executed simultaneously</li>\n<li><strong>memory</strong>:  The <code>memory</code> parameter specifies the amount of maximum memory (in gigabytes) to use\nfor sorting. It is used in the context of processing and sorting data efficiently. The default value\nfor this parameter is set to 1, meaning that 1 gigabyte of memory will be allocated for sorting\noperations, defaults to 1</li>\n<li><strong>parquet_size</strong>:  The <code>parquet_size</code> parameter specifies the maximum size (in megabytes) of data\nfiles in the Parquet folder. It determines the size at which the Parquet files will be split or\ngenerated. The value should be an integer representing the size in megabytes, defaults to 100</li>\n<li><strong>generate_parquet_file</strong>:  The <code>generate_parquet_file</code> parameter in the\n<code>databases_download_dbnsfp</code> function is a boolean flag that indicates whether to generate a Parquet\nfile or not. If set to <code>True</code>, the function will create Parquet files based on the specified\nparameters and data. If set to `, defaults to False</li>\n<li><strong>generate_sub_databases</strong>:  The <code>generate_sub_databases</code> parameter in the\n<code>databases_download_dbnsfp</code> function determines whether to generate sub-databases based on the\nassemblies provided. If set to <code>True</code>, the function will create sub-databases based on the specified\ngenome assemblies. If set to <code>False</code>, the function, defaults to False</li>\n<li><strong>generate_vcf_file</strong>:  The <code>generate_vcf_file</code> parameter in the <code>databases_download_dbnsfp</code>\nfunction is a boolean flag that indicates whether to generate a VCF file based on the specified\nparameters and data. If set to <code>True</code>, the function will generate a VCF file. If set to `False,\ndefaults to False</li>\n<li><strong>not_generate_files_all</strong>:  The <code>not_generate_files_all</code> parameter in the\n<code>databases_download_dbnsfp</code> function is a boolean flag that indicates whether to skip generating\ndatabase Parquet/VCF files for the entire database. If set to <code>True</code>, the function will not generate\nfiles for the entire database. If set to, defaults to False</li>\n<li><strong>genomes_folder</strong>:  The <code>genomes_folder</code> parameter specifies the folder where the genome files\nare located. It is a string that represents the path to the folder containing genome assemblies</li>\n<li><strong>add_info</strong>:  The <code>add_info</code> parameter in the <code>databases_download_dbnsfp</code> function is a boolean\nflag that determines whether to include an \"INFO\" column in the Parquet folder/file. If set to\n<code>True</code>, the function will add an INFO column to the generated Parquet files. This INFO, defaults to\nFalse</li>\n<li><strong>only_info</strong>:  The <code>only_info</code> parameter in the <code>databases_download_dbnsfp</code> function is a boolean\nflag that, when set to <code>True</code>, indicates that only the \"INFO\" column should be included in the\noutput. This parameter is used to control whether to include only the \"INFO\" column in, defaults to\nFalse</li>\n<li><strong>row_group_size</strong>:  The <code>row_group_size</code> parameter specifies the row group size to generate the\nParquet folder and file. It is used to control the size of row groups in the Parquet file. This\nparameter affects the organization of data within the Parquet file and can impact performance and\nmemory usage during processing. The, defaults to 100000</li>\n<li><strong>uniquify</strong>:  The <code>uniquify</code> parameter in the <code>databases_download_dbnsfp</code> function is a boolean\nflag that determines whether to generate unique values for each annotation in the Parquet file. When\nset to <code>True</code>, the function will ensure that each annotation column contains only unique values.\nThis can be, defaults to False</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>databases_download_dbnsfp</code> returns a boolean value indicating whether the\n  process of downloading and processing dbNSFP databases for specified genome assemblies was\n  successful or not.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">assemblies</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">dbnsfp_folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dbnsfp_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dbnsfp_release</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;4.4a&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">memory</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">parquet_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">generate_parquet_file</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">generate_sub_databases</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">generate_vcf_file</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">not_generate_files_all</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">genomes_folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">add_info</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">only_info</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">row_group_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100000</span>,</span><span class=\"param\">\t<span class=\"n\">uniquify</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "howard.functions.databases.databases_download_alphamissense": {"fullname": "howard.functions.databases.databases_download_alphamissense", "modulename": "howard.functions.databases", "qualname": "databases_download_alphamissense", "kind": "function", "doc": "<p>The <code>databases_download_alphamissense</code> function downloads and converts AlphaMissense databases for a\nlist of assemblies.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>assemblies</strong>:  <code>assemblies</code> is a list of assemblies for which the AlphaMissense database needs\nto be downloaded. Each assembly represents a specific genome or genetic sequence</li>\n<li><strong>alphamissense_folder</strong>:  The <code>alphamissense_folder</code> parameter is a string that specifies the\nfolder where the AlphaMissense files will be downloaded and stored. It is set to\n<code>DEFAULT_ANNOTATIONS_FOLDER</code> by default, which is likely a predefined constant or variable in your\ncode</li>\n<li><strong>alphamissense_url</strong>:  The <code>alphamissense_url</code> parameter is a string that specifies the URL where\nthe AlphaMissense files are located. It is used to construct the download URL for each assembly's\nAlphaMissense file</li>\n<li><strong>threads</strong>:  The <code>threads</code> parameter is an optional parameter that specifies the number of\nthreads to use for the conversion process. It determines the level of parallelism when converting\nthe AlphaMissense TSV file to the Parquet format. If not specified, the default value will be used</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>databases_download_alphamissense</code> returns a boolean value <code>True</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">assemblies</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">alphamissense_folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/Users/lebechea/howard/databases/annotations/current&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">alphamissense_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://storage.googleapis.com/dm_alphamissense&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "howard.functions.databases.databases_download_exomiser": {"fullname": "howard.functions.databases.databases_download_exomiser", "modulename": "howard.functions.databases", "qualname": "databases_download_exomiser", "kind": "function", "doc": "<p>The <code>databases_download_exomiser</code> function downloads and sets up the Exomiser database for the\nspecified assemblies.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>assemblies</strong>:  A list of assemblies for which to download Exomiser databases. Each assembly is a\nstring representing a genome build, such as \"GRCh37\" or \"GRCh38\"</li>\n<li><strong>exomiser_folder</strong>:  The <code>exomiser_folder</code> parameter is a string that specifies the folder where\nthe Exomiser databases will be downloaded and stored. If the folder does not exist, it will be\ncreated</li>\n<li><strong>exomiser_application_properties</strong>:  The <code>exomiser_application_properties</code> parameter is a string\nrepresenting the path to the Exomiser application properties file. This file contains configuration\nsettings for the Exomiser tool. If this parameter is not provided, the function will attempt to\nlocate the application properties file automatically based on the Exomiser</li>\n<li><strong>exomiser_url</strong>:  The <code>exomiser_url</code> parameter is the URL where the Exomiser database files can\nbe downloaded from. It is used to construct the download URLs for the phenotype and assembly files</li>\n<li><strong>exomiser_release</strong>:  The <code>exomiser_release</code> parameter is used to specify the version of the\nExomiser data to download. If it is set to \"default\", \"auto\", or \"config\", the function will attempt\nto retrieve the version from the <code>exomiser.application.properties</code> file. If it is</li>\n<li><strong>exomiser_phenotype_release</strong>:  The <code>exomiser_phenotype_release</code> parameter is used to specify the\nrelease version of the Exomiser phenotype database. If not provided, it will default to the value\nspecified in the <code>application.properties</code> file or the latest available release</li>\n<li><strong>exomiser_remm_release</strong>:  The <code>exomiser_remm_release</code> parameter is used to specify the version\nof the ReMM (Regulatory Mendelian Mutation) database to download. If the value is set to \"default\",\n\"auto\", or \"config\", it will try to retrieve the version from the <code>application.properties</code></li>\n<li><strong>exomiser_remm_url</strong>:  The <code>exomiser_remm_url</code> parameter is the URL where the ReMM (Regulatory\nMendelian Mutation) database can be downloaded from. It is used in the function to construct the\ndownload URL for the ReMM database files, defaults to <a href=\"https://kircherlab.bihealth.org/download/ReMM\">https://kircherlab.bihealth.org/download/ReMM</a></li>\n<li><strong>exomiser_cadd_release</strong>:  The <code>exomiser_cadd_release</code> parameter is used to specify the version\nof the CADD (Combined Annotation Dependent Depletion) database to download. If the value is set to\n\"default\", \"auto\", or \"config\", it will try to retrieve the version from the `exom</li>\n<li><strong>exomiser_cadd_url</strong>:  The <code>exomiser_cadd_url</code> parameter is the URL where the CADD (Combined\nAnnotation Dependent Depletion) database files can be downloaded from. It is used to construct the\ndownload URLs for the CADD database files, defaults to <a href=\"https://kircherlab.bihealth.org/download/CADD\">https://kircherlab.bihealth.org/download/CADD</a></li>\n<li><strong>exomiser_cadd_url_snv_file</strong>:  The parameter <code>exomiser_cadd_url_snv_file</code> is the name of the\nfile containing the SNV (Single Nucleotide Variant) data for the CADD (Combined Annotation Dependent\nDepletion) database, defaults to whole_genome_SNVs.tsv.gz</li>\n<li><strong>exomiser_cadd_url_indel_file</strong>:  The parameter <code>exomiser_cadd_url_indel_file</code> is the name of the\nINDEL file that will be downloaded from the CADD database, defaults to InDels.tsv.gz</li>\n<li><strong>threads</strong>:  The <code>threads</code> parameter specifies the number of threads to use for parallel\nprocessing. It determines how many tasks can be executed simultaneously. Increasing the number of\nthreads can potentially speed up the execution time of the function, especially if there are\nmultiple cores available on the machine</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">assemblies</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">exomiser_folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/Users/lebechea/howard/databases/exomiser/current&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">exomiser_application_properties</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exomiser_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;http://data.monarchinitiative.org/exomiser&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">exomiser_release</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exomiser_phenotype_release</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exomiser_remm_release</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exomiser_remm_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://kircherlab.bihealth.org/download/ReMM&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">exomiser_cadd_release</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exomiser_cadd_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://kircherlab.bihealth.org/download/CADD&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">exomiser_cadd_url_snv_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;whole_genome_SNVs.tsv.gz&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">exomiser_cadd_url_indel_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;InDels.tsv.gz&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "howard.functions.databases.databases_download_dbsnp": {"fullname": "howard.functions.databases.databases_download_dbsnp", "modulename": "howard.functions.databases", "qualname": "databases_download_dbsnp", "kind": "function", "doc": "<p>The function <code>databases_download_dbsnp</code> downloads dbSNP files, generates VCF files, and converts\nthem to Parquet format.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>assemblies</strong>:  A list of genome assemblies for which to download dbSNP data</li>\n<li><strong>dbsnp_folder</strong>:  The folder where the dbSNP files will be downloaded and stored</li>\n<li><strong>dbsnp_releases: List of releases to download. Default</strong>: [\"b156\"]</li>\n<li><strong>dbsnp_release_default: Default release to link in default folder. Default</strong>:  first release in dbsnp_releases</li>\n<li><strong>dbsnp_url</strong>:  The <code>dbsnp_url</code> parameter is a string that represents the base URL where the dbSNP\nfiles are located. This URL is used to construct the full URL for downloading the dbSNP files</li>\n<li><strong>dbsnp_url_files</strong>:  The <code>dbsnp_url_files</code> parameter is a dictionary that maps assembly names to\nspecific dbSNP URL files. It allows you to provide custom dbSNP URL files for specific assemblies\ninstead of using the default file naming convention</li>\n<li><strong>dbsnp_url_files_prefix</strong>:  The <code>dbsnp_url_files_prefix</code> parameter is a string that represents the\nprefix of the dbSNP file name for a specific assembly. It is used to construct the full URL of the\ndbSNP file to be downloaded. By default, the value is set to \"GCF_000001405\"</li>\n<li><strong>dbsnp_assemblies_map</strong>:  The <code>dbsnp_assemblies_map</code> parameter is a dictionary that maps assembly\nnames to their corresponding dbSNP versions. It is used to construct the dbSNP file name based on\nthe assembly name. For example, if the assembly is \"hg19\", the corresponding dbSNP version is \"</li>\n<li><strong>genomes_folder</strong>:  The <code>genomes_folder</code> parameter is a string that specifies the folder where the\ngenome index files are located. These index files are used for generating the VCF file from the\ndownloaded dbSNP file</li>\n<li><strong>threads</strong>:  The <code>threads</code> parameter specifies the number of threads to use for downloading and\nprocessing the dbSNP files, defaults to 1</li>\n<li><strong>memory</strong>:  The <code>memory</code> parameter specifies the amount of max memory (in Gb) to use for sorting.\ndefaults to 1</li>\n<li><strong>dbsnp_vcf</strong>:  A boolean flag indicating whether to generate a VCF file from the downloaded\ndbSNP data. If set to True, the function will generate a VCF file. If set to False, the function\nwill not generate a VCF file, defaults to False</li>\n<li><strong>dbsnpparquet</strong>:  A boolean flag indicating whether to generate a Parquet file from the\ndownloaded dbSNP data. If set to True, a Parquet file will be generated; if set to False, no Parquet\nfile will be generated, defaults to False</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">assemblies</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">dbsnp_folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/Users/lebechea/howard/databases/exomiser/dbsnp&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">dbsnp_releases</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;b156&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">dbsnp_release_default</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dbsnp_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://ftp.ncbi.nih.gov/snp/archive&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">dbsnp_url_files</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dbsnp_url_files_prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;GCF_000001405&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">dbsnp_assemblies_map</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;hg19&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;25&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;hg38&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;40&#39;</span><span class=\"p\">}</span>,</span><span class=\"param\">\t<span class=\"n\">genomes_folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/Users/lebechea/howard/databases/genomes/current&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">memory</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">dbsnp_vcf</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">dbsnp_parquet</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">dbsnp_parquet_explode_infos</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.databases.databases_download_hgmd": {"fullname": "howard.functions.databases.databases_download_hgmd", "modulename": "howard.functions.databases", "qualname": "databases_download_hgmd", "kind": "function", "doc": "<p>The <code>databases_download_hgmd</code> function converts an HGMD database file into VCF, Parquet, and TSV\nformats.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>assemblies</strong>:  A list of assemblies for which the HGMD database should be downloaded and\nconverted. Only one assembly can be specified</li>\n<li><strong>hgmd_file</strong>:  The <code>hgmd_file</code> parameter is a string that represents the path to the HGMD\ndatabase file in VCF format. This file contains the variants and their associated information</li>\n<li><strong>hgmd_folder</strong>:  The <code>hgmd_folder</code> parameter is a string that represents the path to the folder\nwhere the HGMD database files will be stored. If no value is provided, it will use the\n<code>DEFAULT_ANNOTATIONS_FOLDER</code> constant as the default value</li>\n<li><strong>output_basename</strong>:  The <code>output_basename</code> parameter is a string that specifies the base name for\nthe output files. If not provided, it will be set as the base name of the input HGMD file without\nthe assembly information</li>\n<li><strong>threads</strong>:  The <code>threads</code> parameter specifies the number of threads to use for processing the\nHGMD database. It determines the level of parallelism and can help speed up the conversion process</li>\n<li><strong>memory</strong>:  The <code>memory</code> parameter specifies the amount of max memory (in Gb) to use for sorting.\ndefaults to 1</li>\n<li><strong>genomes_folder</strong>:  The <code>genomes_folder</code> parameter is a string that specifies the folder where\nthe genome files are located. If this parameter is not provided, it will default to a constant value\n<code>DEFAULT_GENOME_FOLDER</code></li>\n<li><strong>to_parquet</strong>:  The <code>to_parquet</code> parameter is a boolean value that specifies whether the HGMD\ndatabase should be converted to the Parquet format or not. If set to <code>True</code>, the database will be\nconverted to Parquet format. If set to <code>False</code>, the conversion will be skipped, defaults to True</li>\n<li><strong>to_tsv</strong>:  The <code>to_tsv</code> parameter is a boolean value that specifies whether the HGMD database\nshould be converted to TSV format or not. If set to <code>True</code>, the function will generate a TSV file\nfrom the HGMD database. If set to <code>False</code>, the TSV conversion will be, defaults to True</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a boolean value indicating whether the HGMD database conversion was successful or not.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">assemblies</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">hgmd_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">hgmd_folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/Users/lebechea/howard/databases/annotations/current&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">output_basename</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">memory</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">genomes_folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">to_parquet</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">to_tsv</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "howard.functions.from_annovar": {"fullname": "howard.functions.from_annovar", "modulename": "howard.functions.from_annovar", "kind": "module", "doc": "<p></p>\n"}, "howard.functions.from_annovar.TYPES": {"fullname": "howard.functions.from_annovar.TYPES", "modulename": "howard.functions.from_annovar", "qualname": "TYPES", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;int&#x27;: &#x27;Integer&#x27;, &#x27;int64&#x27;: &#x27;Integer&#x27;, &#x27;float&#x27;: &#x27;Float&#x27;, &#x27;float64&#x27;: &#x27;Float&#x27;, &#x27;object&#x27;: &#x27;String&#x27;}"}, "howard.functions.from_annovar.from_annovar": {"fullname": "howard.functions.from_annovar.from_annovar", "modulename": "howard.functions.from_annovar", "qualname": "from_annovar", "kind": "function", "doc": "<p>This function converts an Annovar database to a VCF and Parquet format.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>args</strong>:  <code>args</code> is an object with several attributes representing the input parameters for the\nfunction. These attributes include:</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;argparse&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;/usr/local/Caskroom/miniconda/base/envs/howard_devel/lib/python3.10/argparse.py&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.functions.from_annovar.annovar_to_vcf": {"fullname": "howard.functions.from_annovar.annovar_to_vcf", "modulename": "howard.functions.from_annovar", "qualname": "annovar_to_vcf", "kind": "function", "doc": "<p>This function converts an ANNOVAR file to a VCF file and optionally to a Parquet file, with various\noptions for annotations, headers, databases, and memory usage.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_file</strong>:  The path to the input file in ANNOVAR format that needs to be converted to VCF\nformat</li>\n<li><strong>output_file</strong>:  The name of the output VCF file that will be generated by the function</li>\n<li><strong>output_file_parquet</strong>:  output_file_parquet is an optional parameter that specifies the name of\nthe output file in Parquet format. If this parameter is not provided, the output will not be saved\nin Parquet format</li>\n<li><strong>annotations</strong>:  This parameter is used to specify the location of the ANNOVAR annotation\ndatabase files. If not provided, ANNOVAR will use the default location</li>\n<li><strong>header_file</strong>:  The path to a file containing the header information for the VCF output. This\ncan be used to customize the output format of the VCF file. If not provided, a default header will\nbe used</li>\n<li><strong>database_name</strong>:  The name of the ANNOVAR database used for annotation</li>\n<li><strong>bcftools</strong>:  The path to the bcftools executable, defaults to bcftools</li>\n<li><strong>genome</strong>:  The genome parameter specifies the reference genome file to be used for the\nconversion from annovar format to VCF format, defaults to hg19.fa</li>\n<li><strong>threads</strong>:  The number of threads to use for processing. This can speed up the process if your\ncomputer has multiple cores</li>\n<li><strong>maxmem</strong>:  The maximum amount of memory that can be used by the program. It is usually specified\nin units of bytes, kilobytes, megabytes, or gigabytes. For example, \"2G\" means 2 gigabytes of memory</li>\n<li><strong>remove_annotations</strong>:  <code>remove_annotations</code> is a list of annotations to be removed from the\noutput VCF file. These annotations will not be included in the final VCF file</li>\n<li><strong>reduce_memory</strong>:  A boolean parameter that determines whether to reduce memory usage during the\nconversion process. If set to True, the function will attempt to reduce memory usage by using a more\nmemory-efficient algorithm, but this may result in slower performance. If set to False, the function\nwill use a faster algorithm that may consume more, defaults to False</li>\n<li><strong>multivariant</strong>:  A boolean parameter that determines if input file contains multiple annotations\nfor each variant (position ref alt). If set to False, the function will attempt to reduce memory usage\na specific query without 'group by', for a more memory-efficient algorithm. If set to True, the function\nwill use a query using 'group by', which may consume more memory. I set to None, the function will\nauto-detemine the parameter value with a sample of variants. Defaults to None (auto)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">output_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">output_file_parquet</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">annotations</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">header_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">database_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">bcftools</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;bcftools&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">genome</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;hg19.fa&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">maxmem</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">remove_annotations</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">reduce_memory</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">multi_variant</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.functions.from_annovar.parquet_info_explode": {"fullname": "howard.functions.from_annovar.parquet_info_explode", "modulename": "howard.functions.from_annovar", "qualname": "parquet_info_explode", "kind": "function", "doc": "<p>This function takes a parquet file, splits it by chromosome, explodes the INFO column, and then\nmerges the exploded files back together.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_file</strong>:  The path to the input file, which can be either a TSV or VCF file</li>\n<li><strong>output_file</strong>:  The name of the output file in Parquet format after exploding the input file</li>\n<li><strong>threads</strong>:  The number of threads to use for processing the parquet file, defaults to None (all)</li>\n<li><strong>memory</strong>:  The among of memory to use for processing the parquet file, defaults to None (all)</li>\n<li><strong>reduce_memory</strong>:  The <code>reduce_memory</code> parameter is a boolean flag that determines whether or not\nto use memory reduction techniques during the execution of the function. If set to <code>True</code>, the\nfunction will attempt to reduce memory usage during the execution, which may result in slower\nperformance but lower memory usage. If set to `, defaults to False</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">output_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">memory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">reduce_memory</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.functions.from_annovar.tsv_to_parquet": {"fullname": "howard.functions.from_annovar.tsv_to_parquet", "modulename": "howard.functions.from_annovar", "qualname": "tsv_to_parquet", "kind": "function", "doc": "<p>The function converts a TSV file to a Parquet file with customizable options.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tsv</strong>:  The path to the TSV file that needs to be converted to Parquet format</li>\n<li><strong>parquet</strong>:  <code>parquet</code> is the file path and name of the output Parquet file that will be created\nby the function</li>\n<li><strong>delim</strong>:  The delimiter used in the TSV file to separate columns. If not specified, the default\ndelimiter (tab) will be used</li>\n<li><strong>columns</strong>:  The <code>columns</code> parameter is a dictionary that maps column names to their data types.\nIt is used to specify the schema of the resulting Parquet file. For example, if the input TSV file\nhas columns \"name\", \"age\", and \"salary\", and we want \"name\" to be</li>\n<li><strong>quote</strong>:  The <code>quote</code> parameter is an optional parameter that specifies the character used to\nquote fields in the TSV file. If not specified, the default quote character is double quotes (\")</li>\n<li><strong>nullstr</strong>:  The <code>nullstr</code> parameter is used to specify the string that represents null values in\nthe input TSV file. This parameter is used to correctly interpret and convert null values in the TSV\nfile to null values in the resulting Parquet file. For example, if the null value in the TSV</li>\n<li><strong>skip</strong>:  The <code>skip</code> parameter is an optional integer parameter that specifies the number of rows\nto skip at the beginning of the TSV file. This is useful if the TSV file has a header row that\nshould not be included in the resulting Parquet file. If <code>skip</code> is not specified, no</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">tsv</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">parquet</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">delim</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">quote</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">nullstr</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">skip</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.functions.from_extann": {"fullname": "howard.functions.from_extann", "modulename": "howard.functions.from_extann", "kind": "module", "doc": "<p></p>\n"}, "howard.functions.from_extann.create_metaheader": {"fullname": "howard.functions.from_extann.create_metaheader", "modulename": "howard.functions.from_extann", "qualname": "create_metaheader", "kind": "function", "doc": "<p>From extann file in dataframe, create metaheader of pseudo bed file\ninput: path of input extann\nconfig: dict\nextra_cols: list of column from refgene to keep</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df_extann</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"nb\">input</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">extra_cols</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.from_extann.add_default_metaheader": {"fullname": "howard.functions.from_extann.add_default_metaheader", "modulename": "howard.functions.from_extann", "qualname": "add_default_metaheader", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fields</span>, </span><span class=\"param\"><span class=\"nb\">id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.from_extann.read_json": {"fullname": "howard.functions.from_extann.read_json", "modulename": "howard.functions.from_extann", "qualname": "read_json", "kind": "function", "doc": "<p>From json file to python dict</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "howard.functions.from_extann.read_refgene": {"fullname": "howard.functions.from_extann.read_refgene", "modulename": "howard.functions.from_extann", "qualname": "read_refgene", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">refgene</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, "howard.functions.from_extann.metaheader_rows": {"fullname": "howard.functions.from_extann.metaheader_rows", "modulename": "howard.functions.from_extann", "qualname": "metaheader_rows", "kind": "function", "doc": "<h2 id=\"infoidstrandnumber1typestringdescriptiongene-strand\">INFO=<ID=STRAND,Number=1,Type=String,Description=\"Gene strand\"></h2>\n\n<p>fields: INFO, FORMAT....\nnumber: 0, 1, ., ...\ntype: String, Float, ....\ndescription: descprition of the field\nconf <a href=\"https://samtools.github.io/hts-specs/VCFv4.4.pdf\">https://samtools.github.io/hts-specs/VCFv4.4.pdf</a></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fields</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.from_extann.replace_values": {"fullname": "howard.functions.from_extann.replace_values", "modulename": "howard.functions.from_extann", "qualname": "replace_values", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.from_extann.write_extann": {"fullname": "howard.functions.from_extann.write_extann", "modulename": "howard.functions.from_extann", "qualname": "write_extann", "kind": "function", "doc": "<p>Write ExtAnn into a bed like file and his hdr mate</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">param</span>,</span><span class=\"param\">\t<span class=\"n\">header</span>,</span><span class=\"param\">\t<span class=\"n\">output</span>,</span><span class=\"param\">\t<span class=\"n\">df_extann</span>,</span><span class=\"param\">\t<span class=\"n\">df_refgene</span>,</span><span class=\"param\">\t<span class=\"n\">extra_cols</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">df_transcript</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.from_extann.extann_to_info": {"fullname": "howard.functions.from_extann.extann_to_info", "modulename": "howard.functions.from_extann", "qualname": "extann_to_info", "kind": "function", "doc": "<p>from pandas series (row of dataframe) create the info field of the vcf from extann data per gene</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">record</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.from_extann.get_longest_transcript": {"fullname": "howard.functions.from_extann.get_longest_transcript", "modulename": "howard.functions.from_extann", "qualname": "get_longest_transcript", "kind": "function", "doc": "<p>From pandas dataframe containing one gene and many transcript and coordinate return the longest </p>\n\n<p>if there are many same size transcript keep the MANE</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">extra_col</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "howard.functions.from_extann.get_all_transcript": {"fullname": "howard.functions.from_extann.get_all_transcript", "modulename": "howard.functions.from_extann", "qualname": "get_all_transcript", "kind": "function", "doc": "<p>Get all from trasncript from refgene matching gene name</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">match</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">extra_col</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "howard.functions.from_extann.get_chosen_transcript": {"fullname": "howard.functions.from_extann.get_chosen_transcript", "modulename": "howard.functions.from_extann", "qualname": "get_chosen_transcript", "kind": "function", "doc": "<p>From a txt / tsv file with gene and transcript, it will keep only provided transcript for this gene, if gene does not match it will take the longest</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">match</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">df_transcript</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">extra_col</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.from_extann.get_gene_coordinate": {"fullname": "howard.functions.from_extann.get_gene_coordinate", "modulename": "howard.functions.from_extann", "qualname": "get_gene_coordinate", "kind": "function", "doc": "<p>From pandas dataframe containing refgene file, get chr start stop from each gene present in extann\ndo the same process for each gene/transcript it will lead to duplicate\ndf_refgene: refgene dataframe\ngene_row: pandas series of extann row\nlog</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df_refgene</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">gene_row</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>,</span><span class=\"param\">\t<span class=\"n\">extra_col</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">df_transcript</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "howard.functions.from_extann.from_extann": {"fullname": "howard.functions.from_extann.from_extann", "modulename": "howard.functions.from_extann", "qualname": "from_extann", "kind": "function", "doc": "<p>This function converts an txt or tsv files containing genes-bases information</p>\n\n<p>From a \"genes\" columns which contains genes symbol it will match gene coordinates in refgene database and create a bed-like output with vcf header</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>args</strong>:  <code>args</code> is an object with several attributes representing the input parameters for the\nfunction. These attributes include:</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;argparse&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;/usr/local/Caskroom/miniconda/base/envs/howard_devel/lib/python3.10/argparse.py&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.functions.plugins": {"fullname": "howard.functions.plugins", "modulename": "howard.functions.plugins", "kind": "module", "doc": "<p></p>\n"}, "howard.functions.plugins.plugins_infos": {"fullname": "howard.functions.plugins.plugins_infos", "modulename": "howard.functions.plugins", "qualname": "plugins_infos", "kind": "function", "doc": "<p>The <code>plugins_infos</code> function loads Python plugins from a specified directory and returns a\ndictionary mapping plugin names to their respective modules.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>plugins_dir</strong>:  The <code>plugins_dir</code> parameter in the <code>plugins_infos</code> function is a string that\nrepresents the directory where the plugins are located. This function loads Python plugins from the\nspecified directory and returns a dictionary containing the loaded plugins</li>\n<li><strong>subfolder_plugins</strong>:  The <code>subfolder_plugins</code> parameter in the <code>plugins_infos</code> function is a\nstring that represents the subfolder within the <code>plugins_dir</code> where the plugins are located. By\ndefault, the value of <code>subfolder_plugins</code> is set to \"plugins\". This parameter is used to specify the\nsubfolder, defaults to plugins</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A dictionary containing information about the loaded plugins is being returned. Each key in\n  the dictionary represents the name of a plugin, and the corresponding value is a dictionary\n  containing the attributes and functions defined in that plugin.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">plugins_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">subfolder_plugins</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;plugins&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "howard.functions.plugins.plugins_list": {"fullname": "howard.functions.plugins.plugins_list", "modulename": "howard.functions.plugins", "qualname": "plugins_list", "kind": "function", "doc": "<p>The <code>plugins_list</code> function loads plugin information from a specified directory and determines which\nplugins are enabled based on a dictionary of plugin data.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>plugins</strong>:  The <code>plugins</code> parameter is a dictionary containing information about various\nplugins. Each key in the dictionary represents the name of a plugin, and the corresponding value is\na dictionary containing data about that plugin</li>\n<li><strong>plugins_dir</strong>:  The <code>plugins_dir</code> parameter is a string that represents the directory where the\nplugins are located. This directory is used by the <code>list_plugins</code> function to locate the plugins and\ngather information about them</li>\n<li><strong>subfolder_plugins</strong>:  The <code>subfolder_plugins</code> parameter in the <code>plugins_list</code> function is a\nstring that represents the subfolder within the <code>plugins_dir</code> where the plugins are located. By\ndefault, the value of <code>subfolder_plugins</code> is set to \"plugins\". This parameter is used to specify the\nsubfolder, defaults to plugins</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>plugins_list</code> returns a dictionary <code>plugin_info</code> containing information about\n  each plugin specified in the <code>plugins</code> parameter. The information includes whether the plugin is\n  enabled (based on whether it is in the list of enabled plugins obtained from the specified\n  directory), as well as any additional data provided for each plugin in the <code>plugins</code> dictionary.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">plugins</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">plugins_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">subfolder_plugins</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;plugins&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "howard.functions.plugins.plugins_to_load": {"fullname": "howard.functions.plugins.plugins_to_load", "modulename": "howard.functions.plugins", "qualname": "plugins_to_load", "kind": "function", "doc": "<p>The <code>plugins_to_load</code> function filters a dictionary of plugins based on their \"enabled\" and\n\"__enabled__\" keys.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>plugins_list_dict</strong>:  The <code>plugins_list_dict</code> parameter is a dictionary containing information\nabout various plugins. Each key in the dictionary represents the name of a plugin, and the\ncorresponding value is another dictionary with plugin information. The plugin information dictionary\nmay contain keys such as \"enabled\" and \"__enabled__\" to indicate whether the</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>plugins_to_load</code> returns a dictionary containing plugins that are enabled\n  based on the input <code>plugins_list_dict</code>. The plugins are selected based on the values of the\n  \"enabled\" and \"__enabled__\" keys in the nested dictionaries within the input dictionary.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">plugins_list_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "howard.functions.utils": {"fullname": "howard.functions.utils", "modulename": "howard.functions.utils", "kind": "module", "doc": "<p>Helper functions.</p>\n"}, "howard.functions.utils.read_refgene": {"fullname": "howard.functions.utils.read_refgene", "modulename": "howard.functions.utils", "qualname": "read_refgene", "kind": "function", "doc": "<p>The function \"read_refgene\" reads a genePred file with an extra column at the front and returns the\ngenePred data.</p>\n\n<p>refGene = genePred with extra column at front (and ignored ones after)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>infile</strong>:  The input file containing the refGene data</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the result of calling the function <code>read_genepred</code> with the argument <code>infile</code> and the\n  keyword argument <code>skip_first_column</code> set to <code>True</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">infile</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.utils.read_genepred": {"fullname": "howard.functions.utils.read_genepred", "modulename": "howard.functions.utils", "qualname": "read_genepred", "kind": "function", "doc": "<p>The function <code>read_genepred</code> reads a file in GenePred extension format and yields a dictionary for\neach line, containing information about a gene.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>infile</strong>:  The <code>infile</code> parameter is the input file object that contains the gene annotation\ndata in the GenePred format. It is used to read the lines of the file and extract the necessary\ninformation</li>\n<li><strong>skip_first_column</strong>:  The <code>skip_first_column</code> parameter is a boolean flag that determines\nwhether to skip the first column of the input file when parsing the genePred format. By default, it\nis set to <code>False</code>, which means the first column (usually the transcript ID) will be included in the\noutput. If you, defaults to False (optional)</li>\n</ul>\n\n<p>GenePred extension format:\n<a href=\"http://genome.ucsc.edu/FAQ/FAQformat.html#GenePredExt\">http://genome.ucsc.edu/FAQ/FAQformat.html#GenePredExt</a></p>\n\n<p>Column definitions:</p>\n\n<ol start=\"0\">\n<li>string name;                 \"Name of gene (usually transcript_id from GTF)\"</li>\n<li>string chrom;                \"Chromosome name\"</li>\n<li>char[1] strand;              \"+ or - for strand\"</li>\n<li>uint txStart;                \"Transcription start position\"</li>\n<li>uint txEnd;                  \"Transcription end position\"</li>\n<li>uint cdsStart;               \"Coding region start\"</li>\n<li>uint cdsEnd;                 \"Coding region end\"</li>\n<li>uint exonCount;              \"Number of exons\"</li>\n<li>uint[exonCount] exonStarts;  \"Exon start positions\"</li>\n<li>uint[exonCount] exonEnds;    \"Exon end positions\"</li>\n<li>uint id;                    \"Unique identifier\"</li>\n<li>string name2;               \"Alternate name (e.g. gene_id from GTF)\"</li>\n</ol>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">infile</span>, </span><span class=\"param\"><span class=\"n\">skip_first_column</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.utils.make_transcript": {"fullname": "howard.functions.utils.make_transcript", "modulename": "howard.functions.utils", "qualname": "make_transcript", "kind": "function", "doc": "<p>The function <code>make_transcript</code> takes a JSON object representing a transcript and creates a\nTranscript object from it.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>transcript_json</strong>:  The <code>transcript_json</code> parameter is a JSON object that contains information\nabout a transcript. It should have the following keys:</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a Transcript object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">transcript_json</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"fullname": "howard.functions.utils.json_perfect_exons_to_cdna_match", "modulename": "howard.functions.utils", "qualname": "json_perfect_exons_to_cdna_match", "kind": "function", "doc": "<p>The function <code>json_perfect_exons_to_cdna_match</code> converts a list of ordered exons into a list of cDNA\nmatches, where each match consists of the start and end positions of the exon, the start and end\npositions of the corresponding cDNA sequence, and an optional gap list.</p>\n\n<p>Perfectly matched exons are basically a no-gap case of cDNA match\nsingle - use a single cDNA match (deletions for introns) - this is currently broken do not use</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ordered_exons</strong>:  A list of tuples representing the start and end positions of exons in a gene\nsequence. The exons should be ordered based on their position in the gene</li>\n<li><strong>single</strong>:  The <code>single</code> parameter is a boolean flag that determines whether to use a single cDNA\nmatch or not. If <code>single</code> is set to <code>True</code>, the function will create a single cDNA match by\nconsidering deletions for introns. If <code>single</code> is set to <code>False</code> (, defaults to False (optional)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a list of lists, where each inner list represents a cDNA match. Each inner list contains\n  the start and end positions of the exon, the start and end positions of the corresponding cDNA\n  match, and a string representing any gaps (intron lengths) between exons.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ordered_exons</span>, </span><span class=\"param\"><span class=\"n\">single</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.utils.read_transcripts": {"fullname": "howard.functions.utils.read_transcripts", "modulename": "howard.functions.utils", "qualname": "read_transcripts", "kind": "function", "doc": "<p>The function <code>read_transcripts</code> reads all transcripts in a RefGene file and returns them as a\ndictionary.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>refgene_file</strong>:  The <code>refgene_file</code> parameter is the file path to a RefGene file. This file\ncontains information about gene transcripts, such as their names, full names, and other relevant\ndetails. The <code>read_transcripts</code> function reads this file and returns a dictionary of transcripts,\nwhere the keys are the</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a dictionary of transcripts.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">refgene_file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.utils.get_genomic_sequence": {"fullname": "howard.functions.utils.get_genomic_sequence", "modulename": "howard.functions.utils", "qualname": "get_genomic_sequence", "kind": "function", "doc": "<p>The function <code>get_genomic_sequence</code> returns a sequence for a given genomic region.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>genome</strong>:  A dictionary containing genomic sequences for different chromosomes. The keys of the\ndictionary are chromosome names (e.g., 'chr1', 'chr2', etc.), and the values are the corresponding\ngenomic sequences</li>\n<li><strong>chrom</strong>:  The chrom parameter represents the chromosome or genomic region from which you want to\nextract the sequence</li>\n<li><strong>start</strong>:  The start parameter is the 1-based coordinate of the beginning of the genomic region</li>\n<li><strong>end</strong>:  The <code>end</code> parameter is the end coordinate of the genomic region. It is a 1-based,\nend-inclusive coordinate, meaning that the base at the <code>end</code> position is included in the returned\nsequence</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a sequence for the specified genomic region.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">genome</span>, </span><span class=\"param\"><span class=\"n\">chrom</span>, </span><span class=\"param\"><span class=\"n\">start</span>, </span><span class=\"param\"><span class=\"n\">end</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.utils.get_vcf_allele": {"fullname": "howard.functions.utils.get_vcf_allele", "modulename": "howard.functions.utils", "qualname": "get_vcf_allele", "kind": "function", "doc": "<p>The function <code>get_vcf_allele</code> takes a HGVS name, a genome, and an optional transcript, and returns a\nVCF-style allele.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>hgvs</strong>:  The <code>hgvs</code> parameter is an object of type <code>HGVSName</code>. It likely contains information\nabout a genetic variant, such as the chromosome, start and end positions, and the type of mutation\n(e.g., substitution, deletion, insertion, etc.)</li>\n<li><strong>genome</strong>:  The <code>genome</code> parameter is the genomic sequence from which the allele will be\nextracted. It is a string representing the entire genome sequence</li>\n<li><strong>transcript</strong>:  The <code>transcript</code> parameter is an optional argument that represents a transcript.\nIt is used to retrieve the VCF-style allele from the given HGVSName and genome. If a transcript is\nprovided, the function will use it to get the VCF coordinates and the reference and alternate\nalleles. If no</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the chromosome, start position, end position, reference allele, and alternate allele.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">hgvs</span>, </span><span class=\"param\"><span class=\"n\">genome</span>, </span><span class=\"param\"><span class=\"n\">transcript</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.utils.get_alt_from_sequence": {"fullname": "howard.functions.utils.get_alt_from_sequence", "modulename": "howard.functions.utils", "qualname": "get_alt_from_sequence", "kind": "function", "doc": "<p>The function \"get_alt_from_sequence\" returns a genomic sequence from a given HGVS notation, genome,\nand transcript.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>hgvs</strong>:  The <code>hgvs</code> parameter is an object that provides methods for working with Human Genome\nVariation Society (HGVS) nomenclature. It likely has a method called <code>get_raw_coords()</code> that takes a\ntranscript as input and returns the chromosome, start position, and end position of the\ncorresponding genomic sequence</li>\n<li><strong>genome</strong>:  The genome parameter refers to the genomic sequence from which the alternative allele\nwill be extracted</li>\n<li><strong>transcript</strong>:  The transcript parameter is a string that represents the transcript ID or name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the genomic sequence from the specified region in the genome.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">hgvs</span>, </span><span class=\"param\"><span class=\"n\">genome</span>, </span><span class=\"param\"><span class=\"n\">transcript</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.utils.matches_ref_allele": {"fullname": "howard.functions.utils.matches_ref_allele", "modulename": "howard.functions.utils", "qualname": "matches_ref_allele", "kind": "function", "doc": "<p>The function <code>matches_ref_allele</code> checks if the reference allele in a given HGVS notation matches\nthe corresponding genomic sequence.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>hgvs</strong>:  The <code>hgvs</code> parameter is an object that represents a variant in the Human Genome\nVariation Society (HGVS) format. It contains information about the variant's reference allele,\nalternative allele, and genomic coordinates</li>\n<li><strong>genome</strong>:  The <code>genome</code> parameter is the genomic sequence from which the reference allele is\nextracted</li>\n<li><strong>transcript</strong>:  The transcript parameter is an object that represents a transcript. It has a\nproperty called tx_position which provides information about the position of the transcript on the\ngenome, including whether it is on the forward or reverse strand</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if the reference allele matches the genomic sequence, and False otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">hgvs</span>, </span><span class=\"param\"><span class=\"n\">genome</span>, </span><span class=\"param\"><span class=\"n\">transcript</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.utils.hgvs_justify_dup": {"fullname": "howard.functions.utils.hgvs_justify_dup", "modulename": "howard.functions.utils", "qualname": "hgvs_justify_dup", "kind": "function", "doc": "<p>The function <code>hgvs_justify_dup</code> determines if an allele is a duplication and justifies it by\nreturning the duplicated region if applicable.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>chrom</strong>:  The chromosome name where the allele is located</li>\n<li><strong>offset</strong>:  The offset parameter is the 1-index genomic coordinate, which represents the position\nof the variant on the chromosome</li>\n<li><strong>ref</strong>:  The \"ref\" parameter represents the reference allele, which is the allele that is present\nin the reference genome at the given genomic coordinate</li>\n<li><strong>alt</strong>:  The <code>alt</code> parameter represents the alternate allele, which is the allele that differs\nfrom the reference allele at a specific genomic position</li>\n<li><strong>genome</strong>:  The <code>genome</code> parameter is a pygr compatible genome object. It is an object that\nrepresents a reference genome and provides methods to access genomic sequences</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a tuple containing the chromosome name, offset, reference allele, alternate allele, and\n  mutation type.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">chrom</span>, </span><span class=\"param\"><span class=\"n\">offset</span>, </span><span class=\"param\"><span class=\"n\">ref</span>, </span><span class=\"param\"><span class=\"n\">alt</span>, </span><span class=\"param\"><span class=\"n\">genome</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.utils.hgvs_justify_indel": {"fullname": "howard.functions.utils.hgvs_justify_indel", "modulename": "howard.functions.utils", "qualname": "hgvs_justify_indel", "kind": "function", "doc": "<p>The function <code>hgvs_justify_indel</code> justifies an indel (insertion or deletion) according to the HGVS\nstandard by determining the genomic sequence around the lesion, identifying the actual lesion\nsequence, and 3' justifying the offset.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>chrom</strong>:  The chromosome where the indel is located</li>\n<li><strong>offset</strong>:  The offset parameter represents the position of the indel (insertion or deletion)\nwithin the chromosome or genomic sequence</li>\n<li><strong>ref</strong>:  The <code>ref</code> parameter represents the reference allele of the variant. It is a string that\ncontains the nucleotide sequence of the reference allele</li>\n<li><strong>alt</strong>:  The <code>alt</code> parameter in the <code>hgvs_justify_indel</code> function represents the alternate allele\nsequence for an indel variant. It is the sequence that replaces the reference allele sequence\n(<code>ref</code>) at the specified <code>offset</code> position on the <code>chrom</code> chromosome</li>\n<li><strong>strand</strong>:  The parameter \"strand\" represents the orientation of the DNA strand where the indel\nis located. It can have two possible values: \"+\" or \"-\". The \"+\" strand refers to the forward\nstrand, while the \"-\" strand refers to the reverse complement strand</li>\n<li><strong>genome</strong>:  The <code>genome</code> parameter is a dictionary that contains the genomic sequence for each\nchromosome. The keys of the dictionary are the chromosome names (e.g., \"chr1\", \"chr2\", etc.), and\nthe values are the corresponding genomic sequences</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the variables chrom, offset, ref, and alt.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">chrom</span>, </span><span class=\"param\"><span class=\"n\">offset</span>, </span><span class=\"param\"><span class=\"n\">ref</span>, </span><span class=\"param\"><span class=\"n\">alt</span>, </span><span class=\"param\"><span class=\"n\">strand</span>, </span><span class=\"param\"><span class=\"n\">genome</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.utils.hgvs_normalize_variant": {"fullname": "howard.functions.utils.hgvs_normalize_variant", "modulename": "howard.functions.utils", "qualname": "hgvs_normalize_variant", "kind": "function", "doc": "<p>The function <code>hgvs_normalize_variant</code> converts a variant in VCF-style to HGVS-style by adjusting the\noffset, reference and alternate alleles, and determining the mutation type.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>chrom</strong>:  The chromosome where the variant is located</li>\n<li><strong>offset</strong>:  The offset parameter represents the position of the variant within the chromosome. It\nis an integer value</li>\n<li><strong>ref</strong>:  The <code>ref</code> parameter represents the reference allele in a variant</li>\n<li><strong>alt</strong>:  The <code>alt</code> parameter represents the alternate allele in a variant. It is a string that\nrepresents the alternative nucleotide(s) or sequence(s) at a specific position in the genome</li>\n<li><strong>genome</strong>:  The <code>genome</code> parameter is the reference genome sequence. It is used to perform\ncertain operations on the variant, such as justifying indels and representing duplications</li>\n<li><strong>transcript</strong>:  The <code>transcript</code> parameter is an optional argument that represents the transcript\nor gene in which the variant occurs. It is used to determine the strand of the gene and to perform\ncertain operations on the variant. If no transcript is provided, the default value is <code>None</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the following values: chrom, offset, ref, alt, and mutation_type.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">chrom</span>, </span><span class=\"param\"><span class=\"n\">offset</span>, </span><span class=\"param\"><span class=\"n\">ref</span>, </span><span class=\"param\"><span class=\"n\">alt</span>, </span><span class=\"param\"><span class=\"n\">genome</span>, </span><span class=\"param\"><span class=\"n\">transcript</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.utils.parse_hgvs_name": {"fullname": "howard.functions.utils.parse_hgvs_name", "modulename": "howard.functions.utils", "qualname": "parse_hgvs_name", "kind": "function", "doc": "<p>The function <code>parse_hgvs_name</code> takes an HGVS name, a genome object, and optional parameters, and\nreturns the chromosome, start position, reference allele, and alternate allele of the variant\ndescribed by the HGVS name.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>hgvs_name</strong>:  The HGVS name to parse</li>\n<li><strong>genome</strong>:  A pygr compatible genome object. This object represents the reference genome and\nprovides methods to access genomic sequences and annotations</li>\n<li><strong>transcript</strong>:  The transcript parameter is an optional argument that represents the transcript\ncorresponding to the HGVS name. It is used to determine the reference sequence for the variant. If\nnot provided, the get_transcript function is used to retrieve the transcript based on the HGVS name.\nIf neither transcript nor get_transcript is</li>\n<li><strong>get_transcript</strong>:  A function that takes a transcript name as input and returns the\ncorresponding transcript object. If not provided, the default behavior is to return None</li>\n<li><strong>flank_length</strong>:  The <code>flank_length</code> parameter is an integer that specifies the length of the\nflanking sequence to include when normalizing the variant allele. This is used in the\n<code>normalize_variant</code> function to determine the reference allele and normalize the variant allele\naccording to the VCF standard, defaults to 30 (optional)</li>\n<li><strong>normalize</strong>:  A boolean parameter that determines whether the allele should be normalized\naccording to the VCF standard. If set to True, the allele will be normalized; if set to False, the\nallele will not be normalized, defaults to True (optional)</li>\n<li><strong>lazy</strong>:  The <code>lazy</code> parameter is a boolean flag that determines whether or not to discard\nversion information from the incoming transcript or gene. If <code>lazy</code> is set to <code>True</code>, the version\ninformation will be discarded. If <code>lazy</code> is set to <code>False</code>, the version information will be included\nin the, defaults to False (optional)</li>\n<li><strong>indels_start_with_same_base</strong>:  The parameter \"indels_start_with_same_base\" is a boolean flag\nthat determines whether or not to strip the common prefix from indels when normalizing alleles. If\nset to True, the common prefix will not be stripped, defaults to True (optional)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>parse_hgvs_name</code> returns a tuple containing the chromosome, start position,\n  reference allele, and alternate allele of the parsed HGVS name.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">hgvs_name</span>,</span><span class=\"param\">\t<span class=\"n\">genome</span>,</span><span class=\"param\">\t<span class=\"n\">transcript</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">get_transcript</span><span class=\"o\">=&lt;</span><span class=\"n\">function</span> <span class=\"o\">&lt;</span><span class=\"k\">lambda</span><span class=\"o\">&gt;&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">flank_length</span><span class=\"o\">=</span><span class=\"mi\">30</span>,</span><span class=\"param\">\t<span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">lazy</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">indels_start_with_same_base</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.utils.cdna_to_protein": {"fullname": "howard.functions.utils.cdna_to_protein", "modulename": "howard.functions.utils", "qualname": "cdna_to_protein", "kind": "function", "doc": "<p>The function <code>cdna_to_protein</code> takes in various parameters related to a genetic mutation and returns\nan updated HGVS object with additional protein information.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>hgvs</strong>:  The parameter <code>hgvs</code> is an object that represents a variant in the Human Genome\nVariation Society (HGVS) format. It contains information about the variant, such as the cDNA start\nand end positions</li>\n<li><strong>offset</strong>:  The offset is a numerical value that represents the starting position of the genomic\nsequence in the reference genome. It is used to calculate the genomic position of the mutation</li>\n<li><strong>genome</strong>:  The <code>genome</code> parameter is a dictionary that represents the genomic sequence. It\ncontains the chromosome as the key and the corresponding DNA sequence as the value</li>\n<li><strong>chrom</strong>:  The <code>chrom</code> parameter represents the chromosome on which the mutation occurs</li>\n<li><strong>transcript</strong>:  The <code>transcript</code> parameter is a string that represents the transcript ID or name.\nIt is used to identify the specific transcript in the genome</li>\n<li><strong>ref</strong>:  The parameter \"ref\" is a string that represents the reference nucleotide sequence. It is\nused to determine the codons in the DNA sequence</li>\n<li><strong>alt</strong>:  The <code>alt</code> parameter in the <code>cdna_to_protein</code> function is a string that represents the\nalternate nucleotide sequence for a mutation</li>\n<li><strong>mutation_type</strong>:  The <code>mutation_type</code> parameter is a string that represents the type of\nmutation. It can have the following values:</li>\n<li><strong>codon_type</strong>:  The <code>codon_type</code> parameter is a string that specifies the type of codon\ntranslation to be used. It can have one of the following values:, defaults to 3</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the updated <code>hgvs</code> object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">hgvs</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span>,</span><span class=\"param\">\t<span class=\"n\">genome</span>,</span><span class=\"param\">\t<span class=\"n\">chrom</span>,</span><span class=\"param\">\t<span class=\"n\">transcript</span>,</span><span class=\"param\">\t<span class=\"n\">ref</span>,</span><span class=\"param\">\t<span class=\"n\">alt</span>,</span><span class=\"param\">\t<span class=\"n\">mutation_type</span>,</span><span class=\"param\">\t<span class=\"n\">codon_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;3&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.utils.variant_to_hgvs_name": {"fullname": "howard.functions.utils.variant_to_hgvs_name", "modulename": "howard.functions.utils", "qualname": "variant_to_hgvs_name", "kind": "function", "doc": "<p>The function <code>variant_to_hgvs_name</code> takes in genomic coordinates, alleles, and other parameters, and\nreturns a HGVS-style name for the variant.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>chrom</strong>:  The chromosome name where the variant is located</li>\n<li><strong>offset</strong>:  The <code>offset</code> parameter represents the genomic offset of the allele. It is the\nposition of the variant on the chromosome</li>\n<li><strong>ref</strong>:  The reference allele at the given genomic coordinate</li>\n<li><strong>alt</strong>:  The <code>alt</code> parameter is the alternate allele. In genetics, a variant or mutation can\noccur at a specific position in the genome, and the <code>alt</code> allele represents the alternative\nnucleotide or sequence at that position compared to the reference genome</li>\n<li><strong>genome</strong>:  A pygr compatible genome object, which represents the reference genome sequence</li>\n<li><strong>transcript</strong>:  The <code>transcript</code> parameter is the transcript corresponding to the allele. It is\nused to determine the type of coordinates to use in the HGVS name (either genomic coordinates or\ncDNA coordinates). If the transcript is not available, the function will use genomic coordinates</li>\n<li><strong>transcript_protein</strong>:  The <code>transcript_protein</code> parameter is an optional argument that\nrepresents the protein sequence corresponding to the transcript. It is used to populate the\n<code>transcript_protein</code> attribute of the <code>HGVSName</code> object</li>\n<li><strong>exon</strong>:  The <code>exon</code> parameter is an optional argument that represents the exon number or\nidentifier associated with the variant. It is used to populate the <code>exon</code> attribute of the\n<code>HGVSName</code> object. If provided, it will be included in the final HGVS name generated by the function</li>\n<li><strong>max_allele_length</strong>:  The <code>max_allele_length</code> parameter is used to determine whether to\nrepresent the alleles as their actual sequence or as the length of the sequence. If the length of\nthe reference allele or alternate allele is greater than <code>max_allele_length</code>, then the length of the\nallele is used instead of the actual, defaults to 4 (optional)</li>\n<li><strong>use_counsyl</strong>:  A boolean flag indicating whether to use Counsyl-specific rules for single-base\nindels, defaults to False (optional)</li>\n<li><strong>codon_type</strong>:  The parameter <code>codon_type</code> is a string that specifies the type of codon numbering\nto be used in the HGVS name. It is used in the <code>cdna_to_protein</code> function to determine the type of\ncodon numbering to be used in the protein-level HGVS name. The, defaults to 3</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>an object of type HGVSName.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">chrom</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span>,</span><span class=\"param\">\t<span class=\"n\">ref</span>,</span><span class=\"param\">\t<span class=\"n\">alt</span>,</span><span class=\"param\">\t<span class=\"n\">genome</span>,</span><span class=\"param\">\t<span class=\"n\">transcript</span>,</span><span class=\"param\">\t<span class=\"n\">transcript_protein</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exon</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">max_allele_length</span><span class=\"o\">=</span><span class=\"mi\">4</span>,</span><span class=\"param\">\t<span class=\"n\">use_counsyl</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">codon_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;3&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.utils.format_hgvs_name": {"fullname": "howard.functions.utils.format_hgvs_name", "modulename": "howard.functions.utils", "qualname": "format_hgvs_name", "kind": "function", "doc": "<p>The <code>format_hgvs_name</code> function generates a HGVS name from a genomic coordinate.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>chrom</strong>:  The <code>chrom</code> parameter represents the chromosome name. It is a string that specifies\nthe chromosome on which the variant occurs</li>\n<li><strong>offset</strong>:  The <code>offset</code> parameter represents the genomic offset of the allele, which is the\nposition of the variant on the chromosome. It is used to generate the HGVS name based on the genomic\ncoordinate</li>\n<li><strong>ref</strong>:  The <code>ref</code> parameter represents the reference allele. In genetics, a variant or mutation\ncan occur at a specific position in the genome, resulting in a change from the reference allele to\nan alternate allele. The <code>ref</code> parameter specifies the sequence of the reference allele at that\nposition</li>\n<li><strong>alt</strong>:  The <code>alt</code> parameter represents the alternate allele. In genetics, a variant or mutation\ncan occur at a specific position in the genome, resulting in a change from the reference allele to\nan alternate allele. The <code>alt</code> parameter specifies the sequence of the alternate allele at that\nposition</li>\n<li><strong>genome</strong>:  A pygr compatible genome object, which is used to retrieve genomic sequences and\nannotations. It provides methods to access genomic information such as chromosome names, sequences,\nand gene annotations</li>\n<li><strong>transcript</strong>:  The <code>transcript</code> parameter is the transcript corresponding to the allele. It is\nused to generate the HGVS name based on the genomic coordinate</li>\n<li><strong>transcript_protein</strong>:  The <code>transcript_protein</code> parameter is an optional argument that\nrepresents the protein transcript corresponding to the cDNA transcript. It is used to generate the\nprotein HGVS name if it exists</li>\n<li><strong>exon</strong>:  The <code>exon</code> parameter is used to specify the exon number in the HGVS name. It is an\noptional parameter and is used to generate a more specific HGVS name when needed</li>\n<li><strong>use_prefix</strong>:  A boolean indicating whether to include a transcript/gene/chromosome prefix in\nthe HGVS name. If set to True, the prefix will be included; if set to False, the prefix will be\nexcluded, defaults to True (optional)</li>\n<li><strong>use_gene</strong>:  A boolean parameter that determines whether to include the gene name in the HGVS\nprefix. If set to True, the gene name will be included; if set to False, the gene name will be\nexcluded, defaults to True (optional)</li>\n<li><strong>use_protein</strong>:  A boolean parameter that determines whether to include protein HGVS notation in\nthe generated HGVS name. If set to True, the protein HGVS notation will be included if it exists. If\nset to False, only the genomic and transcript HGVS notation will be included, defaults to False\n(optional)</li>\n<li><strong>use_counsyl</strong>:  The <code>use_counsyl</code> parameter is a boolean parameter that determines whether to\nuse Counsyl-specific formatting for the HGVS name. If set to True, the HGVS name will be formatted\naccording to Counsyl's specific guidelines. If set to False, the HGVS name will be, defaults to\nFalse (optional)</li>\n<li><strong>max_allele_length</strong>:  The <code>max_allele_length</code> parameter is used to determine the maximum length\nof the allele. If the length of the allele is greater than the specified <code>max_allele_length</code>, then\nthe allele length will be used in the HGVS name instead of the actual allele sequence. By default,\nthe `, defaults to 4 (optional)</li>\n<li><strong>full_format</strong>:  A boolean parameter that determines whether to use the full HGVS format or not.\nIf set to True, the HGVS name will include the gene name, transcript name, exon number (if\nprovided), and the amino acid change (if protein information is available). If set to False, the\nHGVS, defaults to False (optional)</li>\n<li><strong>use_version</strong>:  A boolean parameter that determines whether to include the version number of the\ntranscript in the HGVS name. If set to True, the version number will be included; if set to False,\nthe version number will be excluded, defaults to False (optional)</li>\n<li><strong>codon_type</strong>:  The <code>codon_type</code> parameter is a string that specifies the type of codon numbering\nto be used in the HGVS name. It can have one of the following values:, defaults to 3</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a formatted HGVS name generated from a genomic coordinate.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">chrom</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span>,</span><span class=\"param\">\t<span class=\"n\">ref</span>,</span><span class=\"param\">\t<span class=\"n\">alt</span>,</span><span class=\"param\">\t<span class=\"n\">genome</span>,</span><span class=\"param\">\t<span class=\"n\">transcript</span>,</span><span class=\"param\">\t<span class=\"n\">transcript_protein</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exon</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">use_prefix</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">use_gene</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">use_protein</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">use_counsyl</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">max_allele_length</span><span class=\"o\">=</span><span class=\"mi\">4</span>,</span><span class=\"param\">\t<span class=\"n\">full_format</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">use_version</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">codon_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;3&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.functions.utils.create_refseq_table": {"fullname": "howard.functions.utils.create_refseq_table", "modulename": "howard.functions.utils", "qualname": "create_refseq_table", "kind": "function", "doc": "<p>The function <code>create_refseq_table</code> creates a table in a database with the specified name and\nstructure, either using a file or without a file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>conn</strong>:  The <code>conn</code> parameter is a connection object that represents a connection to a database.\nIt is used to execute SQL queries and interact with the database</li>\n<li><strong>refseq_table</strong>:  The <code>refseq_table</code> parameter is a string that specifies the name of the table\nthat will be created in the database to store the RefGene data, defaults to refseq</li>\n<li><strong>refseq_file</strong>:  The <code>refseq_file</code> parameter is a string that specifies the path to a file\ncontaining the data for the refGene table. If this parameter is provided, the function will create\nthe refGene table in the database using the data from the file. If this parameter is not provided,\nthe function will</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the name of the refseq table that was created or used.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">conn</span>, </span><span class=\"param\"><span class=\"n\">refseq_table</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;refseq&#39;</span>, </span><span class=\"param\"><span class=\"n\">refseq_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.utils.get_refseq_table": {"fullname": "howard.functions.utils.get_refseq_table", "modulename": "howard.functions.utils", "qualname": "get_refseq_table", "kind": "function", "doc": "<p>The function <code>get_refseq_table</code> checks if a table named <code>refseq</code> exists in a database, and if not,\ncreates it using the <code>create_refseq_table</code> function.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>conn</strong>:  The parameter <code>conn</code> is expected to be a connection object that allows you to interact\nwith a database. It could be an instance of a database connector class, such as <code>pymysql.connect()</code>\nfor MySQL or <code>psycopg2.connect()</code> for PostgreSQL</li>\n<li><strong>refseq_table</strong>:  The parameter \"refseq_table\" is a string that specifies the name of the table\nin the database where the refGene data will be stored. If this table already exists in the database,\nthe function will return the name of the existing table. If the table does not exist, the function\nwill create, defaults to refseq</li>\n<li><strong>refseq_file</strong>:  The <code>refseq_file</code> parameter is the name or path of the file that contains the\nrefGene data. This file is used to populate the refGene table in the database</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the name of the refseq_table.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">conn</span>, </span><span class=\"param\"><span class=\"n\">refseq_table</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;refseq&#39;</span>, </span><span class=\"param\"><span class=\"n\">refseq_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.functions.utils.get_transcript": {"fullname": "howard.functions.utils.get_transcript", "modulename": "howard.functions.utils", "qualname": "get_transcript", "kind": "function", "doc": "<p>The function <code>get_transcript</code> takes a dictionary of transcripts and a name as input, and returns the\ntranscript associated with that name.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>transcripts</strong>:  A dictionary containing transcripts as values, with names as keys</li>\n<li><strong>name</strong>:  The name parameter is a string that represents the name of the transcript that you want\nto retrieve from the transcripts dictionary</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the value associated with the given name key in the transcripts dictionary.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">transcripts</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">transcript_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">howard</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">transcript</span><span class=\"o\">.</span><span class=\"n\">Transcript</span>:</span></span>", "funcdef": "def"}, "howard.main": {"fullname": "howard.main", "modulename": "howard.main", "kind": "module", "doc": "<p></p>\n"}, "howard.main.msg_gui_disable": {"fullname": "howard.main.msg_gui_disable", "modulename": "howard.main", "qualname": "msg_gui_disable", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;HOWARD GUI disabled&#x27;"}, "howard.main.main_folder": {"fullname": "howard.main.main_folder", "modulename": "howard.main", "qualname": "main_folder", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/Users/lebechea/BIOINFO/git/HOWARD/howard&#x27;"}, "howard.main.main": {"fullname": "howard.main.main", "modulename": "howard.main", "qualname": "main", "kind": "function", "doc": "<p>It loads a VCF file in multiple format (VCF, parquet, DB), and process, query, export data</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects": {"fullname": "howard.objects", "modulename": "howard.objects", "kind": "module", "doc": "<p></p>\n"}, "howard.objects.cdna": {"fullname": "howard.objects.cdna", "modulename": "howard.objects.cdna", "kind": "module", "doc": "<p></p>\n"}, "howard.objects.cdna.CDNA_START_CODON": {"fullname": "howard.objects.cdna.CDNA_START_CODON", "modulename": "howard.objects.cdna", "qualname": "CDNA_START_CODON", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;cdna_start&#x27;"}, "howard.objects.cdna.CDNA_STOP_CODON": {"fullname": "howard.objects.cdna.CDNA_STOP_CODON", "modulename": "howard.objects.cdna", "qualname": "CDNA_STOP_CODON", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;cdna_stop&#x27;"}, "howard.objects.cdna.CDNACoord": {"fullname": "howard.objects.cdna.CDNACoord", "modulename": "howard.objects.cdna", "qualname": "CDNACoord", "kind": "class", "doc": "<p>A HGVS cDNA-based coordinate.</p>\n\n<p>A cDNA coordinate can take one of these forms:</p>\n\n<p>N = nucleotide N in protein coding sequence (e.g. 11A>G)</p>\n\n<p>-N = nucleotide N 5' of the ATG translation initiation codon (e.g. -4A>G)\n     NOTE: so located in the 5'UTR or 5' of the transcription initiation\n     site (upstream of the gene, incl. promoter)</p>\n\n<p>*N = nucleotide N 3' of the translation stop codon (e.g. *6A>G)\n     NOTE: so located in the 3'UTR or 3' of the polyA-addition site\n     (including downstream of the gene)</p>\n\n<p>N+M = nucleotide M in the intron after (3' of) position N in the coding DNA\n      reference sequence (e.g. 30+4A>G)</p>\n\n<p>N-M = nucleotide M in the intron before (5' of) position N in the coding\n      DNA reference sequence (e.g. 301-2A>G)</p>\n\n<p>-N+M / -N-M = nucleotide in an intron in the 5'UTR (e.g. -45+4A>G)</p>\n\n<p>*N+M / *N-M = nucleotide in an intron in the 3'UTR (e.g. *212-2A>G)</p>\n"}, "howard.objects.cdna.CDNACoord.__init__": {"fullname": "howard.objects.cdna.CDNACoord.__init__", "modulename": "howard.objects.cdna", "qualname": "CDNACoord.__init__", "kind": "function", "doc": "<p>coord: main coordinate along cDNA on the same strand as the transcript</p>\n\n<p>offset: an additional genomic offset from the main coordinate.  This\n        allows referencing non-coding (e.g. intronic) positions.\n        Offset is also interpreted on the coding strand.</p>\n\n<p>landmark: ('cdna_start', 'cdna_stop') indicating that 'coord'\n          is relative to one of these landmarks.</p>\n\n<p>string: a coordinate from an HGVS name.  If given coord, offset, and\n        landmark should not be specified.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">coord</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">landmark</span><span class=\"o\">=</span><span class=\"s1\">&#39;cdna_start&#39;</span>, </span><span class=\"param\"><span class=\"n\">string</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span>)</span>"}, "howard.objects.cdna.CDNACoord.parse": {"fullname": "howard.objects.cdna.CDNACoord.parse", "modulename": "howard.objects.cdna", "qualname": "CDNACoord.parse", "kind": "function", "doc": "<p>Parse a HGVS formatted cDNA coordinate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">coord_text</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.objects.database": {"fullname": "howard.objects.database", "modulename": "howard.objects.database", "kind": "module", "doc": "<p></p>\n"}, "howard.objects.database.SEP_TYPE": {"fullname": "howard.objects.database.SEP_TYPE", "modulename": "howard.objects.database", "qualname": "SEP_TYPE", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;vcf&#x27;: &#x27;\\t&#x27;, &#x27;tsv&#x27;: &#x27;\\t&#x27;, &#x27;csv&#x27;: &#x27;,&#x27;, &#x27;tbl&#x27;: &#x27;|&#x27;, &#x27;bed&#x27;: &#x27;\\t&#x27;}"}, "howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"fullname": "howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS", "modulename": "howard.objects.database", "qualname": "DATABASE_TYPE_NEEDED_COLUMNS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;variants&#x27;: {&#x27;#CHROM&#x27;: [&#x27;#CHROM&#x27;, &#x27;CHROM&#x27;, &#x27;CHR&#x27;, &#x27;CHROMOSOME&#x27;], &#x27;POS&#x27;: [&#x27;POS&#x27;], &#x27;REF&#x27;: [&#x27;REF&#x27;], &#x27;ALT&#x27;: [&#x27;ALT&#x27;]}, &#x27;regions&#x27;: {&#x27;#CHROM&#x27;: [&#x27;#CHROM&#x27;, &#x27;CHROM&#x27;, &#x27;CHR&#x27;, &#x27;CHROMOSOME&#x27;], &#x27;START&#x27;: [&#x27;START&#x27;, &#x27;POSITIONSTART&#x27;, &#x27;POS&#x27;], &#x27;END&#x27;: [&#x27;END&#x27;, &#x27;POSITIONEND&#x27;, &#x27;POS&#x27;]}, &#x27;vcf&#x27;: {&#x27;#CHROM&#x27;: [&#x27;#CHROM&#x27;, &#x27;CHROM&#x27;, &#x27;CHR&#x27;, &#x27;CHROMOSOME&#x27;], &#x27;POS&#x27;: [&#x27;POS&#x27;, &#x27;POSITION&#x27;], &#x27;ID&#x27;: [&#x27;ID&#x27;, &#x27;IDENTIFIER&#x27;], &#x27;REF&#x27;: [&#x27;REF&#x27;, &#x27;REFERENCE&#x27;], &#x27;ALT&#x27;: [&#x27;ALT&#x27;, &#x27;ALTERNATIVE&#x27;], &#x27;QUAL&#x27;: [&#x27;QUAL&#x27;, &#x27;QUALITY&#x27;], &#x27;FILTER&#x27;: [&#x27;FILTER&#x27;], &#x27;INFO&#x27;: [&#x27;INFO&#x27;]}, &#x27;bed&#x27;: {&#x27;#CHROM&#x27;: [&#x27;#CHROM&#x27;, &#x27;CHROM&#x27;, &#x27;CHR&#x27;, &#x27;CHROMOSOME&#x27;], &#x27;START&#x27;: [&#x27;START&#x27;, &#x27;POSITIONSTART&#x27;, &#x27;POS&#x27;], &#x27;END&#x27;: [&#x27;END&#x27;, &#x27;POSITIONEND&#x27;, &#x27;POS&#x27;]}}"}, "howard.objects.database.DEFAULT_VCF_HEADER": {"fullname": "howard.objects.database.DEFAULT_VCF_HEADER", "modulename": "howard.objects.database", "qualname": "DEFAULT_VCF_HEADER", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;#CHROM&#x27;, &#x27;POS&#x27;, &#x27;ID&#x27;, &#x27;REF&#x27;, &#x27;ALT&#x27;, &#x27;QUAL&#x27;, &#x27;FILTER&#x27;, &#x27;INFO&#x27;]"}, "howard.objects.database.DEFAULT_VCF_HEADER_DUCKDB_TYPES": {"fullname": "howard.objects.database.DEFAULT_VCF_HEADER_DUCKDB_TYPES", "modulename": "howard.objects.database", "qualname": "DEFAULT_VCF_HEADER_DUCKDB_TYPES", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;#CHROM&#x27;: &#x27;STRING&#x27;, &#x27;POS&#x27;: &#x27;INT&#x27;, &#x27;START&#x27;: &#x27;INT&#x27;, &#x27;END&#x27;: &#x27;INT&#x27;, &#x27;ID&#x27;: &#x27;VARCHAR&#x27;, &#x27;REF&#x27;: &#x27;VARCHAR&#x27;, &#x27;ALT&#x27;: &#x27;VARCHAR&#x27;, &#x27;FILTER&#x27;: &#x27;VARCHAR&#x27;, &#x27;INFO&#x27;: &#x27;VARCHAR&#x27;}"}, "howard.objects.database.DEFAULT_HEADER_LIST": {"fullname": "howard.objects.database.DEFAULT_HEADER_LIST", "modulename": "howard.objects.database", "qualname": "DEFAULT_HEADER_LIST", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;##fileformat=VCFv4.2&#x27;, &#x27;#CHROM\\tPOS\\tID\\tREF\\tALT\\tQUAL\\tFILTER\\tINFO&#x27;]"}, "howard.objects.database.FILE_FORMAT_DELIMITERS": {"fullname": "howard.objects.database.FILE_FORMAT_DELIMITERS", "modulename": "howard.objects.database", "qualname": "FILE_FORMAT_DELIMITERS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;vcf&#x27;: &#x27;\\t&#x27;, &#x27;tsv&#x27;: &#x27;\\t&#x27;, &#x27;csv&#x27;: &#x27;,&#x27;, &#x27;tbl&#x27;: &#x27;|&#x27;, &#x27;bed&#x27;: &#x27;\\t&#x27;}"}, "howard.objects.database.DUCKDB_EXTENSION_TO_LOAD": {"fullname": "howard.objects.database.DUCKDB_EXTENSION_TO_LOAD", "modulename": "howard.objects.database", "qualname": "DUCKDB_EXTENSION_TO_LOAD", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;sqlite_scanner&#x27;]"}, "howard.objects.database.Database": {"fullname": "howard.objects.database.Database", "modulename": "howard.objects.database", "qualname": "Database", "kind": "class", "doc": "<p></p>\n"}, "howard.objects.database.Database.__init__": {"fullname": "howard.objects.database.Database.__init__", "modulename": "howard.objects.database", "qualname": "Database.__init__", "kind": "function", "doc": "<p>This is an initialization function for a class that sets up a database and header file for use\nin a DuckDB connection.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>database</strong>:  A string representing the name of the database to be used. If None, the default\ndatabase will be used</li>\n<li><strong>format</strong>:  The <code>format</code> parameter is not described in the docstring, so it is unclear what\nit represents</li>\n<li><strong>header</strong>:  The <code>header</code> parameter is a string that represents the name of the header file\nthat contains the column names for the database. It is used in conjunction with the <code>database</code>\nparameter to set the header for the database. If the <code>header</code> parameter is not provided, the\nheader will be set to</li>\n<li><strong>header_file</strong>:  The <code>header_file</code> parameter is a string that represents the file path to the\nheader file that contains the column names for the database. It is used in the <code>set_header()</code>\nmethod to set the header attribute of the class</li>\n<li><strong>databases_folders</strong>:  A list of folders where the database files are located. This parameter\nis used in the <code>set_database()</code> method to search for the database file in the specified folders.\nIf the database file is not found in any of the folders, an error is raised</li>\n<li><strong>assembly</strong>:  A string representing the name of the assembly to be used. It is used in\nconjunction with the <code>set_assembly()</code> method to set the assembly for the DuckDB connection. If\nthe <code>assembly</code> parameter is not provided, the default assembly will be used</li>\n<li><strong>conn</strong>:  An optional parameter that represents an existing DuckDBPyConnection object. If\nprovided, the class will use this connection instead of creating a new one. If not provided, a\nnew connection will be created</li>\n<li><strong>conn_config</strong>:  An optional parameter for DuckDBPyConnection object config (see duckdb.connect)</li>\n<li><strong>table</strong>:  The <code>table</code> parameter is a string representing the name of the table in the\ndatabase that will be used in the DuckDB connection. It is used in the <code>set_table()</code> method to\nset the table attribute of the class. If the <code>table</code> parameter is not provided, the default\ntable will</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"nb\">format</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">header</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">header_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">databases_folders</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">assembly</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">conn</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">conn_config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "howard.objects.database.Database.database": {"fullname": "howard.objects.database.Database.database", "modulename": "howard.objects.database", "qualname": "Database.database", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.database.Database.format": {"fullname": "howard.objects.database.Database.format", "modulename": "howard.objects.database", "qualname": "Database.format", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.database.Database.header": {"fullname": "howard.objects.database.Database.header", "modulename": "howard.objects.database", "qualname": "Database.header", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.database.Database.header_file": {"fullname": "howard.objects.database.Database.header_file", "modulename": "howard.objects.database", "qualname": "Database.header_file", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.database.Database.databases_folders": {"fullname": "howard.objects.database.Database.databases_folders", "modulename": "howard.objects.database", "qualname": "Database.databases_folders", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.database.Database.assembly": {"fullname": "howard.objects.database.Database.assembly", "modulename": "howard.objects.database", "qualname": "Database.assembly", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.database.Database.table": {"fullname": "howard.objects.database.Database.table", "modulename": "howard.objects.database", "qualname": "Database.table", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.database.Database.set_database": {"fullname": "howard.objects.database.Database.set_database", "modulename": "howard.objects.database", "qualname": "Database.set_database", "kind": "function", "doc": "<p>This function sets the database attribute of an object to a specified database if it exists or\ncan be found in a list of folders.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>database</strong>:  A string representing the name of the database to be set</li>\n<li><strong>databases_folders</strong>:  The <code>databases_folders</code> parameter is a list of folders/directories\nwhere the <code>find_database</code> method will search for the specified database. If the database is\nfound in any of these folders, it will be set as the current database. If <code>databases_folders</code> is\nnot provided, the</li>\n<li><strong>format</strong>:  The <code>format</code> parameter is an optional string representing the format of the\ndatabase to be searched for. If provided, the <code>find_database</code> method will search for the\ndatabase only in the specified format. If not provided, the method will search for the database\nin all formats</li>\n<li><strong>assembly</strong>:  The <code>assembly</code> parameter is an optional string representing the name of the\nassembly to which the database belongs. If provided, the <code>find_database</code> method will search for\nthe database only in the specified assembly. If not provided, the method will search for the\ndatabase in all assemblies</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">databases_folders</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"nb\">format</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">assembly</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.set_databases_folders": {"fullname": "howard.objects.database.Database.set_databases_folders", "modulename": "howard.objects.database", "qualname": "Database.set_databases_folders", "kind": "function", "doc": "<p>This function sets the list of folders where databases are located as an attribute of an object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>databases_folders</strong>:  databases_folders is a list parameter that contains the paths to the\nfolders where the databases are stored. The default value of the parameter is a list with a\nsingle element, which is the current directory (\".\")</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">databases_folders</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.get_database_folders": {"fullname": "howard.objects.database.Database.get_database_folders", "modulename": "howard.objects.database", "qualname": "Database.get_database_folders", "kind": "function", "doc": "<p>This function returns a list of database folders.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The method <code>get_database_folders</code> is returning a list of database folders. The specific\n  list being returned is stored in the instance variable <code>databases_folders</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.read_header_file": {"fullname": "howard.objects.database.Database.read_header_file", "modulename": "howard.objects.database", "qualname": "Database.read_header_file", "kind": "function", "doc": "<p>This function reads the header of a VCF file and returns a list of the header lines.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>header_file</strong>:  The path to the VCF file header that needs to be read</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a list of header lines of a VCF file.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">header_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.get_header_length": {"fullname": "howard.objects.database.Database.get_header_length", "modulename": "howard.objects.database", "qualname": "Database.get_header_length", "kind": "function", "doc": "<p>The <code>get_header_length</code> function returns the length of a header file, excluding the first line.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>header_file</strong>:  The <code>header_file</code> parameter is a string that represents the file path or\nname of the header file. It is an optional parameter, which means it can be omitted when calling\nthe <code>get_header_length</code> method</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>an integer, which represents the length of the header file.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">header_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.get_header_file_columns": {"fullname": "howard.objects.database.Database.get_header_file_columns", "modulename": "howard.objects.database", "qualname": "Database.get_header_file_columns", "kind": "function", "doc": "<p>The function <code>get_header_columns</code> returns the header list of a VCF file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>header_file</strong>:  The <code>header_file</code> parameter is a string that represents the file path of the\nheader file. It is an optional parameter and its default value is <code>None</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a list of header columns.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">header_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.get_header_from_list": {"fullname": "howard.objects.database.Database.get_header_from_list", "modulename": "howard.objects.database", "qualname": "Database.get_header_from_list", "kind": "function", "doc": "<p>The function <code>get_header_from_list</code> returns a <code>vcf.Reader</code> object with a header generated from a\ngiven list or a default list.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>header_list</strong>:  The <code>header_list</code> parameter is a list of strings representing the header\nlines of a VCF (Variant Call Format) file. It is an optional parameter, meaning it can be\nprovided as an argument to the function, but if no argument is provided, a default list of\nheader lines will be used</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a <code>vcf.Reader</code> object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">header_list</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;vcf&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;/usr/local/Caskroom/miniconda/base/envs/howard_devel/lib/python3.10/site-packages/vcf/__init__.py&#39;</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.get_header_from_file": {"fullname": "howard.objects.database.Database.get_header_from_file", "modulename": "howard.objects.database", "qualname": "Database.get_header_from_file", "kind": "function", "doc": "<p>This function returns a VCF header either from a default list or from a file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>header_file</strong>:  A string representing the file path of a VCF header file. If this parameter\nis not provided or is an empty string, the function will use a default header list</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a VCF object, which is obtained by calling the <code>get_header_from_list</code> method with the\n  <code>header_list</code> as an argument. The <code>header_list</code> is either the default header list or the list\n  obtained by reading a header file using the <code>read_header_file</code> method.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">header_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;vcf&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;/usr/local/Caskroom/miniconda/base/envs/howard_devel/lib/python3.10/site-packages/vcf/__init__.py&#39;</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.find_header_file": {"fullname": "howard.objects.database.Database.find_header_file", "modulename": "howard.objects.database", "qualname": "Database.find_header_file", "kind": "function", "doc": "<p>This function finds the header file for a given database in various formats.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>database</strong>:  The <code>database</code> parameter is a string that represents the path to a database\nfile. If this parameter is not provided, the <code>get_database()</code> method is called to retrieve the\npath to the database file</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the path to the header file for a given database. If the header is in a separate file,\n  it returns the path to that file. If the header is within the database file itself, it returns\n  the path to the database file. If the database or its format cannot be determined, it returns\n  None.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.get_header": {"fullname": "howard.objects.database.Database.get_header", "modulename": "howard.objects.database", "qualname": "Database.get_header", "kind": "function", "doc": "<p>The <code>get_header</code> function in Python returns the header of a VCF file from a file, a list, or the\nobject itself based on specified conditions.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>database</strong>:  The <code>database</code> parameter in the <code>get_header</code> function represents a string that\nspecifies the database from which the header information should be retrieved or used. It is used\nin various parts of the function to determine how to construct the header of the VCF file</li>\n<li><strong>header_file</strong>:  The <code>header_file</code> parameter in the <code>get_header</code> function is a string\nrepresenting the path to a file containing the header information for a VCF file. This parameter\nallows you to specify a file from which the function will read the header information</li>\n<li><strong>header_list</strong>:  The <code>header_list</code> parameter in the <code>get_header</code> function is a list\ncontaining the header lines of a VCF file. If provided, the function will construct the header\nfrom this list using the <code>get_header_from_list</code> method. If <code>header_list</code> is not provided, the\nfunction will</li>\n<li><strong>sql_query</strong>:  The <code>sql_query</code> parameter in the <code>get_header</code> function is a string\nrepresenting an SQL query that can be used to retrieve data from a database. This parameter is\nused in the function to help construct the header of a VCF file based on the query results or\nother conditions specified in the function</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The <code>get_header</code> function returns the header of a VCF file based on different\n  conditions:</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">header_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">header_list</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sql_query</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;vcf&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;/usr/local/Caskroom/miniconda/base/envs/howard_devel/lib/python3.10/site-packages/vcf/__init__.py&#39;</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.get_header_from_columns": {"fullname": "howard.objects.database.Database.get_header_from_columns", "modulename": "howard.objects.database", "qualname": "Database.get_header_from_columns", "kind": "function", "doc": "<p>The function <code>get_header_from_columns</code> generates a VCF header based on database columns and adds\ncustom annotations to it.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>database</strong>:  The <code>database</code> parameter is a string that represents the name of a database. It\nis an optional parameter, and if not provided, the <code>get_database()</code> method is called to retrieve\nthe default database. This parameter specifies the database from which the columns will be used\nto generate the VCF header</li>\n<li><strong>header_columns</strong>:  The <code>header_columns</code> parameter is a list of column names that will be\nused to generate header information for a VCF file. If no <code>header_columns</code> are provided, the\nfunction will attempt to automatically detect the columns to use based on the database being\nused</li>\n<li><strong>sql_query</strong>:  The <code>sql_query</code> parameter in the <code>get_header_from_columns</code> function is used to\nspecify a SQL query that will be executed to retrieve column information from the database. This\nquery can be customized to fetch specific columns or data based on the requirements of the VCF\nheader generation process. If provided,</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>get_header_from_columns</code> returns a VCF header object that includes\n  information about the columns in a database and their data types. The header object is created\n  based on the input parameters, including the database name and a list of header columns.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">header_columns</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">sql_query</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.query": {"fullname": "howard.objects.database.Database.query", "modulename": "howard.objects.database", "qualname": "Database.query", "kind": "function", "doc": "<p>This is a Python function that takes in a database and query string as parameters and returns\nthe result of the query on the database.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>query</strong>:  The query parameter is a string that represents the SQL query that needs to be\nexecuted on the database. It can be any valid SQL statement such as SELECT, INSERT, UPDATE,\nDELETE, etc</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>If a query is provided, the method returns the result of the query executed on the\n  database. If no query is provided, the method returns None.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.set_header": {"fullname": "howard.objects.database.Database.set_header", "modulename": "howard.objects.database", "qualname": "Database.set_header", "kind": "function", "doc": "<p>This function sets the header of a database based on a provided header file or the database\nformat.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>database</strong>:  A string representing the name or path of a database file. If not provided, the\nmethod will attempt to get the database name from the object's attributes</li>\n<li><strong>header</strong>:  <code>header</code> is a variable of type <code>vcf</code> (presumably representing a VCF header) that\ncan be provided as an argument to the <code>set_header</code> method to set the header attribute of the\nobject. If <code>header</code> is provided, the <code>header_file</code> parameter is ignored</li>\n<li><strong>header_file</strong>:  A string representing the file path of a header file. If provided, the\nfunction will use this header file to set the header attribute of the object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">header</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;vcf&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;/usr/local/Caskroom/miniconda/base/envs/howard_devel/lib/python3.10/site-packages/vcf/__init__.py&#39;</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">header_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.set_header_file": {"fullname": "howard.objects.database.Database.set_header_file", "modulename": "howard.objects.database", "qualname": "Database.set_header_file", "kind": "function", "doc": "<p>This function sets the header file attribute of an object to the value passed as an argument.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>header_file</strong>:  The parameter <code>header_file</code> is a string that represents the name or path of\na header file. This method sets the <code>header_file</code> attribute of an object to the value passed as\nan argument. If no argument is passed, the <code>header_file</code> attribute remains unchanged</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">header_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.get_header_columns_from_database": {"fullname": "howard.objects.database.Database.get_header_columns_from_database", "modulename": "howard.objects.database", "qualname": "Database.get_header_columns_from_database", "kind": "function", "doc": "<p>The function <code>get_header_columns_from_database</code> retrieves the column names from a specified\ndatabase table.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>database</strong>:  The <code>database</code> parameter is a string that represents the name of the database\nfrom which you want to retrieve the header columns. If no database is provided, the method will\nuse the <code>get_database()</code> method to retrieve the default database</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a list of column names from the specified database.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.get_header_file": {"fullname": "howard.objects.database.Database.get_header_file", "modulename": "howard.objects.database", "qualname": "Database.get_header_file", "kind": "function", "doc": "<p>The function <code>get_header_file</code> generates a VCF header file based on specified parameters or a\ndefault header if needed.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>header_file</strong>:  The <code>header_file</code> parameter is a string representing the file path and name\nof the header file. If set to <code>None</code>, the default header file path and name will be used</li>\n<li><strong>remove_header_line</strong>:  The <code>remove_header_line</code> parameter is a boolean parameter that\ndetermines whether to remove the <code>#CHROM</code> line from the header file. If set to True, the line\nwill be removed; otherwise, it will remain in the header file. By default, this parameter is set\nto False, meaning, defaults to False</li>\n<li><strong>replace_header_line</strong>:  The <code>replace_header_line</code> parameter is a list of columns that can be\nused to replace the header line in the generated header file. For example, if you provide\n<code>['#CHROM', 'POS', 'ID']</code>, these columns will be used as the header line in the generated file\ninstead</li>\n<li><strong>force</strong>:  The <code>force</code> parameter in the <code>get_header_file</code> function is a boolean parameter\nthat determines whether to force the generation of a header file even if a header file already\nexists. If <code>force</code> is set to <code>True</code>, the function will replace the existing header file with a\nnew one. If, defaults to False</li>\n<li><strong>sql_query</strong>:  The <code>sql_query</code> parameter in the <code>get_header_file</code> function is used to specify\na SQL query that can be used to retrieve header information from a database. This query can be\npassed to the function to customize the header generation process based on the query results</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>get_header_file</code> returns a string which is the name of the header file\n  that was generated or None if no header file was generated.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">header_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">remove_header_line</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">replace_header_line</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">force</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">sql_query</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.set_assembly": {"fullname": "howard.objects.database.Database.set_assembly", "modulename": "howard.objects.database", "qualname": "Database.set_assembly", "kind": "function", "doc": "<p>This is a function that sets the assembly attribute of an object to a given string value.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>assembly</strong>:  The assembly parameter is a string that represents the name or type of assembly\nthat the object belongs to. This method sets the assembly attribute of the object to the value\npassed in as the assembly parameter. If no value is passed in, the assembly attribute remains\nunchanged. The method returns the updated value of the</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">assembly</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.get_assembly": {"fullname": "howard.objects.database.Database.get_assembly", "modulename": "howard.objects.database", "qualname": "Database.get_assembly", "kind": "function", "doc": "<p>This function returns the assembly attribute of an object if it exists, otherwise it returns\nNone.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>If <code>self.assembly</code> is not <code>None</code>, then it returns the value of <code>self.assembly</code>.\n  Otherwise, it returns <code>None</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.find_database": {"fullname": "howard.objects.database.Database.find_database", "modulename": "howard.objects.database", "qualname": "Database.find_database", "kind": "function", "doc": "<p>This function finds a database file in a specified folder or the current directory.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>database</strong>:  The name of the database to be searched for. If not provided, it will call the\n<code>get_database()</code> method to get the name of the database. It is a string type parameter</li>\n<li><strong>databases_folders</strong>:  A list of folders where the function should look for the database\nfile. If this parameter is not provided, the function will look for the database file in the\ncurrent directory</li>\n<li><strong>format</strong>:  The file format of the database file. It is an optional parameter and if not\nprovided, the function will call the <code>get_format()</code> method to get the format</li>\n<li><strong>assembly</strong>:  <code>assembly</code> is an optional parameter that represents the name of a subfolder\nwhere the function should look for the database file. If provided, the function will search for\nthe database file in the specified subfolder within each of the <code>databases_folders</code>. If not\nprovided, the function will only search for</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a string that represents the path to the database file. If the database is not found or\n  if no database is specified, it returns None.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">databases_folders</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">database_format</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">assembly</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.get_database": {"fullname": "howard.objects.database.Database.get_database", "modulename": "howard.objects.database", "qualname": "Database.get_database", "kind": "function", "doc": "<p>This function returns the database name as a string.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The <code>get_database</code> method is returning the <code>database</code> attribute of the object. The\n  return type is a string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.get_database_basename": {"fullname": "howard.objects.database.Database.get_database_basename", "modulename": "howard.objects.database", "qualname": "Database.get_database_basename", "kind": "function", "doc": "<p>This function returns the basename of a database file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>database</strong>:  The parameter <code>database</code> is a string that represents the name of a database. If\nit is not provided, the method will use the <code>get_database()</code> method to retrieve the current\ndatabase</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a string which is the basename of the database file. If the database parameter is not\n  provided, it gets the current database using the <code>get_database()</code> method. If the database\n  exists, it returns the basename of the database file using the <code>os.path.basename()</code> method. If\n  the database does not exist, it returns <code>None</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.get_database_dirname": {"fullname": "howard.objects.database.Database.get_database_dirname", "modulename": "howard.objects.database", "qualname": "Database.get_database_dirname", "kind": "function", "doc": "<p>This function returns the directory name of a given database or the current database if none is\nspecified.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>database</strong>:  The parameter <code>database</code> is a string that represents the path to a database\nfile. If it is not provided, the method will call <code>self.get_database()</code> to retrieve the path to\nthe default database</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a string that represents the directory name of the specified database file. If no\n  database file is specified, it will use the default database file and return its directory name.\n  If there is no database file, it will return None.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.exists": {"fullname": "howard.objects.database.Database.exists", "modulename": "howard.objects.database", "qualname": "Database.exists", "kind": "function", "doc": "<p>This function checks if a database exists in the specified path or in the default path.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>database</strong>:  The <code>database</code> parameter is a string that represents the name or path of a\ndatabase file. If it is not provided, the method will call the <code>get_database()</code> method to\nretrieve the default database name/path</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a boolean value indicating whether the specified database exists or not. If the\n  <code>database</code> parameter is not provided, it gets the current database using the <code>get_database()</code>\n  method and checks if it exists using the <code>os.path.exists()</code> function.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.set_format": {"fullname": "howard.objects.database.Database.set_format", "modulename": "howard.objects.database", "qualname": "Database.set_format", "kind": "function", "doc": "<p>This is a method in a Python class that sets a format attribute to a specified string.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>format</strong>:  The format parameter is a string that specifies the desired format for the data.\nIt is an optional parameter, meaning that if it is not provided, the format attribute of the\nobject will not be changed. The function returns a string indicating the current format of the\nobject</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">format</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.get_format": {"fullname": "howard.objects.database.Database.get_format", "modulename": "howard.objects.database", "qualname": "Database.get_format", "kind": "function", "doc": "<p>This Python function returns the file format of a given database or the current database if none\nis provided.\nFormat database:\n    - parquet\n    - duckdb\n    - sqlite\n    - vcf\n    - csv</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>database</strong>:  The <code>database</code> parameter is a string that represents the type of database. It\nis an optional parameter and if not provided, the function will call the <code>get_database()</code> method\nto retrieve the database type</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a string that represents the type of database. The type of database can be one of the\n  following: \"parquet\", \"duckdb\", \"sqlite\", \"vcf\", or \"csv\". The specific type of database is determined by\n  the input parameter <code>database</code>, which is either passed as an argument to the function or\n  obtained by calling the <code>get_database()</code> method. The `get_file_format</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.get_type": {"fullname": "howard.objects.database.Database.get_type", "modulename": "howard.objects.database", "qualname": "Database.get_type", "kind": "function", "doc": "<p>The <code>get_type</code> function determines the type of a database (variants VCF-like or regions\nBED-like) based on its columns and format.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>database</strong>:  The <code>database</code> parameter in the <code>get_type</code> function is a string representing\nthe name of a database. If this parameter is not provided when calling the function, it will\nattempt to retrieve the database name using the <code>get_database()</code> method. This parameter is used\nto specify the database for which you</li>\n<li><strong>sql_query</strong>:  The <code>sql_query</code> parameter in the <code>get_type</code> function is used to pass an SQL\nquery as a string. This query can be used to filter or manipulate the data before determining\nthe type of the database based on its columns. If provided, the function will use this SQL query\nto fetch the</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The <code>get_type</code> function returns a string that represents the type of the database,\n  which can be either \"variants\" (VCF-like) or \"regions\" (BED-like). If the database is not found\n  or does not exist, the function returns None.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">sql_query</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.get_database_tables": {"fullname": "howard.objects.database.Database.get_database_tables", "modulename": "howard.objects.database", "qualname": "Database.get_database_tables", "kind": "function", "doc": "<p>This function retrieves a list of tables in a specified database using the DuckDB format.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>database</strong>:  The name of the database for which you want to retrieve the list of tables. If\nno database name is provided, it will use the default database</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a list of tables in the specified database, or None if the database does not exist or\n  the format is not supported.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.get_database_table": {"fullname": "howard.objects.database.Database.get_database_table", "modulename": "howard.objects.database", "qualname": "Database.get_database_table", "kind": "function", "doc": "<p>This function returns the name of a table in a specified database if it exists and is in a\nsupported format.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>database</strong>:  The name of the database to retrieve the table from. If None, it will use the\ndefault database</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a string that represents the name of a table in a database, or None if no suitable\n  table is found.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.get_type_from_columns": {"fullname": "howard.objects.database.Database.get_type_from_columns", "modulename": "howard.objects.database", "qualname": "Database.get_type_from_columns", "kind": "function", "doc": "<p>This function returns the type of a database based on the provided list of columns.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>database_columns</strong>:  a list of column names in a database table</li>\n<li><strong>check_database_type</strong>:  A database type to check for. If not provided, it defaults\nto all database types defined in the constant <code>DATABASE_TYPE_NEEDED_COLUMNS</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a string that represents the type of database based on the provided list of columns. If\n  the needed columns for a specific database type are not found in the provided list, the function\n  returns None.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">database_columns</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">check_database_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.get_needed_columns": {"fullname": "howard.objects.database.Database.get_needed_columns", "modulename": "howard.objects.database", "qualname": "Database.get_needed_columns", "kind": "function", "doc": "<p>This function takes a list of database columns and a type, and returns a dictionary of needed\ncolumns and their corresponding values found in the database columns.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>database_columns</strong>:  A list of column names in a database table</li>\n<li><strong>type</strong>:  The type of database being used. It is used to determine which columns are needed\nfor the specific database type</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a dictionary containing the columns that are needed for a specific database type, along\n  with their corresponding column names in the actual database. The function takes in a list of\n  database columns and a database type as input, and uses the <code>DATABASE_TYPE_NEEDED_COLUMNS</code>\n  dictionary to determine which columns are needed for the specified database type. It then\n  searches through the list of database columns to find the</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">database_columns</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>, </span><span class=\"param\"><span class=\"n\">database_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.get_sql_from": {"fullname": "howard.objects.database.Database.get_sql_from", "modulename": "howard.objects.database", "qualname": "Database.get_sql_from", "kind": "function", "doc": "<p>This function returns a SQL query string based on the input database format.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>database</strong>:  The parameter \"database\" is a string that represents the name or path of the\ndatabase that the function will read from. If no value is provided for this parameter, the\nfunction will call the \"get_database()\" method to retrieve the default database</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a string that represents a SQL query to read data from a database file. The specific\n  SQL query returned depends on the format of the database file, which is determined by the\n  <code>get_format()</code> method. The SQL query returned will be in the form of a function call to one of\n  the following functions: <code>read_parquet()</code>, <code>read_csv()</code>, <code>read_json()</code>,</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">header_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sample_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">20480</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.get_sql_database_attach": {"fullname": "howard.objects.database.Database.get_sql_database_attach", "modulename": "howard.objects.database", "qualname": "Database.get_sql_database_attach", "kind": "function", "doc": "<p>This function returns a SQL query to attach or detach a database based on the specified format\nand output.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>database</strong>:  The name of the database to attach. If not provided, it will try to get the\ndefault database from the connection</li>\n<li><strong>output</strong>:  The \"output\" parameter is a string that specifies the desired output of the\nfunction. It can take on the following values:, defaults to query</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a string that represents a SQL query to attach a database to a DuckDB or SQLite\n  database engine. The specific output depends on the value of the <code>output</code> parameter, which can\n  be \"query\" (default), \"attach\", \"detach\", or \"name\". If <code>output</code> is \"query\" or \"attach\", the\n  function returns a SQL query to attach the specified database.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">output</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;query&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.get_sql_database_link": {"fullname": "howard.objects.database.Database.get_sql_database_link", "modulename": "howard.objects.database", "qualname": "Database.get_sql_database_link", "kind": "function", "doc": "<p>This function returns a SQL database link based on the provided database name or the default\ndatabase.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>database</strong>:  The <code>database</code> parameter is a string that represents the name of the database.\nIf it is not provided, the method will call the <code>get_database()</code> method to retrieve the default\ndatabase</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a SQL database link as a string. If a database name is provided as an argument, it will\n  use that database to construct the link. Otherwise, it will use the default database obtained\n  from <code>self.get_database()</code>. The link is constructed using the <code>sql_from</code> and <code>sql_table</code>\n  obtained from other methods, and the final link is returned as a string. If the</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.create_view": {"fullname": "howard.objects.database.Database.create_view", "modulename": "howard.objects.database", "qualname": "Database.create_view", "kind": "function", "doc": "<p>The <code>create_view</code> function creates a view in a specified database or the default database, using\na SQL database link.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>database</strong>:  The <code>database</code> parameter is a string that represents the name of the database.\nIf no value is provided, it will use the value returned by the <code>get_database()</code> method</li>\n<li><strong>view_name</strong>:  The <code>view_name</code> parameter is a string that specifies the name of the view that\nwill be created in the database, defaults to variants</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the name of the created view.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">view_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;variants&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.get_view": {"fullname": "howard.objects.database.Database.get_view", "modulename": "howard.objects.database", "qualname": "Database.get_view", "kind": "function", "doc": "<p>The <code>get_view</code> function returns the name of a view in a database, or creates a new view if\nspecified.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>database</strong>:  The <code>database</code> parameter is a string that represents the name of the database.\nIt is an optional parameter and if not provided, the method <code>get_database()</code> is called to\nretrieve the database name</li>\n<li><strong>create_view</strong>:  The <code>create_view</code> parameter is a string that represents the name of the view\nthat you want to create. If this parameter is provided, the <code>get_view</code> method will call the\n<code>create_view</code> method and pass the <code>database</code> and <code>view_name</code> parameters to it</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The method <code>get_view</code> returns a string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">create_view</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.is_compressed": {"fullname": "howard.objects.database.Database.is_compressed", "modulename": "howard.objects.database", "qualname": "Database.is_compressed", "kind": "function", "doc": "<p>This Python function checks if a given file is compressed and returns the format of the\ncompression.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>database</strong>:  The <code>database</code> parameter is a string that represents the path or name of the\ninput file that needs to be checked for compression. If no value is provided for <code>database</code>, the\nmethod calls <code>get_database()</code> to retrieve the default database file</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>is_compressed</code> returns a boolean value indicating whether the input file\n  is compressed or not. The function calls another function <code>get_file_compressed</code> to determine the\n  compression format of the file.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.get_header_infos_list": {"fullname": "howard.objects.database.Database.get_header_infos_list", "modulename": "howard.objects.database", "qualname": "Database.get_header_infos_list", "kind": "function", "doc": "<p>This function returns a list of header information for a given database or the current database\nif none is specified.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>database</strong>:  The <code>database</code> parameter is a string that represents the name of the database\nfrom which the header information is to be retrieved. If no database name is provided, the\nmethod will use the default database name obtained from the <code>get_database()</code> method</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of header information from a database, or an empty list if the database header\n  is not available.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.find_column": {"fullname": "howard.objects.database.Database.find_column", "modulename": "howard.objects.database", "qualname": "Database.find_column", "kind": "function", "doc": "<p>The <code>find_column</code> function searches for a specific column in a database table, with the option\nto search for a column with a specific prefix or within the INFO column header.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>database</strong>:  The name of the database to search for the column in. If not provided, it will\nuse the current database that the code is connected to</li>\n<li><strong>table</strong>:  The \"table\" parameter is the name of the table in the database where the column is\nlocated</li>\n<li><strong>column</strong>:  The \"column\" parameter is a string that represents the name of the column to\nsearch for in the database table. By default, it is set to \"INFO\", but you can change it to\nsearch for a specific column name, defaults to INFO</li>\n<li><strong>prefixes</strong>:  The <code>prefixes</code> parameter is a list of strings that are used to search for a\ncolumn with a specific prefix in the database. For example, if the prefixes list contains \"DP/\",\nthe function will search for a column named \"DP/INFO\" in addition to the default \"INFO\" column</li>\n<li><strong>database_columns</strong>:  The <code>database_columns</code> parameter is a list that contains the names of\nall the columns in a specific database table. It is used to check if a specific column exists in\nthe database. If the <code>database_columns</code> parameter is not provided, the function will call the\n<code>get_columns</code> method to retrieve</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a string that represents the name of the column found in the database, based on the\n  input parameters. If the column is found, it returns the column name. If the column is not\n  found, it returns None.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">column</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;INFO&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">prefixes</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;INFO/&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">database_columns</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.map_columns": {"fullname": "howard.objects.database.Database.map_columns", "modulename": "howard.objects.database", "qualname": "Database.map_columns", "kind": "function", "doc": "<p>The <code>map_columns</code> function maps input columns to their corresponding columns in a specified\ndatabase table, using specified prefixes to filter the columns.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>database</strong>:  The name of the database to search for columns in. If no database is specified,\nthe method will use the default database set in the connection</li>\n<li><strong>table</strong>:  The <code>table</code> parameter is the name of the table in the database that you want to\nmap the columns for</li>\n<li><strong>columns</strong>:  A list of column names that you want to map to their corresponding column names\nin the database</li>\n<li><strong>prefixes</strong>:  The <code>prefixes</code> parameter is a list of strings that are used to filter the\ncolumns that are searched for. Only columns that start with one of the prefixes in the list will\nbe considered. In the code above, the default value for <code>prefixes</code> is <code>[\"INFO/\"]</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a dictionary that maps the input columns to their corresponding columns found in the\n  specified database and table, with the specified prefixes.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">prefixes</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;INFO/&#39;</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.get_columns": {"fullname": "howard.objects.database.Database.get_columns", "modulename": "howard.objects.database", "qualname": "Database.get_columns", "kind": "function", "doc": "<p>The function <code>get_columns</code> retrieves a list of column names from a specified database and table\nusing SQL queries.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>database</strong>:  The <code>database</code> parameter in the <code>get_columns</code> function is used to specify the\nname of the database from which you want to retrieve the column names. If this parameter is not\nprovided, the function will default to using the current database</li>\n<li><strong>table</strong>:  The <code>table</code> parameter in the <code>get_columns</code> function represents the name of the\ntable in the database for which you want to retrieve the column names. If this parameter is not\nprovided, the function will attempt to get the table name from the specified database. If the\ntable parameter is not specified and</li>\n<li><strong>header_file</strong>:  The <code>header_file</code> parameter in the <code>get_columns</code> function is used to specify\nthe file containing the header information for the data source. This information is often used\nin cases where the column names are not explicitly defined in the database schema or where the\ndata is stored in a file format that requires additional</li>\n<li><strong>sql_query</strong>:  The <code>sql_query</code> parameter in the <code>get_columns</code> function is used to specify a\ncustom SQL query to retrieve column names from the database table. If a <code>sql_query</code> is provided,\nthe function will execute that query to get the column names and return them as a list</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>get_columns</code> returns a list of column names for a given database and\n  table. If a SQL query is provided, it executes the query and returns the column names from the\n  result. If no database is specified, it uses the current database. It then checks the database\n  format and connects to the database accordingly to retrieve the column names using a SQL query.\n  If the table parameter is not provided</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">header_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sql_query</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.get_table_columns_from_format": {"fullname": "howard.objects.database.Database.get_table_columns_from_format", "modulename": "howard.objects.database", "qualname": "Database.get_table_columns_from_format", "kind": "function", "doc": "<p>The function <code>get_table_columns_from_format</code> returns a list of table columns based on the\nspecified database format.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>database</strong>:  The <code>database</code> parameter is a string that represents the name of the database.\nIt is an optional parameter, which means it has a default value of <code>None</code>. If no value is\nprovided for the <code>database</code> parameter, the <code>get_database()</code> method is called to retrieve the\ncurrent database name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a list of table columns.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.get_table_columns_from_file": {"fullname": "howard.objects.database.Database.get_table_columns_from_file", "modulename": "howard.objects.database", "qualname": "Database.get_table_columns_from_file", "kind": "function", "doc": "<p>The function <code>get_table_columns_from_file</code> retrieves the column names from a database or header\nfile.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>database</strong>:  The <code>database</code> parameter is a string that represents the name or path of the\ndatabase file. If this parameter is not provided, the <code>get_database()</code> method is called to\nretrieve the database name or path</li>\n<li><strong>header_file</strong>:  The <code>header_file</code> parameter is a string that represents the file path or\nname of the header file. This file contains the header information for a table, which typically\nincludes the names of the columns in the table</li>\n<li><strong>header_file_find</strong>:  Allow header file find if not provided</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a list of table columns.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">header_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">header_file_find</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.get_annotations": {"fullname": "howard.objects.database.Database.get_annotations", "modulename": "howard.objects.database", "qualname": "Database.get_annotations", "kind": "function", "doc": "<p>This function returns the annotations of a database or the default database if none is\nspecified.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>database</strong>:  The parameter <code>database</code> is a string that represents the name of the database\nto retrieve annotations from. If no database name is provided, the method will use the default\ndatabase name obtained from the <code>get_database()</code> method</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>get_annotations</code> returns the <code>infos</code> attribute of the header of a\n  database. If the <code>database</code> parameter is not provided, it gets the current database using the\n  <code>get_database</code> method. If there is no header, it returns <code>None</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.get_extra_columns": {"fullname": "howard.objects.database.Database.get_extra_columns", "modulename": "howard.objects.database", "qualname": "Database.get_extra_columns", "kind": "function", "doc": "<p>This Python function returns a list of extra columns in a database table that are not needed\nbased on the database type and existing columns.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>database</strong>:  A string representing the name of the database to retrieve columns from. If\nNone is provided, the default database will be used</li>\n<li><strong>database_type</strong>:  The <code>database_type</code> parameter in the <code>get_extra_columns</code> function\nrepresents the type of the database for which you want to retrieve the list of extra columns. It\nis used to determine which columns are needed based on the database type and the existing\ncolumns in the specified database table</li>\n<li><strong>sql_query</strong>:  The <code>sql_query</code> parameter in the <code>get_extra_columns</code> function is used to pass\nan SQL query that can be used to retrieve specific columns from the database. This query can be\ncustomized to filter columns based on certain conditions or criteria before analyzing them to\ndetermine the extra columns that are not needed</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of extra columns in a database table that are not needed based on the database\n  type and existing columns.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">database_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sql_query</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.is_vcf": {"fullname": "howard.objects.database.Database.is_vcf", "modulename": "howard.objects.database", "qualname": "Database.is_vcf", "kind": "function", "doc": "<p>The <code>is_vcf</code> function checks if a given database is of type \"vcf\" by examining its columns and\ntheir types.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>database</strong>:  The <code>database</code> parameter in the <code>is_vcf</code> function is a string that represents\nthe name of the database that the function will use to check if the file is a VCF (Variant Call\nFormat) file. If the <code>database</code> parameter is not provided when calling the function, it will</li>\n<li><strong>sql_query</strong>:  The <code>sql_query</code> parameter in the <code>is_vcf</code> function is used to pass an SQL\nquery string that can be used to filter the columns retrieved from the database. This query can\nbe used to narrow down the columns that are considered when checking if the database is of type\n\"vcf\"</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>is_vcf</code> returns a boolean value indicating whether the database type is\n  \"vcf\" or not.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">sql_query</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.get_conn": {"fullname": "howard.objects.database.Database.get_conn", "modulename": "howard.objects.database", "qualname": "Database.get_conn", "kind": "function", "doc": "<p>The function returns the connection object.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The method is returning the value of the instance variable <code>self.conn</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.objects.database.Database.is_genotype_column": {"fullname": "howard.objects.database.Database.is_genotype_column", "modulename": "howard.objects.database", "qualname": "Database.is_genotype_column", "kind": "function", "doc": "<p>The <code>is_genotype_column</code> function in Python checks if a specified column in a database contains\ngenotype data based on a regular expression pattern.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>column</strong>:  The <code>column</code> parameter is a string that represents the name of a column in a\ndatabase table. It is used to specify the column for which you want to check if it contains\ngenotype information based on a regular expression pattern</li>\n<li><strong>database</strong>:  The <code>database</code> parameter in the <code>is_genotype_column</code> method is used to specify\nthe name of the database from which the data will be queried. If a database is provided, the\nmethod will query the specified database to check if the given column contains genotype\ninformation. If no database is provided,</li>\n<li><strong>downsampling</strong>:  The <code>downsampling</code> parameter in the <code>is_genotype_column</code> method is an\ninteger value that determines the number of rows to be sampled from the database table when\nchecking for genotype information in the specified column. This parameter is used to limit the\nnumber of rows to be processed in order to improve performance, defaults to 1000</li>\n<li><strong>check_format</strong>:  The <code>check_format</code> parameter in the <code>is_genotype_column</code> method is a\nboolean flag that determines whether the function should check the format of the data before\nproceeding with the genotype column analysis. If <code>check_format</code> is set to <code>True</code>, the function\nwill verify if the specified column exists in, defaults to True</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The <code>is_genotype_column</code> method returns a boolean value. If the specified column in a\n  database table contains genotype information, it returns <code>True</code>; otherwise, it returns <code>False</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">column</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">downsampling</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">check_format</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "howard.objects.database.Database.export": {"fullname": "howard.objects.database.Database.export", "modulename": "howard.objects.database", "qualname": "Database.export", "kind": "function", "doc": "<p>The <code>export</code> function exports data from a database to a specified output format, compresses it\nif necessary, and returns a boolean value indicating whether the export was successful or not.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>output_database</strong>:  The <code>output_database</code> parameter is a string that represents the path and\nfilename of the output file to be exported. It specifies where the exported data will be saved</li>\n<li><strong>output_header</strong>:  The <code>output_header</code> parameter is an optional string that represents the\nheader of the output file. If provided, it specifies the header that will be included in the\noutput file. If not provided, the header will be automatically detected based on the output file\nformat</li>\n<li><strong>header_in_output</strong>:  The <code>header_in_output</code> parameter is a boolean value that determines\nwhether the header should be included in the output file. If set to <code>True</code>, the header will be\nincluded in the output file. If set to <code>False</code>, the header will not be included in the output\nfile. By default,, defaults to True</li>\n<li><strong>database</strong>:  The <code>database</code> parameter is the name of the database from which you want to\nexport data. If this parameter is not provided, the function will use the <code>get_database()</code>\nmethod to retrieve the current database</li>\n<li><strong>table</strong>:  The <code>table</code> parameter specifies the name of the table in the database from which\nthe data will be exported. By default, if not specified, it is set to \"variants\", defaults to\nvariants</li>\n<li><strong>parquet_partitions</strong>:  The <code>parquet_partitions</code> parameter is a list that specifies the\npartition columns for the Parquet output format. Each element in the list represents a partition\ncolumn. The partitions are used to organize the data in the Parquet file based on the values of\nthe specified columns</li>\n<li><strong>threads</strong>:  The <code>threads</code> parameter in the <code>export</code> function is an optional integer that\nspecifies the number of threads to use for exporting the data. It determines the level of\nparallelism during the export process. By default, it is set to 1, defaults to 1</li>\n<li><strong>sort</strong>:  The <code>sort</code> parameter in the <code>export</code> function is a boolean value that specifies\nwhether the output file should be sorted based on the genomic coordinates of the variants. If\n<code>sort</code> is set to <code>True</code>, the output file will be sorted. If <code>sort</code> is set to <code>False</code>,, defaults\nto False</li>\n<li><strong>index</strong>:  The <code>index</code> parameter is a boolean value that specifies whether to index the\noutput file. If <code>index</code> is set to <code>True</code>, the output file will be indexed. If <code>index</code> is set to\n<code>False</code> or not provided, the output file will not be indexed. By default,, defaults to False</li>\n<li><strong>existing_columns_header</strong>:  The <code>existing_columns_header</code> parameter is a list that\nrepresents the existing columns in the header of the output file. It is used to determine the\ncolumns that should be included in the output file. If this parameter is not provided, the\nfunction will automatically detect the header columns based on the output file format</li>\n<li><strong>order_by</strong>:  The <code>order_by</code> parameter in the <code>export</code> function is a string that specifies\nthe columns by which the output file should be ordered. You can specify multiple columns\nseparated by commas. Each column can be followed by the keyword \"ASC\" (ascending) or \"DESC\"\n(descending) to specify</li>\n<li><strong>query</strong>:  The <code>query</code> parameter in the <code>export</code> function represents a SQL query that\nspecifies the data to be exported from the database. If provided, the function will export the\nresult of this query. If the <code>query</code> parameter is not provided, the function will generate a\nquery to export the data from</li>\n<li><strong>compression_type</strong>:  The <code>compression_type</code> parameter in the <code>export</code> function specifies the\ntype of compression to be applied to the output file. By default, the compression type is set to\n\"bgzip\". This parameter allows you to choose the compression algorithm for the output file, such\nas \"gzip\", \"bgzip</li>\n<li><strong>chunk_size</strong>:  The <code>chunk_size</code> parameter in the <code>export</code> function specifies the size of\neach chunk or batch of data that will be processed during the export operation. It determines\nhow many records or lines of data will be included in each chunk that is processed at a time,\ndefaults to 1000000</li>\n<li><strong>export_mode</strong>:  The <code>export_mode</code> parameter in the <code>export</code> function specifies the mode of\nexport, which can be either \"pyarrow\" or \"duckdb\", defaults to pyarrow</li>\n<li><strong>compresslevel</strong>:  The <code>compresslevel</code> parameter in the <code>export</code> function represents the\nlevel of compression for gzip. By default, it is set to 6. This parameter allows you to specify\nthe compression level when using gzip compression for the output file. The compression level can\nrange from 0 (no compression), defaults to 6</li>\n<li><strong>export_header</strong>:  The <code>export_header</code> parameter is a boolean flag that determines whether\nthe header of a VCF file should be exported to a separate file or not. If <code>export_header</code> is\nTrue, the header will be exported to a file. If <code>export_header</code> is False, the header will not\nbe, defaults to True</li>\n<li><strong>sample_list</strong>:  The <code>sample_list</code> parameter in the <code>export</code> function is a list that\nspecifies the samples to be included in the exported data. If provided, the samples listed in\nthis parameter will be included in the output file. If not provided, the function will determine\nthe samples to include based on the data</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The <code>export</code> function returns a boolean value indicating whether the export was\n  successful or not.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">output_database</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">output_header</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">header_in_output</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;variants&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">parquet_partitions</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">sort</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">existing_columns_header</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">order_by</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">compression_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">chunk_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000000</span>,</span><span class=\"param\">\t<span class=\"n\">export_mode</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pyarrow&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">compresslevel</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">6</span>,</span><span class=\"param\">\t<span class=\"n\">export_header</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">sample_list</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "howard.objects.genome": {"fullname": "howard.objects.genome", "modulename": "howard.objects.genome", "kind": "module", "doc": "<p></p>\n"}, "howard.objects.genome.ChromosomeSubset": {"fullname": "howard.objects.genome.ChromosomeSubset", "modulename": "howard.objects.genome", "qualname": "ChromosomeSubset", "kind": "class", "doc": "<p>Allow direct access to a subset of the chromosome.</p>\n"}, "howard.objects.genome.ChromosomeSubset.__init__": {"fullname": "howard.objects.genome.ChromosomeSubset.__init__", "modulename": "howard.objects.genome", "qualname": "ChromosomeSubset.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">genome</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, "howard.objects.genome.ChromosomeSubset.name": {"fullname": "howard.objects.genome.ChromosomeSubset.name", "modulename": "howard.objects.genome", "qualname": "ChromosomeSubset.name", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.genome.ChromosomeSubset.genome": {"fullname": "howard.objects.genome.ChromosomeSubset.genome", "modulename": "howard.objects.genome", "qualname": "ChromosomeSubset.genome", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.genome.GenomeSubset": {"fullname": "howard.objects.genome.GenomeSubset", "modulename": "howard.objects.genome", "qualname": "GenomeSubset", "kind": "class", "doc": "<p>Allow the direct access of a subset of the genome.</p>\n"}, "howard.objects.genome.GenomeSubset.__init__": {"fullname": "howard.objects.genome.GenomeSubset.__init__", "modulename": "howard.objects.genome", "qualname": "GenomeSubset.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">genome</span>, </span><span class=\"param\"><span class=\"n\">chrom</span>, </span><span class=\"param\"><span class=\"n\">start</span>, </span><span class=\"param\"><span class=\"n\">end</span>, </span><span class=\"param\"><span class=\"n\">seqid</span></span>)</span>"}, "howard.objects.genome.GenomeSubset.genome": {"fullname": "howard.objects.genome.GenomeSubset.genome", "modulename": "howard.objects.genome", "qualname": "GenomeSubset.genome", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.genome.GenomeSubset.chrom": {"fullname": "howard.objects.genome.GenomeSubset.chrom", "modulename": "howard.objects.genome", "qualname": "GenomeSubset.chrom", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.genome.GenomeSubset.start": {"fullname": "howard.objects.genome.GenomeSubset.start", "modulename": "howard.objects.genome", "qualname": "GenomeSubset.start", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.genome.GenomeSubset.end": {"fullname": "howard.objects.genome.GenomeSubset.end", "modulename": "howard.objects.genome", "qualname": "GenomeSubset.end", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.genome.GenomeSubset.seqid": {"fullname": "howard.objects.genome.GenomeSubset.seqid", "modulename": "howard.objects.genome", "qualname": "GenomeSubset.seqid", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.genome.MockGenomeError": {"fullname": "howard.objects.genome.MockGenomeError", "modulename": "howard.objects.genome", "qualname": "MockGenomeError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, "howard.objects.genome.MockSequence": {"fullname": "howard.objects.genome.MockSequence", "modulename": "howard.objects.genome", "qualname": "MockSequence", "kind": "class", "doc": "<p></p>\n"}, "howard.objects.genome.MockSequence.__init__": {"fullname": "howard.objects.genome.MockSequence.__init__", "modulename": "howard.objects.genome", "qualname": "MockSequence.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sequence</span></span>)</span>"}, "howard.objects.genome.MockSequence.sequence": {"fullname": "howard.objects.genome.MockSequence.sequence", "modulename": "howard.objects.genome", "qualname": "MockSequence.sequence", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.genome.MockChromosome": {"fullname": "howard.objects.genome.MockChromosome", "modulename": "howard.objects.genome", "qualname": "MockChromosome", "kind": "class", "doc": "<p></p>\n"}, "howard.objects.genome.MockChromosome.__init__": {"fullname": "howard.objects.genome.MockChromosome.__init__", "modulename": "howard.objects.genome", "qualname": "MockChromosome.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">genome</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, "howard.objects.genome.MockChromosome.name": {"fullname": "howard.objects.genome.MockChromosome.name", "modulename": "howard.objects.genome", "qualname": "MockChromosome.name", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.genome.MockChromosome.genome": {"fullname": "howard.objects.genome.MockChromosome.genome", "modulename": "howard.objects.genome", "qualname": "MockChromosome.genome", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.genome.MockGenome": {"fullname": "howard.objects.genome.MockGenome", "modulename": "howard.objects.genome", "qualname": "MockGenome", "kind": "class", "doc": "<p></p>\n"}, "howard.objects.genome.MockGenome.__init__": {"fullname": "howard.objects.genome.MockGenome.__init__", "modulename": "howard.objects.genome", "qualname": "MockGenome.__init__", "kind": "function", "doc": "<p>A mock genome object that provides a pygr compatible interface.</p>\n\n<p>lookup: a list of ((chrom, start, end), seq) values that define\n    a lookup table for genome sequence requests.\nfilename: a stream or filename containing a lookup table.\ndb_filename: a fasta file to use for genome sequence requests.  All\n    requests are recorded and can be writen to a lookup table file\n    using the <code>write</code> method.\ndefault_seq: if given, this base will always be returned if\n    region is unavailable.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lookup</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">db_filename</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">default_seq</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, "howard.objects.genome.MockGenome.get_seq": {"fullname": "howard.objects.genome.MockGenome.get_seq", "modulename": "howard.objects.genome", "qualname": "MockGenome.get_seq", "kind": "function", "doc": "<p>Return a sequence by chromosome name and region [start, end).</p>\n\n<p>Coordinates are 0-based, end-exclusive.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">chrom</span>, </span><span class=\"param\"><span class=\"n\">start</span>, </span><span class=\"param\"><span class=\"n\">end</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.objects.genome.MockGenome.read": {"fullname": "howard.objects.genome.MockGenome.read", "modulename": "howard.objects.genome", "qualname": "MockGenome.read", "kind": "function", "doc": "<p>Read a sequence lookup table from a file.</p>\n\n<p>filename: a filename string or file stream.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.objects.genome.MockGenome.write": {"fullname": "howard.objects.genome.MockGenome.write", "modulename": "howard.objects.genome", "qualname": "MockGenome.write", "kind": "function", "doc": "<p>Write a sequence lookup table to file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.objects.genome.MockGenomeTestFile": {"fullname": "howard.objects.genome.MockGenomeTestFile", "modulename": "howard.objects.genome", "qualname": "MockGenomeTestFile", "kind": "class", "doc": "<p></p>\n", "bases": "MockGenome"}, "howard.objects.genome.MockGenomeTestFile.__init__": {"fullname": "howard.objects.genome.MockGenomeTestFile.__init__", "modulename": "howard.objects.genome", "qualname": "MockGenomeTestFile.__init__", "kind": "function", "doc": "<p>A mock genome object that provides a pygr compatible interface.</p>\n\n<p>lookup: a list of ((chrom, start, end), seq) values that define\n    a lookup table for genome sequence requests.\nfilename: a stream or filename containing a lookup table.\ndb_filename: a fasta file to use for genome sequence requests.  All\n    requests are recorded and can be writen to a lookup table file\n    using the <code>write</code> method.\ndefault_seq: if given, this base will always be returned if\n    region is unavailable.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">lookup</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">db_filename</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">default_seq</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">create_data</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, "howard.objects.genome.MockGenomeTestFile.get_seq": {"fullname": "howard.objects.genome.MockGenomeTestFile.get_seq", "modulename": "howard.objects.genome", "qualname": "MockGenomeTestFile.get_seq", "kind": "function", "doc": "<p>Return a sequence by chromosome name and region [start, end).</p>\n\n<p>Coordinates are 0-based, end-exclusive.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">chrom</span>, </span><span class=\"param\"><span class=\"n\">start</span>, </span><span class=\"param\"><span class=\"n\">end</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.objects.hgvs": {"fullname": "howard.objects.hgvs", "modulename": "howard.objects.hgvs", "kind": "module", "doc": "<p>HGVS language currently implemented.</p>\n\n<p>HGVS = ALLELE\n     | PREFIX_NAME : ALLELE</p>\n\n<p>PREFIX_NAME = TRANSCRIPT\n            | TRANSCRIPT '(' GENE ')'</p>\n\n<p>TRANSCRIPT = TRANSCRIPT_NAME\n           | TRANSCRIPT_NAME '.' TRANSCRIPT_VERSION</p>\n\n<p>TRANSCRIPT_VERSION = NUMBER</p>\n\n<p>ALLELE = 'c.' CDNA_ALLELE    # cDNA\n       | 'g.' GENOMIC_ALLELE # genomic\n       | 'm.' MIT_ALLELE     # mitochondrial sequence\n       | 'n.' NC_ALLELE      # non-coding RNA reference sequence\n       | 'r.' RNA_ALLELE     # RNA sequence (like r.76a>u)\n       | 'p.' PROTEIN_ALLELE # protein sequence (like  p.Lys76Asn)</p>\n\n<p>NC_ALLELE =\nRNA_ALLELE =\nCDNA_ALLELE = CDNA_COORD SINGLE_BASE_CHANGE\n            | CDNA_COORD_RANGE MULTI_BASE_CHANGE</p>\n\n<p>GENOMIC_ALLELE =\nMIT_ALLELE = COORD SINGLE_BASE_CHANGE\n           | COORD_RANGE MULTI_BASE_CHANGE</p>\n\n<p>SINGLE_BASE_CHANGE = CDNA_ALLELE = CDNA_COORD BASE '='        # no change\n                   | CDNA_COORD BASE '>' BASE                 # substitution\n                   | CDNA_COORD 'ins' BASE                    # 1bp insertion\n                   | CDNA_COORD 'del' BASE                    # 1bp deletion\n                   | CDNA_COORD 'dup' BASE                    # 1bp duplication\n                   | CDNA_COORD 'ins'                         # 1bp insertion\n                   | CDNA_COORD 'del'                         # 1bp deletion\n                   | CDNA_COORD 'dup'                         # 1bp duplication\n                   | CDNA_COORD 'del' BASE 'ins' BASE         # 1bp indel\n                   | CDNA_COORD 'delins' BASE                 # 1bp indel</p>\n\n<p>MULTI_BASE_CHANGE = COORD_RANGE 'del' BASES             # deletion\n                  | COORD_RANGE 'ins' BASES             # insertion\n                  | COORD_RANGE 'dup' BASES             # duplication\n                  | COORD_RANGE 'del'                   # deletion\n                  | COORD_RANGE 'dup'                   # duplication\n                  | COORD_RANGE 'del' BASES 'ins' BASES # indel\n                  | COORD_RANGE 'delins' BASES          # indel</p>\n\n<p>AMINO1 = [GAVLIMFWPSTCYNQDEKRH]</p>\n\n<p>AMINO3 = 'Gly' | 'Ala' | 'Val' | 'Leu' | 'Ile' | 'Met' | 'Phe' | 'Trp' | 'Pro'\n       | 'Ser' | 'Thr' | 'Cys' | 'Tyr' | 'Asn' | 'Gln' | 'Asp' | 'Glu' | 'Lys'\n       | 'Arg' | 'His'</p>\n\n<p>PROTEIN_ALLELE = AMINO3 COORD '='               # no peptide change\n               | AMINO1 COORD '='               # no peptide change\n               | AMINO3 COORD AMINO3 PEP_EXTRA  # peptide change\n               | AMINO1 COORD AMINO1 PEP_EXTRA  # peptide change\n               | AMINO3 COORD '_' AMINO3 COORD PEP_EXTRA        # indel\n               | AMINO1 COORD '_' AMINO1 COORD PEP_EXTRA        # indel\n               | AMINO3 COORD '_' AMINO3 COORD PEP_EXTRA AMINO3 # indel\n               | AMINO1 COORD '_' AMINO1 COORD PEP_EXTRA AMINO1 # indel</p>\n\n<h1 id=\"a-genomic-range\">A genomic range:</h1>\n\n<p>COORD_RANGE = COORD '_' COORD</p>\n\n<h1 id=\"a-cdna-range\">A cDNA range:</h1>\n\n<p>CDNA_COORD_RANGE = CDNA_COORD '_' CDNA_COORD</p>\n\n<h1 id=\"a-cdna-coordinate\">A cDNA coordinate:</h1>\n\n<p>CDNA_COORD = COORD_PREFIX COORD\n           | COORD_PREFIX COORD OFFSET_PREFIX OFFSET\nCOORD_PREFIX = '' | '-' | '*'\nCOORD = NUMBER\nOFFSET_PREFIX = '-' | '+'\nOFFSET = NUMBER</p>\n\n<h1 id=\"primatives\">Primatives:</h1>\n\n<p>NUMBER = \"\\d+\"\nBASE = [ACGT]\nBASES = BASE+</p>\n"}, "howard.objects.hgvs.CHROM_PREFIX": {"fullname": "howard.objects.hgvs.CHROM_PREFIX", "modulename": "howard.objects.hgvs", "qualname": "CHROM_PREFIX", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;chr&#x27;"}, "howard.objects.hgvs.CODON_1": {"fullname": "howard.objects.hgvs.CODON_1", "modulename": "howard.objects.hgvs", "qualname": "CODON_1", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;TTT&#x27;: &#x27;F&#x27;, &#x27;TTC&#x27;: &#x27;F&#x27;, &#x27;TCT&#x27;: &#x27;S&#x27;, &#x27;TCC&#x27;: &#x27;S&#x27;, &#x27;TAT&#x27;: &#x27;Y&#x27;, &#x27;TAC&#x27;: &#x27;Y&#x27;, &#x27;TGT&#x27;: &#x27;C&#x27;, &#x27;TGC&#x27;: &#x27;C&#x27;, &#x27;TTA&#x27;: &#x27;L&#x27;, &#x27;TCA&#x27;: &#x27;S&#x27;, &#x27;TAA&#x27;: &#x27;*&#x27;, &#x27;TGA&#x27;: &#x27;*&#x27;, &#x27;TTG&#x27;: &#x27;L&#x27;, &#x27;TCG&#x27;: &#x27;S&#x27;, &#x27;TAG&#x27;: &#x27;*&#x27;, &#x27;TGG&#x27;: &#x27;W&#x27;, &#x27;CTT&#x27;: &#x27;L&#x27;, &#x27;CTC&#x27;: &#x27;L&#x27;, &#x27;CCT&#x27;: &#x27;P&#x27;, &#x27;CCC&#x27;: &#x27;P&#x27;, &#x27;CAT&#x27;: &#x27;H&#x27;, &#x27;CAC&#x27;: &#x27;H&#x27;, &#x27;CGT&#x27;: &#x27;R&#x27;, &#x27;CGC&#x27;: &#x27;R&#x27;, &#x27;CTA&#x27;: &#x27;L&#x27;, &#x27;CTG&#x27;: &#x27;L&#x27;, &#x27;CCA&#x27;: &#x27;P&#x27;, &#x27;CCG&#x27;: &#x27;P&#x27;, &#x27;CAA&#x27;: &#x27;Q&#x27;, &#x27;CAG&#x27;: &#x27;Q&#x27;, &#x27;CGA&#x27;: &#x27;R&#x27;, &#x27;CGG&#x27;: &#x27;R&#x27;, &#x27;ATT&#x27;: &#x27;I&#x27;, &#x27;ATC&#x27;: &#x27;I&#x27;, &#x27;ACT&#x27;: &#x27;T&#x27;, &#x27;ACC&#x27;: &#x27;T&#x27;, &#x27;AAT&#x27;: &#x27;N&#x27;, &#x27;AAC&#x27;: &#x27;N&#x27;, &#x27;AGT&#x27;: &#x27;S&#x27;, &#x27;AGC&#x27;: &#x27;S&#x27;, &#x27;ATA&#x27;: &#x27;I&#x27;, &#x27;ACA&#x27;: &#x27;T&#x27;, &#x27;AAA&#x27;: &#x27;K&#x27;, &#x27;AGA&#x27;: &#x27;R&#x27;, &#x27;ATG&#x27;: &#x27;M&#x27;, &#x27;ACG&#x27;: &#x27;T&#x27;, &#x27;AAG&#x27;: &#x27;K&#x27;, &#x27;AGG&#x27;: &#x27;R&#x27;, &#x27;GTT&#x27;: &#x27;V&#x27;, &#x27;GTC&#x27;: &#x27;V&#x27;, &#x27;GCT&#x27;: &#x27;A&#x27;, &#x27;GCC&#x27;: &#x27;A&#x27;, &#x27;GAT&#x27;: &#x27;D&#x27;, &#x27;GAC&#x27;: &#x27;D&#x27;, &#x27;GGT&#x27;: &#x27;G&#x27;, &#x27;GGC&#x27;: &#x27;G&#x27;, &#x27;GTA&#x27;: &#x27;V&#x27;, &#x27;GTG&#x27;: &#x27;V&#x27;, &#x27;GCA&#x27;: &#x27;A&#x27;, &#x27;GCG&#x27;: &#x27;A&#x27;, &#x27;GAA&#x27;: &#x27;E&#x27;, &#x27;GAG&#x27;: &#x27;E&#x27;, &#x27;GGA&#x27;: &#x27;G&#x27;, &#x27;GGG&#x27;: &#x27;G&#x27;}"}, "howard.objects.hgvs.CODON_3": {"fullname": "howard.objects.hgvs.CODON_3", "modulename": "howard.objects.hgvs", "qualname": "CODON_3", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;TTT&#x27;: &#x27;Phe&#x27;, &#x27;TTC&#x27;: &#x27;Phe&#x27;, &#x27;TCT&#x27;: &#x27;Ser&#x27;, &#x27;TCC&#x27;: &#x27;Ser&#x27;, &#x27;TAT&#x27;: &#x27;Tyr&#x27;, &#x27;TAC&#x27;: &#x27;Tyr&#x27;, &#x27;TGT&#x27;: &#x27;Cys&#x27;, &#x27;TGC&#x27;: &#x27;Cys&#x27;, &#x27;TTA&#x27;: &#x27;Leu&#x27;, &#x27;TCA&#x27;: &#x27;Ser&#x27;, &#x27;TAA&#x27;: &#x27;*&#x27;, &#x27;TGA&#x27;: &#x27;*&#x27;, &#x27;TTG&#x27;: &#x27;Leu&#x27;, &#x27;TCG&#x27;: &#x27;Ser&#x27;, &#x27;TAG&#x27;: &#x27;*&#x27;, &#x27;TGG&#x27;: &#x27;Trp&#x27;, &#x27;CTT&#x27;: &#x27;Leu&#x27;, &#x27;CTC&#x27;: &#x27;Leu&#x27;, &#x27;CCT&#x27;: &#x27;Pro&#x27;, &#x27;CCC&#x27;: &#x27;Pro&#x27;, &#x27;CAT&#x27;: &#x27;His&#x27;, &#x27;CAC&#x27;: &#x27;His&#x27;, &#x27;CGT&#x27;: &#x27;Arg&#x27;, &#x27;CGC&#x27;: &#x27;Arg&#x27;, &#x27;CTA&#x27;: &#x27;Leu&#x27;, &#x27;CTG&#x27;: &#x27;Leu&#x27;, &#x27;CCA&#x27;: &#x27;Pro&#x27;, &#x27;CCG&#x27;: &#x27;Pro&#x27;, &#x27;CAA&#x27;: &#x27;Gln&#x27;, &#x27;CAG&#x27;: &#x27;Gln&#x27;, &#x27;CGA&#x27;: &#x27;Arg&#x27;, &#x27;CGG&#x27;: &#x27;Arg&#x27;, &#x27;ATT&#x27;: &#x27;Ile&#x27;, &#x27;ATC&#x27;: &#x27;Ile&#x27;, &#x27;ACT&#x27;: &#x27;Thr&#x27;, &#x27;ACC&#x27;: &#x27;Thr&#x27;, &#x27;AAT&#x27;: &#x27;Asn&#x27;, &#x27;AAC&#x27;: &#x27;Asn&#x27;, &#x27;AGT&#x27;: &#x27;Ser&#x27;, &#x27;AGC&#x27;: &#x27;Ser&#x27;, &#x27;ATA&#x27;: &#x27;Ile&#x27;, &#x27;ACA&#x27;: &#x27;Thr&#x27;, &#x27;AAA&#x27;: &#x27;Lys&#x27;, &#x27;AGA&#x27;: &#x27;Arg&#x27;, &#x27;ATG&#x27;: &#x27;Met&#x27;, &#x27;ACG&#x27;: &#x27;Thr&#x27;, &#x27;AAG&#x27;: &#x27;Lys&#x27;, &#x27;AGG&#x27;: &#x27;Arg&#x27;, &#x27;GTT&#x27;: &#x27;Val&#x27;, &#x27;GTC&#x27;: &#x27;Val&#x27;, &#x27;GCT&#x27;: &#x27;Ala&#x27;, &#x27;GCC&#x27;: &#x27;Ala&#x27;, &#x27;GAT&#x27;: &#x27;Asp&#x27;, &#x27;GAC&#x27;: &#x27;Asp&#x27;, &#x27;GGT&#x27;: &#x27;Gly&#x27;, &#x27;GGC&#x27;: &#x27;Gly&#x27;, &#x27;GTA&#x27;: &#x27;Val&#x27;, &#x27;GTG&#x27;: &#x27;Val&#x27;, &#x27;GCA&#x27;: &#x27;Ala&#x27;, &#x27;GCG&#x27;: &#x27;Ala&#x27;, &#x27;GAA&#x27;: &#x27;Glu&#x27;, &#x27;GAG&#x27;: &#x27;Glu&#x27;, &#x27;GGA&#x27;: &#x27;Gly&#x27;, &#x27;GGG&#x27;: &#x27;Gly&#x27;}"}, "howard.objects.hgvs.CODON_FULL": {"fullname": "howard.objects.hgvs.CODON_FULL", "modulename": "howard.objects.hgvs", "qualname": "CODON_FULL", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;TTT&#x27;: &#x27;Phenylalanine&#x27;, &#x27;TTC&#x27;: &#x27;Phenylalanine&#x27;, &#x27;TCT&#x27;: &#x27;Serine&#x27;, &#x27;TCC&#x27;: &#x27;Serine&#x27;, &#x27;TAT&#x27;: &#x27;Tyrosine&#x27;, &#x27;TAC&#x27;: &#x27;Tyrosine&#x27;, &#x27;TGT&#x27;: &#x27;Cysteine&#x27;, &#x27;TGC&#x27;: &#x27;Cysteine&#x27;, &#x27;TTA&#x27;: &#x27;Leucine&#x27;, &#x27;TCA&#x27;: &#x27;Serine&#x27;, &#x27;TAA&#x27;: &#x27;Stop&#x27;, &#x27;TGA&#x27;: &#x27;Stop&#x27;, &#x27;TTG&#x27;: &#x27;Leucine&#x27;, &#x27;TCG&#x27;: &#x27;Serine&#x27;, &#x27;TAG&#x27;: &#x27;Stop&#x27;, &#x27;TGG&#x27;: &#x27;Tryptophan&#x27;, &#x27;CTT&#x27;: &#x27;Leucine&#x27;, &#x27;CTC&#x27;: &#x27;Leucine&#x27;, &#x27;CCT&#x27;: &#x27;Proline&#x27;, &#x27;CCC&#x27;: &#x27;Proline&#x27;, &#x27;CAT&#x27;: &#x27;Histidine&#x27;, &#x27;CAC&#x27;: &#x27;Histidine&#x27;, &#x27;CGT&#x27;: &#x27;Arginine&#x27;, &#x27;CGC&#x27;: &#x27;Arginine&#x27;, &#x27;CTA&#x27;: &#x27;Leucine&#x27;, &#x27;CTG&#x27;: &#x27;Leucine&#x27;, &#x27;CCA&#x27;: &#x27;Proline&#x27;, &#x27;CCG&#x27;: &#x27;Proline&#x27;, &#x27;CAA&#x27;: &#x27;Glutamine&#x27;, &#x27;CAG&#x27;: &#x27;Glutamine&#x27;, &#x27;CGA&#x27;: &#x27;Arginine&#x27;, &#x27;CGG&#x27;: &#x27;Arginine&#x27;, &#x27;ATT&#x27;: &#x27;Isoleucine&#x27;, &#x27;ATC&#x27;: &#x27;Isoleucine&#x27;, &#x27;ACT&#x27;: &#x27;Threonine&#x27;, &#x27;ACC&#x27;: &#x27;Threonine&#x27;, &#x27;AAT&#x27;: &#x27;Asparagine&#x27;, &#x27;AAC&#x27;: &#x27;Asparagine&#x27;, &#x27;AGT&#x27;: &#x27;Serine&#x27;, &#x27;AGC&#x27;: &#x27;Serine&#x27;, &#x27;ATA&#x27;: &#x27;Isoleucine&#x27;, &#x27;ACA&#x27;: &#x27;Threonine&#x27;, &#x27;AAA&#x27;: &#x27;Lysine&#x27;, &#x27;AGA&#x27;: &#x27;Arginine&#x27;, &#x27;ATG&#x27;: &#x27;Methionine&#x27;, &#x27;ACG&#x27;: &#x27;Threonine&#x27;, &#x27;AAG&#x27;: &#x27;Lysine&#x27;, &#x27;AGG&#x27;: &#x27;Arginine&#x27;, &#x27;GTT&#x27;: &#x27;Valine&#x27;, &#x27;GTC&#x27;: &#x27;Valine&#x27;, &#x27;GCT&#x27;: &#x27;Alanine&#x27;, &#x27;GCC&#x27;: &#x27;Alanine&#x27;, &#x27;GAT&#x27;: &#x27;Aspartic acid&#x27;, &#x27;GAC&#x27;: &#x27;Aspartic acid&#x27;, &#x27;GGT&#x27;: &#x27;Glycine&#x27;, &#x27;GGC&#x27;: &#x27;Glycine&#x27;, &#x27;GTA&#x27;: &#x27;Valine&#x27;, &#x27;GTG&#x27;: &#x27;Valine&#x27;, &#x27;GCA&#x27;: &#x27;Alanine&#x27;, &#x27;GCG&#x27;: &#x27;Alanine&#x27;, &#x27;GAA&#x27;: &#x27;Glutamic acid&#x27;, &#x27;GAG&#x27;: &#x27;Glutamic acid&#x27;, &#x27;GGA&#x27;: &#x27;Glycine&#x27;, &#x27;GGG&#x27;: &#x27;Glycine&#x27;}"}, "howard.objects.hgvs.NUCLEOTIDE_TRANSLATE": {"fullname": "howard.objects.hgvs.NUCLEOTIDE_TRANSLATE", "modulename": "howard.objects.hgvs", "qualname": "NUCLEOTIDE_TRANSLATE", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;T&#x27;: &#x27;A&#x27;, &#x27;A&#x27;: &#x27;T&#x27;, &#x27;G&#x27;: &#x27;C&#x27;, &#x27;C&#x27;: &#x27;G&#x27;}"}, "howard.objects.hgvs.HGVSRegex": {"fullname": "howard.objects.hgvs.HGVSRegex", "modulename": "howard.objects.hgvs", "qualname": "HGVSRegex", "kind": "class", "doc": "<p>All regular expression for HGVS names.</p>\n"}, "howard.objects.hgvs.HGVSRegex.BASE": {"fullname": "howard.objects.hgvs.HGVSRegex.BASE", "modulename": "howard.objects.hgvs", "qualname": "HGVSRegex.BASE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]|\\\\d+&#x27;"}, "howard.objects.hgvs.HGVSRegex.BASES": {"fullname": "howard.objects.hgvs.HGVSRegex.BASES", "modulename": "howard.objects.hgvs", "qualname": "HGVSRegex.BASES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+&#x27;"}, "howard.objects.hgvs.HGVSRegex.DNA_REF": {"fullname": "howard.objects.hgvs.HGVSRegex.DNA_REF", "modulename": "howard.objects.hgvs", "qualname": "HGVSRegex.DNA_REF", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;(?P&lt;ref&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)&#x27;"}, "howard.objects.hgvs.HGVSRegex.DNA_ALT": {"fullname": "howard.objects.hgvs.HGVSRegex.DNA_ALT", "modulename": "howard.objects.hgvs", "qualname": "HGVSRegex.DNA_ALT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;(?P&lt;alt&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)&#x27;"}, "howard.objects.hgvs.HGVSRegex.EQUAL": {"fullname": "howard.objects.hgvs.HGVSRegex.EQUAL", "modulename": "howard.objects.hgvs", "qualname": "HGVSRegex.EQUAL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;(?P&lt;mutation_type&gt;=)&#x27;"}, "howard.objects.hgvs.HGVSRegex.SUB": {"fullname": "howard.objects.hgvs.HGVSRegex.SUB", "modulename": "howard.objects.hgvs", "qualname": "HGVSRegex.SUB", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;(?P&lt;mutation_type&gt;&gt;)&#x27;"}, "howard.objects.hgvs.HGVSRegex.INS": {"fullname": "howard.objects.hgvs.HGVSRegex.INS", "modulename": "howard.objects.hgvs", "qualname": "HGVSRegex.INS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;(?P&lt;mutation_type&gt;ins)&#x27;"}, "howard.objects.hgvs.HGVSRegex.DEL": {"fullname": "howard.objects.hgvs.HGVSRegex.DEL", "modulename": "howard.objects.hgvs", "qualname": "HGVSRegex.DEL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;(?P&lt;mutation_type&gt;del)&#x27;"}, "howard.objects.hgvs.HGVSRegex.DUP": {"fullname": "howard.objects.hgvs.HGVSRegex.DUP", "modulename": "howard.objects.hgvs", "qualname": "HGVSRegex.DUP", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;(?P&lt;mutation_type&gt;dup)&#x27;"}, "howard.objects.hgvs.HGVSRegex.COORD_START": {"fullname": "howard.objects.hgvs.HGVSRegex.COORD_START", "modulename": "howard.objects.hgvs", "qualname": "HGVSRegex.COORD_START", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;(?P&lt;start&gt;\\\\d+)&#x27;"}, "howard.objects.hgvs.HGVSRegex.COORD_END": {"fullname": "howard.objects.hgvs.HGVSRegex.COORD_END", "modulename": "howard.objects.hgvs", "qualname": "HGVSRegex.COORD_END", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;(?P&lt;end&gt;\\\\d+)&#x27;"}, "howard.objects.hgvs.HGVSRegex.COORD_RANGE": {"fullname": "howard.objects.hgvs.HGVSRegex.COORD_RANGE", "modulename": "howard.objects.hgvs", "qualname": "HGVSRegex.COORD_RANGE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;(?P&lt;start&gt;\\\\d+)_(?P&lt;end&gt;\\\\d+)&#x27;"}, "howard.objects.hgvs.HGVSRegex.CDNA_COORD": {"fullname": "howard.objects.hgvs.HGVSRegex.CDNA_COORD", "modulename": "howard.objects.hgvs", "qualname": "HGVSRegex.CDNA_COORD", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;(?P&lt;coord_prefix&gt;|-|\\\\*)(?P&lt;coord&gt;\\\\d+)((?P&lt;offset_prefix&gt;-|\\\\+)(?P&lt;offset&gt;\\\\d+))?&#x27;"}, "howard.objects.hgvs.HGVSRegex.CDNA_START": {"fullname": "howard.objects.hgvs.HGVSRegex.CDNA_START", "modulename": "howard.objects.hgvs", "qualname": "HGVSRegex.CDNA_START", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;(?P&lt;start&gt;(?P&lt;start_coord_prefix&gt;|-|\\\\*)(?P&lt;start_coord&gt;\\\\d+)((?P&lt;start_offset_prefix&gt;-|\\\\+)(?P&lt;start_offset&gt;\\\\d+))?)&#x27;"}, "howard.objects.hgvs.HGVSRegex.CDNA_END": {"fullname": "howard.objects.hgvs.HGVSRegex.CDNA_END", "modulename": "howard.objects.hgvs", "qualname": "HGVSRegex.CDNA_END", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;(?P&lt;end&gt;(?P&lt;end_coord_prefix&gt;|-|\\\\*)(?P&lt;end_coord&gt;\\\\d+)((?P&lt;end_offset_prefix&gt;-|\\\\+)(?P&lt;end_offset&gt;\\\\d+))?)&#x27;"}, "howard.objects.hgvs.HGVSRegex.CDNA_RANGE": {"fullname": "howard.objects.hgvs.HGVSRegex.CDNA_RANGE", "modulename": "howard.objects.hgvs", "qualname": "HGVSRegex.CDNA_RANGE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;(?P&lt;start&gt;(?P&lt;start_coord_prefix&gt;|-|\\\\*)(?P&lt;start_coord&gt;\\\\d+)((?P&lt;start_offset_prefix&gt;-|\\\\+)(?P&lt;start_offset&gt;\\\\d+))?)_(?P&lt;end&gt;(?P&lt;end_coord_prefix&gt;|-|\\\\*)(?P&lt;end_coord&gt;\\\\d+)((?P&lt;end_offset_prefix&gt;-|\\\\+)(?P&lt;end_offset&gt;\\\\d+))?)&#x27;"}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE": {"fullname": "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE", "modulename": "howard.objects.hgvs", "qualname": "HGVSRegex.CDNA_ALLELE", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;(?P&lt;start&gt;(?P&lt;start_coord_prefix&gt;|-|\\\\*)(?P&lt;start_coord&gt;\\\\d+)((?P&lt;start_offset_prefix&gt;-|\\\\+)(?P&lt;start_offset&gt;\\\\d+))?)(?P&lt;mutation_type&gt;=)&#x27;, &#x27;(?P&lt;start&gt;(?P&lt;start_coord_prefix&gt;|-|\\\\*)(?P&lt;start_coord&gt;\\\\d+)((?P&lt;start_offset_prefix&gt;-|\\\\+)(?P&lt;start_offset&gt;\\\\d+))?)(?P&lt;ref&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)(?P&lt;mutation_type&gt;=)&#x27;, &#x27;(?P&lt;start&gt;(?P&lt;start_coord_prefix&gt;|-|\\\\*)(?P&lt;start_coord&gt;\\\\d+)((?P&lt;start_offset_prefix&gt;-|\\\\+)(?P&lt;start_offset&gt;\\\\d+))?)(?P&lt;ref&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)(?P&lt;mutation_type&gt;&gt;)(?P&lt;alt&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)&#x27;, &#x27;(?P&lt;start&gt;(?P&lt;start_coord_prefix&gt;|-|\\\\*)(?P&lt;start_coord&gt;\\\\d+)((?P&lt;start_offset_prefix&gt;-|\\\\+)(?P&lt;start_offset&gt;\\\\d+))?)(?P&lt;mutation_type&gt;ins)(?P&lt;alt&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)&#x27;, &#x27;(?P&lt;start&gt;(?P&lt;start_coord_prefix&gt;|-|\\\\*)(?P&lt;start_coord&gt;\\\\d+)((?P&lt;start_offset_prefix&gt;-|\\\\+)(?P&lt;start_offset&gt;\\\\d+))?)(?P&lt;mutation_type&gt;del)(?P&lt;ref&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)&#x27;, &#x27;(?P&lt;start&gt;(?P&lt;start_coord_prefix&gt;|-|\\\\*)(?P&lt;start_coord&gt;\\\\d+)((?P&lt;start_offset_prefix&gt;-|\\\\+)(?P&lt;start_offset&gt;\\\\d+))?)(?P&lt;mutation_type&gt;dup)(?P&lt;ref&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)&#x27;, &#x27;(?P&lt;start&gt;(?P&lt;start_coord_prefix&gt;|-|\\\\*)(?P&lt;start_coord&gt;\\\\d+)((?P&lt;start_offset_prefix&gt;-|\\\\+)(?P&lt;start_offset&gt;\\\\d+))?)(?P&lt;mutation_type&gt;del)&#x27;, &#x27;(?P&lt;start&gt;(?P&lt;start_coord_prefix&gt;|-|\\\\*)(?P&lt;start_coord&gt;\\\\d+)((?P&lt;start_offset_prefix&gt;-|\\\\+)(?P&lt;start_offset&gt;\\\\d+))?)(?P&lt;mutation_type&gt;dup)&#x27;, &#x27;(?P&lt;start&gt;\\\\d+)_(?P&lt;end&gt;\\\\d+)(?P&lt;mutation_type&gt;=)&#x27;, &#x27;(?P&lt;start&gt;(?P&lt;start_coord_prefix&gt;|-|\\\\*)(?P&lt;start_coord&gt;\\\\d+)((?P&lt;start_offset_prefix&gt;-|\\\\+)(?P&lt;start_offset&gt;\\\\d+))?)_(?P&lt;end&gt;(?P&lt;end_coord_prefix&gt;|-|\\\\*)(?P&lt;end_coord&gt;\\\\d+)((?P&lt;end_offset_prefix&gt;-|\\\\+)(?P&lt;end_offset&gt;\\\\d+))?)(?P&lt;mutation_type&gt;ins)(?P&lt;alt&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)&#x27;, &#x27;(?P&lt;start&gt;(?P&lt;start_coord_prefix&gt;|-|\\\\*)(?P&lt;start_coord&gt;\\\\d+)((?P&lt;start_offset_prefix&gt;-|\\\\+)(?P&lt;start_offset&gt;\\\\d+))?)_(?P&lt;end&gt;(?P&lt;end_coord_prefix&gt;|-|\\\\*)(?P&lt;end_coord&gt;\\\\d+)((?P&lt;end_offset_prefix&gt;-|\\\\+)(?P&lt;end_offset&gt;\\\\d+))?)(?P&lt;mutation_type&gt;del)(?P&lt;ref&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)&#x27;, &#x27;(?P&lt;start&gt;(?P&lt;start_coord_prefix&gt;|-|\\\\*)(?P&lt;start_coord&gt;\\\\d+)((?P&lt;start_offset_prefix&gt;-|\\\\+)(?P&lt;start_offset&gt;\\\\d+))?)_(?P&lt;end&gt;(?P&lt;end_coord_prefix&gt;|-|\\\\*)(?P&lt;end_coord&gt;\\\\d+)((?P&lt;end_offset_prefix&gt;-|\\\\+)(?P&lt;end_offset&gt;\\\\d+))?)(?P&lt;mutation_type&gt;dup)(?P&lt;ref&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)&#x27;, &#x27;(?P&lt;start&gt;(?P&lt;start_coord_prefix&gt;|-|\\\\*)(?P&lt;start_coord&gt;\\\\d+)((?P&lt;start_offset_prefix&gt;-|\\\\+)(?P&lt;start_offset&gt;\\\\d+))?)_(?P&lt;end&gt;(?P&lt;end_coord_prefix&gt;|-|\\\\*)(?P&lt;end_coord&gt;\\\\d+)((?P&lt;end_offset_prefix&gt;-|\\\\+)(?P&lt;end_offset&gt;\\\\d+))?)(?P&lt;mutation_type&gt;del)&#x27;, &#x27;(?P&lt;start&gt;(?P&lt;start_coord_prefix&gt;|-|\\\\*)(?P&lt;start_coord&gt;\\\\d+)((?P&lt;start_offset_prefix&gt;-|\\\\+)(?P&lt;start_offset&gt;\\\\d+))?)_(?P&lt;end&gt;(?P&lt;end_coord_prefix&gt;|-|\\\\*)(?P&lt;end_coord&gt;\\\\d+)((?P&lt;end_offset_prefix&gt;-|\\\\+)(?P&lt;end_offset&gt;\\\\d+))?)(?P&lt;mutation_type&gt;dup)&#x27;, &#x27;(?P&lt;delins&gt;(?P&lt;start&gt;(?P&lt;start_coord_prefix&gt;|-|\\\\*)(?P&lt;start_coord&gt;\\\\d+)((?P&lt;start_offset_prefix&gt;-|\\\\+)(?P&lt;start_offset&gt;\\\\d+))?)del(?P&lt;ref&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)ins(?P&lt;alt&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+))&#x27;, &#x27;(?P&lt;delins&gt;(?P&lt;start&gt;(?P&lt;start_coord_prefix&gt;|-|\\\\*)(?P&lt;start_coord&gt;\\\\d+)((?P&lt;start_offset_prefix&gt;-|\\\\+)(?P&lt;start_offset&gt;\\\\d+))?)_(?P&lt;end&gt;(?P&lt;end_coord_prefix&gt;|-|\\\\*)(?P&lt;end_coord&gt;\\\\d+)((?P&lt;end_offset_prefix&gt;-|\\\\+)(?P&lt;end_offset&gt;\\\\d+))?)del(?P&lt;ref&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)ins(?P&lt;alt&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+))&#x27;, &#x27;(?P&lt;delins&gt;(?P&lt;start&gt;(?P&lt;start_coord_prefix&gt;|-|\\\\*)(?P&lt;start_coord&gt;\\\\d+)((?P&lt;start_offset_prefix&gt;-|\\\\+)(?P&lt;start_offset&gt;\\\\d+))?)delins(?P&lt;alt&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+))&#x27;, &#x27;(?P&lt;delins&gt;(?P&lt;start&gt;(?P&lt;start_coord_prefix&gt;|-|\\\\*)(?P&lt;start_coord&gt;\\\\d+)((?P&lt;start_offset_prefix&gt;-|\\\\+)(?P&lt;start_offset&gt;\\\\d+))?)_(?P&lt;end&gt;(?P&lt;end_coord_prefix&gt;|-|\\\\*)(?P&lt;end_coord&gt;\\\\d+)((?P&lt;end_offset_prefix&gt;-|\\\\+)(?P&lt;end_offset&gt;\\\\d+))?)delins(?P&lt;alt&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+))&#x27;]"}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"fullname": "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES", "modulename": "howard.objects.hgvs", "qualname": "HGVSRegex.CDNA_ALLELE_REGEXES", "kind": "variable", "doc": "<p></p>\n", "default_value": "[re.compile(&#x27;^(?P&lt;start&gt;(?P&lt;start_coord_prefix&gt;|-|\\\\*)(?P&lt;start_coord&gt;\\\\d+)((?P&lt;start_offset_prefix&gt;-|\\\\+)(?P&lt;start_offset&gt;\\\\d+))?)(?P&lt;mutation_type&gt;=)$&#x27;), re.compile(&#x27;^(?P&lt;start&gt;(?P&lt;start_coord_prefix&gt;|-|\\\\*)(?P&lt;start_coord&gt;\\\\d+)((?P&lt;start_offset_prefix&gt;-|\\\\+)(?P&lt;start_offset&gt;\\\\d+))?)(?P&lt;ref&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)(?P&lt;mutation_type&gt;=)$&#x27;), re.compile(&#x27;^(?P&lt;start&gt;(?P&lt;start_coord_prefix&gt;|-|\\\\*)(?P&lt;start_coord&gt;\\\\d+)((?P&lt;start_offset_prefix&gt;-|\\\\+)(?P&lt;start_offset&gt;\\\\d+))?)(?P&lt;ref&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)(?P&lt;mutation_type&gt;&gt;)(?P&lt;alt&gt;[acgtb), re.compile(&#x27;^(?P&lt;start&gt;(?P&lt;start_coord_prefix&gt;|-|\\\\*)(?P&lt;start_coord&gt;\\\\d+)((?P&lt;start_offset_prefix&gt;-|\\\\+)(?P&lt;start_offset&gt;\\\\d+))?)(?P&lt;mutation_type&gt;ins)(?P&lt;alt&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)$&#x27;), re.compile(&#x27;^(?P&lt;start&gt;(?P&lt;start_coord_prefix&gt;|-|\\\\*)(?P&lt;start_coord&gt;\\\\d+)((?P&lt;start_offset_prefix&gt;-|\\\\+)(?P&lt;start_offset&gt;\\\\d+))?)(?P&lt;mutation_type&gt;del)(?P&lt;ref&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)$&#x27;), re.compile(&#x27;^(?P&lt;start&gt;(?P&lt;start_coord_prefix&gt;|-|\\\\*)(?P&lt;start_coord&gt;\\\\d+)((?P&lt;start_offset_prefix&gt;-|\\\\+)(?P&lt;start_offset&gt;\\\\d+))?)(?P&lt;mutation_type&gt;dup)(?P&lt;ref&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)$&#x27;), re.compile(&#x27;^(?P&lt;start&gt;(?P&lt;start_coord_prefix&gt;|-|\\\\*)(?P&lt;start_coord&gt;\\\\d+)((?P&lt;start_offset_prefix&gt;-|\\\\+)(?P&lt;start_offset&gt;\\\\d+))?)(?P&lt;mutation_type&gt;del)$&#x27;), re.compile(&#x27;^(?P&lt;start&gt;(?P&lt;start_coord_prefix&gt;|-|\\\\*)(?P&lt;start_coord&gt;\\\\d+)((?P&lt;start_offset_prefix&gt;-|\\\\+)(?P&lt;start_offset&gt;\\\\d+))?)(?P&lt;mutation_type&gt;dup)$&#x27;), re.compile(&#x27;^(?P&lt;start&gt;\\\\d+)_(?P&lt;end&gt;\\\\d+)(?P&lt;mutation_type&gt;=)$&#x27;), re.compile(&#x27;^(?P&lt;start&gt;(?P&lt;start_coord_prefix&gt;|-|\\\\*)(?P&lt;start_coord&gt;\\\\d+)((?P&lt;start_offset_prefix&gt;-|\\\\+)(?P&lt;start_offset&gt;\\\\d+))?)_(?P&lt;end&gt;(?P&lt;end_coord_prefix&gt;|-|\\\\*)(?P&lt;end_coord&gt;\\\\d+)((?P&lt;end_offset_prefix&gt;-|), re.compile(&#x27;^(?P&lt;start&gt;(?P&lt;start_coord_prefix&gt;|-|\\\\*)(?P&lt;start_coord&gt;\\\\d+)((?P&lt;start_offset_prefix&gt;-|\\\\+)(?P&lt;start_offset&gt;\\\\d+))?)_(?P&lt;end&gt;(?P&lt;end_coord_prefix&gt;|-|\\\\*)(?P&lt;end_coord&gt;\\\\d+)((?P&lt;end_offset_prefix&gt;-|), re.compile(&#x27;^(?P&lt;start&gt;(?P&lt;start_coord_prefix&gt;|-|\\\\*)(?P&lt;start_coord&gt;\\\\d+)((?P&lt;start_offset_prefix&gt;-|\\\\+)(?P&lt;start_offset&gt;\\\\d+))?)_(?P&lt;end&gt;(?P&lt;end_coord_prefix&gt;|-|\\\\*)(?P&lt;end_coord&gt;\\\\d+)((?P&lt;end_offset_prefix&gt;-|), re.compile(&#x27;^(?P&lt;start&gt;(?P&lt;start_coord_prefix&gt;|-|\\\\*)(?P&lt;start_coord&gt;\\\\d+)((?P&lt;start_offset_prefix&gt;-|\\\\+)(?P&lt;start_offset&gt;\\\\d+))?)_(?P&lt;end&gt;(?P&lt;end_coord_prefix&gt;|-|\\\\*)(?P&lt;end_coord&gt;\\\\d+)((?P&lt;end_offset_prefix&gt;-|), re.compile(&#x27;^(?P&lt;start&gt;(?P&lt;start_coord_prefix&gt;|-|\\\\*)(?P&lt;start_coord&gt;\\\\d+)((?P&lt;start_offset_prefix&gt;-|\\\\+)(?P&lt;start_offset&gt;\\\\d+))?)_(?P&lt;end&gt;(?P&lt;end_coord_prefix&gt;|-|\\\\*)(?P&lt;end_coord&gt;\\\\d+)((?P&lt;end_offset_prefix&gt;-|), re.compile(&#x27;^(?P&lt;delins&gt;(?P&lt;start&gt;(?P&lt;start_coord_prefix&gt;|-|\\\\*)(?P&lt;start_coord&gt;\\\\d+)((?P&lt;start_offset_prefix&gt;-|\\\\+)(?P&lt;start_offset&gt;\\\\d+))?)del(?P&lt;ref&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)ins(?P&lt;alt&gt;[acgtbdhk), re.compile(&#x27;^(?P&lt;delins&gt;(?P&lt;start&gt;(?P&lt;start_coord_prefix&gt;|-|\\\\*)(?P&lt;start_coord&gt;\\\\d+)((?P&lt;start_offset_prefix&gt;-|\\\\+)(?P&lt;start_offset&gt;\\\\d+))?)_(?P&lt;end&gt;(?P&lt;end_coord_prefix&gt;|-|\\\\*)(?P&lt;end_coord&gt;\\\\d+)((?P&lt;end_offse), re.compile(&#x27;^(?P&lt;delins&gt;(?P&lt;start&gt;(?P&lt;start_coord_prefix&gt;|-|\\\\*)(?P&lt;start_coord&gt;\\\\d+)((?P&lt;start_offset_prefix&gt;-|\\\\+)(?P&lt;start_offset&gt;\\\\d+))?)delins(?P&lt;alt&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+))$&#x27;), re.compile(&#x27;^(?P&lt;delins&gt;(?P&lt;start&gt;(?P&lt;start_coord_prefix&gt;|-|\\\\*)(?P&lt;start_coord&gt;\\\\d+)((?P&lt;start_offset_prefix&gt;-|\\\\+)(?P&lt;start_offset&gt;\\\\d+))?)_(?P&lt;end&gt;(?P&lt;end_coord_prefix&gt;|-|\\\\*)(?P&lt;end_coord&gt;\\\\d+)((?P&lt;end_offse)]"}, "howard.objects.hgvs.HGVSRegex.PEP": {"fullname": "howard.objects.hgvs.HGVSRegex.PEP", "modulename": "howard.objects.hgvs", "qualname": "HGVSRegex.PEP", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;([A-Z]([a-z]{2}))+&#x27;"}, "howard.objects.hgvs.HGVSRegex.PEP_REF": {"fullname": "howard.objects.hgvs.HGVSRegex.PEP_REF", "modulename": "howard.objects.hgvs", "qualname": "HGVSRegex.PEP_REF", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;(?P&lt;ref&gt;([A-Z]([a-z]{2}))+)&#x27;"}, "howard.objects.hgvs.HGVSRegex.PEP_REF2": {"fullname": "howard.objects.hgvs.HGVSRegex.PEP_REF2", "modulename": "howard.objects.hgvs", "qualname": "HGVSRegex.PEP_REF2", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;(?P&lt;ref2&gt;([A-Z]([a-z]{2}))+)&#x27;"}, "howard.objects.hgvs.HGVSRegex.PEP_ALT": {"fullname": "howard.objects.hgvs.HGVSRegex.PEP_ALT", "modulename": "howard.objects.hgvs", "qualname": "HGVSRegex.PEP_ALT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;(?P&lt;alt&gt;([A-Z]([a-z]{2}))+)&#x27;"}, "howard.objects.hgvs.HGVSRegex.PEP_EXTRA": {"fullname": "howard.objects.hgvs.HGVSRegex.PEP_EXTRA", "modulename": "howard.objects.hgvs", "qualname": "HGVSRegex.PEP_EXTRA", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;(?P&lt;extra&gt;(|=|\\\\?)(|fs))&#x27;"}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE": {"fullname": "howard.objects.hgvs.HGVSRegex.PEP_ALLELE", "modulename": "howard.objects.hgvs", "qualname": "HGVSRegex.PEP_ALLELE", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;(?P&lt;ref&gt;([A-Z]([a-z]{2}))+)(?P&lt;start&gt;\\\\d+)(?P&lt;extra&gt;(|=|\\\\?)(|fs))&#x27;, &#x27;(?P&lt;ref&gt;([A-Z]([a-z]{2}))+)(?P&lt;start&gt;\\\\d+)(?P&lt;alt&gt;([A-Z]([a-z]{2}))+)(?P&lt;extra&gt;(|=|\\\\?)(|fs))&#x27;, &#x27;(?P&lt;delins&gt;(?P&lt;ref&gt;([A-Z]([a-z]{2}))+)(?P&lt;start&gt;\\\\d+)_(?P&lt;ref2&gt;([A-Z]([a-z]{2}))+)(?P&lt;end&gt;\\\\d+)(?P&lt;extra&gt;(|=|\\\\?)(|fs)))&#x27;, &#x27;(?P&lt;delins&gt;(?P&lt;ref&gt;([A-Z]([a-z]{2}))+)(?P&lt;start&gt;\\\\d+)_(?P&lt;ref2&gt;([A-Z]([a-z]{2}))+)(?P&lt;end&gt;\\\\d+)(?P&lt;alt&gt;([A-Z]([a-z]{2}))+)(?P&lt;extra&gt;(|=|\\\\?)(|fs)))&#x27;]"}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE_REGEXES": {"fullname": "howard.objects.hgvs.HGVSRegex.PEP_ALLELE_REGEXES", "modulename": "howard.objects.hgvs", "qualname": "HGVSRegex.PEP_ALLELE_REGEXES", "kind": "variable", "doc": "<p></p>\n", "default_value": "[re.compile(&#x27;^(?P&lt;ref&gt;([A-Z]([a-z]{2}))+)(?P&lt;start&gt;\\\\d+)(?P&lt;extra&gt;(|=|\\\\?)(|fs))$&#x27;), re.compile(&#x27;^(?P&lt;ref&gt;([A-Z]([a-z]{2}))+)(?P&lt;start&gt;\\\\d+)(?P&lt;alt&gt;([A-Z]([a-z]{2}))+)(?P&lt;extra&gt;(|=|\\\\?)(|fs))$&#x27;), re.compile(&#x27;^(?P&lt;delins&gt;(?P&lt;ref&gt;([A-Z]([a-z]{2}))+)(?P&lt;start&gt;\\\\d+)_(?P&lt;ref2&gt;([A-Z]([a-z]{2}))+)(?P&lt;end&gt;\\\\d+)(?P&lt;extra&gt;(|=|\\\\?)(|fs)))$&#x27;), re.compile(&#x27;^(?P&lt;delins&gt;(?P&lt;ref&gt;([A-Z]([a-z]{2}))+)(?P&lt;start&gt;\\\\d+)_(?P&lt;ref2&gt;([A-Z]([a-z]{2}))+)(?P&lt;end&gt;\\\\d+)(?P&lt;alt&gt;([A-Z]([a-z]{2}))+)(?P&lt;extra&gt;(|=|\\\\?)(|fs)))$&#x27;)]"}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE": {"fullname": "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE", "modulename": "howard.objects.hgvs", "qualname": "HGVSRegex.GENOMIC_ALLELE", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;(?P&lt;start&gt;\\\\d+)(?P&lt;mutation_type&gt;=)&#x27;, &#x27;(?P&lt;start&gt;\\\\d+)(?P&lt;ref&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)(?P&lt;mutation_type&gt;=)&#x27;, &#x27;(?P&lt;start&gt;\\\\d+)(?P&lt;ref&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)(?P&lt;mutation_type&gt;&gt;)(?P&lt;alt&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)&#x27;, &#x27;(?P&lt;start&gt;\\\\d+)(?P&lt;mutation_type&gt;ins)(?P&lt;alt&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)&#x27;, &#x27;(?P&lt;start&gt;\\\\d+)(?P&lt;mutation_type&gt;del)(?P&lt;ref&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)&#x27;, &#x27;(?P&lt;start&gt;\\\\d+)(?P&lt;mutation_type&gt;dup)(?P&lt;ref&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)&#x27;, &#x27;(?P&lt;start&gt;\\\\d+)(?P&lt;mutation_type&gt;del)&#x27;, &#x27;(?P&lt;start&gt;\\\\d+)(?P&lt;mutation_type&gt;dup)&#x27;, &#x27;(?P&lt;start&gt;\\\\d+)_(?P&lt;end&gt;\\\\d+)(?P&lt;mutation_type&gt;=)&#x27;, &#x27;(?P&lt;start&gt;\\\\d+)_(?P&lt;end&gt;\\\\d+)(?P&lt;mutation_type&gt;ins)(?P&lt;alt&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)&#x27;, &#x27;(?P&lt;start&gt;\\\\d+)_(?P&lt;end&gt;\\\\d+)(?P&lt;mutation_type&gt;del)(?P&lt;ref&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)&#x27;, &#x27;(?P&lt;start&gt;\\\\d+)_(?P&lt;end&gt;\\\\d+)(?P&lt;mutation_type&gt;dup)(?P&lt;ref&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)&#x27;, &#x27;(?P&lt;start&gt;\\\\d+)_(?P&lt;end&gt;\\\\d+)(?P&lt;mutation_type&gt;del)&#x27;, &#x27;(?P&lt;start&gt;\\\\d+)_(?P&lt;end&gt;\\\\d+)(?P&lt;mutation_type&gt;dup)&#x27;, &#x27;(?P&lt;delins&gt;(?P&lt;start&gt;\\\\d+)del(?P&lt;ref&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)ins(?P&lt;alt&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+))&#x27;, &#x27;(?P&lt;delins&gt;(?P&lt;start&gt;\\\\d+)_(?P&lt;end&gt;\\\\d+)del(?P&lt;ref&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)ins(?P&lt;alt&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+))&#x27;, &#x27;(?P&lt;delins&gt;(?P&lt;start&gt;\\\\d+)delins(?P&lt;alt&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+))&#x27;, &#x27;(?P&lt;delins&gt;(?P&lt;start&gt;\\\\d+)_(?P&lt;end&gt;\\\\d+)delins(?P&lt;alt&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+))&#x27;]"}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE_REGEXES": {"fullname": "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE_REGEXES", "modulename": "howard.objects.hgvs", "qualname": "HGVSRegex.GENOMIC_ALLELE_REGEXES", "kind": "variable", "doc": "<p></p>\n", "default_value": "[re.compile(&#x27;^(?P&lt;start&gt;\\\\d+)(?P&lt;mutation_type&gt;=)$&#x27;), re.compile(&#x27;^(?P&lt;start&gt;\\\\d+)(?P&lt;ref&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)(?P&lt;mutation_type&gt;=)$&#x27;), re.compile(&#x27;^(?P&lt;start&gt;\\\\d+)(?P&lt;ref&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)(?P&lt;mutation_type&gt;&gt;)(?P&lt;alt&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)$&#x27;), re.compile(&#x27;^(?P&lt;start&gt;\\\\d+)(?P&lt;mutation_type&gt;ins)(?P&lt;alt&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)$&#x27;), re.compile(&#x27;^(?P&lt;start&gt;\\\\d+)(?P&lt;mutation_type&gt;del)(?P&lt;ref&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)$&#x27;), re.compile(&#x27;^(?P&lt;start&gt;\\\\d+)(?P&lt;mutation_type&gt;dup)(?P&lt;ref&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)$&#x27;), re.compile(&#x27;^(?P&lt;start&gt;\\\\d+)(?P&lt;mutation_type&gt;del)$&#x27;), re.compile(&#x27;^(?P&lt;start&gt;\\\\d+)(?P&lt;mutation_type&gt;dup)$&#x27;), re.compile(&#x27;^(?P&lt;start&gt;\\\\d+)_(?P&lt;end&gt;\\\\d+)(?P&lt;mutation_type&gt;=)$&#x27;), re.compile(&#x27;^(?P&lt;start&gt;\\\\d+)_(?P&lt;end&gt;\\\\d+)(?P&lt;mutation_type&gt;ins)(?P&lt;alt&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)$&#x27;), re.compile(&#x27;^(?P&lt;start&gt;\\\\d+)_(?P&lt;end&gt;\\\\d+)(?P&lt;mutation_type&gt;del)(?P&lt;ref&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)$&#x27;), re.compile(&#x27;^(?P&lt;start&gt;\\\\d+)_(?P&lt;end&gt;\\\\d+)(?P&lt;mutation_type&gt;dup)(?P&lt;ref&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)$&#x27;), re.compile(&#x27;^(?P&lt;start&gt;\\\\d+)_(?P&lt;end&gt;\\\\d+)(?P&lt;mutation_type&gt;del)$&#x27;), re.compile(&#x27;^(?P&lt;start&gt;\\\\d+)_(?P&lt;end&gt;\\\\d+)(?P&lt;mutation_type&gt;dup)$&#x27;), re.compile(&#x27;^(?P&lt;delins&gt;(?P&lt;start&gt;\\\\d+)del(?P&lt;ref&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)ins(?P&lt;alt&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+))$&#x27;), re.compile(&#x27;^(?P&lt;delins&gt;(?P&lt;start&gt;\\\\d+)_(?P&lt;end&gt;\\\\d+)del(?P&lt;ref&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+)ins(?P&lt;alt&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+))$&#x27;), re.compile(&#x27;^(?P&lt;delins&gt;(?P&lt;start&gt;\\\\d+)delins(?P&lt;alt&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+))$&#x27;), re.compile(&#x27;^(?P&lt;delins&gt;(?P&lt;start&gt;\\\\d+)_(?P&lt;end&gt;\\\\d+)delins(?P&lt;alt&gt;[acgtbdhkmnrsvwyACGTBDHKMNRSVWY]+|\\\\d+))$&#x27;)]"}, "howard.objects.hgvs.REFSEQ_PREFIXES": {"fullname": "howard.objects.hgvs.REFSEQ_PREFIXES", "modulename": "howard.objects.hgvs", "qualname": "REFSEQ_PREFIXES", "kind": "variable", "doc": "<p></p>\n", "default_value": "[(&#x27;AC_&#x27;, &#x27;genomic&#x27;, &#x27;Complete genomic molecule, usually alternate assembly&#x27;), (&#x27;NC_&#x27;, &#x27;genomic&#x27;, &#x27;Complete genomic molecule, usually reference assembly&#x27;), (&#x27;NG_&#x27;, &#x27;genomic&#x27;, &#x27;Incomplete genomic region&#x27;), (&#x27;NT_&#x27;, &#x27;genomic&#x27;, &#x27;Contig or scaffold, clone-based or WGS&#x27;), (&#x27;NW_&#x27;, &#x27;genomic&#x27;, &#x27;Contig or scaffold, primarily WGS&#x27;), (&#x27;NS_&#x27;, &#x27;genomic&#x27;, &#x27;Environmental sequence&#x27;), (&#x27;NZ_&#x27;, &#x27;genomic&#x27;, &#x27;Unfinished WGS&#x27;), (&#x27;NM_&#x27;, &#x27;mRNA&#x27;, &#x27;&#x27;), (&#x27;NR_&#x27;, &#x27;RNA&#x27;, &#x27;&#x27;), (&#x27;XM_&#x27;, &#x27;mRNA&#x27;, &#x27;Predicted model&#x27;), (&#x27;XR_&#x27;, &#x27;RNA&#x27;, &#x27;Predicted model&#x27;), (&#x27;AP_&#x27;, &#x27;Protein&#x27;, &#x27;Annotated on AC_ alternate assembly&#x27;), (&#x27;NP_&#x27;, &#x27;Protein&#x27;, &#x27;Associated with an NM_ or NC_ accession&#x27;), (&#x27;YP_&#x27;, &#x27;Protein&#x27;, &#x27;&#x27;), (&#x27;XP_&#x27;, &#x27;Protein&#x27;, &#x27;Predicted model, associated with an XM_ accession&#x27;), (&#x27;ZP_&#x27;, &#x27;Protein&#x27;, &#x27;Predicted model, annotated on NZ_ genomic records&#x27;)]"}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"fullname": "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP", "modulename": "howard.objects.hgvs", "qualname": "REFSEQ_PREFIX_LOOKUP", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;AC_&#x27;: (&#x27;genomic&#x27;, &#x27;Complete genomic molecule, usually alternate assembly&#x27;), &#x27;NC_&#x27;: (&#x27;genomic&#x27;, &#x27;Complete genomic molecule, usually reference assembly&#x27;), &#x27;NG_&#x27;: (&#x27;genomic&#x27;, &#x27;Incomplete genomic region&#x27;), &#x27;NT_&#x27;: (&#x27;genomic&#x27;, &#x27;Contig or scaffold, clone-based or WGS&#x27;), &#x27;NW_&#x27;: (&#x27;genomic&#x27;, &#x27;Contig or scaffold, primarily WGS&#x27;), &#x27;NS_&#x27;: (&#x27;genomic&#x27;, &#x27;Environmental sequence&#x27;), &#x27;NZ_&#x27;: (&#x27;genomic&#x27;, &#x27;Unfinished WGS&#x27;), &#x27;NM_&#x27;: (&#x27;mRNA&#x27;, &#x27;&#x27;), &#x27;NR_&#x27;: (&#x27;RNA&#x27;, &#x27;&#x27;), &#x27;XM_&#x27;: (&#x27;mRNA&#x27;, &#x27;Predicted model&#x27;), &#x27;XR_&#x27;: (&#x27;RNA&#x27;, &#x27;Predicted model&#x27;), &#x27;AP_&#x27;: (&#x27;Protein&#x27;, &#x27;Annotated on AC_ alternate assembly&#x27;), &#x27;NP_&#x27;: (&#x27;Protein&#x27;, &#x27;Associated with an NM_ or NC_ accession&#x27;), &#x27;YP_&#x27;: (&#x27;Protein&#x27;, &#x27;&#x27;), &#x27;XP_&#x27;: (&#x27;Protein&#x27;, &#x27;Predicted model, associated with an XM_ accession&#x27;), &#x27;ZP_&#x27;: (&#x27;Protein&#x27;, &#x27;Predicted model, annotated on NZ_ genomic records&#x27;)}"}, "howard.objects.hgvs.get_refseq_type": {"fullname": "howard.objects.hgvs.get_refseq_type", "modulename": "howard.objects.hgvs", "qualname": "get_refseq_type", "kind": "function", "doc": "<p>The <code>get_refseq_type</code> function returns the RefSeq type for a given RefSeq name.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong>:  The <code>name</code> parameter is a string representing a RefSeq name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>get_refseq_type</code> returns the RefSeq type for a given RefSeq name.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.hgvs.InvalidHGVSName": {"fullname": "howard.objects.hgvs.InvalidHGVSName", "modulename": "howard.objects.hgvs", "qualname": "InvalidHGVSName", "kind": "class", "doc": "<p>Inappropriate argument value (of correct type).</p>\n", "bases": "builtins.ValueError"}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"fullname": "howard.objects.hgvs.InvalidHGVSName.__init__", "modulename": "howard.objects.hgvs", "qualname": "InvalidHGVSName.__init__", "kind": "function", "doc": "<p>The function initializes an InvalidHGVSName object with a message, name, part, and reason.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong>:  The name parameter is a string that represents the invalid HGVS name. It is the\nname that is considered invalid and does not meet the required criteria</li>\n<li><strong>part</strong>:  The \"part\" parameter represents the part of the HGVS (Human Genome Variation\nSociety) name that is invalid. It is used to provide more specific information about the error\nthat occurred, defaults to name</li>\n<li><strong>reason</strong>:  The \"reason\" parameter is an optional argument that provides additional\ninformation or context for why the HGVS name is considered invalid. It can be used to provide\nspecific details about the error or to explain why the name does not meet the required criteria</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">part</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;name&#39;</span>, </span><span class=\"param\"><span class=\"n\">reason</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span>)</span>"}, "howard.objects.hgvs.InvalidHGVSName.name": {"fullname": "howard.objects.hgvs.InvalidHGVSName.name", "modulename": "howard.objects.hgvs", "qualname": "InvalidHGVSName.name", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.hgvs.InvalidHGVSName.part": {"fullname": "howard.objects.hgvs.InvalidHGVSName.part", "modulename": "howard.objects.hgvs", "qualname": "InvalidHGVSName.part", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.hgvs.InvalidHGVSName.reason": {"fullname": "howard.objects.hgvs.InvalidHGVSName.reason", "modulename": "howard.objects.hgvs", "qualname": "InvalidHGVSName.reason", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.hgvs.HGVSName": {"fullname": "howard.objects.hgvs.HGVSName", "modulename": "howard.objects.hgvs", "qualname": "HGVSName", "kind": "class", "doc": "<p>Represents a HGVS variant name.</p>\n"}, "howard.objects.hgvs.HGVSName.__init__": {"fullname": "howard.objects.hgvs.HGVSName.__init__", "modulename": "howard.objects.hgvs", "qualname": "HGVSName.__init__", "kind": "function", "doc": "<p>The function is a constructor that initializes various attributes of an object and parses a\ngiven name to populate those attributes.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong>:  The full HGVS name of the variant</li>\n<li><strong>prefix</strong>:  The <code>prefix</code> parameter is a string that is used as a prefix for the HGVS name. It\ncan be used to indicate additional information or context about the variant</li>\n<li><strong>chrom</strong>:  The <code>chrom</code> parameter represents the chromosome where the mutation occurs. It is a\nstring that specifies the chromosome number or identifier</li>\n<li><strong>transcript</strong>:  The <code>transcript</code> parameter represents the transcript ID or name associated\nwith the mutation. It is used to specify the specific transcript in which the mutation occurs</li>\n<li><strong>transcript_protein</strong>:  The <code>transcript_protein</code> parameter is used to store information about\nthe protein associated with the transcript. It can be used to specify the protein variant or\nisoform that is affected by the mutation</li>\n<li><strong>gene</strong>:  The \"gene\" parameter represents the gene associated with the variant. It is a\nstring that specifies the gene name or identifier</li>\n<li><strong>exon</strong>:  The <code>exon</code> parameter represents the exon number or range in which the mutation\noccurs. It is used to specify the location of the mutation within the transcript</li>\n<li><strong>kind</strong>:  The \"kind\" parameter is used to specify the type of variant or mutation. It can be\na string that represents the kind of mutation, such as \"substitution\", \"deletion\", \"insertion\",\netc. This parameter helps to categorize and describe the type of mutation being represented by\nthe</li>\n<li><strong>mutation_type</strong>:  The <code>mutation_type</code> parameter is used to specify the type of mutation. It\ncan be a string that represents the type of mutation, such as \"SNP\" (single nucleotide\npolymorphism), \"DEL\" (deletion), \"INS\" (insertion), etc</li>\n<li><strong>start</strong>:  The <code>start</code> parameter represents the starting position of the mutation or variant\nin the genomic sequence. It is an integer value that indicates the position of the mutation or\nvariant on the genomic sequence. If not provided, it defaults to 0, defaults to 0</li>\n<li><strong>end</strong>:  The \"end\" parameter represents the end position of the mutation or variant. It is an\ninteger value that indicates the position of the mutation or variant on the genomic sequence,\ndefaults to 0</li>\n<li><strong>ref_allele</strong>:  The <code>ref_allele</code> parameter represents the reference allele in a genetic\nmutation. It is the allele that is present in the reference genome at a specific position</li>\n<li><strong>ref2_allele</strong>:  The <code>ref2_allele</code> parameter represents the reference allele at the end of a\npeptide indel. In the context of genetic mutations, an indel refers to the insertion or deletion\nof nucleotides in a DNA sequence. The <code>ref2_allele</code> specifically represents the reference allele\nthat is</li>\n<li><strong>alt_allele</strong>:  The <code>alt_allele</code> parameter represents the alternate allele in a genetic\nmutation. In genetics, an allele is one of the possible forms of a gene. In the context of this\ncode, <code>alt_allele</code> is used to store the alternate allele that is present in a mutation</li>\n<li><strong>cdna_start</strong>:  The <code>cdna_start</code> parameter is used to specify the start position of the\nmutation in the cDNA sequence. It is an optional parameter and if not provided, it will be set\nto a default value of <code>CDNACoord()</code></li>\n<li><strong>cdna_end</strong>:  The <code>cdna_end</code> parameter is used to store the end coordinate of the cDNA\n(complementary DNA) sequence. It is an optional parameter and if not provided, it will be\ninitialized as a <code>CDNACoord</code> object. The <code>CDNACoord</code> object is likely a</li>\n<li><strong>pep_extra</strong>:  The <code>pep_extra</code> parameter is a string that represents any additional\ninformation related to the protein. It is used in the context of protein-specific fields</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">chrom</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">transcript</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">transcript_protein</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">gene</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">exon</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">kind</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">mutation_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">ref_allele</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ref2_allele</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">alt_allele</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">cdna_start</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cdna_end</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">pep_extra</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span>)</span>"}, "howard.objects.hgvs.HGVSName.name": {"fullname": "howard.objects.hgvs.HGVSName.name", "modulename": "howard.objects.hgvs", "qualname": "HGVSName.name", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.hgvs.HGVSName.prefix": {"fullname": "howard.objects.hgvs.HGVSName.prefix", "modulename": "howard.objects.hgvs", "qualname": "HGVSName.prefix", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.hgvs.HGVSName.chrom": {"fullname": "howard.objects.hgvs.HGVSName.chrom", "modulename": "howard.objects.hgvs", "qualname": "HGVSName.chrom", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.hgvs.HGVSName.transcript": {"fullname": "howard.objects.hgvs.HGVSName.transcript", "modulename": "howard.objects.hgvs", "qualname": "HGVSName.transcript", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.hgvs.HGVSName.transcript_protein": {"fullname": "howard.objects.hgvs.HGVSName.transcript_protein", "modulename": "howard.objects.hgvs", "qualname": "HGVSName.transcript_protein", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.hgvs.HGVSName.gene": {"fullname": "howard.objects.hgvs.HGVSName.gene", "modulename": "howard.objects.hgvs", "qualname": "HGVSName.gene", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.hgvs.HGVSName.exon": {"fullname": "howard.objects.hgvs.HGVSName.exon", "modulename": "howard.objects.hgvs", "qualname": "HGVSName.exon", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.hgvs.HGVSName.kind": {"fullname": "howard.objects.hgvs.HGVSName.kind", "modulename": "howard.objects.hgvs", "qualname": "HGVSName.kind", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.hgvs.HGVSName.mutation_type": {"fullname": "howard.objects.hgvs.HGVSName.mutation_type", "modulename": "howard.objects.hgvs", "qualname": "HGVSName.mutation_type", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.hgvs.HGVSName.start": {"fullname": "howard.objects.hgvs.HGVSName.start", "modulename": "howard.objects.hgvs", "qualname": "HGVSName.start", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.hgvs.HGVSName.end": {"fullname": "howard.objects.hgvs.HGVSName.end", "modulename": "howard.objects.hgvs", "qualname": "HGVSName.end", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.hgvs.HGVSName.ref_allele": {"fullname": "howard.objects.hgvs.HGVSName.ref_allele", "modulename": "howard.objects.hgvs", "qualname": "HGVSName.ref_allele", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.hgvs.HGVSName.ref2_allele": {"fullname": "howard.objects.hgvs.HGVSName.ref2_allele", "modulename": "howard.objects.hgvs", "qualname": "HGVSName.ref2_allele", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.hgvs.HGVSName.alt_allele": {"fullname": "howard.objects.hgvs.HGVSName.alt_allele", "modulename": "howard.objects.hgvs", "qualname": "HGVSName.alt_allele", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.hgvs.HGVSName.cdna_start": {"fullname": "howard.objects.hgvs.HGVSName.cdna_start", "modulename": "howard.objects.hgvs", "qualname": "HGVSName.cdna_start", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.hgvs.HGVSName.cdna_end": {"fullname": "howard.objects.hgvs.HGVSName.cdna_end", "modulename": "howard.objects.hgvs", "qualname": "HGVSName.cdna_end", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.hgvs.HGVSName.pep_extra": {"fullname": "howard.objects.hgvs.HGVSName.pep_extra", "modulename": "howard.objects.hgvs", "qualname": "HGVSName.pep_extra", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.hgvs.HGVSName.parse": {"fullname": "howard.objects.hgvs.HGVSName.parse", "modulename": "howard.objects.hgvs", "qualname": "HGVSName.parse", "kind": "function", "doc": "<p>The <code>parse</code> function is used to split an HGVS name into a prefix and allele, and then validate\nthe parsed components.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong>:  The <code>name</code> parameter is a string that represents an HGVS name. It is the input to\nthe <code>parse</code> function and is used to parse the HGVS name by splitting it into a prefix and allele</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.hgvs.HGVSName.parse_prefix": {"fullname": "howard.objects.hgvs.HGVSName.parse_prefix", "modulename": "howard.objects.hgvs", "qualname": "HGVSName.parse_prefix", "kind": "function", "doc": "<p>The <code>parse_prefix</code> function is used to parse a HGVS prefix (gene/transcript/chromosome) and\nassign the parsed values to the corresponding attributes of the object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>prefix</strong>:  The <code>prefix</code> parameter is a string that represents a HGVS prefix, which can be a\ngene, transcript, or chromosome identifier. It is used to determine the type of prefix and\nassign the parsed values to the corresponding attributes of the object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>parse_prefix</code> returns the parsed values for the transcript and gene\n  attributes, or sets the chrom or gene attributes based on the given prefix.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.objects.hgvs.HGVSName.parse_allele": {"fullname": "howard.objects.hgvs.HGVSName.parse_allele", "modulename": "howard.objects.hgvs", "qualname": "HGVSName.parse_allele", "kind": "function", "doc": "<p>The function <code>parse_allele</code> parses a HGVS allele description and determines the kind of HGVS\nname (c., p., g., etc.) and the mutation type.</p>\n\n<p>Some examples include:\n  cDNA substitution: c.101A>C,\n  cDNA indel: c.3428delCinsTA, c.1000_1003delATG, c.1000_1001insATG\n  No protein change: p.Glu1161=\n  Protein change: p.Glu1161Ser\n  Protein frameshift: p.Glu1161_Ser1164?fs\n  Genomic substitution: g.1000100A>T\n  Genomic indel: g.1000100_1000102delATG</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>allele</strong>:  The <code>allele</code> parameter is a string that represents a HGVS allele description. It\ncan contain various types of mutations, such as cDNA substitutions, cDNA indels, protein\nchanges, protein frameshifts, genomic substitutions, and genomic indels. The purpose of the\n<code>parse_allele</code></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">allele</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.hgvs.HGVSName.parse_cdna": {"fullname": "howard.objects.hgvs.HGVSName.parse_cdna", "modulename": "howard.objects.hgvs", "qualname": "HGVSName.parse_cdna", "kind": "function", "doc": "<p>The function <code>parse_cdna</code> is used to parse a HGVS cDNA name and extract information such as\nmutation type, coordinates, and alleles.</p>\n\n<p>Some examples include:\n  Substitution: 101A>C,\n  Indel: 3428delCinsTA, 1000_1003delATG, 1000_1001insATG</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>details</strong>:  The <code>details</code> parameter is a string that represents a HGVS cDNA name. It\ncontains information about a genetic mutation, such as a substitution or an indel, along with\nthe specific coordinates and alleles involved in the mutation</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">details</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.hgvs.HGVSName.parse_protein": {"fullname": "howard.objects.hgvs.HGVSName.parse_protein", "modulename": "howard.objects.hgvs", "qualname": "HGVSName.parse_protein", "kind": "function", "doc": "<p>The function <code>parse_protein</code> is used to parse a HGVS protein name and extract information such\nas mutation type, coordinates, alleles, and additional details.</p>\n\n<p>Some examples include:\n  No change: Glu1161=\n  Change: Glu1161Ser\n  Frameshift: Glu1161_Ser1164?fs</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>details</strong>:  The <code>details</code> parameter is a string that represents a HGVS protein name. It\ncontains information about a protein mutation, such as the amino acid change and the position of\nthe mutation</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The method <code>parse_protein</code> does not return anything. It updates the instance variables\n  of the object it is called on.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">details</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.hgvs.HGVSName.parse_genome": {"fullname": "howard.objects.hgvs.HGVSName.parse_genome", "modulename": "howard.objects.hgvs", "qualname": "HGVSName.parse_genome", "kind": "function", "doc": "<p>The function <code>parse_genome</code> is used to parse a HGVS genomic name and extract information such as\nmutation type, coordinates, and alleles.</p>\n\n<p>Some examples include:\n  Substitution: 1000100A>T\n  Indel: 1000100_1000102delATG</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>details</strong>:  The <code>details</code> parameter is a string that represents a HGVS genomic name. It\ncontains information about a genomic mutation, such as a substitution or an indel</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">details</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.hgvs.HGVSName.format": {"fullname": "howard.objects.hgvs.HGVSName.format", "modulename": "howard.objects.hgvs", "qualname": "HGVSName.format", "kind": "function", "doc": "<p>The <code>format</code> function generates a HGVS name as a string based on various formatting options.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>use_prefix</strong>:  A boolean indicating whether to include the prefix in the HGVS name. If set\nto True, the prefix will be included in the HGVS name. If set to False, the prefix will be\nexcluded. The default value is True, defaults to True</li>\n<li><strong>use_gene</strong>:  A boolean indicating whether to include the gene name in the HGVS name. If set\nto True, the gene name will be included in the HGVS name. If set to False, the gene name will\nnot be included. The default value is True, defaults to True</li>\n<li><strong>use_exon</strong>:  A boolean indicating whether to include exon information in the HGVS name. If\nset to True, exon information will be included in the HGVS name. If set to False, exon\ninformation will not be included, defaults to False</li>\n<li><strong>use_protein</strong>:  A boolean indicating whether to include the protein change in the HGVS name.\nIf set to True, the protein change will be included in the HGVS name. If set to False, the\nprotein change will not be included, defaults to False</li>\n<li><strong>full_format</strong>:  A boolean parameter that determines whether the full format of the allele\nshould be included in the output. If set to True, and if the allele is not a protein variant,\nthe allele will be appended with ':p.' followed by the formatted protein variant, defaults to\nFalse (optional)</li>\n<li><strong>use_version</strong>:  A boolean parameter that determines whether to include the version number in\nthe formatted HGVS name. If set to True, the version number will be included in the output. If\nset to False, the version number will not be included, defaults to False</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a HGVS name as a string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">use_prefix</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">use_gene</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">use_exon</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">use_protein</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">full_format</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">use_version</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.hgvs.HGVSName.format_prefix": {"fullname": "howard.objects.hgvs.HGVSName.format_prefix", "modulename": "howard.objects.hgvs", "qualname": "HGVSName.format_prefix", "kind": "function", "doc": "<p>The <code>format_prefix</code> function generates an HGVS transcript/gene prefix based on various\nparameters.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>use_gene</strong>:  A boolean parameter that determines whether to include the gene name in the\nprefix. If set to True, the gene name will be included in the prefix. If set to False, the gene\nname will not be included in the prefix. The default value is True, defaults to True</li>\n<li><strong>use_exon</strong>:  A boolean parameter that determines whether to include the exon information in\nthe prefix. If set to True, the exon information will be included in the prefix. If set to\nFalse, the exon information will not be included, defaults to False</li>\n<li><strong>use_protein</strong>:  A boolean indicating whether to use the protein transcript instead of the\nnucleotide transcript if available. If set to True, the protein transcript will be used. If set\nto False, the nucleotide transcript will be used. The default value is False, defaults to False</li>\n<li><strong>full_format</strong>:  A boolean parameter that determines whether to generate the full HGVS name\nwith transcript/gene prefix or not. If set to True, the full format will be generated. If set to\nFalse, only the transcript/gene prefix will be generated, defaults to False</li>\n<li><strong>use_version</strong>:  A boolean parameter that determines whether to include the version number in\nthe transcript prefix. If set to True, the version number will be included in the prefix (e.g.,\nNM_007294.3). If set to False, only the transcript ID without the version number will be\nincluded in the prefix, defaults to False</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>format_prefix</code> returns a formatted HGVS transcript/gene prefix as a\n  string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">use_gene</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">use_exon</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">use_protein</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">full_format</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">use_version</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"fullname": "howard.objects.hgvs.HGVSName.format_cdna_coords", "modulename": "howard.objects.hgvs", "qualname": "HGVSName.format_cdna_coords", "kind": "function", "doc": "<p>The function <code>format_cdna_coords</code> generates a string representing HGVS cDNA coordinates,\nreturning either the start coordinate or a string in the format \"start_end\" depending on whether\nthe start and end coordinates are the same or not.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a string representing the cDNA coordinates. If the start and end coordinates are the\n  same, it returns just the start coordinate. Otherwise, it returns a string in the format\n  \"start_end\".</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"fullname": "howard.objects.hgvs.HGVSName.format_dna_allele", "modulename": "howard.objects.hgvs", "qualname": "HGVSName.format_dna_allele", "kind": "function", "doc": "<p>The function <code>format_dna_allele</code> generates an HGVS DNA allele based on the mutation type and\nalleles provided.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>format_dna_allele</code> returns a string representing the HGVS DNA allele. The\n  specific format of the returned string depends on the value of the <code>mutation_type</code> attribute of\n  the object. The possible return values are:</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.hgvs.HGVSName.format_cdna": {"fullname": "howard.objects.hgvs.HGVSName.format_cdna", "modulename": "howard.objects.hgvs", "qualname": "HGVSName.format_cdna", "kind": "function", "doc": "<p>The function \"format_cdna\" generates an HGVS cDNA allele by combining the cDNA coordinates and\nthe DNA allele.</p>\n\n<p>Some examples include:\n  Substitution: 101A>C,\n  Indel: 3428delCinsTA, 1000_1003delATG, 1000_1001insATG</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a string that represents the HGVS cDNA allele.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.hgvs.HGVSName.format_protein": {"fullname": "howard.objects.hgvs.HGVSName.format_protein", "modulename": "howard.objects.hgvs", "qualname": "HGVSName.format_protein", "kind": "function", "doc": "<p>The <code>format_protein</code> function generates an HGVS protein name based on different scenarios such\nas no change, change, frameshift, and range change.</p>\n\n<p>Some examples include:\n  No change: Glu1161=\n  Change: Glu1161Ser\n  Frameshift: Glu1161_Ser1164?fs</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The method <code>format_protein</code> returns a string representing the HGVS protein name.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.hgvs.HGVSName.format_coords": {"fullname": "howard.objects.hgvs.HGVSName.format_coords", "modulename": "howard.objects.hgvs", "qualname": "HGVSName.format_coords", "kind": "function", "doc": "<p>The function <code>format_coords</code> generates a string representation of HGVS cDNA coordinates.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a string that represents the HGVS cDNA coordinates. If the start and end coordinates\n  are the same, it returns just the start coordinate. Otherwise, it returns a string in the format\n  \"start_end\".</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.hgvs.HGVSName.format_genome": {"fullname": "howard.objects.hgvs.HGVSName.format_genome", "modulename": "howard.objects.hgvs", "qualname": "HGVSName.format_genome", "kind": "function", "doc": "<p>The function \"format_genome\" generates an HGVS genomic allele by combining the formatted\ncoordinates and DNA allele.</p>\n\n<p>Some examples include:\n  Substitution: 1000100A>T\n  Indel: 1000100_1000102delATG</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a string that represents the HGVS genomic allele.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"fullname": "howard.objects.hgvs.HGVSName.get_raw_coords", "modulename": "howard.objects.hgvs", "qualname": "HGVSName.get_raw_coords", "kind": "function", "doc": "<p>The function <code>get_raw_coords</code> returns the genomic coordinates based on the given transcript or\nthe provided chromosomal coordinates.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>transcript</strong>:  The <code>transcript</code> parameter is an object that represents a transcript. It is\nused to retrieve genomic coordinates based on the type of HGVS name (<code>self.kind</code>). The\n<code>transcript</code> object should have the following attributes and methods:</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a tuple containing the genomic coordinates. The tuple consists of three elements: the\n  chromosome, the start position, and the end position.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">transcript</span><span class=\"p\">:</span> <span class=\"nb\">object</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"fullname": "howard.objects.hgvs.HGVSName.get_ref_coords", "modulename": "howard.objects.hgvs", "qualname": "HGVSName.get_ref_coords", "kind": "function", "doc": "<p>The function \"get_ref_coords\" returns the genomic coordinates of the reference allele, taking\ninto account different mutation types.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>transcript</strong>:  The <code>transcript</code> parameter is an optional object that represents a transcript\nor gene. It is used to retrieve the genomic coordinates of the reference allele</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a tuple containing the genomic coordinates of the reference allele. The tuple consists\n  of three elements: the chromosome, the start position, and the end position.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">transcript</span><span class=\"p\">:</span> <span class=\"nb\">object</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"fullname": "howard.objects.hgvs.HGVSName.get_vcf_coords", "modulename": "howard.objects.hgvs", "qualname": "HGVSName.get_vcf_coords", "kind": "function", "doc": "<p>The function \"get_vcf_coords\" returns the genomic coordinates of the reference allele in\nVCF-style, with left-padding for indels.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>transcript</strong>:  The <code>transcript</code> parameter is an object that represents a transcript or gene.\nIt is used to retrieve the genomic coordinates of the reference allele</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a tuple containing the genomic coordinates of the reference allele in VCF-style. The\n  tuple consists of three elements: the chromosome, the start position, and the end position.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">transcript</span><span class=\"p\">:</span> <span class=\"nb\">object</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"fullname": "howard.objects.hgvs.HGVSName.get_ref_alt", "modulename": "howard.objects.hgvs", "qualname": "HGVSName.get_ref_alt", "kind": "function", "doc": "<p>The function <code>get_ref_alt</code> returns the reference and alternate alleles, with an option to modify\nduplications to look like inserts.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>is_forward_strand</strong>:  The parameter <code>is_forward_strand</code> is a boolean flag that indicates\nwhether the alleles should be returned for the forward strand or the reverse complement strand.\nIf <code>is_forward_strand</code> is <code>True</code>, the alleles will be returned as is. If <code>is_forward_strand</code> is\n<code>False</code>,, defaults to True</li>\n<li><strong>raw_dup_alleles</strong>:  The <code>raw_dup_alleles</code> parameter is a boolean flag that determines\nwhether the raw values of duplicated alleles should be returned. By default, it is set to\n<code>False</code>, which means that if the mutation type is a duplication (<code>dup</code>), the reference allele\nwill be represented as an empty string, defaults to False</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>get_ref_alt</code> returns a tuple containing the reference and alternate\n  alleles.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">is_forward_strand</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">raw_dup_alleles</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, "howard.objects.transcript": {"fullname": "howard.objects.transcript", "modulename": "howard.objects.transcript", "kind": "module", "doc": "<p>Models for representing genomic elements.</p>\n"}, "howard.objects.transcript.Gene": {"fullname": "howard.objects.transcript.Gene", "modulename": "howard.objects.transcript", "qualname": "Gene", "kind": "class", "doc": "<p></p>\n"}, "howard.objects.transcript.Gene.__init__": {"fullname": "howard.objects.transcript.Gene.__init__", "modulename": "howard.objects.transcript", "qualname": "Gene.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span></span>)</span>"}, "howard.objects.transcript.Gene.name": {"fullname": "howard.objects.transcript.Gene.name", "modulename": "howard.objects.transcript", "qualname": "Gene.name", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.transcript.Transcript": {"fullname": "howard.objects.transcript.Transcript", "modulename": "howard.objects.transcript", "qualname": "Transcript", "kind": "class", "doc": "<p></p>\n"}, "howard.objects.transcript.Transcript.__init__": {"fullname": "howard.objects.transcript.Transcript.__init__", "modulename": "howard.objects.transcript", "qualname": "Transcript.__init__", "kind": "function", "doc": "<p>The function initializes an object with various attributes related to a gene and its transcript.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong>:  A string representing the name of the coding sequence</li>\n<li><strong>version</strong>:  The <code>version</code> parameter is a string that represents the version of the object.\nIt is used to track changes or updates to the object over time</li>\n<li><strong>gene</strong>:  The <code>gene</code> parameter is a string that represents the gene associated with the\ncoding sequence</li>\n<li><strong>tx_position</strong>:  The <code>tx_position</code> parameter represents the position of the transcript. It is\nan integer value that indicates the position of the transcript in the genome</li>\n<li><strong>cds_position</strong>:  The <code>cds_position</code> parameter represents the position of the coding sequence\n(CDS) within the transcript. It is an integer value that indicates the starting position of the\nCDS within the transcript sequence</li>\n<li><strong>is_default</strong>:  The <code>is_default</code> parameter is a boolean flag that indicates whether the\ninstance of the class is the default version of the gene. It is set to <code>False</code> by default, but\ncan be set to <code>True</code> if the instance is the default version, defaults to False</li>\n<li><strong>cdna_match</strong>:  The <code>cdna_match</code> parameter is a list that contains the positions of the\nmatching cDNA sequences. It is an optional parameter and if not provided, it defaults to an\nempty list</li>\n<li><strong>start_codon_transcript_pos</strong>:  The parameter \"start_codon_transcript_pos\" is an optional\nparameter that represents the transcript position of the start codon. It is used to store the\npre-calculated transcript position of the start codon for a specific gene</li>\n<li><strong>stop_codon_transcript_pos</strong>:  The parameter <code>stop_codon_transcript_pos</code> is an optional\ninteger that represents the transcript position of the stop codon. It is used to store the\npre-calculated transcript coordinate of the stop codon. If not provided, it will be set to\n<code>None</code></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">gene</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">tx_position</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">cds_position</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">is_default</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">cdna_match</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">start_codon_transcript_pos</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">stop_codon_transcript_pos</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "howard.objects.transcript.Transcript.name": {"fullname": "howard.objects.transcript.Transcript.name", "modulename": "howard.objects.transcript", "qualname": "Transcript.name", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.transcript.Transcript.version": {"fullname": "howard.objects.transcript.Transcript.version", "modulename": "howard.objects.transcript", "qualname": "Transcript.version", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.transcript.Transcript.gene": {"fullname": "howard.objects.transcript.Transcript.gene", "modulename": "howard.objects.transcript", "qualname": "Transcript.gene", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.transcript.Transcript.tx_position": {"fullname": "howard.objects.transcript.Transcript.tx_position", "modulename": "howard.objects.transcript", "qualname": "Transcript.tx_position", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.transcript.Transcript.cds_position": {"fullname": "howard.objects.transcript.Transcript.cds_position", "modulename": "howard.objects.transcript", "qualname": "Transcript.cds_position", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.transcript.Transcript.is_default": {"fullname": "howard.objects.transcript.Transcript.is_default", "modulename": "howard.objects.transcript", "qualname": "Transcript.is_default", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.transcript.Transcript.cdna_match": {"fullname": "howard.objects.transcript.Transcript.cdna_match", "modulename": "howard.objects.transcript", "qualname": "Transcript.cdna_match", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.transcript.Transcript.full_name": {"fullname": "howard.objects.transcript.Transcript.full_name", "modulename": "howard.objects.transcript", "qualname": "Transcript.full_name", "kind": "variable", "doc": "<p>The function <code>full_name</code> returns the full name of an object, including its version if it exists.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a string. If the <code>version</code> attribute of the object is not <code>None</code>, it returns a string\n  in the format <code>name.version</code>. Otherwise, it returns just the <code>name</code> attribute.</p>\n</blockquote>\n", "annotation": ": str"}, "howard.objects.transcript.Transcript.is_coding": {"fullname": "howard.objects.transcript.Transcript.is_coding", "modulename": "howard.objects.transcript", "qualname": "Transcript.is_coding", "kind": "variable", "doc": "<p>The function checks if a coding transcript has a non-zero length coding sequence.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a boolean value indicating whether the coding transcript has a coding sequence (CDS)\n  with a non-zero length.</p>\n</blockquote>\n", "annotation": ": bool"}, "howard.objects.transcript.Transcript.strand": {"fullname": "howard.objects.transcript.Transcript.strand", "modulename": "howard.objects.transcript", "qualname": "Transcript.strand", "kind": "variable", "doc": "<p>The function returns a string '+' if the tx_position is on the forward strand, and '-' if it is\non the reverse strand.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a string that represents the strand of the given <code>self.tx_position</code>. If\n  <code>self.tx_position.is_forward_strand</code> is <code>True</code>, then the string returned is '+'. Otherwise, the\n  string returned is '-'.</p>\n</blockquote>\n", "annotation": ": str"}, "howard.objects.transcript.Transcript.ordered_cdna_match": {"fullname": "howard.objects.transcript.Transcript.ordered_cdna_match", "modulename": "howard.objects.transcript", "qualname": "Transcript.ordered_cdna_match", "kind": "function", "doc": "<p>The function \"ordered_cdna_match\" sorts a list of cdna_match objects based on their\ntx_position.chrom_start attribute and returns the sorted list.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a sorted list of cdna_match objects.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.transcript.Transcript.get_cds_start_stop": {"fullname": "howard.objects.transcript.Transcript.get_cds_start_stop", "modulename": "howard.objects.transcript", "qualname": "Transcript.get_cds_start_stop", "kind": "function", "doc": "<p>The function \"get_cds_start_stop\" returns the start and stop positions of a coding sequence,\ntaking into account the direction of the strand.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a tuple containing the start and stop positions of the coding sequence (CDS).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, "howard.objects.transcript.Transcript.start_codon": {"fullname": "howard.objects.transcript.Transcript.start_codon", "modulename": "howard.objects.transcript", "qualname": "Transcript.start_codon", "kind": "function", "doc": "<p>The function returns the transcript position of the start codon.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the transcript position of the start codon.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "howard.objects.transcript.Transcript.stop_codon": {"fullname": "howard.objects.transcript.Transcript.stop_codon", "modulename": "howard.objects.transcript", "qualname": "Transcript.stop_codon", "kind": "function", "doc": "<p>The function returns the transcript position of the stop codon.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The method <code>stop_codon</code> returns an integer, which represents the transcript position of\n  the stop codon.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"fullname": "howard.objects.transcript.Transcript.cdna_to_genomic_coord", "modulename": "howard.objects.transcript", "qualname": "Transcript.cdna_to_genomic_coord", "kind": "function", "doc": "<p>The function <code>cdna_to_genomic_coord</code> converts a HGVS cDNA coordinate to a genomic coordinate.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>coord</strong>:  The parameter <code>coord</code> is an object that represents a cDNA coordinate. It is used\nto specify a position along a cDNA sequence</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>an integer value, which represents the genomic coordinate corresponding to the given\n  cDNA coordinate.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">coord</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"fullname": "howard.objects.transcript.Transcript.genomic_to_cdna_coord", "modulename": "howard.objects.transcript", "qualname": "Transcript.genomic_to_cdna_coord", "kind": "function", "doc": "<p>The function <code>genomic_to_cdna_coord</code> converts a genomic coordinate to a cDNA coordinate and\noffset, taking into account exons, strand, and coding transcript information.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>genomic_coord</strong>:  The <code>genomic_coord</code> parameter is an integer representing a genomic\ncoordinate</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>an object of type <code>CDNACoord</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">genomic_coord</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "def"}, "howard.objects.transcript.Transcript.find_exon_number": {"fullname": "howard.objects.transcript.Transcript.find_exon_number", "modulename": "howard.objects.transcript", "qualname": "Transcript.find_exon_number", "kind": "function", "doc": "<p>The function <code>find_exon_number</code> returns the exon number for a given position.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>offset</strong>:  The offset parameter represents a position in the genome. It is an integer value\nthat indicates the position of interest within the genome</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>an integer value, which represents the exon number for a given position.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "howard.objects.transcript.BED6Interval_base": {"fullname": "howard.objects.transcript.BED6Interval_base", "modulename": "howard.objects.transcript", "qualname": "BED6Interval_base", "kind": "class", "doc": "<p>BED6Interval_base(chrom, chrom_start, chrom_end, name, score, strand)</p>\n", "bases": "builtins.tuple"}, "howard.objects.transcript.BED6Interval_base.__init__": {"fullname": "howard.objects.transcript.BED6Interval_base.__init__", "modulename": "howard.objects.transcript", "qualname": "BED6Interval_base.__init__", "kind": "function", "doc": "<p>Create new instance of BED6Interval_base(chrom, chrom_start, chrom_end, name, score, strand)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">chrom</span>, </span><span class=\"param\"><span class=\"n\">chrom_start</span>, </span><span class=\"param\"><span class=\"n\">chrom_end</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">score</span>, </span><span class=\"param\"><span class=\"n\">strand</span></span>)</span>"}, "howard.objects.transcript.BED6Interval_base.chrom": {"fullname": "howard.objects.transcript.BED6Interval_base.chrom", "modulename": "howard.objects.transcript", "qualname": "BED6Interval_base.chrom", "kind": "variable", "doc": "<p>Alias for field number 0</p>\n"}, "howard.objects.transcript.BED6Interval_base.chrom_start": {"fullname": "howard.objects.transcript.BED6Interval_base.chrom_start", "modulename": "howard.objects.transcript", "qualname": "BED6Interval_base.chrom_start", "kind": "variable", "doc": "<p>Alias for field number 1</p>\n"}, "howard.objects.transcript.BED6Interval_base.chrom_end": {"fullname": "howard.objects.transcript.BED6Interval_base.chrom_end", "modulename": "howard.objects.transcript", "qualname": "BED6Interval_base.chrom_end", "kind": "variable", "doc": "<p>Alias for field number 2</p>\n"}, "howard.objects.transcript.BED6Interval_base.name": {"fullname": "howard.objects.transcript.BED6Interval_base.name", "modulename": "howard.objects.transcript", "qualname": "BED6Interval_base.name", "kind": "variable", "doc": "<p>Alias for field number 3</p>\n"}, "howard.objects.transcript.BED6Interval_base.score": {"fullname": "howard.objects.transcript.BED6Interval_base.score", "modulename": "howard.objects.transcript", "qualname": "BED6Interval_base.score", "kind": "variable", "doc": "<p>Alias for field number 4</p>\n"}, "howard.objects.transcript.BED6Interval_base.strand": {"fullname": "howard.objects.transcript.BED6Interval_base.strand", "modulename": "howard.objects.transcript", "qualname": "BED6Interval_base.strand", "kind": "variable", "doc": "<p>Alias for field number 5</p>\n"}, "howard.objects.transcript.BED6Interval": {"fullname": "howard.objects.transcript.BED6Interval", "modulename": "howard.objects.transcript", "qualname": "BED6Interval", "kind": "class", "doc": "<p>BED6Interval_base(chrom, chrom_start, chrom_end, name, score, strand)</p>\n", "bases": "BED6Interval_base"}, "howard.objects.transcript.BED6Interval.__init__": {"fullname": "howard.objects.transcript.BED6Interval.__init__", "modulename": "howard.objects.transcript", "qualname": "BED6Interval.__init__", "kind": "function", "doc": "<p>Create new instance of BED6Interval_base(chrom, chrom_start, chrom_end, name, score, strand)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">chrom</span>, </span><span class=\"param\"><span class=\"n\">chrom_start</span>, </span><span class=\"param\"><span class=\"n\">chrom_end</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">score</span>, </span><span class=\"param\"><span class=\"n\">strand</span></span>)</span>"}, "howard.objects.transcript.BED6Interval.distance": {"fullname": "howard.objects.transcript.BED6Interval.distance", "modulename": "howard.objects.transcript", "qualname": "BED6Interval.distance", "kind": "function", "doc": "<p>The <code>distance</code> function calculates the distance between an offset and an interval, returning\nzero if the offset is inside the interval, a positive value if the interval comes after the\noffset, and a negative value if the interval comes before the offset.\nif offset is inside the exon, distance is zero.\notherwise, distance is the distance to the nearest edge.\ndistance is positive if the exon comes after the offset.\ndistance is negative if the exon comes before the offset.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>offset</strong>:  The offset parameter represents a position or point in the genome. It is an\ninteger value that indicates the position within the genome sequence</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>an integer value, which represents the distance to the interval.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "howard.objects.transcript.Exon": {"fullname": "howard.objects.transcript.Exon", "modulename": "howard.objects.transcript", "qualname": "Exon", "kind": "class", "doc": "<p></p>\n"}, "howard.objects.transcript.Exon.__init__": {"fullname": "howard.objects.transcript.Exon.__init__", "modulename": "howard.objects.transcript", "qualname": "Exon.__init__", "kind": "function", "doc": "<p>The function initializes an object with a transcript, a position in the transcript, and a\nnumber.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>transcript</strong>:  The <code>transcript</code> parameter is of type <code>Transcript</code>. It represents a\ntranscript object that contains information about a conversation or dialogue</li>\n<li><strong>tx_position</strong>:  The <code>tx_position</code> parameter represents the position of the transcript in a\nlist or array. It is an integer value that indicates the index of the transcript in the list or\narray</li>\n<li><strong>number</strong>:  The \"number\" parameter is an integer that represents a specific number. It is\nused as a parameter in the constructor of a class</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">transcript</span><span class=\"p\">:</span> <span class=\"n\">howard</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">transcript</span><span class=\"o\">.</span><span class=\"n\">Transcript</span>,</span><span class=\"param\">\t<span class=\"n\">tx_position</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, "howard.objects.transcript.Exon.transcript": {"fullname": "howard.objects.transcript.Exon.transcript", "modulename": "howard.objects.transcript", "qualname": "Exon.transcript", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.transcript.Exon.tx_position": {"fullname": "howard.objects.transcript.Exon.tx_position", "modulename": "howard.objects.transcript", "qualname": "Exon.tx_position", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.transcript.Exon.number": {"fullname": "howard.objects.transcript.Exon.number", "modulename": "howard.objects.transcript", "qualname": "Exon.number", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.transcript.Exon.name": {"fullname": "howard.objects.transcript.Exon.name", "modulename": "howard.objects.transcript", "qualname": "Exon.name", "kind": "variable", "doc": "<p>The function returns a string that combines the name of the transcript and a number.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a string that combines the name of the transcript with the number. The format of the\n  string is \"{transcript name}.{number}\".</p>\n</blockquote>\n", "annotation": ": str"}, "howard.objects.transcript.Exon.get_as_interval": {"fullname": "howard.objects.transcript.Exon.get_as_interval", "modulename": "howard.objects.transcript", "qualname": "Exon.get_as_interval", "kind": "function", "doc": "<p>The function <code>get_as_interval</code> returns the coding region for an exon as a BED6Interval object.\nThis function returns a BED6Interval objects containing  position\ninformation for this exon. This may be used as input for\npybedtools.create_interval_from_list() after casting chrom_start\nand chrom_end as strings.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>coding_only</strong>:  The <code>coding_only</code> parameter is a boolean flag that determines whether to\ninclude only exons in the coding region. If <code>coding_only</code> is set to <code>True</code>, the function will\ncheck if the exon is completely outside the coding region defined by the transcript's CDS\n(coding sequence) position, defaults to False</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a BED6Interval object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">coding_only</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "def"}, "howard.objects.transcript.Exon.strand": {"fullname": "howard.objects.transcript.Exon.strand", "modulename": "howard.objects.transcript", "qualname": "Exon.strand", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.transcript.CDNA_Match": {"fullname": "howard.objects.transcript.CDNA_Match", "modulename": "howard.objects.transcript", "qualname": "CDNA_Match", "kind": "class", "doc": "<p></p>\n", "bases": "Exon"}, "howard.objects.transcript.CDNA_Match.__init__": {"fullname": "howard.objects.transcript.CDNA_Match.__init__", "modulename": "howard.objects.transcript", "qualname": "CDNA_Match.__init__", "kind": "function", "doc": "<p>The function initializes a CDNA_Match object with specified attributes.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>transcript</strong>:  The <code>transcript</code> parameter is an instance of the <code>Transcript</code> class. It\nrepresents the transcript that the CDNA match belongs to</li>\n<li><strong>tx_position</strong>:  The <code>tx_position</code> parameter represents the position of the transcript in the\ngenome. It is an integer value</li>\n<li><strong>cdna_start</strong>:  The <code>cdna_start</code> parameter represents the starting position of the cDNA\nmatch. It is an integer value</li>\n<li><strong>cdna_end</strong>:  The <code>cdna_end</code> parameter represents the end position of the cDNA match. It is\nan integer value that indicates the position of the last nucleotide in the cDNA sequence that\nmatches the transcript</li>\n<li><strong>gap</strong>:  The \"gap\" parameter represents the number of nucleotides that are missing or\ninserted in the cDNA sequence compared to the reference transcript sequence. It indicates the\npresence of gaps or insertions in the alignment between the cDNA and the reference transcript</li>\n<li><strong>number</strong>:  The <code>number</code> parameter represents the number of the CDNA match. It is used to\nuniquely identify each CDNA match object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">transcript</span><span class=\"p\">:</span> <span class=\"n\">howard</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">transcript</span><span class=\"o\">.</span><span class=\"n\">Transcript</span>,</span><span class=\"param\">\t<span class=\"n\">tx_position</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">cdna_start</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">cdna_end</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">gap</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, "howard.objects.transcript.CDNA_Match.cdna_start": {"fullname": "howard.objects.transcript.CDNA_Match.cdna_start", "modulename": "howard.objects.transcript", "qualname": "CDNA_Match.cdna_start", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.transcript.CDNA_Match.cdna_end": {"fullname": "howard.objects.transcript.CDNA_Match.cdna_end", "modulename": "howard.objects.transcript", "qualname": "CDNA_Match.cdna_end", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.transcript.CDNA_Match.gap": {"fullname": "howard.objects.transcript.CDNA_Match.gap", "modulename": "howard.objects.transcript", "qualname": "CDNA_Match.gap", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.transcript.CDNA_Match.length": {"fullname": "howard.objects.transcript.CDNA_Match.length", "modulename": "howard.objects.transcript", "qualname": "CDNA_Match.length", "kind": "variable", "doc": "<p>The function calculates the length of a sequence by subtracting the start position from the end\nposition and adding 1.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The length of the sequence, calculated by subtracting the cdna_start from the cdna_end\n  and adding 1.</p>\n</blockquote>\n", "annotation": ": int"}, "howard.objects.transcript.CDNA_Match.get_offset": {"fullname": "howard.objects.transcript.CDNA_Match.get_offset", "modulename": "howard.objects.transcript", "qualname": "CDNA_Match.get_offset", "kind": "function", "doc": "<p>The <code>get_offset</code> function calculates the offset for a given position in a cDNA sequence based on\nthe GAP attribute.\ncdna_match GAP attribute looks like: 'M185 I3 M250' which is code/length\n@see <a href=\"https://github.com/The-Sequence-Ontology/Specifications/blob/master/gff3.md#the-gap-attribute\">https://github.com/The-Sequence-Ontology/Specifications/blob/master/gff3.md#the-gap-attribute</a>\ncodes operation\nM       match\nI       insert a gap into the reference sequence\nD       insert a gap into the target (delete from reference)\nIf you want the whole exon, then pass the end</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>position</strong>:  The <code>position</code> parameter is an integer that represents the position in the\nsequence. It is used to calculate the offset based on the GAP attribute of the cDNA match</li>\n<li><strong>validate</strong>:  The <code>validate</code> parameter is a boolean flag that determines whether to perform\nvalidation checks during the calculation of the offset. If <code>validate</code> is set to <code>True</code>, the\nfunction will raise a <code>ValueError</code> if the given position falls within an insertion or deletion\ngap. If <code>validate</code> is set, defaults to True</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>an integer value representing the offset for a given position in the cDNA sequence.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">position</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">validate</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "howard.objects.variant": {"fullname": "howard.objects.variant", "modulename": "howard.objects.variant", "kind": "module", "doc": "<p>Methods for manipulating genetic variants.</p>\n"}, "howard.objects.variant.Position": {"fullname": "howard.objects.variant.Position", "modulename": "howard.objects.variant", "qualname": "Position", "kind": "class", "doc": "<p>A position in the genome.</p>\n"}, "howard.objects.variant.Position.__init__": {"fullname": "howard.objects.variant.Position.__init__", "modulename": "howard.objects.variant", "qualname": "Position.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">chrom</span>, </span><span class=\"param\"><span class=\"n\">chrom_start</span>, </span><span class=\"param\"><span class=\"n\">chrom_stop</span>, </span><span class=\"param\"><span class=\"n\">is_forward_strand</span></span>)</span>"}, "howard.objects.variant.Position.chrom": {"fullname": "howard.objects.variant.Position.chrom", "modulename": "howard.objects.variant", "qualname": "Position.chrom", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.variant.Position.chrom_start": {"fullname": "howard.objects.variant.Position.chrom_start", "modulename": "howard.objects.variant", "qualname": "Position.chrom_start", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.variant.Position.chrom_stop": {"fullname": "howard.objects.variant.Position.chrom_stop", "modulename": "howard.objects.variant", "qualname": "Position.chrom_stop", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.variant.Position.is_forward_strand": {"fullname": "howard.objects.variant.Position.is_forward_strand", "modulename": "howard.objects.variant", "qualname": "Position.is_forward_strand", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.variant.revcomp": {"fullname": "howard.objects.variant.revcomp", "modulename": "howard.objects.variant", "qualname": "revcomp", "kind": "function", "doc": "<p>Reverse complement.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">seq</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.objects.variant.get_sequence": {"fullname": "howard.objects.variant.get_sequence", "modulename": "howard.objects.variant", "qualname": "get_sequence", "kind": "function", "doc": "<p>Return a sequence for the genomic region.</p>\n\n<p>Coordinates are 0-based, end-exclusive.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">genome</span>, </span><span class=\"param\"><span class=\"n\">chrom</span>, </span><span class=\"param\"><span class=\"n\">start</span>, </span><span class=\"param\"><span class=\"n\">end</span>, </span><span class=\"param\"><span class=\"n\">is_forward_strand</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.objects.variant.get_sequence_from_position": {"fullname": "howard.objects.variant.get_sequence_from_position", "modulename": "howard.objects.variant", "qualname": "get_sequence_from_position", "kind": "function", "doc": "<p>Return a sequence for the genomic region</p>\n\n<p>Position is 0-based, end-exclusive.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">genome</span>, </span><span class=\"param\"><span class=\"n\">position</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.objects.variant.justify_indel": {"fullname": "howard.objects.variant.justify_indel", "modulename": "howard.objects.variant", "qualname": "justify_indel", "kind": "function", "doc": "<p>Justify an indel to the left or right along a sequence 'seq'.</p>\n\n<p>start, end: 0-based, end-exclusive coordinates of 'indel' within the\n    sequence 'seq'. Inserts denote the insertion point using start=end\n    and deletions indicate the deleted region with (start,end).\nindel: indel sequence, can be insertion or deletion.\nseq: a larger sequence containing the indel. Can be a fragment from the\n    genome.\njustify: Which direction to justify the indel ('left', 'right').</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">start</span>, </span><span class=\"param\"><span class=\"n\">end</span>, </span><span class=\"param\"><span class=\"n\">indel</span>, </span><span class=\"param\"><span class=\"n\">seq</span>, </span><span class=\"param\"><span class=\"n\">justify</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.objects.variant.justify_genomic_indel": {"fullname": "howard.objects.variant.justify_genomic_indel", "modulename": "howard.objects.variant", "qualname": "justify_genomic_indel", "kind": "function", "doc": "<p>start, end: 0-based, end-exclusive coordinates of 'indel'.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">genome</span>, </span><span class=\"param\"><span class=\"n\">chrom</span>, </span><span class=\"param\"><span class=\"n\">start</span>, </span><span class=\"param\"><span class=\"n\">end</span>, </span><span class=\"param\"><span class=\"n\">indel</span>, </span><span class=\"param\"><span class=\"n\">justify</span>, </span><span class=\"param\"><span class=\"n\">flank_length</span><span class=\"o\">=</span><span class=\"mi\">20</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.objects.variant.normalize_variant": {"fullname": "howard.objects.variant.normalize_variant", "modulename": "howard.objects.variant", "qualname": "normalize_variant", "kind": "function", "doc": "<p>Normalize variant according to the GATK/VCF standard.</p>\n\n<p>chrom: chromsome containing variant.\noffset: 1-based coordinate of reference allele in the genome.\nref_sequence: reference allele.\nalt_sequences: list of all alternate sequences.\ngenome: pygr-compatiable genome object.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">chrom</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span>,</span><span class=\"param\">\t<span class=\"n\">ref_sequence</span>,</span><span class=\"param\">\t<span class=\"n\">alt_sequences</span>,</span><span class=\"param\">\t<span class=\"n\">genome</span>,</span><span class=\"param\">\t<span class=\"n\">justify</span><span class=\"o\">=</span><span class=\"s1\">&#39;left&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">flank_length</span><span class=\"o\">=</span><span class=\"mi\">30</span>,</span><span class=\"param\">\t<span class=\"n\">indels_start_with_same_base</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.objects.variant.NormalizedVariant": {"fullname": "howard.objects.variant.NormalizedVariant", "modulename": "howard.objects.variant", "qualname": "NormalizedVariant", "kind": "class", "doc": "<p>Normalizes variant representation to match GATK/VCF.</p>\n"}, "howard.objects.variant.NormalizedVariant.__init__": {"fullname": "howard.objects.variant.NormalizedVariant.__init__", "modulename": "howard.objects.variant", "qualname": "NormalizedVariant.__init__", "kind": "function", "doc": "<p>position: a 0-index genomic Position.\nref_allele: the reference allele sequence.\nalt_alleles: a list of alternate allele sequences.\nseq_5p: 5 prime flanking sequence of variant.\nseq_3p: 3 prime flanking sequence of variant.\ngenome: a pygr compatible genome object (optional).</p>\n\n<p>indels_start_with_same_base: DML - I have no idea why this is required\n                                   but am keeping for backwards compat</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">position</span>,</span><span class=\"param\">\t<span class=\"n\">ref_allele</span>,</span><span class=\"param\">\t<span class=\"n\">alt_alleles</span>,</span><span class=\"param\">\t<span class=\"n\">seq_5p</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">seq_3p</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">genome</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">justify</span><span class=\"o\">=</span><span class=\"s1\">&#39;left&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">indels_start_with_same_base</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, "howard.objects.variant.NormalizedVariant.position": {"fullname": "howard.objects.variant.NormalizedVariant.position", "modulename": "howard.objects.variant", "qualname": "NormalizedVariant.position", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.variant.NormalizedVariant.alleles": {"fullname": "howard.objects.variant.NormalizedVariant.alleles", "modulename": "howard.objects.variant", "qualname": "NormalizedVariant.alleles", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.variant.NormalizedVariant.seq_5p": {"fullname": "howard.objects.variant.NormalizedVariant.seq_5p", "modulename": "howard.objects.variant", "qualname": "NormalizedVariant.seq_5p", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.variant.NormalizedVariant.seq_3p": {"fullname": "howard.objects.variant.NormalizedVariant.seq_3p", "modulename": "howard.objects.variant", "qualname": "NormalizedVariant.seq_3p", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.variant.NormalizedVariant.genome": {"fullname": "howard.objects.variant.NormalizedVariant.genome", "modulename": "howard.objects.variant", "qualname": "NormalizedVariant.genome", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.variant.NormalizedVariant.log": {"fullname": "howard.objects.variant.NormalizedVariant.log", "modulename": "howard.objects.variant", "qualname": "NormalizedVariant.log", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.variant.NormalizedVariant.indels_start_with_same_base": {"fullname": "howard.objects.variant.NormalizedVariant.indels_start_with_same_base", "modulename": "howard.objects.variant", "qualname": "NormalizedVariant.indels_start_with_same_base", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.variant.NormalizedVariant.molecular_class": {"fullname": "howard.objects.variant.NormalizedVariant.molecular_class", "modulename": "howard.objects.variant", "qualname": "NormalizedVariant.molecular_class", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.variant.NormalizedVariant.ref_allele": {"fullname": "howard.objects.variant.NormalizedVariant.ref_allele", "modulename": "howard.objects.variant", "qualname": "NormalizedVariant.ref_allele", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.variant.NormalizedVariant.alt_alleles": {"fullname": "howard.objects.variant.NormalizedVariant.alt_alleles", "modulename": "howard.objects.variant", "qualname": "NormalizedVariant.alt_alleles", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.variant.NormalizedVariant.variant": {"fullname": "howard.objects.variant.NormalizedVariant.variant", "modulename": "howard.objects.variant", "qualname": "NormalizedVariant.variant", "kind": "variable", "doc": "<p></p>\n"}, "howard.objects.variants": {"fullname": "howard.objects.variants", "modulename": "howard.objects.variants", "kind": "module", "doc": "<p></p>\n"}, "howard.objects.variants.Variants": {"fullname": "howard.objects.variants.Variants", "modulename": "howard.objects.variants", "qualname": "Variants", "kind": "class", "doc": "<p></p>\n"}, "howard.objects.variants.Variants.__init__": {"fullname": "howard.objects.variants.Variants.__init__", "modulename": "howard.objects.variants", "qualname": "Variants.__init__", "kind": "function", "doc": "<p>The function <code>__init__</code> initializes the variables, sets the input, output, config, param, connexion and\nheader</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>conn</strong>:  the connection to the database</li>\n<li><strong>input</strong>:  the input file</li>\n<li><strong>output</strong>:  the output file</li>\n<li><strong>config</strong>:  a dictionary containing the configuration of the model</li>\n<li><strong>param</strong>:  a dictionary containing the parameters of the model</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">conn</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"nb\">input</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">output</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">param</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">load</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, "howard.objects.variants.Variants.set_samples": {"fullname": "howard.objects.variants.Variants.set_samples", "modulename": "howard.objects.variants", "qualname": "Variants.set_samples", "kind": "function", "doc": "<p>The function <code>set_samples</code> sets the samples attribute of an object to a provided list or\nretrieves it from a parameter dictionary.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>samples</strong>:  The <code>set_samples</code> method is a method of a class that takes a list of samples as\ninput and sets the <code>samples</code> attribute of the class to the provided list. If no samples are\nprovided, it tries to get the samples from the class's parameters using the <code>get_param</code> method</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The <code>samples</code> list is being returned.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">samples</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_samples": {"fullname": "howard.objects.variants.Variants.get_samples", "modulename": "howard.objects.variants", "qualname": "Variants.get_samples", "kind": "function", "doc": "<p>This function returns a list of samples.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The <code>get_samples</code> method is returning the <code>samples</code> attribute of the object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_samples_check": {"fullname": "howard.objects.variants.Variants.get_samples_check", "modulename": "howard.objects.variants", "qualname": "Variants.get_samples_check", "kind": "function", "doc": "<p>This function returns the value of the \"check\" key within the \"samples\" dictionary retrieved\nfrom the parameters.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The method <code>get_samples_check</code> is returning the value of the key \"check\" inside the\n  \"samples\" dictionary, which is nested inside the dictionary returned by the <code>get_param()</code>\n  method. If the key \"check\" is not found, it will return <code>False</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.set_input": {"fullname": "howard.objects.variants.Variants.set_input", "modulename": "howard.objects.variants", "qualname": "Variants.set_input", "kind": "function", "doc": "<p>The function <code>set_input</code> takes a file name as input, extracts the name and extension, and sets\nattributes in the class accordingly.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input</strong>:  The <code>set_input</code> method in the provided code snippet is used to set attributes\nrelated to the input file. Here's a breakdown of the parameters and their usage in the method:</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">input</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.set_config": {"fullname": "howard.objects.variants.Variants.set_config", "modulename": "howard.objects.variants", "qualname": "Variants.set_config", "kind": "function", "doc": "<p>The set_config function takes a config object and assigns it as the configuration object for the\nclass.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>config</strong>:  The <code>config</code> parameter in the <code>set_config</code> function is a dictionary object that\ncontains configuration settings for the class. When you call the <code>set_config</code> function with a\ndictionary object as the argument, it will set that dictionary as the configuration object for\nthe class</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.set_param": {"fullname": "howard.objects.variants.Variants.set_param", "modulename": "howard.objects.variants", "qualname": "Variants.set_param", "kind": "function", "doc": "<p>This function sets a parameter object for the class based on the input dictionary.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>param</strong>:  The <code>set_param</code> method you provided takes a dictionary object as input and sets it\nas the <code>param</code> attribute of the class instance</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">param</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.init_variables": {"fullname": "howard.objects.variants.Variants.init_variables", "modulename": "howard.objects.variants", "qualname": "Variants.init_variables", "kind": "function", "doc": "<p>This function initializes the variables that will be used in the rest of the class</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_indexing": {"fullname": "howard.objects.variants.Variants.get_indexing", "modulename": "howard.objects.variants", "qualname": "Variants.get_indexing", "kind": "function", "doc": "<p>It returns the value of the key \"indexing\" in the dictionary. If the key is not present, it\nreturns False.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The value of the indexing parameter.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_connexion_config": {"fullname": "howard.objects.variants.Variants.get_connexion_config", "modulename": "howard.objects.variants", "qualname": "Variants.get_connexion_config", "kind": "function", "doc": "<p>The function <code>get_connexion_config</code> returns a dictionary containing the configuration for a\nconnection, including the number of threads and memory limit.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a dictionary containing the configuration for the Connexion library.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_duckdb_settings": {"fullname": "howard.objects.variants.Variants.get_duckdb_settings", "modulename": "howard.objects.variants", "qualname": "Variants.get_duckdb_settings", "kind": "function", "doc": "<p>The function <code>get_duckdb_settings</code> retrieves DuckDB settings from a configuration file or a\nstring.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>get_duckdb_settings</code> returns a dictionary object <code>duckdb_settings_dict</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.set_connexion_db": {"fullname": "howard.objects.variants.Variants.set_connexion_db", "modulename": "howard.objects.variants", "qualname": "Variants.set_connexion_db", "kind": "function", "doc": "<p>The function <code>set_connexion_db</code> returns the appropriate database connection string based on the\ninput format and connection type.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the value of the variable <code>connexion_db</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.set_connexion": {"fullname": "howard.objects.variants.Variants.set_connexion", "modulename": "howard.objects.variants", "qualname": "Variants.set_connexion", "kind": "function", "doc": "<p>The function <code>set_connexion</code> creates a connection to a database, with options for different\ndatabase formats and settings.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>conn</strong>:  The <code>conn</code> parameter in the <code>set_connexion</code> method is the connection to the\ndatabase. If a connection is not provided, a new connection to an in-memory database is created.\nThe method then proceeds to set up the connection based on the specified format (e.g., duckdb or\nsqlite</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">conn</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.set_output": {"fullname": "howard.objects.variants.Variants.set_output", "modulename": "howard.objects.variants", "qualname": "Variants.set_output", "kind": "function", "doc": "<p>The <code>set_output</code> function in Python sets the output file based on the input or a specified key\nin the config file, extracting the output name, extension, and format.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>output</strong>:  The <code>output</code> parameter in the <code>set_output</code> method is used to specify the name of\nthe output file. If the config file has an 'output' key, the method sets the output to the value\nof that key. If no output is provided, it sets the output to <code>None</code></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">output</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.set_header": {"fullname": "howard.objects.variants.Variants.set_header", "modulename": "howard.objects.variants", "qualname": "Variants.set_header", "kind": "function", "doc": "<p>It reads the header of a VCF file and stores it as a list of strings and as a VCF object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_query_to_df": {"fullname": "howard.objects.variants.Variants.get_query_to_df", "modulename": "howard.objects.variants", "qualname": "Variants.get_query_to_df", "kind": "function", "doc": "<p>The <code>get_query_to_df</code> function takes a query as a string and returns the result as a pandas\nDataFrame based on the connection format.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>query</strong>:  The <code>query</code> parameter in the <code>get_query_to_df</code> function is a string that\nrepresents the SQL query you want to execute. This query will be used to fetch data from a\ndatabase and convert it into a pandas DataFrame</li>\n<li><strong>limit</strong>:  The <code>limit</code> parameter in the <code>get_query_to_df</code> function is used to specify the\nmaximum number of rows to be returned in the resulting dataframe. If a limit is provided, the\nfunction will only fetch up to that number of rows from the database query result. If no limit\nis specified,</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A pandas DataFrame is being returned by the <code>get_query_to_df</code> function.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_overview": {"fullname": "howard.objects.variants.Variants.get_overview", "modulename": "howard.objects.variants", "qualname": "Variants.get_overview", "kind": "function", "doc": "<p>The function prints the input, output, config, and dataframe of the current object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_stats": {"fullname": "howard.objects.variants.Variants.get_stats", "modulename": "howard.objects.variants", "qualname": "Variants.get_stats", "kind": "function", "doc": "<p>The <code>get_stats</code> function calculates and returns various statistics of the current object,\nincluding information about the input file, variants, samples, header fields, quality, and\nSNVs/InDels.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a dictionary containing various statistics of the current object. The dictionary has\n  the following structure:</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.stats_to_file": {"fullname": "howard.objects.variants.Variants.stats_to_file", "modulename": "howard.objects.variants", "qualname": "Variants.stats_to_file", "kind": "function", "doc": "<p>The function <code>stats_to_file</code> takes a file name as input, retrieves statistics, serializes them\ninto a JSON object, and writes the JSON object to the specified file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file</strong>:  The <code>file</code> parameter is a string that represents the file path where the JSON data\nwill be written</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the name of the file that was written to.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.print_stats": {"fullname": "howard.objects.variants.Variants.print_stats", "modulename": "howard.objects.variants", "qualname": "Variants.print_stats", "kind": "function", "doc": "<p>The <code>print_stats</code> function generates a markdown file and prints the statistics contained in a\nJSON file in a formatted manner.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>output_file</strong>:  The <code>output_file</code> parameter is a string that specifies the path and filename\nof the output file where the stats will be printed in Markdown format. If no <code>output_file</code> is\nprovided, a temporary directory will be created and the stats will be saved in a file named\n\"stats.md\" within that</li>\n<li><strong>json_file</strong>:  The <code>json_file</code> parameter is a string that represents the path to the JSON\nfile where the statistics will be saved. If no value is provided, a temporary directory will be\ncreated and a default file name \"stats.json\" will be used</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>print_stats</code> does not return any value. It has a return type annotation\n  of <code>None</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">output_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">json_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_input": {"fullname": "howard.objects.variants.Variants.get_input", "modulename": "howard.objects.variants", "qualname": "Variants.get_input", "kind": "function", "doc": "<p>It returns the value of the input variable.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The input is being returned.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_input_format": {"fullname": "howard.objects.variants.Variants.get_input_format", "modulename": "howard.objects.variants", "qualname": "Variants.get_input_format", "kind": "function", "doc": "<p>This function returns the format of the input variable, either from the provided input file or\nby prompting for input.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_file</strong>:  The <code>input_file</code> parameter in the <code>get_input_format</code> method is a string that\nrepresents the file path of the input file. If no <code>input_file</code> is provided when calling the\nmethod, it will default to <code>None</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The format of the input variable is being returned.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">input_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_input_compressed": {"fullname": "howard.objects.variants.Variants.get_input_compressed", "modulename": "howard.objects.variants", "qualname": "Variants.get_input_compressed", "kind": "function", "doc": "<p>The function <code>get_input_compressed</code> returns the format of the input variable after compressing\nit.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_file</strong>:  The <code>input_file</code> parameter in the <code>get_input_compressed</code> method is a string\nthat represents the file path of the input file. If no <code>input_file</code> is provided when calling the\nmethod, it will default to <code>None</code> and the method will then call <code>self.get_input()</code> to</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>get_input_compressed</code> returns the compressed format of the input\n  variable.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">input_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_output": {"fullname": "howard.objects.variants.Variants.get_output", "modulename": "howard.objects.variants", "qualname": "Variants.get_output", "kind": "function", "doc": "<p>It returns the output of the neuron.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The output of the neural network.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_output_format": {"fullname": "howard.objects.variants.Variants.get_output_format", "modulename": "howard.objects.variants", "qualname": "Variants.get_output_format", "kind": "function", "doc": "<p>The function <code>get_output_format</code> returns the format of the input variable or the output file if\nprovided.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>output_file</strong>:  The <code>output_file</code> parameter in the <code>get_output_format</code> method is a string\nthat represents the file path of the output file. If no <code>output_file</code> is provided when calling\nthe method, it will default to the output obtained from the <code>get_output</code> method of the class\ninstance. The</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The format of the input variable is being returned.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">output_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_config": {"fullname": "howard.objects.variants.Variants.get_config", "modulename": "howard.objects.variants", "qualname": "Variants.get_config", "kind": "function", "doc": "<p>It returns the config</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The config variable is being returned.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_param": {"fullname": "howard.objects.variants.Variants.get_param", "modulename": "howard.objects.variants", "qualname": "Variants.get_param", "kind": "function", "doc": "<p>It returns the param</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The param variable is being returned.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_connexion_db": {"fullname": "howard.objects.variants.Variants.get_connexion_db", "modulename": "howard.objects.variants", "qualname": "Variants.get_connexion_db", "kind": "function", "doc": "<p>It returns the connexion_db attribute of the object</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The connexion_db is being returned.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_prefix": {"fullname": "howard.objects.variants.Variants.get_prefix", "modulename": "howard.objects.variants", "qualname": "Variants.get_prefix", "kind": "function", "doc": "<p>It returns the prefix of the object.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The prefix is being returned.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_table_variants": {"fullname": "howard.objects.variants.Variants.get_table_variants", "modulename": "howard.objects.variants", "qualname": "Variants.get_table_variants", "kind": "function", "doc": "<p>This function returns the table_variants attribute of the object</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>clause</strong>:  the type of clause the table will be used. Either \"select\" or \"from\" (optional),\ndefaults to select (optional)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The table_variants attribute of the object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">clause</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;select&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_tmp_dir": {"fullname": "howard.objects.variants.Variants.get_tmp_dir", "modulename": "howard.objects.variants", "qualname": "Variants.get_tmp_dir", "kind": "function", "doc": "<p>The function <code>get_tmp_dir</code> returns the temporary directory path based on configuration\nparameters or a default path.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The <code>get_tmp_dir</code> method is returning the temporary directory path based on the\n  configuration, parameters, and a default value of \"/tmp\".</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_connexion_type": {"fullname": "howard.objects.variants.Variants.get_connexion_type", "modulename": "howard.objects.variants", "qualname": "Variants.get_connexion_type", "kind": "function", "doc": "<p>If the connexion type is not in the list of allowed connexion types, raise a ValueError</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The connexion type is being returned.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_connexion": {"fullname": "howard.objects.variants.Variants.get_connexion", "modulename": "howard.objects.variants", "qualname": "Variants.get_connexion", "kind": "function", "doc": "<p>It returns the connection object</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The connection object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.close_connexion": {"fullname": "howard.objects.variants.Variants.close_connexion", "modulename": "howard.objects.variants", "qualname": "Variants.close_connexion", "kind": "function", "doc": "<p>This function closes the connection to the database.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The connection is being closed.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_header": {"fullname": "howard.objects.variants.Variants.get_header", "modulename": "howard.objects.variants", "qualname": "Variants.get_header", "kind": "function", "doc": "<p>This function returns the header of the VCF file as a list of strings</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>type</strong>:  the type of header you want to get, defaults to vcf (optional)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The header of the vcf file.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;vcf&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_header_infos_list": {"fullname": "howard.objects.variants.Variants.get_header_infos_list", "modulename": "howard.objects.variants", "qualname": "Variants.get_header_infos_list", "kind": "function", "doc": "<p>This function retrieves a list of information fields from the header.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of information fields from the header.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_header_length": {"fullname": "howard.objects.variants.Variants.get_header_length", "modulename": "howard.objects.variants", "qualname": "Variants.get_header_length", "kind": "function", "doc": "<p>The function <code>get_header_length</code> returns the length of the header list, excluding the #CHROM\nline.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file</strong>:  The <code>file</code> parameter is an optional argument that specifies the path to a VCF\nheader file. If this argument is provided, the function will read the header from the specified\nfile and return the length of the header list minus 1 (to exclude the #CHROM line)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the length of the header list, excluding the #CHROM line.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_header_columns": {"fullname": "howard.objects.variants.Variants.get_header_columns", "modulename": "howard.objects.variants", "qualname": "Variants.get_header_columns", "kind": "function", "doc": "<p>This function returns the header list of a VCF</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The length of the header list.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_header_columns_as_list": {"fullname": "howard.objects.variants.Variants.get_header_columns_as_list", "modulename": "howard.objects.variants", "qualname": "Variants.get_header_columns_as_list", "kind": "function", "doc": "<p>This function returns the header list of a VCF</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The length of the header list.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_header_columns_as_sql": {"fullname": "howard.objects.variants.Variants.get_header_columns_as_sql", "modulename": "howard.objects.variants", "qualname": "Variants.get_header_columns_as_sql", "kind": "function", "doc": "<p>This function retruns header length (without #CHROM line)</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The length of the header list.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_header_sample_list": {"fullname": "howard.objects.variants.Variants.get_header_sample_list", "modulename": "howard.objects.variants", "qualname": "Variants.get_header_sample_list", "kind": "function", "doc": "<p>The function <code>get_header_sample_list</code> returns a list of samples from a VCF header, with optional\nchecking and filtering based on input parameters.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>check</strong>:  The <code>check</code> parameter in the <code>get_header_sample_list</code> function is a boolean\nparameter that determines whether to check if the samples in the list are properly defined as\ngenotype columns. If <code>check</code> is set to <code>True</code>, the function will verify if each sample in the\nlist is defined as a, defaults to False</li>\n<li><strong>samples</strong>:  The <code>samples</code> parameter in the <code>get_header_sample_list</code> function is a list that\nallows you to specify a subset of samples from the header. If you provide a list of sample\nnames, the function will check if each sample is defined in the header. If a sample is not found\nin the</li>\n<li><strong>samples_force</strong>:  The <code>samples_force</code> parameter in the <code>get_header_sample_list</code> function is\na boolean parameter that determines whether to force the function to return the sample list\nwithout checking if the samples are genotype columns. If <code>samples_force</code> is set to <code>True</code>, the\nfunction will return the sample list without performing, defaults to False</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>get_header_sample_list</code> returns a list of samples based on the input\n  parameters and conditions specified in the function.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">check</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">samples</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">samples_force</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.is_genotype_column": {"fullname": "howard.objects.variants.Variants.is_genotype_column", "modulename": "howard.objects.variants", "qualname": "Variants.is_genotype_column", "kind": "function", "doc": "<p>This function checks if a given column is a genotype column in a database.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>column</strong>:  The <code>column</code> parameter in the <code>is_genotype_column</code> method is a string that\nrepresents the column name in a database table. This method checks if the specified column is a\ngenotype column in the database. If a column name is provided, it calls the <code>is_genotype_column</code>\nmethod of</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The <code>is_genotype_column</code> method is returning a boolean value. If the <code>column</code> parameter\n  is not None, it calls the <code>is_genotype_column</code> method of the <code>Database</code> class with the specified\n  column name and returns the result. If the <code>column</code> parameter is None, it returns False.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">column</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_verbose": {"fullname": "howard.objects.variants.Variants.get_verbose", "modulename": "howard.objects.variants", "qualname": "Variants.get_verbose", "kind": "function", "doc": "<p>It returns the value of the \"verbose\" key in the config dictionary, or False if the key doesn't\nexist</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The value of the key \"verbose\" in the config dictionary.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_connexion_format": {"fullname": "howard.objects.variants.Variants.get_connexion_format", "modulename": "howard.objects.variants", "qualname": "Variants.get_connexion_format", "kind": "function", "doc": "<p>It returns the connexion format of the object.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The connexion_format is being returned.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.insert_file_to_table": {"fullname": "howard.objects.variants.Variants.insert_file_to_table", "modulename": "howard.objects.variants", "qualname": "Variants.insert_file_to_table", "kind": "function", "doc": "<p>The function reads a file in chunks and inserts each chunk into a table based on the specified\ndatabase format.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file</strong>:  The <code>file</code> parameter is the file that you want to load into a table. It should be\nthe path to the file on your system</li>\n<li><strong>columns</strong>:  The <code>columns</code> parameter in the <code>insert_file_to_table</code> function is a string that\nshould contain the names of the columns in the table where the data will be inserted. The column\nnames should be separated by commas within the string. For example, if you have columns named\n\"id\", \"name</li>\n<li><strong>header_len</strong>:  The <code>header_len</code> parameter in the <code>insert_file_to_table</code> function specifies\nthe number of lines to skip at the beginning of the file before reading the actual data. This\nparameter allows you to skip any header information present in the file before processing the\ndata, defaults to 0</li>\n<li><strong>sep</strong>:  The <code>sep</code> parameter in the <code>insert_file_to_table</code> function is used to specify the\nseparator character that is used in the file being read. In this case, the default separator is\nset to <code></code>, which represents a tab character. You can change this parameter to a different\nseparator character if, defaults to     </li>\n<li><strong>chunksize</strong>:  The <code>chunksize</code> parameter specifies the number of rows to read in at a time\nwhen processing the file in chunks. In the provided code snippet, the default value for\n<code>chunksize</code> is set to 1000000. This means that the file will be read in chunks of 1,, defaults\nto 1000000</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">file</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">header_len</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">sep</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">chunksize</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000000</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.load_data": {"fullname": "howard.objects.variants.Variants.load_data", "modulename": "howard.objects.variants", "qualname": "Variants.load_data", "kind": "function", "doc": "<p>The <code>load_data</code> function reads a VCF file and inserts it into a table, with options to drop the\ntable before loading the data and specify a sample size.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_file</strong>:  The path to the input file. This is the VCF file that will be loaded into the\ntable</li>\n<li><strong>drop_variants_table</strong>:  The <code>drop_variants_table</code> parameter is a boolean flag that\ndetermines whether the variants table should be dropped before loading the data. If set to\n<code>True</code>, the variants table will be dropped. If set to <code>False</code> (default), the variants table will\nnot be dropped, defaults to False</li>\n<li><strong>sample_size</strong>:  The <code>sample_size</code> parameter determines the number of rows to be sampled from\nthe input file. If it is set to <code>None</code>, the default value of 20480 will be used, defaults to\n20480</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">input_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">drop_variants_table</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">sample_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">20480</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_explode_infos": {"fullname": "howard.objects.variants.Variants.get_explode_infos", "modulename": "howard.objects.variants", "qualname": "Variants.get_explode_infos", "kind": "function", "doc": "<p>The function <code>get_explode_infos</code> returns the value of the \"explode_infos\" parameter, defaulting\nto False if it is not set.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The method is returning the value of the \"explode_infos\" parameter, which is a boolean\n  value. If the parameter is not present, it will return False.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_explode_infos_fields": {"fullname": "howard.objects.variants.Variants.get_explode_infos_fields", "modulename": "howard.objects.variants", "qualname": "Variants.get_explode_infos_fields", "kind": "function", "doc": "<p>The <code>get_explode_infos_fields</code> function returns a list of exploded information fields based on\nthe input parameter <code>explode_infos_fields</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>explode_infos_fields</strong>:  The <code>explode_infos_fields</code> parameter is a string that specifies the\nfields to be exploded. It can be set to \"ALL\" to explode all fields, or it can be a\ncomma-separated list of field names to explode</li>\n<li><strong>remove_fields_not_in_header</strong>:  The parameter <code>remove_fields_not_in_header</code> is a boolean\nflag that determines whether to remove fields that are not present in the header. If it is set\nto <code>True</code>, any field that is not in the header will be excluded from the list of exploded\ninformation fields. If it is set to `, defaults to False</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>get_explode_infos_fields</code> returns a list of exploded information fields.\n  If the <code>explode_infos_fields</code> parameter is not provided or is set to None, it returns an empty\n  list. If the parameter is provided and its value is \"ALL\", it also returns an empty list.\n  Otherwise, it returns a list of exploded information fields after removing any spaces and\n  splitting the string by commas.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">explode_infos_fields</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">remove_fields_not_in_header</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"fullname": "howard.objects.variants.Variants.get_explode_infos_prefix", "modulename": "howard.objects.variants", "qualname": "Variants.get_explode_infos_prefix", "kind": "function", "doc": "<p>The function <code>get_explode_infos_prefix</code> returns the value of the <code>explode_infos_prefix</code> parameter, or\nthe value of <code>self.get_param().get(\"explode_infos_prefix\", None)</code> if <code>explode_infos_prefix</code> is\nnot provided.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>explode_infos_prefix</strong>:  The parameter <code>explode_infos_prefix</code> is a string that specifies a\nprefix to be used for exploding or expanding information</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the value of the variable <code>explode_infos_prefix</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">explode_infos_prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.add_column": {"fullname": "howard.objects.variants.Variants.add_column", "modulename": "howard.objects.variants", "qualname": "Variants.add_column", "kind": "function", "doc": "<p>The <code>add_column</code> function adds a column to a SQLite or DuckDB table with a default value if it\ndoesn't already exist.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>table_name</strong>:  The name of the table to which you want to add a column</li>\n<li><strong>column_name</strong>:  The parameter \"column_name\" is the name of the column that you want to add\nto the table</li>\n<li><strong>column_type</strong>:  The <code>column_type</code> parameter specifies the data type of the column that you\nwant to add to the table. It should be a string that represents the desired data type, such as\n\"INTEGER\", \"TEXT\", \"REAL\", etc</li>\n<li><strong>default_value</strong>:  The <code>default_value</code> parameter is an optional parameter that specifies the\ndefault value for the newly added column. If a default value is provided, it will be assigned to\nthe column for any existing rows that do not have a value for that column</li>\n<li><strong>drop</strong>:  The <code>drop</code> parameter is a boolean flag that determines whether to drop the column\nif it already exists in the table. If <code>drop</code> is set to <code>True</code>, the function will drop the\nexisting column before adding the new column. If <code>drop</code> is set to <code>False</code> (default),, defaults\nto False</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a boolean value indicating whether the column was successfully added to the table.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span>,</span><span class=\"param\">\t<span class=\"n\">column_name</span>,</span><span class=\"param\">\t<span class=\"n\">column_type</span>,</span><span class=\"param\">\t<span class=\"n\">default_value</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">drop</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.drop_column": {"fullname": "howard.objects.variants.Variants.drop_column", "modulename": "howard.objects.variants", "qualname": "Variants.drop_column", "kind": "function", "doc": "<p>The <code>drop_column</code> function drops a specified column from a given table in a database and returns\nTrue if the column was successfully dropped, and False if the column does not exist in the\ntable.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>column</strong>:  The <code>column</code> parameter is a dictionary that contains information about the column\nyou want to drop. It has two keys:</li>\n<li><strong>table_name</strong>:  The <code>table_name</code> parameter is the name of the table from which you want to\ndrop a column</li>\n<li><strong>column_name</strong>:  The <code>column_name</code> parameter is the name of the column that you want to drop\nfrom the table</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a boolean value. It returns True if the column was successfully dropped from the table,\n  and False if the column does not exist in the table.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">column</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.explode_infos": {"fullname": "howard.objects.variants.Variants.explode_infos", "modulename": "howard.objects.variants", "qualname": "Variants.explode_infos", "kind": "function", "doc": "<p>The <code>explode_infos</code> function in Python takes a VCF file and explodes the INFO fields into\nindividual columns, returning a list of added columns.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>prefix</strong>:  The <code>prefix</code> parameter is a string that is used as a prefix for the exploded INFO\nfields. If the <code>prefix</code> is not provided or is set to <code>None</code>, the function will use the value of\n<code>self.get_explode_infos_prefix()</code> as the prefix</li>\n<li><strong>create_index</strong>:  The <code>create_index</code> parameter is a boolean flag that specifies whether to\ncreate indexes on the exploded INFO fields. If set to <code>True</code>, indexes will be created; if set to\n<code>False</code>, indexes will not be created. The default value is <code>False</code>, defaults to False</li>\n<li><strong>fields</strong>:  The <code>fields</code> parameter in the <code>explode_infos</code> function is a list of INFO fields\nthat you want to explode into individual columns. If this parameter is not provided, all INFO\nfields will be exploded. You can specify the INFO fields you want to explode by passing them as\na list to the `</li>\n<li><strong>force</strong>:  The <code>force</code> parameter in the <code>explode_infos</code> function is a boolean flag that\ndetermines whether to drop and recreate a column if it already exists in the table. If <code>force</code>\nis set to <code>True</code>, the column will be dropped and recreated. If <code>force</code> is set to `False,\ndefaults to False</li>\n<li><strong>proccess_all_fields_together</strong>:  The <code>proccess_all_fields_together</code> parameter is a boolean\nflag that determines whether to process all the INFO fields together or individually. If set to\n<code>True</code>, all the INFO fields will be processed together. If set to <code>False</code>, each INFO field will\nbe processed individually. The default value is, defaults to False</li>\n<li><strong>table</strong>:  The <code>table</code> parameter in the <code>explode_infos</code> function is used to specify the name\nof the table where the exploded INFO fields will be added as individual columns. If you provide\na value for the <code>table</code> parameter, the function will use that table name. If the <code>table</code>\nparameter is</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The <code>explode_infos</code> function returns a list of added columns.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">create_index</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">fields</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">force</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">proccess_all_fields_together</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.create_indexes": {"fullname": "howard.objects.variants.Variants.create_indexes", "modulename": "howard.objects.variants", "qualname": "Variants.create_indexes", "kind": "function", "doc": "<p>Create indexes on the table after insertion</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.drop_indexes": {"fullname": "howard.objects.variants.Variants.drop_indexes", "modulename": "howard.objects.variants", "qualname": "Variants.drop_indexes", "kind": "function", "doc": "<p>Create indexes on the table after insertion</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.read_vcf_header": {"fullname": "howard.objects.variants.Variants.read_vcf_header", "modulename": "howard.objects.variants", "qualname": "Variants.read_vcf_header", "kind": "function", "doc": "<p>It reads the header of a VCF file and returns a list of the header lines</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>f</strong>:  the file object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The header lines of the VCF file.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">f</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.read_vcf_header_file": {"fullname": "howard.objects.variants.Variants.read_vcf_header_file", "modulename": "howard.objects.variants", "qualname": "Variants.read_vcf_header_file", "kind": "function", "doc": "<p>The <code>read_vcf_header_file</code> function reads the header of a VCF file, handling both compressed and\nuncompressed files.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file</strong>:  The <code>file</code> parameter is a string that represents the path to the VCF header file\nthat you want to read. It is an optional parameter, so if you don't provide a value, it will\ndefault to <code>None</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>read_vcf_header_file</code> returns a list.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.execute_query": {"fullname": "howard.objects.variants.Variants.execute_query", "modulename": "howard.objects.variants", "qualname": "Variants.execute_query", "kind": "function", "doc": "<p>It takes a query as an argument, executes it, and returns the results</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>query</strong>:  The query to be executed</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The result of the query is being returned.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.export_output": {"fullname": "howard.objects.variants.Variants.export_output", "modulename": "howard.objects.variants", "qualname": "Variants.export_output", "kind": "function", "doc": "<p>The <code>export_output</code> function exports data from a VCF file to a specified output file in various\nformats, including VCF, CSV, TSV, PSV, and Parquet.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>output_file</strong>:  The <code>output_file</code> parameter is a string that specifies the name of the\noutput file to be generated by the function. This is where the exported data will be saved</li>\n<li><strong>output_header</strong>:  The <code>output_header</code> parameter is a string that specifies the name of the\nfile where the header of the VCF file will be exported. If this parameter is not provided, the\nheader will be exported to a file with the same name as the <code>output_file</code> parameter, but with\nthe extension \"</li>\n<li><strong>export_header</strong>:  The <code>export_header</code> parameter is a boolean flag that determines whether\nthe header of a VCF file should be exported to a separate file or not. If <code>export_header</code> is\nTrue, the header will be exported to a file. If <code>export_header</code> is False, the header will not\nbe, defaults to True, if output format is not VCF</li>\n<li><strong>query</strong>:  The <code>query</code> parameter is an optional SQL query that can be used to filter and\nselect specific data from the VCF file before exporting it. If provided, only the data that\nmatches the query will be exported</li>\n<li><strong>parquet_partitions</strong>:  The <code>parquet_partitions</code> parameter is a list that specifies the\ncolumns to be used for partitioning the Parquet file during export. Partitioning is a way to\norganize data in a hierarchical directory structure based on the values of one or more columns.\nThis can improve query performance when working with large datasets</li>\n<li><strong>chunk_size</strong>:  The <code>chunk_size</code> parameter specifies the number of\nrecords in batch when exporting data in Parquet format. This parameter is used for\npartitioning the Parquet file into multiple files.</li>\n<li><strong>threads</strong>:  The <code>threads</code> parameter is an optional parameter that specifies the number of\nthreads to be used during the export process. It determines the level of parallelism and can\nimprove the performance of the export operation. If not provided, the function will use the\ndefault number of threads</li>\n<li><strong>sort</strong>:  The <code>sort</code> parameter is a boolean flag that determines whether the output file\nshould be sorted or not. If <code>sort</code> is set to <code>True</code>, the output file will be sorted based on the\ngenomic coordinates of the variants. By default, the value of <code>sort</code> is <code>False</code>, defaults to\nFalse</li>\n<li><strong>index</strong>:  The <code>index</code> parameter is a boolean flag that determines whether an index should be\ncreated on the output file. If <code>index</code> is True, an index will be created. If <code>index</code> is False,\nno index will be created. The default value is False, defaults to False</li>\n<li><strong>order_by</strong>:  The <code>order_by</code> parameter is a string that specifies the column(s) to use for\nsorting the output file. This parameter is only applicable when exporting data in VCF format</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a boolean value. It checks if the output file exists and returns True if it does, or\n  None if it doesn't.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">output_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">output_header</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">export_header</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">parquet_partitions</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">chunk_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sort</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">order_by</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_extra_infos": {"fullname": "howard.objects.variants.Variants.get_extra_infos", "modulename": "howard.objects.variants", "qualname": "Variants.get_extra_infos", "kind": "function", "doc": "<p>The <code>get_extra_infos</code> function returns a list of columns that are in a specified table but not\nin the header.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>table</strong>:  The <code>table</code> parameter in the <code>get_extra_infos</code> function is used to specify the\nname of the table from which you want to retrieve the extra columns that are not present in the\nheader. If the <code>table</code> parameter is not provided when calling the function, it will default to\nusing the variants</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of columns that are in the specified table but not in the header of the table.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_extra_infos_sql": {"fullname": "howard.objects.variants.Variants.get_extra_infos_sql", "modulename": "howard.objects.variants", "qualname": "Variants.get_extra_infos_sql", "kind": "function", "doc": "<p>It returns a string of the extra infos, separated by commas, and each extra info is surrounded\nby double quotes</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>table</strong>:  The name of the table to get the extra infos from. If None, the default table is\nused</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A string of the extra infos</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.export_header": {"fullname": "howard.objects.variants.Variants.export_header", "modulename": "howard.objects.variants", "qualname": "Variants.export_header", "kind": "function", "doc": "<p>The <code>export_header</code> function takes a VCF file, extracts the header, modifies it according to\nspecified options, and writes it to a new file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>header_name</strong>:  The <code>header_name</code> parameter is the name of the header file to be created. If\nthis parameter is not specified, the header will be written to the output file</li>\n<li><strong>output_file</strong>:  The <code>output_file</code> parameter in the <code>export_header</code> function is used to\nspecify the name of the output file where the header will be written. If this parameter is not\nprovided, the header will be written to a temporary file</li>\n<li><strong>output_file_ext</strong>:  The <code>output_file_ext</code> parameter in the <code>export_header</code> function is a\nstring that represents the extension of the output header file. By default, it is set to \".hdr\"\nif not specified by the user. This extension will be appended to the <code>output_file</code> name to\ncreate the final, defaults to .hdr</li>\n<li><strong>clean_header</strong>:  The <code>clean_header</code> parameter in the <code>export_header</code> function is a boolean\nflag that determines whether the header should be cleaned or not. When <code>clean_header</code> is set to\n<code>True</code>, the function will clean the header by modifying certain lines based on a specific\npattern. If <code>clean_header</code>, defaults to True</li>\n<li><strong>remove_chrom_line</strong>:  The <code>remove_chrom_line</code> parameter in the <code>export_header</code> function is a\nboolean flag that determines whether the #CHROM line should be removed from the header before\nwriting it to the output file. If set to <code>True</code>, the #CHROM line will be removed; if set to `,\ndefaults to False</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>export_header</code> returns the name of the temporary header file that is\n  created.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">header_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">output_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">output_file_ext</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.hdr&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">clean_header</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">remove_chrom_line</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.export_variant_vcf": {"fullname": "howard.objects.variants.Variants.export_variant_vcf", "modulename": "howard.objects.variants", "qualname": "Variants.export_variant_vcf", "kind": "function", "doc": "<p>The <code>export_variant_vcf</code> function exports a VCF file with specified samples, allowing options to\nremove INFO field, add samples, and control compression and indexing.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>vcf_file</strong>:  The <code>vcf_file</code> parameter is the name of the file where the VCF data will be\nwritten to. It is the output file that will contain the filtered VCF data based on the specified\nparameters</li>\n<li><strong>remove_info</strong>:  The <code>remove_info</code> parameter in the <code>export_variant_vcf</code> function is a\nboolean flag that determines whether to remove the INFO field from the output VCF file. If set\nto <code>True</code>, the INFO field will be removed. If set to <code>False</code>, the INFO field will be included\nin, defaults to False</li>\n<li><strong>add_samples</strong>:  The <code>add_samples</code> parameter is a boolean parameter that determines whether\nthe samples should be added to the VCF file or not. If set to True, the samples will be added.\nIf set to False, the samples will be removed. The default value is True, defaults to True</li>\n<li><strong>list_samples</strong>:  The <code>list_samples</code> parameter is a list of samples that you want to include\nin the output VCF file. By default, all samples will be included. If you provide a list of\nsamples, only those samples will be included in the output file</li>\n<li><strong>index</strong>:  The <code>index</code> parameter in the <code>export_variant_vcf</code> function is a boolean flag that\ndetermines whether or not to create an index for the output VCF file. If <code>index</code> is set to\n<code>True</code>, the output VCF file will be indexed using tabix. If <code>index</code>, defaults to False</li>\n<li><strong>threads</strong>:  The <code>threads</code> parameter in the <code>export_variant_vcf</code> function specifies the\nnumber of threads to use for exporting the VCF file. It determines how many parallel threads\nwill be used during the export process. More threads can potentially speed up the export process\nby utilizing multiple cores of the processor. If</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The <code>export_variant_vcf</code> function returns the result of calling the <code>export_output</code>\n  method with various parameters including the output file, query, threads, sort flag, and index\n  flag. The <code>export_output</code> method is responsible for exporting the VCF data based on the\n  specified parameters and configurations provided in the <code>export_variant_vcf</code> function.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">vcf_file</span>,</span><span class=\"param\">\t<span class=\"n\">remove_info</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">add_samples</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">list_samples</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">where_clause</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.run_commands": {"fullname": "howard.objects.variants.Variants.run_commands", "modulename": "howard.objects.variants", "qualname": "Variants.run_commands", "kind": "function", "doc": "<p>It takes a list of commands and runs them in parallel using the number of threads specified</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>commands</strong>:  A list of commands to run</li>\n<li><strong>threads</strong>:  The number of threads to use, defaults to 1 (optional)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">commands</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>, </span><span class=\"param\"><span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_threads": {"fullname": "howard.objects.variants.Variants.get_threads", "modulename": "howard.objects.variants", "qualname": "Variants.get_threads", "kind": "function", "doc": "<p>This function returns the number of threads to use for a job, with a default value of 1 if not\nspecified.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>default</strong>:  The <code>default</code> parameter in the <code>get_threads</code> method is used to specify the\ndefault number of threads to use if no specific value is provided. If no value is provided for\nthe <code>threads</code> parameter in the configuration or input parameters, the <code>default</code> value will be\nused, defaults to 1</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the number of threads to use for the current job.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_memory": {"fullname": "howard.objects.variants.Variants.get_memory", "modulename": "howard.objects.variants", "qualname": "Variants.get_memory", "kind": "function", "doc": "<p>This function retrieves the memory value from parameters or configuration with a default value\nif not found.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>default</strong>:  The <code>get_memory</code> function takes in a default value as a string parameter. This\ndefault value is used as a fallback in case the <code>memory</code> parameter is not provided in the\n<code>param</code> dictionary or the <code>config</code> dictionary. If <code>memory</code> is not found in either dictionary,\nthe function</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The <code>get_memory</code> function returns a string value representing the memory parameter. If\n  the <code>input_memory</code> is provided in the parameters, it will return that value. Otherwise, it will\n  return the default value provided as an argument to the function.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.update_from_vcf": {"fullname": "howard.objects.variants.Variants.update_from_vcf", "modulename": "howard.objects.variants", "qualname": "Variants.update_from_vcf", "kind": "function", "doc": "<blockquote>\n  <p>If the database is duckdb, then use the parquet method, otherwise use the sqlite method</p>\n</blockquote>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>vcf_file</strong>:  the path to the VCF file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">vcf_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"fullname": "howard.objects.variants.Variants.update_from_vcf_duckdb", "modulename": "howard.objects.variants", "qualname": "Variants.update_from_vcf_duckdb", "kind": "function", "doc": "<p>It takes a VCF file and updates the INFO column of the variants table in the database with the\nINFO column of the VCF file</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>vcf_file</strong>:  the path to the VCF file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">vcf_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"fullname": "howard.objects.variants.Variants.update_from_vcf_sqlite", "modulename": "howard.objects.variants", "qualname": "Variants.update_from_vcf_sqlite", "kind": "function", "doc": "<p>It creates a temporary table in the SQLite database, loads the VCF file into the temporary\ntable, then updates the INFO column of the variants table with the INFO column of the temporary\ntable</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>vcf_file</strong>:  The path to the VCF file you want to update the database with</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">vcf_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.drop_variants_table": {"fullname": "howard.objects.variants.Variants.drop_variants_table", "modulename": "howard.objects.variants", "qualname": "Variants.drop_variants_table", "kind": "function", "doc": "<blockquote>\n  <p>This function drops the variants table</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.set_variant_id": {"fullname": "howard.objects.variants.Variants.set_variant_id", "modulename": "howard.objects.variants", "qualname": "Variants.set_variant_id", "kind": "function", "doc": "<p>It adds a column to the variants table called <code>variant_id</code> and populates it with a hash of the\n<code>#CHROM</code>, <code>POS</code>, <code>REF</code>, and <code>ALT</code> columns</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>variant_id_column</strong>:  The name of the column to be created in the variants table, defaults\nto variant_id</li>\n<li><strong>force</strong>:  If True, the variant_id column will be created even if it already exists</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The name of the column that contains the variant_id</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">variant_id_column</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;variant_id&#39;</span>, </span><span class=\"param\"><span class=\"n\">force</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_variant_id_column": {"fullname": "howard.objects.variants.Variants.get_variant_id_column", "modulename": "howard.objects.variants", "qualname": "Variants.get_variant_id_column", "kind": "function", "doc": "<p>This function returns the variant_id column name</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>variant_id_column</strong>:  The name of the column in the dataframe that contains the variant IDs,\ndefaults to variant_id</li>\n<li><strong>force</strong>:  If True, will force the variant_id to be set to the value of variant_id_column. If\nFalse, will only set the variant_id if it is not already set. If None, will set the variant_id\nif it is not already set, or if it is set</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The variant_id column name.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">variant_id_column</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;variant_id&#39;</span>, </span><span class=\"param\"><span class=\"n\">force</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.scan_databases": {"fullname": "howard.objects.variants.Variants.scan_databases", "modulename": "howard.objects.variants", "qualname": "Variants.scan_databases", "kind": "function", "doc": "<p>The function <code>scan_databases</code> scans for available databases based on specified formats and\nreleases.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>database_formats</strong>:  The <code>database_formats</code> parameter is a list that specifies the formats\nof the databases to be scanned. In this case, the accepted format is \"parquet\"</li>\n<li><strong>database_releases</strong>:  The <code>database_releases</code> parameter is a list that specifies the\nreleases of the databases to be scanned. In the provided function, the default value for\n<code>database_releases</code> is set to <code>[\"current\"]</code>, meaning that by default, the function will scan\ndatabases that are in the \"current\"</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>scan_databases</code> returns a dictionary containing information about\n  databases that match the specified formats and releases.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">database_formats</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;parquet&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">database_releases</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;current&#39;</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.annotation": {"fullname": "howard.objects.variants.Variants.annotation", "modulename": "howard.objects.variants", "qualname": "Variants.annotation", "kind": "function", "doc": "<p>It annotates the VCF file with the annotations specified in the config file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.annotation_snpsift": {"fullname": "howard.objects.variants.Variants.annotation_snpsift", "modulename": "howard.objects.variants", "qualname": "Variants.annotation_snpsift", "kind": "function", "doc": "<p>This function annotate with bcftools</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>threads</strong>:  Number of threads to use</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the value of the variable \"return_value\".</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.annotation_bcftools": {"fullname": "howard.objects.variants.Variants.annotation_bcftools", "modulename": "howard.objects.variants", "qualname": "Variants.annotation_bcftools", "kind": "function", "doc": "<p>This function annotate with bcftools</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>threads</strong>:  Number of threads to use</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the value of the variable \"return_value\".</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.annotation_exomiser": {"fullname": "howard.objects.variants.Variants.annotation_exomiser", "modulename": "howard.objects.variants", "qualname": "Variants.annotation_exomiser", "kind": "function", "doc": "<p>This function annotate with Exomiser</p>\n\n<p>This function uses args as parameters, in section \"annotation\" -> \"exomiser\", with sections:</p>\n\n<ul>\n<li>\"analysis\" (dict/file):\nFull analysis dictionnary parameters (see Exomiser docs).\nEither a dict, or a file in JSON or YAML format.\nThese parameters may change depending on other parameters (e.g. phenotipicFeatures/HPO)\nDefault : None</li>\n<li>\"preset\" (string):\nAnalysis preset (available in config folder).\nUsed if no full \"analysis\" is provided.\nDefault: \"exome\"</li>\n<li>\"phenopacket\" (dict/file):\nSamples and phenotipic features parameters (see Exomiser docs).\nEither a dict, or a file in JSON or YAML format.\nDefault: None</li>\n<li>\"subject\" (dict):\nSample parameters (see Exomiser docs).\nExample:\n    \"subject\":\n        {\n            \"id\": \"ISDBM322017\",\n            \"sex\": \"FEMALE\"\n        }\nDefault: None</li>\n<li>\"sample\" (string):\nSample name to construct \"subject\" section:\n    \"subject\":\n        {\n            \"id\": \"<sample>\",\n            \"sex\": \"UNKNOWN_SEX\"\n        }\nDefault: None</li>\n<li>\"phenotypicFeatures\" (dict)\nPhenotypic features to construct \"subject\" section.\nExample:\n    \"phenotypicFeatures\":\n        [\n            { \"type\": { \"id\": \"HP:0001159\", \"label\": \"Syndactyly\" } },\n            { \"type\": { \"id\": \"HP:0000486\", \"label\": \"Strabismus\" } }\n        ]</li>\n<li>\"hpo\" (list)\nList of HPO ids as phenotypic features.\nExample:\n    \"hpo\": ['0001156', '0001363', '0011304', '0010055']\nDefault: []</li>\n<li>\"outputOptions\" (dict):\nOutput options (see Exomiser docs).\nDefault:\n    \"output_options\" =\n        {\n            \"outputContributingVariantsOnly\": False,\n            \"numGenes\": 0,\n            \"outputFormats\": [\"TSV_VARIANT\", \"VCF\"]\n        }</li>\n<li>\"transcript_source\" (string):\nTranscript source (either \"refseq\", \"ucsc\", \"ensembl\")\nDefault: \"refseq\"</li>\n<li>\"exomiser_to_info\" (boolean):\nAdd exomiser TSV file columns as INFO fields in VCF.\nDefault: False</li>\n<li>\"release\" (string):\nExomise database release.\nIf not exists, database release will be downloaded (take a while).\nDefault: None (provided by application.properties configuration file)</li>\n<li>\"exomiser_application_properties\" (file):\nExomiser configuration file (see Exomiser docs).\nUseful to automatically download databases (especially for specific genome databases).</li>\n</ul>\n\n<p>Notes:</p>\n\n<ul>\n<li>If no sample in parameters, first sample in VCF will be chosen</li>\n<li>If no HPO found, \"hiPhivePrioritiser\" analysis step will be switch off</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>threads</strong>:  The number of threads to use</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.annotation_snpeff": {"fullname": "howard.objects.variants.Variants.annotation_snpeff", "modulename": "howard.objects.variants", "qualname": "Variants.annotation_snpeff", "kind": "function", "doc": "<p>This function annotate with snpEff</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>threads</strong>:  The number of threads to use</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the value of the variable \"return_value\".</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.annotation_annovar": {"fullname": "howard.objects.variants.Variants.annotation_annovar", "modulename": "howard.objects.variants", "qualname": "Variants.annotation_annovar", "kind": "function", "doc": "<p>It takes a VCF file, annotates it with Annovar, and then updates the database with the new\nannotations</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>threads</strong>:  number of threads to use</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the value of the variable \"return_value\".</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.annotation_parquet": {"fullname": "howard.objects.variants.Variants.annotation_parquet", "modulename": "howard.objects.variants", "qualname": "Variants.annotation_parquet", "kind": "function", "doc": "<p>It takes a VCF file, and annotates it with a parquet file</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>threads</strong>:  number of threads to use for the annotation</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the value of the variable \"result\".</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.annotation_splice": {"fullname": "howard.objects.variants.Variants.annotation_splice", "modulename": "howard.objects.variants", "qualname": "Variants.annotation_splice", "kind": "function", "doc": "<p>This function annotate with snpEff</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>threads</strong>:  The number of threads to use</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the value of the variable \"return_value\".</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_config_default": {"fullname": "howard.objects.variants.Variants.get_config_default", "modulename": "howard.objects.variants", "qualname": "Variants.get_config_default", "kind": "function", "doc": "<p>The function <code>get_config_default</code> returns a dictionary containing default configurations for\nvarious calculations and prioritizations.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong>:  The <code>get_config_default</code> function returns a dictionary containing default\nconfigurations for different calculations and prioritizations. The <code>name</code> parameter is used to\nspecify which specific configuration to retrieve from the dictionary</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>get_config_default</code> returns a dictionary containing default configuration\n  settings for different calculations and prioritizations. The specific configuration settings are\n  retrieved based on the input <code>name</code> parameter provided to the function. If the <code>name</code> parameter\n  matches a key in the <code>config_default</code> dictionary, the corresponding configuration settings are\n  returned. If there is no match, an empty dictionary is returned.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_config_json": {"fullname": "howard.objects.variants.Variants.get_config_json", "modulename": "howard.objects.variants", "qualname": "Variants.get_config_json", "kind": "function", "doc": "<p>The function <code>get_config_json</code> retrieves a configuration JSON object with prioritizations from\ndefault values, a dictionary, and a file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong>:  The <code>name</code> parameter in the <code>get_config_json</code> function is a string that represents\nthe name of the configuration. It is used to identify and retrieve the configuration settings\nfor a specific component or module</li>\n<li><strong>config_dict</strong>:  The <code>config_dict</code> parameter in the <code>get_config_json</code> function is a\ndictionary that allows you to provide additional configuration settings or overrides. When you\ncall the <code>get_config_json</code> function, you can pass a dictionary containing key-value pairs where\nthe key is the configuration setting you want to override or</li>\n<li><strong>config_file</strong>:  The <code>config_file</code> parameter in the <code>get_config_json</code> function is used to\nspecify the path to a configuration file that contains additional settings. If provided, the\nfunction will read the contents of this file and update the configuration dictionary with the\nvalues found in the file, overriding any existing values with the</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>get_config_json</code> returns a dictionary containing the configuration\n  settings.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">config_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>, </span><span class=\"param\"><span class=\"n\">config_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.prioritization": {"fullname": "howard.objects.variants.Variants.prioritization", "modulename": "howard.objects.variants", "qualname": "Variants.prioritization", "kind": "function", "doc": "<p>The <code>prioritization</code> function in Python processes VCF files, adds new INFO fields, and\nprioritizes variants based on configured profiles and criteria.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>table</strong>:  The <code>table</code> parameter in the <code>prioritization</code> function is used to specify the name\nof the table (presumably a VCF file) on which the prioritization operation will be performed. If\na table name is provided, the method will prioritize the variants in that specific table</li>\n<li><strong>pz_prefix</strong>:  The <code>pz_prefix</code> parameter is used to specify a prefix that will be added to\ncertain INFO fields in a VCF file during the prioritization process. If this parameter is not\nprovided, the code will use a default prefix value of \"PZ\"</li>\n<li><strong>pz_param</strong>:  The <code>pz_param</code> parameter in the <code>prioritization</code> method is used to pass\nadditional parameters specific to the prioritization process. These parameters can include\nsettings related to prioritization profiles, fields, scoring modes, flags, comments, and other\nconfigurations needed for the prioritization of variants in a V</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A boolean value (True) is being returned from the <code>prioritization</code> function.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">pz_prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">pz_param</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.annotation_hgvs": {"fullname": "howard.objects.variants.Variants.annotation_hgvs", "modulename": "howard.objects.variants", "qualname": "Variants.annotation_hgvs", "kind": "function", "doc": "<p>The <code>annotation_hgvs</code> function performs HGVS annotation on a set of variants using genomic\ncoordinates and alleles.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>threads</strong>:  The <code>threads</code> parameter is an optional integer that specifies the number of\nthreads to use for parallel processing. If no value is provided, it will default to the number\nof threads obtained from the <code>get_threads()</code> method</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.get_operations_help": {"fullname": "howard.objects.variants.Variants.get_operations_help", "modulename": "howard.objects.variants", "qualname": "Variants.get_operations_help", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">operations_config_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">operations_config_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.calculation": {"fullname": "howard.objects.variants.Variants.calculation", "modulename": "howard.objects.variants", "qualname": "Variants.calculation", "kind": "function", "doc": "<p>It takes a list of operations, and for each operation, it checks if it's a python or sql\noperation, and then calls the appropriate function</p>\n\n<p>param json example:\n    \"calculation\": {\n        \"NOMEN\": {\n            \"options\": {\n                \"hgvs_field\": \"hgvs\"\n            },\n        \"middle\" : null\n    }</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">operations</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">operations_config_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">operations_config_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.calculation_process_sql": {"fullname": "howard.objects.variants.Variants.calculation_process_sql", "modulename": "howard.objects.variants", "qualname": "Variants.calculation_process_sql", "kind": "function", "doc": "<p>The <code>calculation_process_sql</code> function takes in a mathematical operation as a string and\nperforms the operation, updating the specified table with the result.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>operation</strong>:  The <code>operation</code> parameter is a dictionary that contains information about the\nmathematical operation to be performed. It includes the following keys:</li>\n<li><strong>operation_name</strong>:  The <code>operation_name</code> parameter is a string that represents the name of\nthe mathematical operation being performed. It is used for logging and error handling purposes,\ndefaults to unknown</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">operation</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">operation_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;unknown&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.calculation_process_function": {"fullname": "howard.objects.variants.Variants.calculation_process_function", "modulename": "howard.objects.variants", "qualname": "Variants.calculation_process_function", "kind": "function", "doc": "<p>The <code>calculation_process_function</code> takes in an operation dictionary and performs the specified\nfunction with the given parameters.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>operation</strong>:  The <code>operation</code> parameter is a dictionary that contains information about the\noperation to be performed. It has the following keys:</li>\n<li><strong>operation_name</strong>:  The <code>operation_name</code> parameter is a string that represents the name of\nthe operation being performed. It is used for logging purposes, defaults to unknown</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">operation</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">operation_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;unknown&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.calculation_variant_id": {"fullname": "howard.objects.variants.Variants.calculation_variant_id", "modulename": "howard.objects.variants", "qualname": "Variants.calculation_variant_id", "kind": "function", "doc": "<p>The function <code>calculation_variant_id</code> adds a variant ID annotation to a VCF file header and\nupdates the INFO field of a variants table with the variant ID.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"fullname": "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs", "modulename": "howard.objects.variants", "qualname": "Variants.calculation_extract_snpeff_hgvs", "kind": "function", "doc": "<p>The function <code>calculation_extract_snpeff_hgvs</code> extracts HGVS nomenclatures from the SnpEff\nannotation field in a VCF file and adds them as a new column in the variants table.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>snpeff_hgvs</strong>:  The <code>snpeff_hgvs</code> parameter in the <code>calculation_extract_snpeff_hgvs</code>\nfunction is used to specify the name of the column that will store the HGVS nomenclatures\nextracted from the SnpEff annotation field in a VCF file. This parameter allows you, defaults to\nsnpeff_hgvs</li>\n<li><strong>snpeff_field</strong>:  The <code>snpeff_field</code> parameter in the <code>calculation_extract_snpeff_hgvs</code>\nfunction represents the field in the VCF file that contains SnpEff annotations. This field is\nused to extract HGVS nomenclatures from the SnpEff annotation field and add them as a, defaults\nto ANN</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">snpeff_hgvs</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;snpeff_hgvs&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">snpeff_field</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ANN&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"fullname": "howard.objects.variants.Variants.calculation_snpeff_ann_explode", "modulename": "howard.objects.variants", "qualname": "Variants.calculation_snpeff_ann_explode", "kind": "function", "doc": "<p>The <code>calculation_snpeff_ann_explode</code> function processes SnpEff annotations in a VCF file by\nexploding the HGVS field and updating variant information accordingly.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>uniquify</strong>:  The <code>uniquify</code> parameter in the <code>calculation_snpeff_ann_explode</code> method is a\nboolean flag that determines whether the output should be uniquified or not. When set to <code>True</code>,\nit indicates that the output should be unique, meaning that duplicate entries should be removed,\ndefaults to True</li>\n<li><strong>output_format</strong>:  The <code>output_format</code> parameter in the <code>calculation_snpeff_ann_explode</code>\nfunction specifies the format in which the output annotations will be generated. It has a\ndefault value of \"fields\". You can also set it to \"JSON\" to output the annotations in JSON\nformat, defaults to fields</li>\n<li><strong>output_prefix</strong>:  The <code>output_prefix</code> parameter in the <code>calculation_snpeff_ann_explode</code>\nmethod is used to specify the prefix that will be added to the output annotations generated\nduring the calculation process. This prefix helps to differentiate the newly added annotations\nfrom existing ones in the output data. By default, the, defaults to ANN_</li>\n<li><strong>snpeff_field</strong>:  The <code>snpeff_field</code> parameter in the <code>calculation_snpeff_ann_explode</code>\nfunction is used to specify the field in the VCF file that contains SnpEff annotations. This\nfield will be processed to explode the HGVS annotations and update the variant information\naccordingly, defaults to ANN</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">uniquify</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">output_format</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;fields&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">output_prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;snpeff_&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">snpeff_field</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ANN&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.calculation_extract_nomen": {"fullname": "howard.objects.variants.Variants.calculation_extract_nomen", "modulename": "howard.objects.variants", "qualname": "Variants.calculation_extract_nomen", "kind": "function", "doc": "<p>This function extracts the HGVS nomenclature from the calculation/identification of NOMEN.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"fullname": "howard.objects.variants.Variants.calculation_find_by_pipeline", "modulename": "howard.objects.variants", "qualname": "Variants.calculation_find_by_pipeline", "kind": "function", "doc": "<p>The function <code>calculation_find_by_pipeline</code> performs a calculation to find the number of\npipeline/sample for a variant and updates the variant information in a VCF file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tag</strong>:  The <code>tag</code> parameter is a string that represents the annotation field for the\n\"findbypipeline\" information in the VCF file. It is used to create the annotation field in the\nVCF header and to update the corresponding field in the variants table, defaults to\nfindbypipeline</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tag</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;findbypipeline&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.calculation_genotype_concordance": {"fullname": "howard.objects.variants.Variants.calculation_genotype_concordance", "modulename": "howard.objects.variants", "qualname": "Variants.calculation_genotype_concordance", "kind": "function", "doc": "<p>The function <code>calculation_genotype_concordance</code> calculates the genotype concordance for\nmulti-caller VCF files and updates the variant information in the database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.calculation_barcode": {"fullname": "howard.objects.variants.Variants.calculation_barcode", "modulename": "howard.objects.variants", "qualname": "Variants.calculation_barcode", "kind": "function", "doc": "<p>The <code>calculation_barcode</code> function calculates barcode values for variants in a VCF file and\nupdates the INFO field in the file with the calculated barcode values.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tag</strong>:  The <code>tag</code> parameter in the <code>calculation_barcode</code> function is used to specify the tag\nname that will be used for the barcode calculation in the VCF file. If no tag name is provided,\nthe default tag name is set to \"barcode\", defaults to barcode</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tag</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;barcode&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.calculation_barcode_family": {"fullname": "howard.objects.variants.Variants.calculation_barcode_family", "modulename": "howard.objects.variants", "qualname": "Variants.calculation_barcode_family", "kind": "function", "doc": "<p>The <code>calculation_barcode_family</code> function calculates barcode values for variants in a VCF file\nand updates the INFO field in the file with the calculated barcode values.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tag</strong>:  The <code>tag</code> parameter in the <code>calculation_barcode_family</code> function is used to specify\nthe barcode tag that will be added to the VCF file during the calculation process. If no value\nis provided for the <code>tag</code> parameter, the default value used is \"BCF\", defaults to BCF</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tag</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;BCF&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.calculation_trio": {"fullname": "howard.objects.variants.Variants.calculation_trio", "modulename": "howard.objects.variants", "qualname": "Variants.calculation_trio", "kind": "function", "doc": "<p>The <code>calculation_trio</code> function performs trio calculations on a VCF file by adding trio\ninformation to the INFO field of each variant.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"fullname": "howard.objects.variants.Variants.calculation_vaf_normalization", "modulename": "howard.objects.variants", "qualname": "Variants.calculation_vaf_normalization", "kind": "function", "doc": "<p>The <code>calculation_vaf_normalization</code> function calculates the VAF (Variant Allele Frequency)\nnormalization for each sample in a VCF file and updates the FORMAT and INFO fields accordingly.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function does not return anything.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.calculation_genotype_stats": {"fullname": "howard.objects.variants.Variants.calculation_genotype_stats", "modulename": "howard.objects.variants", "qualname": "Variants.calculation_genotype_stats", "kind": "function", "doc": "<p>The <code>calculation_genotype_stats</code> function calculates genotype statistics for a given information\nfield in a VCF file and updates the INFO column of the variants table with the calculated\nstatistics.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>info</strong>:  The <code>info</code> parameter is a string that represents the type of information for which\ngenotype statistics are calculated. It is used to generate various VCF info tags for the\nstatistics, such as the number of occurrences, the list of values, the minimum value, the\nmaximum value, the mean, the median, defaults to VAF</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">info</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;VAF&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"fullname": "howard.objects.variants.Variants.calculation_transcripts_annotation", "modulename": "howard.objects.variants", "qualname": "Variants.calculation_transcripts_annotation", "kind": "function", "doc": "<p>The <code>calculation_transcripts_annotation</code> function creates a transcripts table and adds an info\nfield to it if transcripts are available.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>info_json</strong>:  The <code>info_json</code> parameter in the <code>calculation_transcripts_annotation</code> method\nis a string parameter that represents the information field to be used in the transcripts JSON.\nIt is used to specify the JSON format for the transcripts information. If no value is provided\nwhen calling the method, it defaults to \"</li>\n<li><strong>info_format</strong>:  The <code>info_format</code> parameter in the <code>calculation_transcripts_annotation</code>\nmethod is a string parameter that specifies the format of the information field to be used in\nthe transcripts JSON. It is used to define the format of the information field</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">info_json</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">info_format</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.calculation_transcripts_prioritization": {"fullname": "howard.objects.variants.Variants.calculation_transcripts_prioritization", "modulename": "howard.objects.variants", "qualname": "Variants.calculation_transcripts_prioritization", "kind": "function", "doc": "<p>The function <code>calculation_transcripts_prioritization</code> creates a transcripts table and\nprioritizes transcripts based on certain criteria.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.calculation_transcripts_export": {"fullname": "howard.objects.variants.Variants.calculation_transcripts_export", "modulename": "howard.objects.variants", "qualname": "Variants.calculation_transcripts_export", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.transcripts_export": {"fullname": "howard.objects.variants.Variants.transcripts_export", "modulename": "howard.objects.variants", "qualname": "Variants.transcripts_export", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">transcripts_table</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">param</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.transcripts_prioritization": {"fullname": "howard.objects.variants.Variants.transcripts_prioritization", "modulename": "howard.objects.variants", "qualname": "Variants.transcripts_prioritization", "kind": "function", "doc": "<p>The <code>transcripts_prioritization</code> function prioritizes transcripts based on certain parameters\nand updates the variants table with the prioritized information.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>transcripts_table</strong>:  The <code>transcripts_table</code> parameter is a string that specifies the name\nof the table containing transcripts data. If no value is provided, it defaults to \"transcripts\".\nThis parameter is used to identify the table where the transcripts data is stored for the\nprioritization process</li>\n<li><strong>param</strong>:  The <code>param</code> parameter in the <code>transcripts_prioritization</code> method is a dictionary\nthat contains various configuration settings for the prioritization process of transcripts. It\nis used to customize the behavior of the prioritization algorithm and includes settings such as\nthe prefix for prioritization fields, default profiles, and other</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>transcripts_prioritization</code> returns a boolean value <code>True</code> if the\n  transcripts prioritization process is successfully completed, and <code>False</code> if there are any\n  issues or if no profile is defined for transcripts prioritization.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">transcripts_table</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">param</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"fullname": "howard.objects.variants.Variants.create_transcript_view_from_columns_map", "modulename": "howard.objects.variants", "qualname": "Variants.create_transcript_view_from_columns_map", "kind": "function", "doc": "<p>The <code>create_transcript_view_from_columns_map</code> function generates a temporary table view based on\nspecified columns mapping for transcripts data.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>transcripts_table</strong>:  The <code>transcripts_table</code> parameter is a string that specifies the name\nof the table where the transcripts data is stored or will be stored in the database. This table\ntypically contains information about transcripts such as Ensembl transcript IDs, gene names,\nscores, predictions, etc. It defaults to \"transcripts, defaults to transcripts</li>\n<li><strong>columns_maps</strong>:  The <code>columns_maps</code> parameter is a dictionary that contains information\nabout how to map columns from a transcripts table to create a view. Each entry in the\n<code>columns_maps</code> list represents a mapping configuration for a specific set of columns. It\ntypically includes details such as the main transcript column and additional information columns</li>\n<li><strong>added_columns</strong>:  The <code>added_columns</code> parameter in the\n<code>create_transcript_view_from_columns_map</code> function is a list that stores the additional columns\nthat will be added to the view being created based on the columns map provided. These columns\nare generated by exploding the transcript information columns along with the main transcript\ncolumn</li>\n<li><strong>temporary_tables</strong>:  The <code>temporary_tables</code> parameter in the\n<code>create_transcript_view_from_columns_map</code> function is a list that stores the names of temporary\ntables created during the process of creating a transcript view from a columns map. These\ntemporary tables are used to store intermediate results or transformations before the final view\nis generated</li>\n<li><strong>annotation_fields</strong>:  The <code>annotation_fields</code> parameter in the\n<code>create_transcript_view_from_columns_map</code> function is a list that stores the fields that are\nused for annotation in the query view creation process. These fields are extracted from the\n<code>transcripts_column</code> and <code>transcripts_infos_columns</code> specified in the `columns</li>\n<li><strong>column_rename</strong>:  The <code>column_rename</code> parameter in the\n<code>create_transcript_view_from_columns_map</code> function is a dictionary that allows you to specify\ncustom renaming for columns during the creation of the temporary table view. This parameter\nprovides a mapping of original column names to the desired renamed column names. By using this\nparameter,</li>\n<li><strong>column_clean</strong>:  The <code>column_clean</code> parameter in the\n<code>create_transcript_view_from_columns_map</code> function is a boolean flag that determines whether the\ncolumn values should be cleaned or not. If set to <code>True</code>, the column values will be cleaned by\nremoving any non-alphanumeric characters from them. This cleaning process ensures, defaults to\nFalse</li>\n<li><strong>column_case</strong>:  The <code>column_case</code> parameter in the <code>create_transcript_view_from_columns_map</code>\nfunction is used to specify the case transformation to be applied to the columns during the view\ncreation process. It allows you to control whether the column values should be converted to\nlowercase, uppercase, or remain unchanged</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The <code>create_transcript_view_from_columns_map</code> function returns a tuple containing three\n  lists: <code>added_columns</code>, <code>temporary_tables</code>, and <code>annotation_fields</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">transcripts_table</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;transcripts&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">columns_maps</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">added_columns</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">temporary_tables</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">annotation_fields</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">column_rename</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">column_clean</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">column_case</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"fullname": "howard.objects.variants.Variants.create_transcript_view_from_column_format", "modulename": "howard.objects.variants", "qualname": "Variants.create_transcript_view_from_column_format", "kind": "function", "doc": "<p>The <code>create_transcript_view_from_column_format</code> function generates a transcript view based on\nspecified column formats, adds additional columns and annotation fields, and returns the list of\ntemporary tables and annotation fields.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>transcripts_table</strong>:  The <code>transcripts_table</code> parameter is a string that specifies the name\nof the table containing the transcripts data. This table will be used as the base table for\ncreating the transcript view. The default value for this parameter is \"transcripts\", but you can\nprovide a different table name if needed, defaults to transcripts</li>\n<li><strong>column_formats</strong>:  The <code>column_formats</code> parameter is a dictionary that contains information\nabout the columns to be used for creating the transcript view. Each entry in the dictionary\nspecifies the mapping between a transcripts column and a transcripts infos column. This\nparameter allows you to define how the columns from the transcripts table should be transformed\nor mapped</li>\n<li><strong>temporary_tables</strong>:  The <code>temporary_tables</code> parameter in the\n<code>create_transcript_view_from_column_format</code> function is a list that stores the names of\ntemporary views created during the process of creating a transcript view from a column format.\nThese temporary views are used to manipulate and extract data before generating the final\ntranscript view</li>\n<li><strong>annotation_fields</strong>:  The <code>annotation_fields</code> parameter in the\n<code>create_transcript_view_from_column_format</code> function is a list that stores the annotation fields\nthat are extracted from the temporary views created during the process. These annotation fields\nare obtained by querying the temporary views and extracting the column names excluding specific\ncolumns like `#CH</li>\n<li><strong>column_rename</strong>:  The <code>column_rename</code> parameter in the\n<code>create_transcript_view_from_column_format</code> function is a dictionary that allows you to specify\ncustom renaming of columns in the transcripts infos table. By providing a mapping of original\ncolumn names to new column names in this dictionary, you can rename specific columns during the\nprocess</li>\n<li><strong>column_clean</strong>:  The <code>column_clean</code> parameter in the\n<code>create_transcript_view_from_column_format</code> function is a boolean flag that determines whether\nthe transcripts infos columns should undergo a cleaning process. If set to <code>True</code>, the columns\nwill be cleaned during the creation of the transcript view based on the specified column format,\ndefaults to False</li>\n<li><strong>column_case</strong>:  The <code>column_case</code> parameter in the\n<code>create_transcript_view_from_column_format</code> function is used to specify the case transformation\nto be applied to the columns in the transcript view. It can be set to either \"upper\" or \"lower\"\nto convert the column names to uppercase or lowercase, respectively</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The <code>create_transcript_view_from_column_format</code> function returns two lists:\n  <code>temporary_tables</code> and <code>annotation_fields</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">transcripts_table</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;transcripts&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">column_formats</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">temporary_tables</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">annotation_fields</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">column_rename</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">column_clean</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">column_case</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.create_transcript_view": {"fullname": "howard.objects.variants.Variants.create_transcript_view", "modulename": "howard.objects.variants", "qualname": "Variants.create_transcript_view", "kind": "function", "doc": "<p>The <code>create_transcript_view</code> function generates a transcript view by processing data from a\nspecified table based on provided parameters and structural information.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>transcripts_table</strong>:  The <code>transcripts_table</code> parameter in the <code>create_transcript_view</code> function\nis used to specify the name of the table that will store the final transcript view data. If a table\nname is not provided, the function will create a new table to store the transcript view data, and by\ndefault,, defaults to transcripts</li>\n<li><strong>transcripts_table_drop</strong>:  The <code>transcripts_table_drop</code> parameter in the\n<code>create_transcript_view</code> function is a boolean parameter that determines whether to drop the\nexisting transcripts table before creating a new one. If <code>transcripts_table_drop</code> is set to <code>True</code>,\nthe function will drop the existing transcripts table if it exists, defaults to True</li>\n<li><strong>param</strong>:  The <code>param</code> parameter in the <code>create_transcript_view</code> function is a dictionary that\ncontains information needed to create a transcript view. It includes details such as the structure\nof the transcripts, columns mapping, column formats, and other necessary information for generating\nthe view. This parameter allows for flexibility and customization</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The <code>create_transcript_view</code> function returns the name of the transcripts table that was\n  created or modified during the execution of the function.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">transcripts_table</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">transcripts_table_drop</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">param</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.annotation_format_to_table": {"fullname": "howard.objects.variants.Variants.annotation_format_to_table", "modulename": "howard.objects.variants", "qualname": "Variants.annotation_format_to_table", "kind": "function", "doc": "<p>The <code>annotation_format_to_table</code> function converts annotation data from a VCF file into a\nstructured table format, ensuring unique values and creating a temporary table for further\nprocessing or analysis.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>uniquify</strong>:  The <code>uniquify</code> parameter is a boolean flag that determines whether to ensure\nunique values in the output or not. If set to <code>True</code>, the function will make sure that the\noutput values are unique, defaults to True</li>\n<li><strong>annotation_field</strong>:  The <code>annotation_field</code> parameter refers to the field in the VCF file\nthat contains the annotation information for each variant. This field is used to extract the\nannotation details for further processing in the function. By default, it is set to \"ANN\",\ndefaults to ANN</li>\n<li><strong>annotation_id</strong>:  The <code>annotation_id</code> parameter in the <code>annotation_format_to_table</code> method\nis used to specify the identifier for the annotation feature. This identifier will be used as a\ncolumn name in the resulting table or view that is created based on the annotation data. It\nhelps in uniquely identifying each annotation entry in the, defaults to Feature_ID</li>\n<li><strong>view_name</strong>:  The <code>view_name</code> parameter in the <code>annotation_format_to_table</code> method is used\nto specify the name of the temporary table that will be created to store the transformed\nannotation data. This table will hold the extracted information from the annotation field in a\nstructured format for further processing or analysis. By default,, defaults to transcripts</li>\n<li><strong>column_rename</strong>:  The <code>column_rename</code> parameter in the <code>annotation_format_to_table</code> method\nis a dictionary that allows you to specify custom renaming for columns. By providing key-value\npairs in this dictionary, you can rename specific columns in the resulting table or view that is\ncreated based on the annotation data. This feature enables</li>\n<li><strong>column_clean</strong>:  The <code>column_clean</code> parameter in the <code>annotation_format_to_table</code> method is\na boolean flag that determines whether the annotation field should undergo a cleaning process.\nIf set to <code>True</code>, the function will clean the annotation field before further processing. This\ncleaning step may involve removing any unwanted characters, formatting inconsistencies, defaults\nto False</li>\n<li><strong>column_case</strong>:  The <code>column_case</code> parameter in the <code>annotation_format_to_table</code> method is\nused to specify the case transformation to be applied to the column names extracted from the\nannotation data. It allows you to set the case of the column names to either lowercase or\nuppercase for consistency or other specific requirements during the conversion</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>annotation_format_to_table</code> is returning the name of the view created,\n  which is stored in the variable <code>view_name</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">uniquify</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">annotation_field</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ANN&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">annotation_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Feature_ID&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">view_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;transcripts&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">column_rename</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">column_clean</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">column_case</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "howard.objects.variants.Variants.transcript_view_to_variants": {"fullname": "howard.objects.variants.Variants.transcript_view_to_variants", "modulename": "howard.objects.variants", "qualname": "Variants.transcript_view_to_variants", "kind": "function", "doc": "<p>The <code>transcript_view_to_variants</code> function updates a variants table with information from\ntranscripts in JSON format.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>transcripts_table</strong>:  The <code>transcripts_table</code> parameter is used to specify the name of the\ntable containing the transcripts data. If this parameter is not provided, the function will\nattempt to retrieve it from the <code>param</code> dictionary or use a default value of \"transcripts\"</li>\n<li><strong>transcripts_column_id</strong>:  The <code>transcripts_column_id</code> parameter is used to specify the\ncolumn in the <code>transcripts_table</code> that contains the unique identifier for each transcript. This\nidentifier is used to match transcripts with variants in the database</li>\n<li><strong>transcripts_info_json</strong>:  The <code>transcripts_info_json</code> parameter is used to specify the name\nof the column in the variants table where the transcripts information will be stored in JSON\nformat. This parameter allows you to define the column in the variants table that will hold the\nJSON-formatted information about transcripts</li>\n<li><strong>transcripts_info_field_json</strong>:  The <code>transcripts_info_field_json</code> parameter is used to\nspecify the field in the VCF header that will contain information about transcripts in JSON\nformat. This field will be added to the VCF header as an INFO field with the specified name</li>\n<li><strong>transcripts_info_format</strong>:  The <code>transcripts_info_format</code> parameter is used to specify the\nformat of the information about transcripts that will be stored in the variants table. This\nformat can be used to define how the transcript information will be structured or displayed\nwithin the variants table</li>\n<li><strong>transcripts_info_field_format</strong>:  The <code>transcripts_info_field_format</code> parameter is used to\nspecify the field in the VCF header that will contain information about transcripts in a\nspecific format. This field will be added to the VCF header as an INFO field with the specified\nname</li>\n<li><strong>param</strong>:  The <code>param</code> parameter in the <code>transcript_view_to_variants</code> method is a dictionary\nthat contains various configuration settings related to transcripts. It is used to provide\ndefault values for certain parameters if they are not explicitly provided when calling the\nmethod. The <code>param</code> dictionary can be passed as an argument</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The function <code>transcript_view_to_variants</code> returns a boolean value. It returns <code>True</code>\n  if the operation is successful and <code>False</code> if certain conditions are not met.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">transcripts_table</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">transcripts_column_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">transcripts_info_json</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">transcripts_info_field_json</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">transcripts_info_format</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">transcripts_info_field_format</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">param</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "howard.tools": {"fullname": "howard.tools", "modulename": "howard.tools", "kind": "module", "doc": "<p></p>\n"}, "howard.tools.annotation": {"fullname": "howard.tools.annotation", "modulename": "howard.tools.annotation", "kind": "module", "doc": "<p></p>\n"}, "howard.tools.annotation.annotation": {"fullname": "howard.tools.annotation.annotation", "modulename": "howard.tools.annotation", "qualname": "annotation", "kind": "function", "doc": "<p>The <code>annotation</code> function performs annotation on a VCF file based on specified parameters and\nexports the annotated data.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>args</strong>:  The <code>args</code> parameter is likely an object or dictionary containing various arguments\npassed to the <code>annotation</code> function. It is not clear from the code snippet what specific arguments\nare expected or required</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;argparse&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;/usr/local/Caskroom/miniconda/base/envs/howard_devel/lib/python3.10/argparse.py&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.tools.calculation": {"fullname": "howard.tools.calculation", "modulename": "howard.tools.calculation", "kind": "module", "doc": "<p></p>\n"}, "howard.tools.calculation.calculation": {"fullname": "howard.tools.calculation.calculation", "modulename": "howard.tools.calculation", "qualname": "calculation", "kind": "function", "doc": "<p>This function performs calculations on VCF data based on user input and exports the results.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>args</strong>:  The <code>args</code> parameter is a command line argument parser object that contains the\narguments passed to the script when it was executed</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;argparse&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;/usr/local/Caskroom/miniconda/base/envs/howard_devel/lib/python3.10/argparse.py&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.tools.databases": {"fullname": "howard.tools.databases", "modulename": "howard.tools.databases", "kind": "module", "doc": "<p></p>\n"}, "howard.tools.databases.databases": {"fullname": "howard.tools.databases.databases", "modulename": "howard.tools.databases", "qualname": "databases", "kind": "function", "doc": "<p>The function downloads databases and logs the start and end of the process.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>args</strong>:  The \"args\" parameter is likely an object or dictionary containing various arguments or\noptions related to the \"databases\" function. Without more context, it's difficult to say exactly\nwhat these arguments might be, but they could include things like the names or locations of\ndatabases to download, authentication credentials, or</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;argparse&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;/usr/local/Caskroom/miniconda/base/envs/howard_devel/lib/python3.10/argparse.py&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.tools.gui": {"fullname": "howard.tools.gui", "modulename": "howard.tools.gui", "kind": "module", "doc": "<p></p>\n"}, "howard.tools.gui.main_folder": {"fullname": "howard.tools.gui.main_folder", "modulename": "howard.tools.gui", "qualname": "main_folder", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/Users/lebechea/BIOINFO/git/HOWARD/howard/tools&#x27;"}, "howard.tools.gui.image_dir": {"fullname": "howard.tools.gui.image_dir", "modulename": "howard.tools.gui", "qualname": "image_dir", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/Users/lebechea/BIOINFO/git/HOWARD/howard/tools/../../images/&#x27;"}, "howard.tools.gui.gui": {"fullname": "howard.tools.gui.gui", "modulename": "howard.tools.gui", "qualname": "gui", "kind": "function", "doc": "<p>The <code>gui</code> function generates a graphical user interface (GUI) for a Python script using the\n<code>argparse</code> module and the <code>Gooey</code> library.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>args</strong>:  The <code>args</code> parameter is of type <code>argparse</code>, which is a module in Python used for\nparsing command-line arguments. It is used to define the arguments that the program accepts and to\ngenerate help messages. In this code, it seems that <code>args</code> is an object that contains information\nabout the</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "howard.tools.help": {"fullname": "howard.tools.help", "modulename": "howard.tools.help", "kind": "module", "doc": "<p></p>\n"}, "howard.tools.help.main_folder": {"fullname": "howard.tools.help.main_folder", "modulename": "howard.tools.help", "qualname": "main_folder", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/Users/lebechea/BIOINFO/git/HOWARD/howard/tools&#x27;"}, "howard.tools.help.help": {"fullname": "howard.tools.help.help", "modulename": "howard.tools.help", "qualname": "help", "kind": "function", "doc": "<p>The <code>help</code> function generates help documentation in various formats (parser, Markdown, HTML) based\non the provided arguments and setup configuration.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>args</strong>:  The <code>args</code> parameter is of type <code>argparse.Namespace</code>. It is used to pass command-line\narguments to the <code>help</code> function. The <code>argparse</code> module provides a way to parse command-line\narguments and generate help messages. The <code>Namespace</code> object holds the values of the command-line\narguments</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;argparse&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;/usr/local/Caskroom/miniconda/base/envs/howard_devel/lib/python3.10/argparse.py&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.tools.hgvs": {"fullname": "howard.tools.hgvs", "modulename": "howard.tools.hgvs", "kind": "module", "doc": "<p></p>\n"}, "howard.tools.hgvs.hgvs": {"fullname": "howard.tools.hgvs.hgvs", "modulename": "howard.tools.hgvs", "qualname": "hgvs", "kind": "function", "doc": "<p>The <code>hgvs</code> function takes command line arguments, creates a VCF object, sets parameters and\nconfigurations, loads data from an input file, performs annotation using HGVS notation, exports the\noutput, and closes the connection.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>args</strong>:  The <code>args</code> parameter is of type <code>argparse.Namespace</code> and is used to parse command line\narguments. It contains the following attributes:</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;argparse&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;/usr/local/Caskroom/miniconda/base/envs/howard_devel/lib/python3.10/argparse.py&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.tools.prioritization": {"fullname": "howard.tools.prioritization", "modulename": "howard.tools.prioritization", "kind": "module", "doc": "<p></p>\n"}, "howard.tools.prioritization.prioritization": {"fullname": "howard.tools.prioritization.prioritization", "modulename": "howard.tools.prioritization", "qualname": "prioritization", "kind": "function", "doc": "<p>The function performs prioritization on a VCF file based on user-specified configurations and\nexports the results.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>args</strong>:  args is an object that contains the command line arguments passed to the script. It is\nused to configure the behavior of the script and to provide input and output file paths, as well as\nother parameters needed for the execution of the script</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;argparse&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;/usr/local/Caskroom/miniconda/base/envs/howard_devel/lib/python3.10/argparse.py&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.tools.process": {"fullname": "howard.tools.process", "modulename": "howard.tools.process", "kind": "module", "doc": "<p></p>\n"}, "howard.tools.process.process": {"fullname": "howard.tools.process.process", "modulename": "howard.tools.process", "qualname": "process", "kind": "function", "doc": "<p>The \"process\" function processes input arguments, loads parameters in JSON format, creates a VCF\nobject, performs quick annotations, calculations, prioritizations, and queries, exports output, and\ncloses the connection.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>args</strong>:  args is a variable that contains the arguments passed to the function \"process\". It is\nassumed to be an object with several attributes, including \"config\", \"param\", \"input\", \"output\",\n\"annotations\", \"calculations\", \"prioritizations\", and \"query\". These attributes are used to</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;argparse&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;/usr/local/Caskroom/miniconda/base/envs/howard_devel/lib/python3.10/argparse.py&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.tools.query": {"fullname": "howard.tools.query", "modulename": "howard.tools.query", "kind": "module", "doc": "<p></p>\n"}, "howard.tools.query.query": {"fullname": "howard.tools.query.query", "modulename": "howard.tools.query", "qualname": "query", "kind": "function", "doc": "<p>This Python function loads and queries data from a VCF file based on user input and exports the\nresults.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>args</strong>:  args is an object that contains the arguments passed to the function. It is likely a\nNamespace object created by parsing command line arguments using argparse</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;argparse&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;/usr/local/Caskroom/miniconda/base/envs/howard_devel/lib/python3.10/argparse.py&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.tools.stats": {"fullname": "howard.tools.stats", "modulename": "howard.tools.stats", "kind": "module", "doc": "<p></p>\n"}, "howard.tools.stats.stats": {"fullname": "howard.tools.stats.stats", "modulename": "howard.tools.stats", "qualname": "stats", "kind": "function", "doc": "<p>The stats() function takes in arguments, loads data from an input file, gets statistics on the data,\nand closes the connection.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>args</strong>:  args is a parameter that is passed to the function stats(). It is likely an object or a\ndictionary that contains various arguments or parameters that are needed by the function to perform\nits tasks. Some of the arguments that may be included in args are input file path, configuration\nsettings, and other parameters that are</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;argparse&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;/usr/local/Caskroom/miniconda/base/envs/howard_devel/lib/python3.10/argparse.py&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "howard.tools.tools": {"fullname": "howard.tools.tools", "modulename": "howard.tools.tools", "kind": "module", "doc": "<p></p>\n"}, "howard.tools.tools.PathType": {"fullname": "howard.tools.tools.PathType", "modulename": "howard.tools.tools", "qualname": "PathType", "kind": "class", "doc": "<p></p>\n"}, "howard.tools.tools.PathType.__init__": {"fullname": "howard.tools.tools.PathType.__init__", "modulename": "howard.tools.tools", "qualname": "PathType.__init__", "kind": "function", "doc": "<p>exists:\n     True: a path that does exist\n     False: a path that does not exist, in a valid parent directory\n     None: don't care\ntype: file, dir, symlink, None, or a function returning True for valid paths\n     None: don't care\ndash_ok: whether to allow \"-\" as stdin/stdout</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">exists</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">&#39;file&#39;</span>, </span><span class=\"param\"><span class=\"n\">dash_ok</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, "howard.tools.tools.arguments": {"fullname": "howard.tools.tools.arguments", "modulename": "howard.tools.tools", "qualname": "arguments", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;input&#x27;: {&#x27;metavar&#x27;: &#x27;input&#x27;, &#x27;help&#x27;: &#x27;Input file path.\\nFormat file must be either VCF, Parquet, TSV, CSV, PSV or duckDB.\\nFiles can be compressesd (e.g. vcf.gz, tsv.gz).\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;Parquet file (*.parquet)|*.parquet|All files (*)|*&#x27;}}}, &#x27;output&#x27;: {&#x27;metavar&#x27;: &#x27;output&#x27;, &#x27;help&#x27;: &#x27;Output file path.\\nFormat file must be either VCF, Parquet, TSV, CSV, PSV or duckDB.\\nFiles can be compressesd (e.g. vcf.gz, tsv.gz).\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileSaver&#x27;}}, &#x27;param&#x27;: {&#x27;metavar&#x27;: &#x27;param&#x27;, &#x27;help&#x27;: &#x27;Parameters JSON file (or string) defines parameters to process \\nannotations, calculations, prioritizations, convertions and queries.\\n&#x27;, &#x27;default&#x27;: &#x27;{}&#x27;, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;, &#x27;options&#x27;: {&#x27;initial_value&#x27;: &#x27;&#x27;, &#x27;wildcard&#x27;: &#x27;JSON file (*.json)|*.json|All files (*)|*&#x27;}}}, &#x27;query&#x27;: {&#x27;metavar&#x27;: &#x27;query&#x27;, &#x27;help&#x27;: &quot;Query in SQL format\\n(e.g. &#x27;SELECT * FROM variants LIMIT 50&#x27;).\\n&quot;, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;Textarea&#x27;, &#x27;options&#x27;: {&#x27;initial_value&#x27;: &#x27;SELECT * FROM variants&#x27;}}, &#x27;extra&#x27;: {&#x27;param_section&#x27;: &#x27;query&#x27;}}, &#x27;output_query&#x27;: {&#x27;metavar&#x27;: &#x27;output&#x27;, &#x27;help&#x27;: &#x27;Output Query file.\\nFormat file must be either VCF, Parquet, TSV, CSV, PSV or duckDB.\\n&#x27;, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileSaver&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;All files (*)|*&#x27;}}}, &#x27;annotations&#x27;: {&#x27;metavar&#x27;: &#x27;annotations&#x27;, &#x27;help&#x27;: &quot;Annotation with databases files, or with tools,\\nas a list of files in Parquet, VCF, BED, or keywords\\n (e.g. &#x27;file.parquet,bcftools:file2.vcf.gz,annovar:refGene,snpeff&#x27;).\\n- For a Parquet/VCF/BED, use file paths\\n (e.g. &#x27;file1.parquet,file2.vcf.gz&#x27;).\\n- For BCFTools annotation, use keyword &#x27;bcftools&#x27; with file paths\\n (e.g. &#x27;bcftools:file.vcf.gz:file.bed.gz&#x27;).\\n- For Annovar annotation, use keyword &#x27;annovar&#x27; with annovar code\\n (e.g. &#x27;annovar:refGene&#x27;, &#x27;annovar:refGene:cosmic70&#x27;).\\n- For snpeff annotation, use keyword &#x27;snpeff&#x27; with options\\n (e.g. &#x27;snpeff&#x27;, &#x27;snpeff:-hgvs -noShiftHgvs -spliceSiteSize 3&#x27;).\\n- For snpSift annotation, use keyword &#x27;snpsift&#x27; with file paths\\n (e.g. &#x27;snpsift:file.vcf.gz:file.bed.gz&#x27;).\\n- For Exomiser annotation, use keyword &#x27;exomiser&#x27; with options as key=value\\n (e.g. &#x27;exomiser:preset=exome:transcript_source=refseq&#x27;).\\n- For add all availalbe databases files, use &#x27;ALL&#x27; keyword,\\n with filters on type and release\\n (e.g. &#x27;ALL&#x27;, &#x27;ALL:parquet:current&#x27;, &#x27;ALL:parquet,vcf:current,devel&#x27;).\\n&quot;, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;extra&#x27;: {&#x27;format&#x27;: &#x27;DB[,DB]*[,bcftools:DB[:DB]*][,annovar:KEY[:KEY]*][,snpeff][,exomiser[:var=val]*]&#x27;, &#x27;examples&#x27;: {&#x27;Parquet method annotation with 2 Parquet files&#x27;: &#x27;&quot;annotations&quot;: &quot;/path/to/database1.parquet,/path/to/database2.parquet&quot;&#x27;, &#x27;Parquet method annotation with multiple file formats&#x27;: &#x27;&quot;annotations&quot;: &quot;/path/to/database1.parquet,/path/to/database2.vcf.gz,/path/to/database2.bed.gz&quot;&#x27;, &#x27;Parquet method annotation with available Parquet databases in current release (check databases in production)&#x27;: &#x27;&quot;annotations&quot;: &quot;ALL:parquet:current&quot;&#x27;, &#x27;Parquet method annotation with available Parquet databases in latest release (check databases before production)&#x27;: &#x27;&quot;annotations&quot;: &quot;ALL:parquet:latest&quot;&#x27;, &#x27;Annotation with BCFTools&#x27;: &#x27;&quot;annotations&quot;: &quot;bcftools:/path/to/database2.vcf.gz:/path/to/database2.bed.gz&quot;&#x27;, &#x27;Annotation with Annovar (refGene with hgvs and Cosmic)&#x27;: &#x27;&quot;annotations&quot;: &quot;annovar:refGene:cosmic70&quot;&#x27;, &#x27;Annotation with snpEff (default options)&#x27;: &#x27;&quot;annotations&quot;: &quot;snpeff&quot;&#x27;, &#x27;Annotation with snpEff (with options)&#x27;: &#x27;&quot;annotations&quot;: &quot;snpeff:-hgvs -noShiftHgvs -spliceSiteSize 3&quot;&#x27;, &#x27;Annotation with snpSift&#x27;: &#x27;&quot;annotations&quot;: &quot;snpsift:/path/to/database2.vcf.gz:/path/to/database2.bed.gz&quot;&#x27;, &#x27;Annotation with Exomiser with options&#x27;: &#x27;&quot;annotations&quot;: &quot;exomiser:preset=exome:hpo=0001156+0001363+0011304+0010055:transcript_source=refseq:release=2109&quot;&#x27;, &#x27;Multiple tools annotations (Parquet method, BCFTools, Annovar, snpEff and Exomiser)&#x27;: &#x27;&quot;annotations&quot;: &quot;/path/to/database1.parquet,bcftools:/path/to/database2.vcf.gz,annovar:refGene:cosmic70,snpeff,exomiser:preset=exome:transcript_source=refseq&quot;&#x27;}}}, &#x27;annotation_parquet&#x27;: {&#x27;metavar&#x27;: &#x27;annotation parquet&#x27;, &#x27;help&#x27;: &quot;Annotation with Parquet method, as a list of files in Parquet, VCF or BED\\n (e.g. &#x27;file1.parquet,file2.vcf.gz&#x27;).\\nFor add all availalbe databases files, use &#x27;ALL&#x27; keyword,\\n with filters on type and release\\n (e.g. &#x27;ALL&#x27;, &#x27;ALL:parquet:current&#x27;, &#x27;ALL:parquet,vcf:current,devel&#x27;).\\n&quot;, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;nargs&#x27;: &#x27;+&#x27;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;MultiFileChooser&#x27;, &#x27;options&#x27;: {&#x27;default_dir&#x27;: &#x27;/Users/lebechea/howard/databases/annotations/current&#x27;, &#x27;message&#x27;: &#x27;Database files&#x27;}}, &#x27;extra&#x27;: {&#x27;format&#x27;: &#x27;DB[,DB]*&#x27;, &#x27;examples&#x27;: {&#x27;Parquet method annotation with 2 Parquet files&#x27;: &#x27;&quot;annotation_parquet&quot;: &quot;/path/to/database1.parquet,/path/to/database2.parquet&quot;&#x27;, &#x27;Parquet method annotation with multiple file formats&#x27;: &#x27;&quot;annotation_parquet&quot;: &quot;/path/to/database1.parquet,/path/to/database2.vcf.gz,/path/to/database2.bed.gz&quot;&#x27;, &#x27;Parquet method annotation with available Parquet databases in current release (check databases in production)&#x27;: &#x27;&quot;annotation_parquet&quot;: &quot;ALL:parquet:current&quot;&#x27;, &#x27;Parquet method annotation with available Parquet databases in latest release (check databases before production)&#x27;: &#x27;&quot;annotation_parquet&quot;: &quot;ALL:parquet:latest&quot;&#x27;}}}, &#x27;annotation_bcftools&#x27;: {&#x27;metavar&#x27;: &#x27;annotation BCFTools&#x27;, &#x27;help&#x27;: &quot;Annotation with BCFTools, as a list of files VCF or BED\\n (e.g. &#x27;file.vcf.gz,file.bed.gz&#x27;).\\n&quot;, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;nargs&#x27;: &#x27;+&#x27;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;MultiFileChooser&#x27;, &#x27;options&#x27;: {&#x27;default_dir&#x27;: &#x27;/Users/lebechea/howard/databases/annotations/current&#x27;, &#x27;message&#x27;: &#x27;Database files&#x27;}}, &#x27;extra&#x27;: {&#x27;format&#x27;: &#x27;DB[,DB]*&#x27;, &#x27;examples&#x27;: {&#x27;Annovation with BCFTools&#x27;: &#x27;&quot;annotation_bcftools&quot;: &quot;/path/to/database2.vcf.gz,/path/to/database2.bed.gz&quot;&#x27;}}}, &#x27;annotation_snpeff&#x27;: {&#x27;metavar&#x27;: &#x27;annotation snpEff&#x27;, &#x27;help&#x27;: &quot;Annotation with snpEff, with options\\n (e.g. &#x27;&#x27;, &#x27;-hgvs -noShiftHgvs -spliceSiteSize 3&#x27;).\\n&quot;, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;extra&#x27;: {&#x27;format&#x27;: &#x27;options&#x27;, &#x27;examples&#x27;: {&#x27;Annotation with snpEff (default options)&#x27;: &#x27;&quot;annotation_snpeff&quot;: &quot;&quot;&#x27;, &#x27;Annotation with snpEff (with options)&#x27;: &#x27;&quot;annotation_snpeff&quot;: &quot;-hgvs -noShiftHgvs -spliceSiteSize 3&quot;&#x27;}}}, &#x27;annotation_snpsift&#x27;: {&#x27;metavar&#x27;: &#x27;annotation snpSift&#x27;, &#x27;help&#x27;: &quot;Annotation with snpSift, as a list of files VCF\\n (e.g. &#x27;file.vcf.gz,file.bed.gz&#x27;).\\n&quot;, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;nargs&#x27;: &#x27;+&#x27;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;MultiFileChooser&#x27;, &#x27;options&#x27;: {&#x27;default_dir&#x27;: &#x27;/Users/lebechea/howard/databases/annotations/current&#x27;, &#x27;message&#x27;: &#x27;Database files&#x27;}}, &#x27;extra&#x27;: {&#x27;format&#x27;: &#x27;DB[,DB]*&#x27;, &#x27;examples&#x27;: {&#x27;Annovation with snpSift&#x27;: &#x27;&quot;annotation_snpsift&quot;: &quot;/path/to/database2.vcf.gz,/path/to/database2.bed.gz&quot;&#x27;}}}, &#x27;annotation_annovar&#x27;: {&#x27;metavar&#x27;: &#x27;annotation Annovar&#x27;, &#x27;help&#x27;: &quot;Annotation with Annovar, as a list of database keywords\\n (e.g. &#x27;refGene&#x27;, &#x27;refGene:cosmic70&#x27;).\\n&quot;, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;extra&#x27;: {&#x27;format&#x27;: &#x27;keyword[:keyword]*&#x27;, &#x27;examples&#x27;: {&#x27;Annotation with Annovar (refGene with hgvs and Cosmic)&#x27;: &#x27;&quot;annotation_annovar&quot;: &quot;refGene:cosmic70&quot;&#x27;}}}, &#x27;annotation_exomiser&#x27;: {&#x27;metavar&#x27;: &#x27;annotation Exomiser&#x27;, &#x27;help&#x27;: &quot;Annotation with Exomiser, as a list of options\\n (e.g. &#x27;preset=exome:transcript_source=refseq&#x27;).\\n&quot;, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;extra&#x27;: {&#x27;format&#x27;: &#x27;option=value[:option=value]&#x27;, &#x27;examples&#x27;: {&#x27;Annotation with Exomiser with options&#x27;: &#x27;&quot;annotation_exomiser&quot;: &quot;preset=exome:hpo=0001156+0001363+0011304+0010055:transcript_source=refseq:release=2109&quot;&#x27;}}}, &#x27;annotation_splice&#x27;: {&#x27;metavar&#x27;: &#x27;annotation Splice&#x27;, &#x27;help&#x27;: &quot;Annotation with Splice, as a list of options\\n (e.g. &#x27;split_mode=one:spliceai_distance=500:spliceai_mask=1&#x27;).\\n&quot;, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;extra&#x27;: {&#x27;format&#x27;: &#x27;option=value[:option=value]&#x27;, &#x27;examples&#x27;: {&#x27;Annotation with Splice with options&#x27;: &#x27;&quot;annotation_splice&quot;: &quot;split_mode=one:spliceai_distance=500:spliceai_mask=1&quot;&#x27;}}}, &#x27;annotations_update&#x27;: {&#x27;help&#x27;: &#x27;Update option for annotation (Only for Parquet annotation).\\nIf True, annotation fields will be removed and re-annotated.\\nThese options will be applied to all annotation databases.\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;BlockCheckbox&#x27;, &#x27;options&#x27;: {&#x27;checkbox_label&#x27;: &#x27;Update annotation method&#x27;}}, &#x27;extra&#x27;: {&#x27;param_section&#x27;: &#x27;annotation:options&#x27;}}, &#x27;annotations_append&#x27;: {&#x27;help&#x27;: &#x27;Append option for annotation (Only for Parquet annotation).\\nIf True, annotation fields will be annotated only if not annotation exists for the variant.\\nThese options will be applied to all annotation databases.\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;BlockCheckbox&#x27;, &#x27;options&#x27;: {&#x27;checkbox_label&#x27;: &#x27;Append annotation method&#x27;}}, &#x27;extra&#x27;: {&#x27;param_section&#x27;: &#x27;annotation:options&#x27;}}, &#x27;calculations&#x27;: {&#x27;metavar&#x27;: &#x27;operations&#x27;, &#x27;help&#x27;: &quot;Quick calculations on genetic variants information and genotype information,\\nas a list of operations (e.g. &#x27;VARTYPE,variant_id&#x27;).\\nList of available calculations by default\\n (unsensitive case, see doc for more information):\\n VARTYPE  snpeff_hgvs  FINDBYPIPELINE  GENOTYPECONCORDANCE  BARCODE  TRIO  VAF  VAF_STATS  DP_STATS \\n&quot;, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;prioritizations&#x27;: {&#x27;metavar&#x27;: &#x27;prioritisations&#x27;, &#x27;help&#x27;: &quot;List of prioritization profiles to process (based on Prioritization JSON file),\\nsuch as &#x27;default&#x27;, &#x27;rare variants&#x27;, &#x27;low allele frequency&#x27;, &#x27;GERMLINE&#x27;.\\nBy default, all profiles available will be processed.\\n&quot;, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;extra&#x27;: {&#x27;examples&#x27;: {&#x27;Prioritization profile by default&#x27;: &#x27;&quot;prioritization&quot;: &quot;default&quot; &#x27;, &#x27;Prioritization profile by default and GERMLINE from Configuration JSON file&#x27;: &#x27;&quot;prioritization&quot;: &quot;default,GERMLINE&quot; &#x27;}}}, &#x27;prioritization_config&#x27;: {&#x27;metavar&#x27;: &#x27;prioritization config&#x27;, &#x27;help&#x27;: &#x27;Prioritization configuration JSON file (defines profiles, see doc).\\n&#x27;, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;JSON file (*.json)|*.json|All files (*)|*&#x27;}}, &#x27;extra&#x27;: {&#x27;param_section&#x27;: &#x27;prioritization&#x27;, &#x27;examples&#x27;: {&#x27;Prioritization configuration JSON file as an option&#x27;: &#x27;&quot;prioritization_config&quot;: &quot;prioritization_config.json&quot; &#x27;}}}, &#x27;profiles&#x27;: {&#x27;metavar&#x27;: &#x27;profiles&#x27;, &#x27;help&#x27;: &quot;List of prioritization profiles to process (based on Prioritization JSON file),\\nsuch as &#x27;default&#x27;, &#x27;rare variants&#x27;, &#x27;low allele frequency&#x27;, &#x27;GERMLINE&#x27;.\\nBy default, all profiles available will be processed.\\n&quot;, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;default_profile&#x27;: {&#x27;metavar&#x27;: &#x27;default profile&#x27;, &#x27;help&#x27;: &#x27;Prioritization profile by default (see doc).\\nDefault is the first profile in the list of prioritization profiles.\\n&#x27;, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;pzfields&#x27;: {&#x27;metavar&#x27;: &#x27;pzfields&#x27;, &#x27;help&#x27;: &#x27;Prioritization fields to provide (see doc).\\nAvailable: PZScore, PZFlag, PZTags, PZComment, PZInfos\\n&#x27;, &#x27;default&#x27;: &#x27;PZScore,PZFlag&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;prioritization_score_mode&#x27;: {&#x27;metavar&#x27;: &#x27;prioritization score mode&#x27;, &#x27;help&#x27;: &#x27;Prioritization Score mode (see doc).\\nAvailable: HOWARD (increment score), VaRank (max score)\\n&#x27;, &#x27;default&#x27;: &#x27;HOWARD&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;choices&#x27;: [&#x27;HOWARD&#x27;, &#x27;VaRank&#x27;], &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;Dropdown&#x27;, &#x27;options&#x27;: {}}}, &#x27;query_limit&#x27;: {&#x27;metavar&#x27;: &#x27;query limit&#x27;, &#x27;help&#x27;: &#x27;Limit of number of row for query (only for print result, not output).\\n&#x27;, &#x27;default&#x27;: 10, &#x27;type&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;IntegerField&#x27;, &#x27;options&#x27;: {&#x27;min&#x27;: 1, &#x27;max&#x27;: 10000, &#x27;increment&#x27;: 10}}}, &#x27;query_print_mode&#x27;: {&#x27;metavar&#x27;: &#x27;print mode&#x27;, &#x27;help&#x27;: &quot;Print mode of query result (only for print result, not output).\\nEither None (native), &#x27;markdown&#x27;, &#x27;tabulate&#x27; or disabled.\\n&quot;, &#x27;choices&#x27;: [None, &#x27;markdown&#x27;, &#x27;tabulate&#x27;, &#x27;disabled&#x27;], &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;Dropdown&#x27;, &#x27;options&#x27;: {}}}, &#x27;explode_infos&#x27;: {&#x27;help&#x27;: &quot;Explode VCF INFO/Tag into &#x27;variants&#x27; table columns.\\n&quot;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;explode_infos_prefix&#x27;: {&#x27;metavar&#x27;: &#x27;explode infos prefix&#x27;, &#x27;help&#x27;: &#x27;Explode VCF INFO/Tag with a specific prefix.\\n&#x27;, &#x27;default&#x27;: &#x27;&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;explode_infos_fields&#x27;: {&#x27;metavar&#x27;: &#x27;explode infos list&#x27;, &#x27;help&#x27;: &quot;Explode VCF INFO/Tag specific fields/tags.\\nKeyword `*` specify all available fields, except those already specified.\\nPattern (regex) can be used, such as `.*_score` for fields named with &#x27;_score&#x27; at the end.\\nExamples:\\n- &#x27;HGVS,SIFT,Clinvar&#x27; (list of fields)\\n- &#x27;HGVS,*,Clinvar&#x27; (list of fields with all other fields at the end)\\n- &#x27;HGVS,.*_score,Clinvar&#x27; (list of 2 fields with all scores in the middle)\\n- &#x27;HGVS,.*_score,*&#x27; (1 field, scores, all other fields)\\n- &#x27;HGVS,*,.*_score&#x27; (1 field, all other fields, all scores)\\n&quot;, &#x27;default&#x27;: &#x27;*&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;include_header&#x27;: {&#x27;help&#x27;: &#x27;Include header (in VCF format) in output file.\\nOnly for compatible formats (tab-delimiter format as TSV or BED).\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;order_by&#x27;: {&#x27;metavar&#x27;: &#x27;order by&#x27;, &#x27;help&#x27;: &quot;List of columns to sort the result-set in ascending or descending order.\\nUse SQL format, and keywords ASC (ascending) and DESC (descending).\\nIf a column is not available, order will not be considered.\\nOrder is enable only for compatible format (e.g. TSV, CSV, JSON).\\nExamples: &#x27;ACMG_score DESC&#x27;, &#x27;PZFlag DESC, PZScore DESC&#x27;.\\n&quot;, &#x27;default&#x27;: &#x27;&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;extra&#x27;: {&#x27;examples&#x27;: {&#x27;Order by ACMG score in descending order&#x27;: &#x27;&quot;order_by&quot;: &quot;ACMG_score DESC&quot; &#x27;, &#x27;Order by PZFlag and PZScore in descending order&#x27;: &#x27;&quot;order_by&quot;: PZFlag DESC, PZScore DESC&quot; &#x27;}}}, &#x27;parquet_partitions&#x27;: {&#x27;metavar&#x27;: &#x27;parquet partitions&#x27;, &#x27;help&#x27;: &quot;Parquet partitioning using hive (available for any format).\\nThis option is faster parallel writing, but memory consuming.\\nUse &#x27;None&#x27; (string) for NO partition but split parquet files into a folder.\\nExamples: &#x27;#CHROM&#x27;, &#x27;#CHROM,REF&#x27;, &#x27;None&#x27;.\\n&quot;, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;input_annovar&#x27;: {&#x27;metavar&#x27;: &#x27;input annovar&#x27;, &#x27;help&#x27;: &quot;Input Annovar file path.\\nFormat file must be a Annovar TXT file, associated with &#x27;.idx&#x27;.\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;Parquet file (*.parquet)|*.parquet|All files (*)|*&#x27;}}}, &#x27;output_annovar&#x27;: {&#x27;metavar&#x27;: &#x27;output annovar&#x27;, &#x27;help&#x27;: &quot;Output Annovar file path.\\nFormat file must be either VCF compressesd file &#x27;.vcf.gz&#x27;.\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileSaver&#x27;}}, &#x27;annovar_code&#x27;: {&#x27;metavar&#x27;: &#x27;Annovar code&#x27;, &#x27;help&#x27;: &#x27;Annovar code, or database name.\\nUsefull to name databases columns.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;annovar_to_parquet&#x27;: {&#x27;metavar&#x27;: &#x27;to parquet&#x27;, &#x27;help&#x27;: &#x27;Parquet file conversion.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileSaver&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;HTML file (*.parquet)|*.parquet&#x27;}}}, &#x27;annovar_multi_variant&#x27;: {&#x27;metavar&#x27;: &#x27;Annovar multi variant&#x27;, &#x27;help&#x27;: &quot;Variant with multiple annotation lines on Annovar file.\\nEither &#x27;auto&#x27; (auto-detection), &#x27;enable&#x27; or &#x27;disable&#x27;.\\n&quot;, &#x27;default&#x27;: &#x27;auto&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;choices&#x27;: [&#x27;auto&#x27;, &#x27;enable&#x27;, &#x27;disable&#x27;], &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;Dropdown&#x27;, &#x27;options&#x27;: {}}}, &#x27;annovar_reduce_memory&#x27;: {&#x27;metavar&#x27;: &#x27;reduce memory&#x27;, &#x27;help&#x27;: &quot;Reduce memory option for Annovar convert,\\neither &#x27;auto&#x27; (auto-detection), &#x27;enable&#x27; or &#x27;disable&#x27;.\\n&quot;, &#x27;default&#x27;: &#x27;auto&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;choices&#x27;: [&#x27;auto&#x27;, &#x27;enable&#x27;, &#x27;disable&#x27;], &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;Dropdown&#x27;, &#x27;options&#x27;: {}}}, &#x27;input_extann&#x27;: {&#x27;metavar&#x27;: &#x27;input extann&#x27;, &#x27;help&#x27;: &#x27;Input Extann file path.\\nFormat file must be a Extann TXT file or TSV file.\\nFile need to have at least the genes column.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;VCF, Parquet, TSV, CSV, PSV or duckDB|*.*|All files (*)|*&#x27;}}}, &#x27;output_extann&#x27;: {&#x27;metavar&#x27;: &#x27;output extann&#x27;, &#x27;help&#x27;: &#x27;Output Extann file path.\\nOutput extann file, should be BED or BED.gz.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileSaver&#x27;}}, &#x27;mode_extann&#x27;: {&#x27;metavar&#x27;: &#x27;mode extann&#x27;, &#x27;help&#x27;: &#x27;Mode extann selection.\\nHow to pick transcript from ncbi, keep all,\\nkeep the longest, or keep the chosen one (transcript_extann).\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;longest&#x27;, &#x27;choices&#x27;: [&#x27;all&#x27;, &#x27;longest&#x27;, &#x27;chosen&#x27;], &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;param_extann&#x27;: {&#x27;metavar&#x27;: &#x27;param extann&#x27;, &#x27;help&#x27;: &quot;Param extann file path.\\nParam containing configuration, options to replace chars and\\nbedlike header description, conf vcf specs.\\n(e.g. &#x27;~/howard/config/param.extann.json&#x27;)\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;TSV file format|*.tsv|&#x27;}}}, &#x27;calculation_config&#x27;: {&#x27;metavar&#x27;: &#x27;calculation config&#x27;, &#x27;help&#x27;: &#x27;Calculation configuration JSON file.\\n&#x27;, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;JSON file (*.json)|*.json|All files (*)|*&#x27;}}, &#x27;extra&#x27;: {&#x27;param_section&#x27;: &#x27;calculation&#x27;, &#x27;examples&#x27;: {&#x27;Calculation configuration JSON file as an option&#x27;: &#x27;&quot;calculation_config&quot;: &quot;calculation_config.json&quot; &#x27;}}}, &#x27;show_calculations&#x27;: {&#x27;help&#x27;: &#x27;Show available calculation operations.\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;hgvs_field&#x27;: {&#x27;metavar&#x27;: &#x27;HGVS field&#x27;, &#x27;help&#x27;: &#x27;HGVS INFO/tag containing a list o HGVS annotations.\\n&#x27;, &#x27;default&#x27;: &#x27;hgvs&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;extra&#x27;: {&#x27;param_section&#x27;: &#x27;calculation:calculations:NOMEN:options&#x27;}}, &#x27;transcripts&#x27;: {&#x27;metavar&#x27;: &#x27;transcripts&#x27;, &#x27;help&#x27;: &#x27;Transcripts TSV file,\\nwith Transcript in first column, optional Gene in second column.\\n&#x27;, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;TSV file (*.tsv)|*.tsv|All files (*)|*&#x27;}}, &#x27;extra&#x27;: {&#x27;param_section&#x27;: &#x27;calculation:calculations:NOMEN:options&#x27;}}, &#x27;trio_pedigree&#x27;: {&#x27;metavar&#x27;: &#x27;trio pedigree&#x27;, &#x27;help&#x27;: &#x27;Pedigree Trio for trio inheritance calculation.\\nEither a JSON file or JSON string or a list of samples\\n(e.g. \\&#x27;sample1,sample2,sample3\\&#x27; for father, mother and child,\\n \\&#x27;{&quot;father&quot;: &quot;sample1&quot;, &quot;mother&quot;: &quot;sample2&quot;, &quot;child&quot;: &quot;sample3&quot;}\\&#x27;).\\n&#x27;, &#x27;default&#x27;: None, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;JSON file (*.json)|*.json|All files (*)|*&#x27;}}, &#x27;extra&#x27;: {&#x27;param_section&#x27;: &#x27;calculation:calculations:TRIO&#x27;}}, &#x27;family_pedigree&#x27;: {&#x27;metavar&#x27;: &#x27;family pedigree&#x27;, &#x27;help&#x27;: &#x27;Pedigree family for barcode calculation on genotype.\\nEither a JSON file or JSON string or a list of samples\\n(e.g. \\&#x27;sample1,sample2,sample3,sample4\\&#x27;,\\n \\&#x27;{&quot;father&quot;: &quot;sample1&quot;, &quot;mother&quot;: &quot;sample2&quot;, &quot;child1&quot;: &quot;sample3&quot;, &quot;child2&quot;: &quot;sample3&quot;}\\&#x27;).\\n&#x27;, &#x27;default&#x27;: None, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;JSON file (*.json)|*.json|All files (*)|*&#x27;}}, &#x27;extra&#x27;: {&#x27;param_section&#x27;: &#x27;calculation:calculations:BARCODEFAMILY&#x27;}}, &#x27;stats_md&#x27;: {&#x27;metavar&#x27;: &#x27;stats markdown&#x27;, &#x27;help&#x27;: &#x27;Stats Output file in MarkDown format.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileSaver&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;Markdown file (*.md)|*.md&#x27;}}, &#x27;extra&#x27;: {&#x27;examples&#x27;: {&#x27;Export statistics in Markdown format&#x27;: &#x27;&quot;stats_md&quot;: &quot;/tmp/stats.md&quot; &#x27;}}}, &#x27;stats_json&#x27;: {&#x27;metavar&#x27;: &#x27;stats json&#x27;, &#x27;help&#x27;: &#x27;Stats Output file in JSON format.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileSaver&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;JSON file (*.json)|*.json&#x27;}}, &#x27;extra&#x27;: {&#x27;examples&#x27;: {&#x27;Export statistics in JSON format&#x27;: &#x27;&quot;stats_json&quot;: &quot;/tmp/stats.json&quot; &#x27;}}}, &#x27;assembly&#x27;: {&#x27;metavar&#x27;: &#x27;assembly&#x27;, &#x27;help&#x27;: &quot;Genome Assembly (e.g. &#x27;hg19&#x27;, &#x27;hg38&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;hg19&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;extra&#x27;: {&#x27;examples&#x27;: {&#x27;Default assembly for all analysis tools&#x27;: &#x27;&quot;assembly&quot;: &quot;hg19&quot; &#x27;, &#x27;List of assemblies for databases download tool&#x27;: &#x27;&quot;assembly&quot;: &quot;hg19,hg38&quot; &#x27;}}}, &#x27;genome&#x27;: {&#x27;metavar&#x27;: &#x27;genome&#x27;, &#x27;help&#x27;: &quot;Genome file in fasta format (e.g. &#x27;hg19.fa&#x27;, &#x27;hg38.fa&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;/Users/lebechea/howard/databases/genomes/current/hg19/hg19.fa&#x27;, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;All files (*)|*&#x27;}}}, &#x27;hgvs_options&#x27;: {&#x27;metavar&#x27;: &#x27;HGVS options&#x27;, &#x27;help&#x27;: &quot;Quick HGVS annotation options.\\nThis option will skip all other hgvs options.\\nExamples:\\n- &#x27;default&#x27; (for default options)\\n- &#x27;full_format&#x27; (for full format HGVS annotation)\\n- &#x27;use_gene=True:add_protein=true:codon_type=FULL&#x27;\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;use_gene&#x27;: {&#x27;help&#x27;: &quot;Use Gene information to generate HGVS annotation\\n(e.g. &#x27;NM_152232(TAS1R2):c.231T&gt;C&#x27;)&quot;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;use_exon&#x27;: {&#x27;help&#x27;: &quot;Use Exon information to generate HGVS annotation\\n(e.g. &#x27;NM_152232(exon2):c.231T&gt;C&#x27;).\\nOnly if &#x27;use_gene&#x27; is not enabled.\\n&quot;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;use_protein&#x27;: {&#x27;help&#x27;: &quot;Use Protein level to generate HGVS annotation\\n(e.g. &#x27;NP_689418:p.Cys77Arg&#x27;).\\nCan be used with &#x27;use_exon&#x27; or &#x27;use_gene&#x27;.\\n&quot;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;add_protein&#x27;: {&#x27;help&#x27;: &quot;Add Protein level to DNA HGVS annotation (e.g &#x27;NM_152232:c.231T&gt;C,NP_689418:p.Cys77Arg&#x27;).\\n&quot;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;full_format&#x27;: {&#x27;help&#x27;: &quot;Generates HGVS annotation in a full format\\nby using all information to generates an exhaustive annotation\\n(non-standard, e.g. &#x27;TAS1R2:NM_152232:NP_689418:c.231T&gt;C:p.Cys77Arg&#x27;).\\nUse &#x27;use_exon&#x27; to add exon information\\n(e.g &#x27;TAS1R2:NM_152232:NP_689418:exon2:c.231T&gt;C:p.Cys77Arg&#x27;).\\n&quot;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;use_version&#x27;: {&#x27;help&#x27;: &quot;Generates HGVS annotation with transcript version\\n(e.g. &#x27;NM_152232.1:c.231T&gt;C&#x27;).\\n&quot;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;codon_type&#x27;: {&#x27;metavar&#x27;: &#x27;Codon type&#x27;, &#x27;help&#x27;: &quot;Amino Acide Codon format type to use to generate HGVS annotation.\\nAvailable:\\n- &#x27;1&#x27;: codon in 1 character (e.g. &#x27;C&#x27;, &#x27;R&#x27;)\\n- &#x27;3&#x27;: codon in 3 character (e.g. &#x27;Cys&#x27;, &#x27;Arg&#x27;)\\n-&#x27;FULL&#x27;: codon in full name (e.g. &#x27;Cysteine&#x27;, &#x27;Arginine&#x27;)\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;3&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;choices&#x27;: [&#x27;1&#x27;, &#x27;3&#x27;, &#x27;FULL&#x27;], &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;Dropdown&#x27;, &#x27;options&#x27;: {}}}, &#x27;refgene&#x27;: {&#x27;metavar&#x27;: &#x27;refGene&#x27;, &#x27;help&#x27;: &#x27;Path to refGene annotation file.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;All files (*)|*&#x27;, &#x27;default_dir&#x27;: &#x27;/Users/lebechea/howard/databases/refseq/current&#x27;, &#x27;default_file&#x27;: &#x27;ncbiRefSeq.txt&#x27;, &#x27;message&#x27;: &#x27;Path to refGene annotation file&#x27;}}}, &#x27;refseqlink&#x27;: {&#x27;metavar&#x27;: &#x27;refSeqLink&#x27;, &#x27;help&#x27;: &#x27;Path to refSeqLink annotation file.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;All files (*)|*&#x27;, &#x27;default_dir&#x27;: &#x27;/Users/lebechea/howard/databases/refseq/current&#x27;, &#x27;default_file&#x27;: &#x27;ncbiRefSeq.txt&#x27;, &#x27;message&#x27;: &#x27;Path to refGeneLink annotation file&#x27;}}}, &#x27;refseq-folder&#x27;: {&#x27;metavar&#x27;: &#x27;refseq folder&#x27;, &#x27;help&#x27;: &#x27;Folder containing refSeq files.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;/Users/lebechea/howard/databases/refseq/current&#x27;, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;DirChooser&#x27;, &#x27;options&#x27;: {&#x27;default_dir&#x27;: &#x27;/Users/lebechea/howard/databases/refseq/current&#x27;, &#x27;message&#x27;: &#x27;Path to refGenefolder&#x27;}}}, &#x27;download-genomes&#x27;: {&#x27;metavar&#x27;: &#x27;genomes&#x27;, &#x27;help&#x27;: &quot;Path to genomes folder\\nwith Fasta files, indexes,\\nand all files generated by pygenome module.\\n(e.g. &#x27;/Users/lebechea/howard/databases/genomes/current&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;DirChooser&#x27;, &#x27;options&#x27;: {&#x27;default_dir&#x27;: &#x27;/Users/lebechea/howard/databases&#x27;, &#x27;message&#x27;: &#x27;Path to genomes folder&#x27;}}}, &#x27;download-genomes-provider&#x27;: {&#x27;metavar&#x27;: &#x27;genomes provider&#x27;, &#x27;help&#x27;: &#x27;Download Genome from an external provider.\\nAvailable: GENCODE, Ensembl, UCSC, NCBI.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;UCSC&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;choices&#x27;: [&#x27;GENCODE&#x27;, &#x27;Ensembl&#x27;, &#x27;UCSC&#x27;, &#x27;NCBI&#x27;], &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;Dropdown&#x27;, &#x27;options&#x27;: {}}}, &#x27;download-genomes-contig-regex&#x27;: {&#x27;metavar&#x27;: &#x27;genomes contig regex&#x27;, &#x27;help&#x27;: &quot;Regular expression to select specific chromosome\\n(e.g &#x27;chr[0-9XYM]+$&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-annovar&#x27;: {&#x27;metavar&#x27;: &#x27;Annovar&#x27;, &#x27;help&#x27;: &quot;Path to Annovar databases\\n(e.g. &#x27;/Users/lebechea/howard/databases/annovar/current&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;default&#x27;: None, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;DirChooser&#x27;, &#x27;options&#x27;: {&#x27;default_dir&#x27;: &#x27;/Users/lebechea/howard/databases&#x27;, &#x27;message&#x27;: &#x27;Path to Annovar databases folder&#x27;}}}, &#x27;download-annovar-files&#x27;: {&#x27;metavar&#x27;: &#x27;Annovar code&#x27;, &#x27;help&#x27;: &quot;Download Annovar databases for a list of Annovar file code (see Annovar Doc).\\nUse None to donwload all available files,\\nor Annovar keyword (e.g. &#x27;refGene&#x27;, &#x27;cosmic70&#x27;, &#x27;clinvar_202*&#x27;).\\nNote that refGene will at least be downloaded,\\nand only files that not already exist or changed will be downloaded.\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-annovar-url&#x27;: {&#x27;metavar&#x27;: &#x27;Annovar url&#x27;, &#x27;help&#x27;: &#x27;Annovar databases URL (see Annovar Doc).\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;http://www.openbioinformatics.org/annovar/download&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-snpeff&#x27;: {&#x27;metavar&#x27;: &#x27;snpEff&#x27;, &#x27;help&#x27;: &#x27;Download snpEff databases within snpEff folder&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;DirChooser&#x27;, &#x27;options&#x27;: {&#x27;default_dir&#x27;: &#x27;/Users/lebechea/howard/databases&#x27;, &#x27;message&#x27;: &#x27;Path to snpEff databases folder&#x27;}}}, &#x27;download-refseq&#x27;: {&#x27;metavar&#x27;: &#x27;refSeq&#x27;, &#x27;help&#x27;: &quot;Path to refSeq databases\\n(e.g. &#x27;/Users/lebechea/howard/databases/refseq/current&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;DirChooser&#x27;, &#x27;options&#x27;: {&#x27;default_dir&#x27;: &#x27;/Users/lebechea/howard/databases&#x27;, &#x27;message&#x27;: &#x27;Path to refGene files folder&#x27;}}}, &#x27;download-refseq-url&#x27;: {&#x27;metavar&#x27;: &#x27;refSeq url&#x27;, &#x27;help&#x27;: &quot;refSeq databases URL (see refSeq WebSite)\\n(e.g. &#x27;http://hgdownload.soe.ucsc.edu/goldenPath&#x27;)\u2022/n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;http://hgdownload.soe.ucsc.edu/goldenPath&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-refseq-prefix&#x27;: {&#x27;metavar&#x27;: &#x27;refSeq prefix&#x27;, &#x27;help&#x27;: &#x27;Check existing refSeq files in refSeq folder.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;ncbiRefSeq&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-refseq-files&#x27;: {&#x27;metavar&#x27;: &#x27;refSeq files&#x27;, &#x27;help&#x27;: &#x27;List of refSeq files to download.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;ncbiRefSeq.txt,ncbiRefSeqLink.txt&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-refseq-format-file&#x27;: {&#x27;metavar&#x27;: &#x27;refSeq format file&#x27;, &#x27;help&#x27;: &quot;Name of refSeq file to convert in BED format\\n(e.g. &#x27;ncbiRefSeq.txt&#x27;).\\nProcess only if not None.\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-refseq-include-utr5&#x27;: {&#x27;help&#x27;: &quot;Formating BED refSeq file including 5&#x27;UTR.\\n&quot;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;download-refseq-include-utr3&#x27;: {&#x27;help&#x27;: &quot;Formating BED refSeq file including 3&#x27;UTR.\\n&quot;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;download-refseq-include-chrM&#x27;: {&#x27;help&#x27;: &quot;Formating BED refSeq file including Mitochondiral chromosome &#x27;chrM&#x27; or &#x27;chrMT&#x27;.\\n&quot;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;download-refseq-include-non-canonical-chr&#x27;: {&#x27;help&#x27;: &#x27;Formating BED refSeq file including non canonical chromosomes.\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;download-refseq-include-non-coding-transcripts&#x27;: {&#x27;help&#x27;: &#x27;Formating BED refSeq file including non coding transcripts.\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;download-refseq-include-transcript-version&#x27;: {&#x27;help&#x27;: &#x27;Formating BED refSeq file including transcript version.\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;download-dbnsfp&#x27;: {&#x27;metavar&#x27;: &#x27;dbNSFP&#x27;, &#x27;help&#x27;: &quot;Download dbNSFP databases within dbNSFP folder(e.g. &#x27;/Users/lebechea/howard/databases&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;DirChooser&#x27;, &#x27;options&#x27;: {&#x27;default_dir&#x27;: &#x27;/Users/lebechea/howard/databases&#x27;, &#x27;message&#x27;: &#x27;Path to dbNSFP databases folder&#x27;}}}, &#x27;download-dbnsfp-url&#x27;: {&#x27;metavar&#x27;: &#x27;dbNSFP url&#x27;, &#x27;help&#x27;: &quot;Download dbNSFP databases URL (see dbNSFP website)\\n(e.g. https://dbnsfp.s3.amazonaws.com&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;https://dbnsfp.s3.amazonaws.com&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-dbnsfp-release&#x27;: {&#x27;metavar&#x27;: &#x27;dnNSFP release&#x27;, &#x27;help&#x27;: &quot;Release of dbNSFP to download (see dbNSFP website)\\n(e.g. &#x27;4.4a&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;4.4a&#x27;}, &#x27;download-dbnsfp-parquet-size&#x27;: {&#x27;metavar&#x27;: &#x27;dbNSFP parquet size&#x27;, &#x27;help&#x27;: &#x27;Maximum size (Mb) of data files in Parquet folder.\\nParquet folder are partitioned (hive) by chromosome (sub-folder),\\nwhich contain N data files.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: 100, &#x27;type&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;IntegerField&#x27;, &#x27;options&#x27;: {&#x27;min&#x27;: 1, &#x27;max&#x27;: 100000, &#x27;increment&#x27;: 10}}}, &#x27;download-dbnsfp-subdatabases&#x27;: {&#x27;help&#x27;: &#x27;Generate dbNSFP sub-databases.\\ndbNSFP provides multiple databases which are split onto multiple columns.\\nThis option create a Parquet folder for each sub-database (based on columns names).\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;download-dbnsfp-parquet&#x27;: {&#x27;help&#x27;: &#x27;Generate a Parquet file for each Parquet folder.\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;download-dbnsfp-vcf&#x27;: {&#x27;help&#x27;: &#x27;Generate a VCF file for each Parquet folder.\\nNeed genome FASTA file (see --download-genome).\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;download-dbnsfp-no-files-all&#x27;: {&#x27;help&#x27;: &quot;Not generate database Parquet/VCF file for the entire database (&#x27;ALL&#x27;).\\nOnly sub-databases files will be generated.\\n(see &#x27;--download-dbnsfp-subdatabases&#x27;).\\n&quot;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;download-dbnsfp-add-info&#x27;: {&#x27;help&#x27;: &#x27;Add INFO column (VCF format) in Parquet folder and file.\\nUseful for speed up full annotation (all available columns).\\nIncrease memory and space during generation of files.\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;download-dbnsfp-only-info&#x27;: {&#x27;help&#x27;: &#x27;Add only INFO column (VCF format) in Parquet folder and file.\\nUseful for speed up full annotation (all available columns).\\nDecrease memory and space during generation of files.\\nIncrease time for partial annotation (some available columns).\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;download-dbnsfp-uniquify&#x27;: {&#x27;help&#x27;: &#x27;Uniquify values within column\\n(e.g. &quot;D,D&quot; to &quot;D&quot;, &quot;D,.,T&quot; to &quot;D,T&quot;).\\nRemove transcripts information details.\\nUsefull to reduce size of the database.\\nIncrease memory and space during generation of files.\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;download-dbnsfp-row-group-size&#x27;: {&#x27;metavar&#x27;: &#x27;dnNSFP row grooup size&#x27;, &#x27;help&#x27;: &#x27;Minimum number of rows in a parquet row group (see duckDB doc).\\nLower can reduce memory usage and slightly increase space during generation,\\nspeed up highly selective queries, slow down whole file queries (e.g. aggregations).\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: 100000, &#x27;type&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;IntegerField&#x27;, &#x27;options&#x27;: {&#x27;min&#x27;: 1, &#x27;max&#x27;: 100000000000, &#x27;increment&#x27;: 10000}}}, &#x27;download-alphamissense&#x27;: {&#x27;metavar&#x27;: &#x27;AlphaMissense&#x27;, &#x27;help&#x27;: &#x27;Path to AlphaMissense databases&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;DirChooser&#x27;, &#x27;options&#x27;: {&#x27;default_dir&#x27;: &#x27;/Users/lebechea/howard/databases&#x27;, &#x27;message&#x27;: &#x27;Path to Alphamissense databases folder&#x27;}}}, &#x27;download-alphamissense-url&#x27;: {&#x27;metavar&#x27;: &#x27;AlphaMissense url&#x27;, &#x27;help&#x27;: &quot;Download AlphaMissense databases URL (see AlphaMissense website)\\n(e.g. &#x27;https://storage.googleapis.com/dm_alphamissense&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;https://storage.googleapis.com/dm_alphamissense&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-exomiser&#x27;: {&#x27;metavar&#x27;: &#x27;Exomiser&#x27;, &#x27;help&#x27;: &#x27;Path to Exomiser databases\\n(e.g. /Users/lebechea/howard/databases/exomiser/current).\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;DirChooser&#x27;, &#x27;options&#x27;: {&#x27;default_dir&#x27;: &#x27;/Users/lebechea/howard/databases&#x27;, &#x27;message&#x27;: &#x27;Path to Exomiser databases folder&#x27;}}}, &#x27;download-exomiser-application-properties&#x27;: {&#x27;metavar&#x27;: &#x27;Exomiser application properties&#x27;, &#x27;help&#x27;: &quot;Exomiser Application Properties configuration file (see Exomiser website).\\nThis file contains configuration settings for the Exomiser tool.\\nIf this parameter is not provided, the function will attempt to locate\\nthe application properties file automatically based on the Exomiser.\\nConfiguration information will be used to download expected releases (if no other parameters).\\nCADD and REMM will be downloaded only if &#x27;path&#x27; are provided.\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;All files (*)|*&#x27;, &#x27;options&#x27;: {&#x27;default_dir&#x27;: &#x27;/Users/lebechea/howard/databases/exomiser/current&#x27;, &#x27;message&#x27;: &#x27;Path to Exomiser application properties file&#x27;}}}}, &#x27;download-exomiser-url&#x27;: {&#x27;metavar&#x27;: &#x27;Exomiser url&#x27;, &#x27;help&#x27;: &quot;URL where Exomiser database files can be downloaded from\\n(e.g. &#x27;http://data.monarchinitiative.org/exomiser&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;http://data.monarchinitiative.org/exomiser&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-exomiser-release&#x27;: {&#x27;metavar&#x27;: &#x27;Exomiser release&#x27;, &#x27;help&#x27;: &#x27;Release of Exomiser data to download.\\nIf &quot;default&quot;, &quot;auto&quot;, or &quot;config&quot;, retrieve from Application Properties file.\\nIf not provided (None), from Application Properties file (Exomiser data-version) \\nor default \\&#x27;2109\\&#x27;.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-exomiser-phenotype-release&#x27;: {&#x27;metavar&#x27;: &#x27;Exomiser phenoptye release&#x27;, &#x27;help&#x27;: &#x27;Release of Exomiser phenotype to download.\\nIf not provided (None), from Application Properties file (Exomiser Phenotype data-version)\\nor Exomiser release.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-exomiser-remm-release&#x27;: {&#x27;metavar&#x27;: &#x27;Exomiser remm release&#x27;, &#x27;help&#x27;: &#x27;Release of ReMM (Regulatory Mendelian Mutation) database to download.\\nIf &quot;default&quot;, &quot;auto&quot;, or &quot;config&quot;, retrieve from Application Properties file.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-exomiser-remm-url&#x27;: {&#x27;metavar&#x27;: &#x27;Exomiser remm url&#x27;, &#x27;help&#x27;: &quot;URL where ReMM (Regulatory Mendelian Mutation) database files can be downloaded from\\n(e.g. &#x27;https://kircherlab.bihealth.org/download/ReMM&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;https://kircherlab.bihealth.org/download/ReMM&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-exomiser-cadd-release&#x27;: {&#x27;metavar&#x27;: &#x27;Exomiser cadd release&#x27;, &#x27;help&#x27;: &#x27;Release of CADD (Combined Annotation Dependent Depletion) database to download.\\nIf &quot;default&quot;, &quot;auto&quot;, or &quot;config&quot;, retrieve from Application Properties file.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-exomiser-cadd-url&#x27;: {&#x27;metavar&#x27;: &#x27;Exomiser cadd url&#x27;, &#x27;help&#x27;: &quot;URL where CADD (Combined Annotation Dependent Depletion) database files can be downloaded from\\n(e.g. &#x27;https://kircherlab.bihealth.org/download/CADD&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;https://kircherlab.bihealth.org/download/CADD&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-exomiser-cadd-url-snv-file&#x27;: {&#x27;metavar&#x27;: &#x27;Exomiser url snv file&#x27;, &#x27;help&#x27;: &#x27;Name of the file containing the SNV (Single Nucleotide Variant) data\\nfor the CADD (Combined Annotation Dependent Depletion) database.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;whole_genome_SNVs.tsv.gz&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-exomiser-cadd-url-indel-file&#x27;: {&#x27;metavar&#x27;: &#x27;Exomiser cadd url indel&#x27;, &#x27;help&#x27;: &#x27;Name of the file containing the INDEL (Insertion-Deletion) data\\nfor the CADD (Combined Annotation Dependent Depletion) database.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;InDels.tsv.gz&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-dbsnp&#x27;: {&#x27;metavar&#x27;: &#x27;dnSNP&#x27;, &#x27;help&#x27;: &quot;Path to dbSNP databases\\n(e.g. &#x27;/Users/lebechea/howard/databases/exomiser/dbsnp&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;DirChooser&#x27;, &#x27;options&#x27;: {&#x27;default_dir&#x27;: &#x27;/Users/lebechea/howard/databases&#x27;, &#x27;message&#x27;: &#x27;Path to dbSNP databases folder&#x27;}}}, &#x27;download-dbsnp-releases&#x27;: {&#x27;metavar&#x27;: &#x27;dnSNP releases&#x27;, &#x27;help&#x27;: &quot;Release of dbSNP to download\\n(e.g. &#x27;b152&#x27;, &#x27;b152,b156&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;b156&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-dbsnp-release-default&#x27;: {&#x27;metavar&#x27;: &#x27;dnSNP release default&#x27;, &#x27;help&#x27;: &quot;Default Release of dbSNP (&#x27;default&#x27; symlink)\\n(e.g. &#x27;b156&#x27;).\\nIf None, first release to download will be assigned as default\\nonly if it does not exists.\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-dbsnp-url&#x27;: {&#x27;metavar&#x27;: &#x27;dbSNP url&#x27;, &#x27;help&#x27;: &quot;URL where dbSNP database files can be downloaded from.\\n(e.g. &#x27;https://ftp.ncbi.nih.gov/snp/archive&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;https://ftp.ncbi.nih.gov/snp/archive&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-dbsnp-url-files&#x27;: {&#x27;metavar&#x27;: &#x27;dbSNP url files&#x27;, &#x27;help&#x27;: &#x27;Dictionary that maps assembly names to specific dbSNP URL files.\\nIt allows you to provide custom dbSNP URL files for specific assemblies\\ninstead of using the default file naming convention.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-dbsnp-url-files-prefix&#x27;: {&#x27;metavar&#x27;: &#x27;dbSNP url files prefix&#x27;, &#x27;help&#x27;: &#x27;String that represents the prefix of the dbSNP file name for a specific assembly.\\nIt is used to construct the full URL of the dbSNP file to be downloaded.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;GCF_000001405&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-dbsnp-assemblies-map&#x27;: {&#x27;metavar&#x27;: &#x27;dbSNP assemblies map&#x27;, &#x27;help&#x27;: &#x27;dictionary that maps assembly names to their corresponding dbSNP versions.\\nIt is used to construct the dbSNP file name based on the assembly name.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: {&#x27;hg19&#x27;: &#x27;25&#x27;, &#x27;hg38&#x27;: &#x27;40&#x27;}, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;gooey&#x27;: {&#x27;options&#x27;: {&#x27;initial_value&#x27;: &#x27;{&quot;hg19&quot;: &quot;25&quot;, &quot;hg38&quot;: &quot;40&quot;}&#x27;}}}, &#x27;download-dbsnp-vcf&#x27;: {&#x27;help&#x27;: &#x27;Generate well-formatted VCF from downloaded file:\\n- Add and filter contigs associated to assembly\\n- Normalize by splitting multiallelics\\n- Need genome (see --download-genome)\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;download-dbsnp-parquet&#x27;: {&#x27;help&#x27;: &#x27;Generate Parquet file from VCF.\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;convert-hgmd&#x27;: {&#x27;metavar&#x27;: &#x27;HGMD&#x27;, &#x27;help&#x27;: &#x27;Convert HGMD databases.\\nFolder where the HGMD databases will be stored.\\nFields in VCF, Parquet and TSV will be generated.\\nIf the folder does not exist, it will be created.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;DirChooser&#x27;}}, &#x27;convert-hgmd-file&#x27;: {&#x27;metavar&#x27;: &#x27;HGMD file&#x27;, &#x27;help&#x27;: &quot;File from HGMD.\\nName format &#x27;HGMD_Pro_&lt;release&gt;_&lt;assembly&gt;.vcf.gz&#x27;.\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;}}, &#x27;convert-hgmd-basename&#x27;: {&#x27;metavar&#x27;: &#x27;HGMD basename&#x27;, &#x27;help&#x27;: &quot;File output basename.\\nGenerated files will be prefixed by basename\\n(e.g. &#x27;HGMD_Pro_MY_RELEASE&#x27;)\\nBy default (None), input file name without &#x27;.vcf.gz&#x27;.\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;generate-param&#x27;: {&#x27;metavar&#x27;: &#x27;param&#x27;, &#x27;help&#x27;: &#x27;Parameter file (JSON) with all databases found.\\nDatabases folders scanned are defined in config file.\\nStructure of databases follow this structure (see doc):\\n.../&lt;database&gt;/&lt;release&gt;/&lt;assembly&gt;/*.[parquet|vcf.gz|...]\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileSaver&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;JSON file (*.json)|*.json&#x27;}}}, &#x27;generate-param-description&#x27;: {&#x27;metavar&#x27;: &#x27;param description&#x27;, &#x27;help&#x27;: &#x27;Description file (JSON) with all databases found.\\nContains all databases with description of format, assembly, fields...\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileSaver&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;JSON file (*.json)|*.json&#x27;}}}, &#x27;generate-param-releases&#x27;: {&#x27;metavar&#x27;: &#x27;param release&#x27;, &#x27;help&#x27;: &quot;List of database folder releases to check\\n(e.g. &#x27;current&#x27;, &#x27;latest&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;current&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;generate-param-formats&#x27;: {&#x27;metavar&#x27;: &#x27;param formats&#x27;, &#x27;help&#x27;: &quot;List of database formats to check\\n(e.g. &#x27;parquet&#x27;, &#x27;parquet,vcf,bed,tsv&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;parquet&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;generate-param-bcftools&#x27;: {&#x27;help&#x27;: &quot;Generate parameter JSON file with BCFTools annotation for allowed formats\\n(i.e. &#x27;vcf&#x27;, &#x27;bed&#x27;).\\n&quot;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;help_md&#x27;: {&#x27;metavar&#x27;: &#x27;help markdown&#x27;, &#x27;help&#x27;: &#x27;Help Output file in MarkDown format.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileSaver&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;HTML file (*.md)|*.md&#x27;}}}, &#x27;help_html&#x27;: {&#x27;metavar&#x27;: &#x27;help html&#x27;, &#x27;help&#x27;: &#x27;Help Output file in HTML format.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileSaver&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;HTML file (*.html)|*.html&#x27;}}}, &#x27;help_pdf&#x27;: {&#x27;metavar&#x27;: &#x27;help pdf&#x27;, &#x27;help&#x27;: &#x27;Help Output file in PDF format.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileSaver&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;PDF file (*.pdf)|*.pdf&#x27;}}}, &#x27;help_json_input&#x27;: {&#x27;metavar&#x27;: &#x27;help JSON input&#x27;, &#x27;help&#x27;: &#x27;Help input file in JSON format.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;JSON file (*.json)|*.json|All files (*)|*&#x27;}}}, &#x27;help_md_input&#x27;: {&#x27;metavar&#x27;: &#x27;help MarkDown input&#x27;, &#x27;help&#x27;: &#x27;Help input file in MarkDown format.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;MarkDown file (*.md)|*.md|All files (*)|*&#x27;}}}, &#x27;code_type&#x27;: {&#x27;metavar&#x27;: &#x27;example code type&#x27;, &#x27;help&#x27;: &quot;Help example code type for input JSON format\\n(e.g. &#x27;json&#x27;, &#x27;bash&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;help_json_input_title&#x27;: {&#x27;metavar&#x27;: &#x27;help JSON input title&#x27;, &#x27;help&#x27;: &#x27;Help JSON input title.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;Help&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;genomes-folder&#x27;: {&#x27;metavar&#x27;: &#x27;genomes&#x27;, &#x27;help&#x27;: &quot;Folder containing genomes.\\n(e.g. &#x27;/Users/lebechea/howard/databases/genomes/current&#x27;&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;/Users/lebechea/howard/databases/genomes/current&#x27;, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;DirChooser&#x27;, &#x27;options&#x27;: {&#x27;default_dir&#x27;: &#x27;/Users/lebechea/howard/databases/genomes/current&#x27;, &#x27;message&#x27;: &#x27;Path to genomes databases folder&#x27;}}}, &#x27;config&#x27;: {&#x27;metavar&#x27;: &#x27;config&#x27;, &#x27;help&#x27;: &#x27;Configuration JSON file defined default configuration regarding \\nresources (e.g. threads, memory),\\nsettings (e.g. verbosity, temporary files),\\ndefault folders (e.g. for databases)\\nand paths to external tools.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;{}&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;, &#x27;options&#x27;: {&#x27;initial_value&#x27;: &#x27;{}&#x27;}}}, &#x27;threads&#x27;: {&#x27;metavar&#x27;: &#x27;threads&#x27;, &#x27;help&#x27;: &#x27;Specify the number of threads to use for processing HOWARD.\\nIt determines the level of parallelism,\\neither on python scripts, duckdb engine and external tools.\\nIt and can help speed up the process/tool.\\nUse -1 to use all available CPU/cores.\\nEither non valid value is 1 CPU/core.\\n&#x27;, &#x27;required&#x27;: False, &#x27;type&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;default&#x27;: -1, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;IntegerField&#x27;, &#x27;options&#x27;: {&#x27;min&#x27;: -1, &#x27;max&#x27;: 1000, &#x27;increment&#x27;: 1}}, &#x27;extra&#x27;: {&#x27;examples&#x27;: {&#x27;# Automatically detect all available CPU/cores&#x27;: &#x27;&quot;threads&quot;: -1&#x27;, &#x27;# Define 8 CPU/cores&#x27;: &#x27;&quot;threads&quot;: 8&#x27;}}}, &#x27;memory&#x27;: {&#x27;metavar&#x27;: &#x27;memory&#x27;, &#x27;help&#x27;: &quot;Specify the memory to use in format FLOAT[kMG]\\n(e.g. &#x27;8G&#x27;, &#x27;12.42G&#x27;, &#x27;1024M&#x27;).\\nIt determines the amount of memory for duckDB engine and external tools\\n(especially for JAR programs).\\nIt can help to prevent &#x27;out of memory&#x27; failures.\\nBy default (None) is 80%% of RAM (for duckDB).\\n&quot;, &#x27;required&#x27;: False, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;default&#x27;: None, &#x27;extra&#x27;: {&#x27;format&#x27;: &#x27;FLOAT[kMG]&#x27;, &#x27;examples&#x27;: {&#x27;# Automatically detect all available CPU/cores&#x27;: &#x27;&quot;threads&quot;: -1&#x27;, &#x27;# Define 8 CPU/cores&#x27;: &#x27;&quot;threads&quot;: 8&#x27;}}}, &#x27;chunk_size&#x27;: {&#x27;metavar&#x27;: &#x27;chunk size&#x27;, &#x27;help&#x27;: &#x27;Number of records in batch to export output file.\\nThe lower the chunk size, the less memory consumption.\\nFor Parquet partitioning, files size will depend on the chunk size.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: 1000000, &#x27;type&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;IntegerField&#x27;, &#x27;options&#x27;: {&#x27;min&#x27;: 1, &#x27;max&#x27;: 100000000000, &#x27;increment&#x27;: 10000}}, &#x27;extra&#x27;: {&#x27;examples&#x27;: {&#x27;Chunk size of 1.000.000 by default&#x27;: &#x27;&quot;chunk_size&quot;: 1000000&#x27;, &#x27;Smaller chunk size to reduce Parquet file size and memory usage&#x27;: &#x27;&quot;chunk_size&quot;: 100000&#x27;}}}, &#x27;tmp&#x27;: {&#x27;metavar&#x27;: &#x27;Temporary folder&#x27;, &#x27;help&#x27;: &quot;Temporary folder (e.g. &#x27;/tmp&#x27;).\\nBy default, &#x27;.tmp&#x27; for duckDB (see doc),external tools and python scripts.\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;DirChooser&#x27;}, &#x27;extra&#x27;: {&#x27;examples&#x27;: {&#x27;# System temporary folder&#x27;: &#x27;&quot;tmp&quot;: &quot;/tmp&quot;&#x27;, &#x27;# HOWARD work directory&#x27;: &#x27;&quot;tmp&quot;: &quot;~/howard/tmp&quot;&#x27;, &#x27;# Current work directory&#x27;: &#x27;&quot;tmp&quot;: &quot;.tmp&quot;&#x27;}}}, &#x27;duckdb_settings&#x27;: {&#x27;metavar&#x27;: &#x27;duckDB settings&#x27;, &#x27;help&#x27;: &#x27;DuckDB settings (see duckDB doc) as JSON (string or file).\\nThese settings have priority (see options \\&#x27;threads\\&#x27;, \\&#x27;tmp\\&#x27;...).\\nExamples: \\&#x27;{&quot;TimeZone&quot;: &quot;GMT&quot;, &quot;temp_directory&quot;: &quot;/tmp/duckdb&quot;, &quot;threads&quot;: 8}\\&#x27;.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;JSON file (*.json)|*.json|All files (*)|*&#x27;}}, &#x27;extra&#x27;: {&#x27;examples&#x27;: {&#x27;DuckDB settings JSON file&#x27;: &#x27;&quot;duckdb_settings&quot;: &quot;/path/to/duckdb_config.json&quot;&#x27;, &#x27;JSON string for Time zone, temporary directory and threads for duckDB&#x27;: &#x27;&quot;duckdb_settings&quot;: {\\n   &quot;TimeZone&quot;: &quot;GMT&quot;,\\n   &quot;temp_directory&quot;: &quot;/tmp/duckdb&quot;,\\n   &quot;threads&quot;: 8\\n}&#x27;}}}, &#x27;verbosity&#x27;: {&#x27;metavar&#x27;: &#x27;verbosity&#x27;, &#x27;help&#x27;: &#x27;Verbosity level\\nAvailable: CRITICAL, ERROR, WARNING, INFO, DEBUG or NOTSET\\n- DEBUG: Detailed information, typically of interest only when diagnosing problems.\\n- INFO: Confirmation that things are working as expected.\\n- WARNING: An indication that something unexpected happened.\\n- ERROR: Due to a more serious problem.\\n- CRITICAL: A serious error.\\n- NOTSET: All messages.\\n&#x27;, &#x27;required&#x27;: False, &#x27;choices&#x27;: [&#x27;CRITICAL&#x27;, &#x27;ERROR&#x27;, &#x27;WARNING&#x27;, &#x27;INFO&#x27;, &#x27;DEBUG&#x27;, &#x27;NOTSET&#x27;], &#x27;default&#x27;: &#x27;INFO&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;Dropdown&#x27;, &#x27;options&#x27;: {}}, &#x27;extra&#x27;: {&#x27;examples&#x27;: {&#x27;Default verbosity&#x27;: &#x27;&quot;verbosity&quot;: &quot;INFO&quot;&#x27;, &#x27;ERROR level (quiet mode)&#x27;: &#x27;&quot;verbosity&quot;: &quot;ERROR&quot;&#x27;, &#x27;For debug&#x27;: &#x27;&quot;verbosity&quot;: &quot;DEBUG&quot;&#x27;}}}, &#x27;access&#x27;: {&#x27;metavar&#x27;: &#x27;access mode&#x27;, &#x27;help&#x27;: &quot;Access mode to variants file or database.\\nEither &#x27;RW&#x27; for Read and Write, or &#x27;RO&#x27; for Read Only.\\n&quot;, &#x27;default&#x27;: &#x27;RW&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;choices&#x27;: [&#x27;RW&#x27;, &#x27;RO&#x27;], &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;Dropdown&#x27;, &#x27;options&#x27;: {}}, &#x27;extra&#x27;: {&#x27;examples&#x27;: {&#x27;Read and Write mode&#x27;: &#x27;&quot;access&quot;: &quot;RW&quot;&#x27;, &#x27;Read only mode&#x27;: &#x27;&quot;access&quot;: &quot;RO&quot;&#x27;}}}, &#x27;log&#x27;: {&#x27;metavar&#x27;: &#x27;log&#x27;, &#x27;help&#x27;: &quot;Logs file\\n(e.g. &#x27;my.log&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileSaver&#x27;}, &#x27;extra&#x27;: {&#x27;examples&#x27;: {&#x27;Relative path to log file&#x27;: &#x27;&quot;log&quot;: &quot;my.log&quot;&#x27;, &#x27;# HOWARD work directory&#x27;: &#x27;&quot;log&quot;: &quot;~/howard/log&quot;&#x27;, &#x27;Full path to log file&#x27;: &#x27;&quot;log&quot;: &quot;/tmp/my.log&quot;&#x27;}}}, &#x27;quiet&#x27;: {&#x27;help&#x27;: &#x27;==SUPPRESS==&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;verbose&#x27;: {&#x27;help&#x27;: &#x27;==SUPPRESS==&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;debug&#x27;: {&#x27;help&#x27;: &#x27;==SUPPRESS==&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;databases_folder&#x27;: {&#x27;help&#x27;: &#x27;Path of HOWARD database folder.\\n&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;default&#x27;: &#x27;/Users/lebechea/howard/databases&#x27;}, &#x27;database&#x27;: {&#x27;help&#x27;: &#x27;Which database to update.\\n&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;default&#x27;: &#x27;clinvar&#x27;, &#x27;choices&#x27;: [&#x27;clinvar&#x27;]}, &#x27;update_config&#x27;: {&#x27;help&#x27;: &#x27;Path of json configuration file.\\n&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;current_folder&#x27;: {&#x27;help&#x27;: &#x27;Path of json configuration file.\\n&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;default&#x27;: &#x27;current&#x27;}, &#x27;genebe_use_refseq&#x27;: {&#x27;help&#x27;: &#x27;Use refSeq to annotate (default).\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;genebe_use_ensembl&#x27;: {&#x27;help&#x27;: &#x27;Use Ensembl to annotate.\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;not_flatten_consequences&#x27;: {&#x27;help&#x27;: &#x27;Use exploded annotation informations.\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;minimalize_info&#x27;: {&#x27;help&#x27;: &quot;Minimalize INFO field (e.g. &#x27;.&#x27; value).\\n&quot;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;minimalize_id&#x27;: {&#x27;help&#x27;: &quot;Minimalize ID field (e.g. &#x27;.&#x27; value).\\n&quot;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;minimalize_qual&#x27;: {&#x27;help&#x27;: &quot;Minimalize QUAL field (e.g. &#x27;.&#x27; value).\\n&quot;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;minimalize_filter&#x27;: {&#x27;help&#x27;: &quot;Minimalize FILTER field (e.g. &#x27;.&#x27; value).\\n&quot;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;minimalize_samples&#x27;: {&#x27;help&#x27;: &quot;Minimalize samples to keep only genotypes (i.e. &#x27;GT&#x27;).\\n&quot;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;remove_samples&#x27;: {&#x27;help&#x27;: &#x27;Remove all samples to keep only variants.\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}}"}, "howard.tools.tools.shared_arguments": {"fullname": "howard.tools.tools.shared_arguments", "modulename": "howard.tools.tools", "qualname": "shared_arguments", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;config&#x27;, &#x27;threads&#x27;, &#x27;memory&#x27;, &#x27;chunk_size&#x27;, &#x27;tmp&#x27;, &#x27;duckdb_settings&#x27;, &#x27;verbosity&#x27;, &#x27;log&#x27;, &#x27;quiet&#x27;, &#x27;verbose&#x27;, &#x27;debug&#x27;]"}, "howard.tools.tools.commands_arguments": {"fullname": "howard.tools.tools.commands_arguments", "modulename": "howard.tools.tools", "qualname": "commands_arguments", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;query&#x27;: {&#x27;function&#x27;: &#x27;query&#x27;, &#x27;description&#x27;: &quot;Query genetic variations in SQL format. Data can be loaded into &#x27;variants&#x27; table from various formats (e.g. VCF, TSV, Parquet...). Using --explode_infos allow query on INFO/tag annotations. SQL query can also use external data within the request, such as a Parquet file(s).  &quot;, &#x27;help&#x27;: &#x27;Query genetic variations file in SQL format.&#x27;, &#x27;epilog&#x27;: &#x27;Usage examples:\\n   howard query --input=tests/data/example.vcf.gz --query=&quot;SELECT * FROM variants WHERE REF = \\&#x27;A\\&#x27; AND POS &lt; 100000&quot; \\n   howard query --input=tests/data/example.vcf.gz --explode_infos --query=\\&#x27;SELECT &quot;#CHROM&quot;, POS, REF, ALT, DP, CLNSIG, sample2, sample3 FROM variants WHERE DP &gt;= 50 OR CLNSIG NOT NULL ORDER BY DP DESC\\&#x27; \\n   howard query --query=&quot;SELECT \\\\&quot;#CHROM\\\\&quot;, POS, REF, ALT, \\\\&quot;INFO/Interpro_domain\\\\&quot; FROM \\&#x27;tests/databases/annotations/current/hg19/dbnsfp42a.parquet\\&#x27; WHERE \\\\&quot;INFO/Interpro_domain\\\\&quot; NOT NULL ORDER BY \\\\&quot;INFO/SiPhy_29way_logOdds_rankscore\\\\&quot; DESC LIMIT 10&quot; \\n   howard query --explode_infos --explode_infos_prefix=\\&#x27;INFO/\\&#x27; --query=&quot;SELECT \\\\&quot;#CHROM\\\\&quot;, POS, REF, ALT, STRING_AGG(INFO, \\&#x27;;\\&#x27;) AS INFO FROM \\&#x27;tests/databases/annotations/current/hg19/*.parquet\\&#x27; GROUP BY \\\\&quot;#CHROM\\\\&quot;, POS, REF, ALT&quot; --output=/tmp/full_annotation.tsv  &amp;&amp; head -n2 /tmp/full_annotation.tsv \\n   howard query --input=tests/data/example.vcf.gz --param=config/param.json \\n    \\n&#x27;, &#x27;groups&#x27;: {&#x27;main&#x27;: {&#x27;input&#x27;: False, &#x27;output&#x27;: False, &#x27;param&#x27;: False, &#x27;query&#x27;: False}, &#x27;Explode&#x27;: {&#x27;explode_infos&#x27;: False, &#x27;explode_infos_prefix&#x27;: False, &#x27;explode_infos_fields&#x27;: False}, &#x27;Query&#x27;: {&#x27;query_limit&#x27;: False, &#x27;query_print_mode&#x27;: False}, &#x27;Export&#x27;: {&#x27;include_header&#x27;: False, &#x27;parquet_partitions&#x27;: False}}}, &#x27;stats&#x27;: {&#x27;function&#x27;: &#x27;stats&#x27;, &#x27;description&#x27;: &#x27;Statistics on genetic variations, such as: number of variants, number of samples, statistics by chromosome, genotypes by samples...&#x27;, &#x27;help&#x27;: &#x27;Statistics on genetic variations file.&#x27;, &#x27;epilog&#x27;: &#x27;Usage examples:\\n   howard stats --input=tests/data/example.vcf.gz \\n   howard stats --input=tests/data/example.vcf.gz --stats_md=/tmp/stats.md \\n   howard stats --input=tests/data/example.vcf.gz --param=config/param.json \\n    \\n&#x27;, &#x27;groups&#x27;: {&#x27;main&#x27;: {&#x27;input&#x27;: True, &#x27;param&#x27;: False}, &#x27;Stats&#x27;: {&#x27;stats_md&#x27;: False, &#x27;stats_json&#x27;: False}}}, &#x27;convert&#x27;: {&#x27;function&#x27;: &#x27;convert&#x27;, &#x27;description&#x27;: &quot;Convert genetic variations file to another format. Multiple format are available, such as usual and official VCF and BCF format, but also other formats such as TSV, CSV, PSV and Parquet/duckDB. These formats need a header &#x27;.hdr&#x27; file to take advantage of the power of howard (especially through INFO/tag definition), and using howard convert tool automatically generate header file fo futher use. &quot;, &#x27;help&#x27;: &#x27;Convert genetic variations file to another format.&#x27;, &#x27;epilog&#x27;: &#x27;Usage examples:\\n   howard convert --input=tests/data/example.vcf.gz --output=/tmp/example.tsv \\n   howard convert --input=tests/data/example.vcf.gz --output=/tmp/example.parquet \\n   howard convert --input=tests/data/example.vcf.gz --output=/tmp/example.tsv --explode_infos --explode_infos_fields=\\&#x27;CLNSIG,SIFT,DP\\&#x27; --order_by=\\&#x27;CLNSIG DESC, DP DESC\\&#x27; \\n   howard convert --input=tests/data/example.vcf.gz --output=/tmp/example.tsv --explode_infos --explode_infos_prefix=\\&#x27;INFO/\\&#x27; --explode_infos_fields=\\&#x27;CLNSIG,SIFT,DP,*\\&#x27; --order_by=\\&#x27;&quot;INFO/CLNSIG&quot; DESC, &quot;INFO/DP&quot; DESC\\&#x27; --include_header \\n   howard convert --input=tests/data/example.vcf.gz --output=/tmp/example.tsv --param=config/param.json \\n    \\n&#x27;, &#x27;groups&#x27;: {&#x27;main&#x27;: {&#x27;input&#x27;: True, &#x27;output&#x27;: True, &#x27;param&#x27;: False}, &#x27;Explode&#x27;: {&#x27;explode_infos&#x27;: False, &#x27;explode_infos_prefix&#x27;: False, &#x27;explode_infos_fields&#x27;: False}, &#x27;Export&#x27;: {&#x27;include_header&#x27;: False, &#x27;order_by&#x27;: False, &#x27;parquet_partitions&#x27;: False}}}, &#x27;hgvs&#x27;: {&#x27;function&#x27;: &#x27;hgvs&#x27;, &#x27;description&#x27;: &quot;HGVS annotation using HUGO HGVS internation Sequence Variant Nomenclature (http://varnomen.hgvs.org/). Annotation refere to refGene and genome to generate HGVS nomenclature for all available transcripts. This annotation add &#x27;hgvs&#x27; field into VCF INFO column of a VCF file.&quot;, &#x27;help&#x27;: &#x27;HGVS annotation (HUGO internation nomenclature) using refGene, genome and transcripts list.\\n&#x27;, &#x27;epilog&#x27;: &#x27;Usage examples:\\n   howard hgvs --input=tests/data/example.full.vcf --output=/tmp/example.hgvs.vcf \\n   howard hgvs --input=tests/data/example.full.vcf --output=/tmp/example.hgvs.tsv --param=config/param.json \\n   howard hgvs --input=tests/data/example.full.vcf --output=/tmp/example.hgvs.vcf --full_format --use_exon \\n    \\n&#x27;, &#x27;groups&#x27;: {&#x27;main&#x27;: {&#x27;input&#x27;: True, &#x27;output&#x27;: True, &#x27;param&#x27;: False, &#x27;hgvs_options&#x27;: False, &#x27;assembly&#x27;: False}, &#x27;HGVS&#x27;: {&#x27;use_gene&#x27;: False, &#x27;use_exon&#x27;: False, &#x27;use_protein&#x27;: False, &#x27;add_protein&#x27;: False, &#x27;full_format&#x27;: False, &#x27;codon_type&#x27;: False, &#x27;refgene&#x27;: False, &#x27;refseqlink&#x27;: False}}}, &#x27;annotation&#x27;: {&#x27;function&#x27;: &#x27;annotation&#x27;, &#x27;description&#x27;: &#x27;Annotation is mainly based on a build-in Parquet annotation method, and tools such as BCFTOOLS, Annovar and snpEff. It uses available databases (see Annovar and snpEff) and homemade databases. Format of databases are: parquet, duckdb, vcf, bed, Annovar and snpEff (Annovar and snpEff databases are automatically downloaded, see howard databases tool). &#x27;, &#x27;help&#x27;: &#x27;Annotation of genetic variations file using databases/files and tools.&#x27;, &#x27;epilog&#x27;: &quot;Usage examples:\\n   howard annotation --input=tests/data/example.vcf.gz --output=/tmp/example.howard.vcf.gz --annotations=&#x27;tests/databases/annotations/current/hg19/avsnp150.parquet,tests/databases/annotations/current/hg19/dbnsfp42a.parquet,tests/databases/annotations/current/hg19/gnomad211_genome.parquet&#x27; \\n   howard annotation --input=tests/data/example.vcf.gz --output=/tmp/example.howard.tsv --assembly=hg19 --annotations=&#x27;annovar:refGene,annovar:cosmic70,snpeff,tests/databases/annotations/current/hg19/clinvar_20210123.parquet&#x27; \\n   howard annotation --input=tests/data/example.vcf.gz --output=/tmp/example.howard.tsv --assembly=hg19 --annotation_parquet=&#x27;tests/databases/annotations/current/hg19/avsnp150.parquet,tests/databases/annotations/current/hg19/dbnsfp42a.parquet&#x27; \\n   howard annotation --input=tests/data/example.vcf.gz --output=/tmp/example.howard.tsv --assembly=hg19 --annotation_bcftools=&#x27;tests/databases/annotations/current/hg19/nci60.vcf.gz,tests/databases/annotations/current/hg19/dbnsfp42a.vcf.gz&#x27; \\n   howard annotation --input=tests/data/example.vcf.gz --output=/tmp/example.howard.tsv --assembly=hg19 --annotation_snpsift=&#x27;tests/databases/annotations/current/hg19/nci60.vcf.gz,tests/databases/annotations/current/hg19/dbnsfp42a.vcf.gz&#x27; \\n   howard annotation --input=tests/data/example.vcf.gz --output=/tmp/example.howard.tsv --assembly=hg19 --annotation_annovar=&#x27;nci60:cosmic70&#x27; \\n   howard annotation --input=tests/data/example.vcf.gz --output=/tmp/example.howard.tsv --assembly=hg19 --annotation_snpeff=&#x27;-hgvs&#x27; \\n   howard annotation --input=tests/data/example.vcf.gz --output=/tmp/example.howard.tsv --assembly=hg19 --annotation_exomiser=&#x27;preset=exome:transcript_source=refseq&#x27; \\n   howard annotation --input=tests/data/example.vcf.gz --output=/tmp/example.howard.tsv --assembly=hg19 --annotation_splice=&#x27;split_mode=one:spliceai_distance=500:spliceai_mask=1&#x27; \\n   howard annotation --input=tests/data/example.vcf.gz --output=/tmp/example.howard.tsv --assembly=hg19 --annotations=&#x27;ALL:parquet&#x27; \\n   howard annotation --input=tests/data/example.vcf.gz --output=/tmp/example.howard.tsv --param=config/param.json \\n    \\n&quot;, &#x27;groups&#x27;: {&#x27;main&#x27;: {&#x27;input&#x27;: True, &#x27;output&#x27;: True, &#x27;param&#x27;: False, &#x27;annotations&#x27;: False, &#x27;annotation_parquet&#x27;: False, &#x27;annotation_bcftools&#x27;: False, &#x27;annotation_annovar&#x27;: False, &#x27;annotation_snpeff&#x27;: False, &#x27;annotation_snpsift&#x27;: False, &#x27;annotation_exomiser&#x27;: False, &#x27;annotation_splice&#x27;: False, &#x27;assembly&#x27;: False}, &#x27;Annotation&#x27;: {&#x27;annotations_update&#x27;: False, &#x27;annotations_append&#x27;: False}}}, &#x27;calculation&#x27;: {&#x27;function&#x27;: &#x27;calculation&#x27;, &#x27;description&#x27;: &#x27;Calculation processes variants information to generate new information, such as: identify variation type (VarType), harmonizes allele frequency (VAF) and calculate sttistics (VAF_stats), extracts Nomen (transcript, cNomen, pNomen...) from an HGVS field (e.g. snpEff, Annovar) with an optional list of personalized transcripts, generates VaRank format barcode, identify trio inheritance.&#x27;, &#x27;help&#x27;: &#x27;Calculation operations on genetic variations file and genotype information.\\n&#x27;, &#x27;epilog&#x27;: &quot;Usage examples:\\n   howard calculation --input=tests/data/example.full.vcf --output=/tmp/example.calculation.tsv --calculations=&#x27;vartype&#x27; \\n   howard calculation --input=tests/data/example.ann.vcf.gz --output=/tmp/example.calculated.tsv --calculations=&#x27;snpeff_hgvs,NOMEN&#x27; --hgvs_field=snpeff_hgvs --transcripts=tests/data/transcripts.tsv \\n   howard calculation --input=tests/data/example.vcf.gz --output=/tmp/example.calculated.tsv --calculations=&#x27;TRIO&#x27; --trio_pedigree=&#x27;sample1,sample2,sample4&#x27; \\n   howard calculation --input=tests/data/example.vcf.gz --output=/tmp/example.calculated.tsv --calculations=&#x27;BARCODEFAMILY&#x27; --family_pedigree=&#x27;sample1,sample2,sample4&#x27; \\n   howard calculation --input=tests/data/example.ann.transcripts.vcf.gz --output=/tmp/example.calculation.transcripts.tsv --param=config/param.transcripts.json --calculations=&#x27;TRANSCRIPTS_ANNOTATIONS,TRANSCRIPTS_PRIORITIZATION,TRANSCRIPTS_EXPORT&#x27; \\n   howard calculation --input=tests/data/example.ann.vcf.gz --output=/tmp/example.ann.tsv --param=config/param.json \\n   howard calculation --show_calculations \\n    \\n&quot;, &#x27;groups&#x27;: {&#x27;main&#x27;: {&#x27;input&#x27;: False, &#x27;output&#x27;: False, &#x27;param&#x27;: False, &#x27;calculations&#x27;: False}, &#x27;Calculation&#x27;: {&#x27;calculation_config&#x27;: False, &#x27;show_calculations&#x27;: False}, &#x27;NOMEN&#x27;: {&#x27;hgvs_field&#x27;: False, &#x27;transcripts&#x27;: False}, &#x27;TRIO&#x27;: {&#x27;trio_pedigree&#x27;: False}, &#x27;BARCODEFAMILY&#x27;: {&#x27;family_pedigree&#x27;: False}}}, &#x27;prioritization&#x27;: {&#x27;function&#x27;: &#x27;prioritization&#x27;, &#x27;description&#x27;: &quot;Prioritization algorithm uses profiles to flag variants (as passed or filtered), calculate a prioritization score, and automatically generate a comment for each variants (example: &#x27;polymorphism identified in dbSNP. associated to Lung Cancer. Found in ClinVar database&#x27;). Prioritization profiles are defined in a configuration file in JSON format. A profile is defined as a list of annotation/value, using wildcards and comparison options (contains, lower than, greater than, equal...). Annotations fields may be quality values (usually from callers, such as &#x27;DP&#x27;) or other annotations fields provided by annotations tools, such as HOWARD itself (example: COSMIC, Clinvar, 1000genomes, PolyPhen, SIFT). Multiple profiles can be used simultaneously, which is useful to define multiple validation/prioritization levels (example: &#x27;standard&#x27;, &#x27;stringent&#x27;, &#x27;rare variants&#x27;, &#x27;low allele frequency&#x27;).\\n&quot;, &#x27;help&#x27;: &#x27;Prioritization of genetic variations based on annotations criteria (profiles).&#x27;, &#x27;epilog&#x27;: &quot;Usage examples:\\n   howard prioritization --input=tests/data/example.vcf.gz --output=/tmp/example.prioritized.vcf.gz --prioritizations=&#x27;default&#x27; \\n   howard prioritization --input=tests/data/example.vcf.gz --output=/tmp/example.prioritized.vcf.gz --prioritizations=&#x27;default,GERMLINE&#x27; --prioritization_config=config/prioritization_profiles.json \\n   howard prioritization --input=tests/data/example.vcf.gz --output=/tmp/example.prioritized.tsv --param=config/param.json \\n    \\n&quot;, &#x27;groups&#x27;: {&#x27;main&#x27;: {&#x27;input&#x27;: True, &#x27;output&#x27;: True, &#x27;param&#x27;: False, &#x27;prioritizations&#x27;: False}, &#x27;Prioritization&#x27;: {&#x27;default_profile&#x27;: False, &#x27;pzfields&#x27;: False, &#x27;prioritization_score_mode&#x27;: False, &#x27;prioritization_config&#x27;: False}}}, &#x27;process&#x27;: {&#x27;function&#x27;: &#x27;process&#x27;, &#x27;description&#x27;: &#x27;howard process tool manage genetic variations to:\\n- annotates genetic variants with multiple annotation databases/files and tools\\n- calculates and normalizes annotations\\n- prioritizes variants with profiles (list of citeria) to calculate scores and flags\\n- translates into various formats\\n- query genetic variants and annotations\\n- generates variants statistics&#x27;, &#x27;help&#x27;: &#x27;Full genetic variations process: annotation, calculation, prioritization, format, query, filter...&#x27;, &#x27;epilog&#x27;: &#x27;Usage examples:\\n   howard process --input=tests/data/example.vcf.gz --output=/tmp/example.annotated.vcf.gz --param=config/param.json \\n   howard process --input=tests/data/example.vcf.gz --annotations=\\&#x27;snpeff\\&#x27; --calculations=\\&#x27;snpeff_hgvs\\&#x27; --prioritizations=\\&#x27;default\\&#x27; --explode_infos --output=/tmp/example.annotated.tsv --query=\\&#x27;SELECT &quot;#CHROM&quot;, POS, ALT, REF, snpeff_hgvs FROM variants\\&#x27; \\n   howard process --input=tests/data/example.vcf.gz --hgvs_options=\\&#x27;full_format,use_exon\\&#x27; --explode_infos --output=/tmp/example.annotated.tsv --query=\\&#x27;SELECT &quot;#CHROM&quot;, POS, ALT, REF, hgvs FROM variants\\&#x27; \\n   howard process --input=tests/data/example.vcf.gz --output=/tmp/example.howard.vcf.gz --hgvs=\\&#x27;full_format,use_exon\\&#x27; --annotations=\\&#x27;tests/databases/annotations/current/hg19/avsnp150.parquet,tests/databases/annotations/current/hg19/dbnsfp42a.parquet,tests/databases/annotations/current/hg19/gnomad211_genome.parquet\\&#x27; --calculations=\\&#x27;NOMEN\\&#x27; --explode_infos --query=\\&#x27;SELECT NOMEN, REVEL_score, SIFT_score, AF AS \\&#x27;gnomad_AF\\&#x27;, ClinPred_score, ClinPred_pred FROM variants\\&#x27; \\n    \\n&#x27;, &#x27;groups&#x27;: {&#x27;main&#x27;: {&#x27;input&#x27;: True, &#x27;output&#x27;: True, &#x27;param&#x27;: False, &#x27;hgvs_options&#x27;: False, &#x27;annotations&#x27;: False, &#x27;calculations&#x27;: False, &#x27;prioritizations&#x27;: False, &#x27;assembly&#x27;: False}, &#x27;HGVS&#x27;: {&#x27;use_gene&#x27;: False, &#x27;use_exon&#x27;: False, &#x27;use_protein&#x27;: False, &#x27;add_protein&#x27;: False, &#x27;full_format&#x27;: False, &#x27;codon_type&#x27;: False, &#x27;refgene&#x27;: False, &#x27;refseqlink&#x27;: False}, &#x27;Annotation&#x27;: {&#x27;annotations_update&#x27;: False, &#x27;annotations_append&#x27;: False}, &#x27;Calculation&#x27;: {&#x27;calculation_config&#x27;: False}, &#x27;Prioritization&#x27;: {&#x27;default_profile&#x27;: False, &#x27;pzfields&#x27;: False, &#x27;prioritization_score_mode&#x27;: False, &#x27;prioritization_config&#x27;: False}, &#x27;Query&#x27;: {&#x27;query&#x27;: False, &#x27;query_limit&#x27;: False, &#x27;query_print_mode&#x27;: False}, &#x27;Explode&#x27;: {&#x27;explode_infos&#x27;: False, &#x27;explode_infos_prefix&#x27;: False, &#x27;explode_infos_fields&#x27;: False}, &#x27;Export&#x27;: {&#x27;include_header&#x27;: False, &#x27;order_by&#x27;: False, &#x27;parquet_partitions&#x27;: False}}}, &#x27;databases&#x27;: {&#x27;function&#x27;: &#x27;databases&#x27;, &#x27;description&#x27;: &#x27;Download databases and needed files for howard and associated tools&#x27;, &#x27;help&#x27;: &#x27;Download databases and needed files for howard and associated tools&#x27;, &#x27;epilog&#x27;: &quot;Usage examples:\\n   howard databases --assembly=hg19 --download-genomes=~/howard/databases/genomes/current --download-genomes-provider=UCSC --download-genomes-contig-regex=&#x27;chr[0-9XYM]+$&#x27; \\n   howard databases --assembly=hg19 --download-annovar=~/howard/databases/annovar/current --download-annovar-files=&#x27;refGene,cosmic70,nci60&#x27; \\n   howard databases --assembly=hg19 --download-snpeff=~/howard/databases/snpeff/current \\n   howard databases --assembly=hg19 --download-refseq=~/howard/databases/refseq/current --download-refseq-format-file=&#x27;ncbiRefSeq.txt&#x27; \\n   howard databases --assembly=hg19 --download-dbnsfp=~/howard/databases/dbnsfp/current --download-dbnsfp-release=&#x27;4.4a&#x27; --download-dbnsfp-subdatabases \\n   howard databases --assembly=hg19 --download-alphamissense=~/howard/databases/alphamissense/current \\n   howard databases --assembly=hg19 --download-exomiser=~/howard/databases/exomiser/current \\n   howard databases --assembly=hg19 --download-dbsnp=~/howard/databases/dbsnp/current --download-dbsnp-vcf \\n   cd ~/howard/databases &amp;&amp; howard databases --assembly=hg19 --download-genomes=genomes/current --download-genomes-provider=UCSC --download-genomes-contig-regex=&#x27;chr[0-9XYM]+$&#x27; --download-annovar=annovar/current --download-annovar-files=&#x27;refGene,cosmic70,nci60&#x27; --download-snpeff=snpeff/current --download-refseq=refseq/current --download-refseq-format-file=&#x27;ncbiRefSeq.txt&#x27; --download-dbnsfp=dbnsfp/current --download-dbnsfp-release=&#x27;4.4a&#x27; --download-dbnsfp-subdatabases --download-alphamissense=alphamissense/current --download-exomiser=exomiser/current --download-dbsnp=dbsnp/current --download-dbsnp-vcf --threads=8 \\n   howard databases --generate-param=/tmp/param.json --generate-param-description=/tmp/test.description.json --generate-param-formats=parquet \\n   howard databases --input_annovar=tests/databases/others/hg19_nci60.txt --output_annovar=/tmp/nci60.from_annovar.vcf.gz --annovar_to_parquet=/tmp/nci60.from_annovar.parquet --annovar_code=nci60 --genome=~/howard/databases/genomes/current/hg19.fa \\n\\nNotes:\\n   - Downloading databases can take a while, depending on network, threads and memory\\n   - Proxy: Beware of network and proxy configuration\\n   - dbNSFP download: More threads, more memory usage (8 threads ~ 16Gb, 24 threads ~ 32Gb)\\n    \\n&quot;, &#x27;groups&#x27;: {&#x27;main&#x27;: {&#x27;assembly&#x27;: False, &#x27;genomes-folder&#x27;: False, &#x27;genome&#x27;: False, &#x27;param&#x27;: False}, &#x27;Genomes&#x27;: {&#x27;download-genomes&#x27;: False, &#x27;download-genomes-provider&#x27;: False, &#x27;download-genomes-contig-regex&#x27;: False}, &#x27;snpEff&#x27;: {&#x27;download-snpeff&#x27;: False}, &#x27;Annovar&#x27;: {&#x27;download-annovar&#x27;: False, &#x27;download-annovar-files&#x27;: False, &#x27;download-annovar-url&#x27;: False}, &#x27;refSeq&#x27;: {&#x27;download-refseq&#x27;: False, &#x27;download-refseq-url&#x27;: False, &#x27;download-refseq-prefix&#x27;: False, &#x27;download-refseq-files&#x27;: False, &#x27;download-refseq-format-file&#x27;: False, &#x27;download-refseq-include-utr5&#x27;: False, &#x27;download-refseq-include-utr3&#x27;: False, &#x27;download-refseq-include-chrM&#x27;: False, &#x27;download-refseq-include-non-canonical-chr&#x27;: False, &#x27;download-refseq-include-non-coding-transcripts&#x27;: False, &#x27;download-refseq-include-transcript-version&#x27;: False}, &#x27;dbNSFP&#x27;: {&#x27;download-dbnsfp&#x27;: False, &#x27;download-dbnsfp-url&#x27;: False, &#x27;download-dbnsfp-release&#x27;: False, &#x27;download-dbnsfp-parquet-size&#x27;: False, &#x27;download-dbnsfp-subdatabases&#x27;: False, &#x27;download-dbnsfp-parquet&#x27;: False, &#x27;download-dbnsfp-vcf&#x27;: False, &#x27;download-dbnsfp-no-files-all&#x27;: False, &#x27;download-dbnsfp-add-info&#x27;: False, &#x27;download-dbnsfp-only-info&#x27;: False, &#x27;download-dbnsfp-uniquify&#x27;: False, &#x27;download-dbnsfp-row-group-size&#x27;: False}, &#x27;AlphaMissense&#x27;: {&#x27;download-alphamissense&#x27;: False, &#x27;download-alphamissense-url&#x27;: False}, &#x27;Exomiser&#x27;: {&#x27;download-exomiser&#x27;: False, &#x27;download-exomiser-application-properties&#x27;: False, &#x27;download-exomiser-url&#x27;: False, &#x27;download-exomiser-release&#x27;: False, &#x27;download-exomiser-phenotype-release&#x27;: False, &#x27;download-exomiser-remm-release&#x27;: False, &#x27;download-exomiser-remm-url&#x27;: False, &#x27;download-exomiser-cadd-release&#x27;: False, &#x27;download-exomiser-cadd-url&#x27;: False, &#x27;download-exomiser-cadd-url-snv-file&#x27;: False, &#x27;download-exomiser-cadd-url-indel-file&#x27;: False}, &#x27;dbSNP&#x27;: {&#x27;download-dbsnp&#x27;: False, &#x27;download-dbsnp-releases&#x27;: False, &#x27;download-dbsnp-release-default&#x27;: False, &#x27;download-dbsnp-url&#x27;: False, &#x27;download-dbsnp-url-files&#x27;: False, &#x27;download-dbsnp-url-files-prefix&#x27;: False, &#x27;download-dbsnp-assemblies-map&#x27;: False, &#x27;download-dbsnp-vcf&#x27;: False, &#x27;download-dbsnp-parquet&#x27;: False}, &#x27;HGMD&#x27;: {&#x27;convert-hgmd&#x27;: False, &#x27;convert-hgmd-file&#x27;: False, &#x27;convert-hgmd-basename&#x27;: False}, &#x27;from_Annovar&#x27;: {&#x27;input_annovar&#x27;: False, &#x27;output_annovar&#x27;: False, &#x27;annovar_code&#x27;: False, &#x27;annovar_to_parquet&#x27;: False, &#x27;annovar_reduce_memory&#x27;: False, &#x27;annovar_multi_variant&#x27;: False}, &#x27;from_extann&#x27;: {&#x27;input_extann&#x27;: False, &#x27;output_extann&#x27;: False, &#x27;refgene&#x27;: False, &#x27;transcripts&#x27;: False, &#x27;param_extann&#x27;: False, &#x27;mode_extann&#x27;: False}, &#x27;Parameters&#x27;: {&#x27;generate-param&#x27;: False, &#x27;generate-param-description&#x27;: False, &#x27;generate-param-releases&#x27;: False, &#x27;generate-param-formats&#x27;: False, &#x27;generate-param-bcftools&#x27;: False}}}, &#x27;gui&#x27;: {&#x27;function&#x27;: &#x27;gui&#x27;, &#x27;description&#x27;: &#x27;Graphical User Interface tools&#x27;, &#x27;help&#x27;: &#x27;Graphical User Interface tools&#x27;, &#x27;epilog&#x27;: &#x27;Usage examples:\\n   howard gui &#x27;, &#x27;groups&#x27;: {}}, &#x27;help&#x27;: {&#x27;function&#x27;: &#x27;help&#x27;, &#x27;description&#x27;: &#x27;Help tools&#x27;, &#x27;help&#x27;: &#x27;Help tools&#x27;, &#x27;epilog&#x27;: &quot;Usage examples:\\n   howard help --help_md=docs/help.md --help_html=docs/html/help.html --help_pdf=docs/pdf/help.pdf\\n   howard help --help_json_input=docs/json/help.configuration.json --help_json_input_title=&#x27;HOWARD Configuration&#x27; --help_md=docs/help.configuration.md --help_html=docs/html/help.configuration.html --help_pdf=docs/pdf/help.configuration.pdf --code_type=&#x27;json&#x27;\\n   howard help --help_json_input=docs/json/help.parameteres.json --help_json_input_title=&#x27;HOWARD Parameters&#x27; --help_md=docs/help.parameteres.md --help_html=docs/html/help.parameteres.html --help_pdf=docs/pdf/help.parameteres.pdf --code_type=&#x27;json&#x27; \\n   howard help --help_json_input=docs/json/help.parameteres.databases.json --help_json_input_title=&#x27;HOWARD Parameters Databases&#x27; --help_md=docs/help.parameteres.databases.md --help_html=docs/html/help.parameteres.databases.html --help_pdf=docs/pdf/help.parameteres.databases.pdf --code_type=&#x27;json&#x27; \\n    \\n&quot;, &#x27;groups&#x27;: {&#x27;main&#x27;: {&#x27;help_md&#x27;: False, &#x27;help_html&#x27;: False, &#x27;help_pdf&#x27;: False, &#x27;help_md_input&#x27;: False, &#x27;help_json_input&#x27;: False, &#x27;help_json_input_title&#x27;: False, &#x27;code_type&#x27;: False}}}, &#x27;update_database&#x27;: {&#x27;function&#x27;: &#x27;update_database&#x27;, &#x27;description&#x27;: &#x27;Update HOWARD database\\n&#x27;, &#x27;help&#x27;: &#x27;Update HOWARD database&#x27;, &#x27;epilog&#x27;: &#x27;Usage examples:\\n   howard update_database --database clinvar --databases_folder /home1/DB/HOWARD --update_config update_databases.json  \\n    \\n&#x27;, &#x27;groups&#x27;: {&#x27;main&#x27;: {&#x27;param&#x27;: False}, &#x27;Update_database&#x27;: {&#x27;databases_folder&#x27;: False, &#x27;database&#x27;: False, &#x27;update_config&#x27;: False, &#x27;current_folder&#x27;: False}, &#x27;Options&#x27;: {&#x27;show&#x27;: False, &#x27;limit&#x27;: False}}}, &#x27;genebe&#x27;: {&#x27;function&#x27;: &#x27;genebe&#x27;, &#x27;description&#x27;: &#x27;GeneBe annotation using REST API (see https://genebe.net/).\\n&#x27;, &#x27;help&#x27;: &#x27;GeneBe annotation using REST API&#x27;, &#x27;epilog&#x27;: &#x27;Usage examples:\\n   howard genebe --input=tests/data/example.vcf.gz --output=/tmp/example.genebe.vcf.gz --genebe_use_refseq\\n    \\n&#x27;, &#x27;groups&#x27;: {&#x27;main&#x27;: {&#x27;input&#x27;: True, &#x27;output&#x27;: True, &#x27;param&#x27;: False, &#x27;assembly&#x27;: False}, &#x27;GeneBe&#x27;: {&#x27;genebe_use_refseq&#x27;: False, &#x27;genebe_use_ensembl&#x27;: False, &#x27;not_flatten_consequences&#x27;: False}, &#x27;Explode&#x27;: {&#x27;explode_infos&#x27;: False, &#x27;explode_infos_prefix&#x27;: False, &#x27;explode_infos_fields&#x27;: False}, &#x27;Export&#x27;: {&#x27;include_header&#x27;: False, &#x27;order_by&#x27;: False, &#x27;parquet_partitions&#x27;: False}}}, &#x27;minimalize&#x27;: {&#x27;function&#x27;: &#x27;minimalize&#x27;, &#x27;description&#x27;: &quot;Minimalize a VCF file consists in put missing value (&#x27;.&#x27;) on INFO/Tags, ID, QUAL or FILTER fields. Options can also minimalize samples (keep only GT) or remove all samples. INFO/tags can by exploded before minimalize to keep tags into separated columns (useful for Parquet or TSV format to constitute a database).\\n&quot;, &#x27;help&#x27;: &#x27;Minimalize a VCF file, such as removing INFO/Tags or samples&#x27;, &#x27;epilog&#x27;: &#x27;Usage examples:\\n   howard minimalize --input=tests/data/example.vcf.gz --output=/tmp/example.minimal.vcf.gz --minimalize_info --minimalize_filter --minimalize_qual --minimalize_id --minimalize_samples\\n   howard minimalize --input=tests/data/example.vcf.gz --output=/tmp/example.minimal.tsv --remove_samples --explode_infos --minimalize_info\\n    \\n&#x27;, &#x27;groups&#x27;: {&#x27;main&#x27;: {&#x27;input&#x27;: True, &#x27;output&#x27;: True, &#x27;param&#x27;: False}, &#x27;Minimalize&#x27;: {&#x27;minimalize_info&#x27;: False, &#x27;minimalize_id&#x27;: False, &#x27;minimalize_qual&#x27;: False, &#x27;minimalize_filter&#x27;: False, &#x27;minimalize_samples&#x27;: False, &#x27;remove_samples&#x27;: False}, &#x27;Explode&#x27;: {&#x27;explode_infos&#x27;: False, &#x27;explode_infos_prefix&#x27;: False, &#x27;explode_infos_fields&#x27;: False}, &#x27;Export&#x27;: {&#x27;include_header&#x27;: False, &#x27;order_by&#x27;: False, &#x27;parquet_partitions&#x27;: False}}}}"}, "howard.tools.tools.arguments_dict": {"fullname": "howard.tools.tools.arguments_dict", "modulename": "howard.tools.tools", "qualname": "arguments_dict", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;arguments&#x27;: {&#x27;input&#x27;: {&#x27;metavar&#x27;: &#x27;input&#x27;, &#x27;help&#x27;: &#x27;Input file path.\\nFormat file must be either VCF, Parquet, TSV, CSV, PSV or duckDB.\\nFiles can be compressesd (e.g. vcf.gz, tsv.gz).\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;Parquet file (*.parquet)|*.parquet|All files (*)|*&#x27;}}}, &#x27;output&#x27;: {&#x27;metavar&#x27;: &#x27;output&#x27;, &#x27;help&#x27;: &#x27;Output file path.\\nFormat file must be either VCF, Parquet, TSV, CSV, PSV or duckDB.\\nFiles can be compressesd (e.g. vcf.gz, tsv.gz).\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileSaver&#x27;}}, &#x27;param&#x27;: {&#x27;metavar&#x27;: &#x27;param&#x27;, &#x27;help&#x27;: &#x27;Parameters JSON file (or string) defines parameters to process \\nannotations, calculations, prioritizations, convertions and queries.\\n&#x27;, &#x27;default&#x27;: &#x27;{}&#x27;, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;, &#x27;options&#x27;: {&#x27;initial_value&#x27;: &#x27;&#x27;, &#x27;wildcard&#x27;: &#x27;JSON file (*.json)|*.json|All files (*)|*&#x27;}}}, &#x27;query&#x27;: {&#x27;metavar&#x27;: &#x27;query&#x27;, &#x27;help&#x27;: &quot;Query in SQL format\\n(e.g. &#x27;SELECT * FROM variants LIMIT 50&#x27;).\\n&quot;, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;Textarea&#x27;, &#x27;options&#x27;: {&#x27;initial_value&#x27;: &#x27;SELECT * FROM variants&#x27;}}, &#x27;extra&#x27;: {&#x27;param_section&#x27;: &#x27;query&#x27;}}, &#x27;output_query&#x27;: {&#x27;metavar&#x27;: &#x27;output&#x27;, &#x27;help&#x27;: &#x27;Output Query file.\\nFormat file must be either VCF, Parquet, TSV, CSV, PSV or duckDB.\\n&#x27;, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileSaver&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;All files (*)|*&#x27;}}}, &#x27;annotations&#x27;: {&#x27;metavar&#x27;: &#x27;annotations&#x27;, &#x27;help&#x27;: &quot;Annotation with databases files, or with tools,\\nas a list of files in Parquet, VCF, BED, or keywords\\n (e.g. &#x27;file.parquet,bcftools:file2.vcf.gz,annovar:refGene,snpeff&#x27;).\\n- For a Parquet/VCF/BED, use file paths\\n (e.g. &#x27;file1.parquet,file2.vcf.gz&#x27;).\\n- For BCFTools annotation, use keyword &#x27;bcftools&#x27; with file paths\\n (e.g. &#x27;bcftools:file.vcf.gz:file.bed.gz&#x27;).\\n- For Annovar annotation, use keyword &#x27;annovar&#x27; with annovar code\\n (e.g. &#x27;annovar:refGene&#x27;, &#x27;annovar:refGene:cosmic70&#x27;).\\n- For snpeff annotation, use keyword &#x27;snpeff&#x27; with options\\n (e.g. &#x27;snpeff&#x27;, &#x27;snpeff:-hgvs -noShiftHgvs -spliceSiteSize 3&#x27;).\\n- For snpSift annotation, use keyword &#x27;snpsift&#x27; with file paths\\n (e.g. &#x27;snpsift:file.vcf.gz:file.bed.gz&#x27;).\\n- For Exomiser annotation, use keyword &#x27;exomiser&#x27; with options as key=value\\n (e.g. &#x27;exomiser:preset=exome:transcript_source=refseq&#x27;).\\n- For add all availalbe databases files, use &#x27;ALL&#x27; keyword,\\n with filters on type and release\\n (e.g. &#x27;ALL&#x27;, &#x27;ALL:parquet:current&#x27;, &#x27;ALL:parquet,vcf:current,devel&#x27;).\\n&quot;, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;extra&#x27;: {&#x27;format&#x27;: &#x27;DB[,DB]*[,bcftools:DB[:DB]*][,annovar:KEY[:KEY]*][,snpeff][,exomiser[:var=val]*]&#x27;, &#x27;examples&#x27;: {&#x27;Parquet method annotation with 2 Parquet files&#x27;: &#x27;&quot;annotations&quot;: &quot;/path/to/database1.parquet,/path/to/database2.parquet&quot;&#x27;, &#x27;Parquet method annotation with multiple file formats&#x27;: &#x27;&quot;annotations&quot;: &quot;/path/to/database1.parquet,/path/to/database2.vcf.gz,/path/to/database2.bed.gz&quot;&#x27;, &#x27;Parquet method annotation with available Parquet databases in current release (check databases in production)&#x27;: &#x27;&quot;annotations&quot;: &quot;ALL:parquet:current&quot;&#x27;, &#x27;Parquet method annotation with available Parquet databases in latest release (check databases before production)&#x27;: &#x27;&quot;annotations&quot;: &quot;ALL:parquet:latest&quot;&#x27;, &#x27;Annotation with BCFTools&#x27;: &#x27;&quot;annotations&quot;: &quot;bcftools:/path/to/database2.vcf.gz:/path/to/database2.bed.gz&quot;&#x27;, &#x27;Annotation with Annovar (refGene with hgvs and Cosmic)&#x27;: &#x27;&quot;annotations&quot;: &quot;annovar:refGene:cosmic70&quot;&#x27;, &#x27;Annotation with snpEff (default options)&#x27;: &#x27;&quot;annotations&quot;: &quot;snpeff&quot;&#x27;, &#x27;Annotation with snpEff (with options)&#x27;: &#x27;&quot;annotations&quot;: &quot;snpeff:-hgvs -noShiftHgvs -spliceSiteSize 3&quot;&#x27;, &#x27;Annotation with snpSift&#x27;: &#x27;&quot;annotations&quot;: &quot;snpsift:/path/to/database2.vcf.gz:/path/to/database2.bed.gz&quot;&#x27;, &#x27;Annotation with Exomiser with options&#x27;: &#x27;&quot;annotations&quot;: &quot;exomiser:preset=exome:hpo=0001156+0001363+0011304+0010055:transcript_source=refseq:release=2109&quot;&#x27;, &#x27;Multiple tools annotations (Parquet method, BCFTools, Annovar, snpEff and Exomiser)&#x27;: &#x27;&quot;annotations&quot;: &quot;/path/to/database1.parquet,bcftools:/path/to/database2.vcf.gz,annovar:refGene:cosmic70,snpeff,exomiser:preset=exome:transcript_source=refseq&quot;&#x27;}}}, &#x27;annotation_parquet&#x27;: {&#x27;metavar&#x27;: &#x27;annotation parquet&#x27;, &#x27;help&#x27;: &quot;Annotation with Parquet method, as a list of files in Parquet, VCF or BED\\n (e.g. &#x27;file1.parquet,file2.vcf.gz&#x27;).\\nFor add all availalbe databases files, use &#x27;ALL&#x27; keyword,\\n with filters on type and release\\n (e.g. &#x27;ALL&#x27;, &#x27;ALL:parquet:current&#x27;, &#x27;ALL:parquet,vcf:current,devel&#x27;).\\n&quot;, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;nargs&#x27;: &#x27;+&#x27;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;MultiFileChooser&#x27;, &#x27;options&#x27;: {&#x27;default_dir&#x27;: &#x27;/Users/lebechea/howard/databases/annotations/current&#x27;, &#x27;message&#x27;: &#x27;Database files&#x27;}}, &#x27;extra&#x27;: {&#x27;format&#x27;: &#x27;DB[,DB]*&#x27;, &#x27;examples&#x27;: {&#x27;Parquet method annotation with 2 Parquet files&#x27;: &#x27;&quot;annotation_parquet&quot;: &quot;/path/to/database1.parquet,/path/to/database2.parquet&quot;&#x27;, &#x27;Parquet method annotation with multiple file formats&#x27;: &#x27;&quot;annotation_parquet&quot;: &quot;/path/to/database1.parquet,/path/to/database2.vcf.gz,/path/to/database2.bed.gz&quot;&#x27;, &#x27;Parquet method annotation with available Parquet databases in current release (check databases in production)&#x27;: &#x27;&quot;annotation_parquet&quot;: &quot;ALL:parquet:current&quot;&#x27;, &#x27;Parquet method annotation with available Parquet databases in latest release (check databases before production)&#x27;: &#x27;&quot;annotation_parquet&quot;: &quot;ALL:parquet:latest&quot;&#x27;}}}, &#x27;annotation_bcftools&#x27;: {&#x27;metavar&#x27;: &#x27;annotation BCFTools&#x27;, &#x27;help&#x27;: &quot;Annotation with BCFTools, as a list of files VCF or BED\\n (e.g. &#x27;file.vcf.gz,file.bed.gz&#x27;).\\n&quot;, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;nargs&#x27;: &#x27;+&#x27;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;MultiFileChooser&#x27;, &#x27;options&#x27;: {&#x27;default_dir&#x27;: &#x27;/Users/lebechea/howard/databases/annotations/current&#x27;, &#x27;message&#x27;: &#x27;Database files&#x27;}}, &#x27;extra&#x27;: {&#x27;format&#x27;: &#x27;DB[,DB]*&#x27;, &#x27;examples&#x27;: {&#x27;Annovation with BCFTools&#x27;: &#x27;&quot;annotation_bcftools&quot;: &quot;/path/to/database2.vcf.gz,/path/to/database2.bed.gz&quot;&#x27;}}}, &#x27;annotation_snpeff&#x27;: {&#x27;metavar&#x27;: &#x27;annotation snpEff&#x27;, &#x27;help&#x27;: &quot;Annotation with snpEff, with options\\n (e.g. &#x27;&#x27;, &#x27;-hgvs -noShiftHgvs -spliceSiteSize 3&#x27;).\\n&quot;, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;extra&#x27;: {&#x27;format&#x27;: &#x27;options&#x27;, &#x27;examples&#x27;: {&#x27;Annotation with snpEff (default options)&#x27;: &#x27;&quot;annotation_snpeff&quot;: &quot;&quot;&#x27;, &#x27;Annotation with snpEff (with options)&#x27;: &#x27;&quot;annotation_snpeff&quot;: &quot;-hgvs -noShiftHgvs -spliceSiteSize 3&quot;&#x27;}}}, &#x27;annotation_snpsift&#x27;: {&#x27;metavar&#x27;: &#x27;annotation snpSift&#x27;, &#x27;help&#x27;: &quot;Annotation with snpSift, as a list of files VCF\\n (e.g. &#x27;file.vcf.gz,file.bed.gz&#x27;).\\n&quot;, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;nargs&#x27;: &#x27;+&#x27;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;MultiFileChooser&#x27;, &#x27;options&#x27;: {&#x27;default_dir&#x27;: &#x27;/Users/lebechea/howard/databases/annotations/current&#x27;, &#x27;message&#x27;: &#x27;Database files&#x27;}}, &#x27;extra&#x27;: {&#x27;format&#x27;: &#x27;DB[,DB]*&#x27;, &#x27;examples&#x27;: {&#x27;Annovation with snpSift&#x27;: &#x27;&quot;annotation_snpsift&quot;: &quot;/path/to/database2.vcf.gz,/path/to/database2.bed.gz&quot;&#x27;}}}, &#x27;annotation_annovar&#x27;: {&#x27;metavar&#x27;: &#x27;annotation Annovar&#x27;, &#x27;help&#x27;: &quot;Annotation with Annovar, as a list of database keywords\\n (e.g. &#x27;refGene&#x27;, &#x27;refGene:cosmic70&#x27;).\\n&quot;, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;extra&#x27;: {&#x27;format&#x27;: &#x27;keyword[:keyword]*&#x27;, &#x27;examples&#x27;: {&#x27;Annotation with Annovar (refGene with hgvs and Cosmic)&#x27;: &#x27;&quot;annotation_annovar&quot;: &quot;refGene:cosmic70&quot;&#x27;}}}, &#x27;annotation_exomiser&#x27;: {&#x27;metavar&#x27;: &#x27;annotation Exomiser&#x27;, &#x27;help&#x27;: &quot;Annotation with Exomiser, as a list of options\\n (e.g. &#x27;preset=exome:transcript_source=refseq&#x27;).\\n&quot;, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;extra&#x27;: {&#x27;format&#x27;: &#x27;option=value[:option=value]&#x27;, &#x27;examples&#x27;: {&#x27;Annotation with Exomiser with options&#x27;: &#x27;&quot;annotation_exomiser&quot;: &quot;preset=exome:hpo=0001156+0001363+0011304+0010055:transcript_source=refseq:release=2109&quot;&#x27;}}}, &#x27;annotation_splice&#x27;: {&#x27;metavar&#x27;: &#x27;annotation Splice&#x27;, &#x27;help&#x27;: &quot;Annotation with Splice, as a list of options\\n (e.g. &#x27;split_mode=one:spliceai_distance=500:spliceai_mask=1&#x27;).\\n&quot;, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;extra&#x27;: {&#x27;format&#x27;: &#x27;option=value[:option=value]&#x27;, &#x27;examples&#x27;: {&#x27;Annotation with Splice with options&#x27;: &#x27;&quot;annotation_splice&quot;: &quot;split_mode=one:spliceai_distance=500:spliceai_mask=1&quot;&#x27;}}}, &#x27;annotations_update&#x27;: {&#x27;help&#x27;: &#x27;Update option for annotation (Only for Parquet annotation).\\nIf True, annotation fields will be removed and re-annotated.\\nThese options will be applied to all annotation databases.\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;BlockCheckbox&#x27;, &#x27;options&#x27;: {&#x27;checkbox_label&#x27;: &#x27;Update annotation method&#x27;}}, &#x27;extra&#x27;: {&#x27;param_section&#x27;: &#x27;annotation:options&#x27;}}, &#x27;annotations_append&#x27;: {&#x27;help&#x27;: &#x27;Append option for annotation (Only for Parquet annotation).\\nIf True, annotation fields will be annotated only if not annotation exists for the variant.\\nThese options will be applied to all annotation databases.\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;BlockCheckbox&#x27;, &#x27;options&#x27;: {&#x27;checkbox_label&#x27;: &#x27;Append annotation method&#x27;}}, &#x27;extra&#x27;: {&#x27;param_section&#x27;: &#x27;annotation:options&#x27;}}, &#x27;calculations&#x27;: {&#x27;metavar&#x27;: &#x27;operations&#x27;, &#x27;help&#x27;: &quot;Quick calculations on genetic variants information and genotype information,\\nas a list of operations (e.g. &#x27;VARTYPE,variant_id&#x27;).\\nList of available calculations by default\\n (unsensitive case, see doc for more information):\\n VARTYPE  snpeff_hgvs  FINDBYPIPELINE  GENOTYPECONCORDANCE  BARCODE  TRIO  VAF  VAF_STATS  DP_STATS \\n&quot;, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;prioritizations&#x27;: {&#x27;metavar&#x27;: &#x27;prioritisations&#x27;, &#x27;help&#x27;: &quot;List of prioritization profiles to process (based on Prioritization JSON file),\\nsuch as &#x27;default&#x27;, &#x27;rare variants&#x27;, &#x27;low allele frequency&#x27;, &#x27;GERMLINE&#x27;.\\nBy default, all profiles available will be processed.\\n&quot;, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;extra&#x27;: {&#x27;examples&#x27;: {&#x27;Prioritization profile by default&#x27;: &#x27;&quot;prioritization&quot;: &quot;default&quot; &#x27;, &#x27;Prioritization profile by default and GERMLINE from Configuration JSON file&#x27;: &#x27;&quot;prioritization&quot;: &quot;default,GERMLINE&quot; &#x27;}}}, &#x27;prioritization_config&#x27;: {&#x27;metavar&#x27;: &#x27;prioritization config&#x27;, &#x27;help&#x27;: &#x27;Prioritization configuration JSON file (defines profiles, see doc).\\n&#x27;, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;JSON file (*.json)|*.json|All files (*)|*&#x27;}}, &#x27;extra&#x27;: {&#x27;param_section&#x27;: &#x27;prioritization&#x27;, &#x27;examples&#x27;: {&#x27;Prioritization configuration JSON file as an option&#x27;: &#x27;&quot;prioritization_config&quot;: &quot;prioritization_config.json&quot; &#x27;}}}, &#x27;profiles&#x27;: {&#x27;metavar&#x27;: &#x27;profiles&#x27;, &#x27;help&#x27;: &quot;List of prioritization profiles to process (based on Prioritization JSON file),\\nsuch as &#x27;default&#x27;, &#x27;rare variants&#x27;, &#x27;low allele frequency&#x27;, &#x27;GERMLINE&#x27;.\\nBy default, all profiles available will be processed.\\n&quot;, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;default_profile&#x27;: {&#x27;metavar&#x27;: &#x27;default profile&#x27;, &#x27;help&#x27;: &#x27;Prioritization profile by default (see doc).\\nDefault is the first profile in the list of prioritization profiles.\\n&#x27;, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;pzfields&#x27;: {&#x27;metavar&#x27;: &#x27;pzfields&#x27;, &#x27;help&#x27;: &#x27;Prioritization fields to provide (see doc).\\nAvailable: PZScore, PZFlag, PZTags, PZComment, PZInfos\\n&#x27;, &#x27;default&#x27;: &#x27;PZScore,PZFlag&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;prioritization_score_mode&#x27;: {&#x27;metavar&#x27;: &#x27;prioritization score mode&#x27;, &#x27;help&#x27;: &#x27;Prioritization Score mode (see doc).\\nAvailable: HOWARD (increment score), VaRank (max score)\\n&#x27;, &#x27;default&#x27;: &#x27;HOWARD&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;choices&#x27;: [&#x27;HOWARD&#x27;, &#x27;VaRank&#x27;], &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;Dropdown&#x27;, &#x27;options&#x27;: {}}}, &#x27;query_limit&#x27;: {&#x27;metavar&#x27;: &#x27;query limit&#x27;, &#x27;help&#x27;: &#x27;Limit of number of row for query (only for print result, not output).\\n&#x27;, &#x27;default&#x27;: 10, &#x27;type&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;IntegerField&#x27;, &#x27;options&#x27;: {&#x27;min&#x27;: 1, &#x27;max&#x27;: 10000, &#x27;increment&#x27;: 10}}}, &#x27;query_print_mode&#x27;: {&#x27;metavar&#x27;: &#x27;print mode&#x27;, &#x27;help&#x27;: &quot;Print mode of query result (only for print result, not output).\\nEither None (native), &#x27;markdown&#x27;, &#x27;tabulate&#x27; or disabled.\\n&quot;, &#x27;choices&#x27;: [None, &#x27;markdown&#x27;, &#x27;tabulate&#x27;, &#x27;disabled&#x27;], &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;Dropdown&#x27;, &#x27;options&#x27;: {}}}, &#x27;explode_infos&#x27;: {&#x27;help&#x27;: &quot;Explode VCF INFO/Tag into &#x27;variants&#x27; table columns.\\n&quot;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;explode_infos_prefix&#x27;: {&#x27;metavar&#x27;: &#x27;explode infos prefix&#x27;, &#x27;help&#x27;: &#x27;Explode VCF INFO/Tag with a specific prefix.\\n&#x27;, &#x27;default&#x27;: &#x27;&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;explode_infos_fields&#x27;: {&#x27;metavar&#x27;: &#x27;explode infos list&#x27;, &#x27;help&#x27;: &quot;Explode VCF INFO/Tag specific fields/tags.\\nKeyword `*` specify all available fields, except those already specified.\\nPattern (regex) can be used, such as `.*_score` for fields named with &#x27;_score&#x27; at the end.\\nExamples:\\n- &#x27;HGVS,SIFT,Clinvar&#x27; (list of fields)\\n- &#x27;HGVS,*,Clinvar&#x27; (list of fields with all other fields at the end)\\n- &#x27;HGVS,.*_score,Clinvar&#x27; (list of 2 fields with all scores in the middle)\\n- &#x27;HGVS,.*_score,*&#x27; (1 field, scores, all other fields)\\n- &#x27;HGVS,*,.*_score&#x27; (1 field, all other fields, all scores)\\n&quot;, &#x27;default&#x27;: &#x27;*&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;include_header&#x27;: {&#x27;help&#x27;: &#x27;Include header (in VCF format) in output file.\\nOnly for compatible formats (tab-delimiter format as TSV or BED).\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;order_by&#x27;: {&#x27;metavar&#x27;: &#x27;order by&#x27;, &#x27;help&#x27;: &quot;List of columns to sort the result-set in ascending or descending order.\\nUse SQL format, and keywords ASC (ascending) and DESC (descending).\\nIf a column is not available, order will not be considered.\\nOrder is enable only for compatible format (e.g. TSV, CSV, JSON).\\nExamples: &#x27;ACMG_score DESC&#x27;, &#x27;PZFlag DESC, PZScore DESC&#x27;.\\n&quot;, &#x27;default&#x27;: &#x27;&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;extra&#x27;: {&#x27;examples&#x27;: {&#x27;Order by ACMG score in descending order&#x27;: &#x27;&quot;order_by&quot;: &quot;ACMG_score DESC&quot; &#x27;, &#x27;Order by PZFlag and PZScore in descending order&#x27;: &#x27;&quot;order_by&quot;: PZFlag DESC, PZScore DESC&quot; &#x27;}}}, &#x27;parquet_partitions&#x27;: {&#x27;metavar&#x27;: &#x27;parquet partitions&#x27;, &#x27;help&#x27;: &quot;Parquet partitioning using hive (available for any format).\\nThis option is faster parallel writing, but memory consuming.\\nUse &#x27;None&#x27; (string) for NO partition but split parquet files into a folder.\\nExamples: &#x27;#CHROM&#x27;, &#x27;#CHROM,REF&#x27;, &#x27;None&#x27;.\\n&quot;, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;input_annovar&#x27;: {&#x27;metavar&#x27;: &#x27;input annovar&#x27;, &#x27;help&#x27;: &quot;Input Annovar file path.\\nFormat file must be a Annovar TXT file, associated with &#x27;.idx&#x27;.\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;Parquet file (*.parquet)|*.parquet|All files (*)|*&#x27;}}}, &#x27;output_annovar&#x27;: {&#x27;metavar&#x27;: &#x27;output annovar&#x27;, &#x27;help&#x27;: &quot;Output Annovar file path.\\nFormat file must be either VCF compressesd file &#x27;.vcf.gz&#x27;.\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileSaver&#x27;}}, &#x27;annovar_code&#x27;: {&#x27;metavar&#x27;: &#x27;Annovar code&#x27;, &#x27;help&#x27;: &#x27;Annovar code, or database name.\\nUsefull to name databases columns.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;annovar_to_parquet&#x27;: {&#x27;metavar&#x27;: &#x27;to parquet&#x27;, &#x27;help&#x27;: &#x27;Parquet file conversion.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileSaver&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;HTML file (*.parquet)|*.parquet&#x27;}}}, &#x27;annovar_multi_variant&#x27;: {&#x27;metavar&#x27;: &#x27;Annovar multi variant&#x27;, &#x27;help&#x27;: &quot;Variant with multiple annotation lines on Annovar file.\\nEither &#x27;auto&#x27; (auto-detection), &#x27;enable&#x27; or &#x27;disable&#x27;.\\n&quot;, &#x27;default&#x27;: &#x27;auto&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;choices&#x27;: [&#x27;auto&#x27;, &#x27;enable&#x27;, &#x27;disable&#x27;], &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;Dropdown&#x27;, &#x27;options&#x27;: {}}}, &#x27;annovar_reduce_memory&#x27;: {&#x27;metavar&#x27;: &#x27;reduce memory&#x27;, &#x27;help&#x27;: &quot;Reduce memory option for Annovar convert,\\neither &#x27;auto&#x27; (auto-detection), &#x27;enable&#x27; or &#x27;disable&#x27;.\\n&quot;, &#x27;default&#x27;: &#x27;auto&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;choices&#x27;: [&#x27;auto&#x27;, &#x27;enable&#x27;, &#x27;disable&#x27;], &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;Dropdown&#x27;, &#x27;options&#x27;: {}}}, &#x27;input_extann&#x27;: {&#x27;metavar&#x27;: &#x27;input extann&#x27;, &#x27;help&#x27;: &#x27;Input Extann file path.\\nFormat file must be a Extann TXT file or TSV file.\\nFile need to have at least the genes column.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;VCF, Parquet, TSV, CSV, PSV or duckDB|*.*|All files (*)|*&#x27;}}}, &#x27;output_extann&#x27;: {&#x27;metavar&#x27;: &#x27;output extann&#x27;, &#x27;help&#x27;: &#x27;Output Extann file path.\\nOutput extann file, should be BED or BED.gz.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileSaver&#x27;}}, &#x27;mode_extann&#x27;: {&#x27;metavar&#x27;: &#x27;mode extann&#x27;, &#x27;help&#x27;: &#x27;Mode extann selection.\\nHow to pick transcript from ncbi, keep all,\\nkeep the longest, or keep the chosen one (transcript_extann).\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;longest&#x27;, &#x27;choices&#x27;: [&#x27;all&#x27;, &#x27;longest&#x27;, &#x27;chosen&#x27;], &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;param_extann&#x27;: {&#x27;metavar&#x27;: &#x27;param extann&#x27;, &#x27;help&#x27;: &quot;Param extann file path.\\nParam containing configuration, options to replace chars and\\nbedlike header description, conf vcf specs.\\n(e.g. &#x27;~/howard/config/param.extann.json&#x27;)\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;TSV file format|*.tsv|&#x27;}}}, &#x27;calculation_config&#x27;: {&#x27;metavar&#x27;: &#x27;calculation config&#x27;, &#x27;help&#x27;: &#x27;Calculation configuration JSON file.\\n&#x27;, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;JSON file (*.json)|*.json|All files (*)|*&#x27;}}, &#x27;extra&#x27;: {&#x27;param_section&#x27;: &#x27;calculation&#x27;, &#x27;examples&#x27;: {&#x27;Calculation configuration JSON file as an option&#x27;: &#x27;&quot;calculation_config&quot;: &quot;calculation_config.json&quot; &#x27;}}}, &#x27;show_calculations&#x27;: {&#x27;help&#x27;: &#x27;Show available calculation operations.\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;hgvs_field&#x27;: {&#x27;metavar&#x27;: &#x27;HGVS field&#x27;, &#x27;help&#x27;: &#x27;HGVS INFO/tag containing a list o HGVS annotations.\\n&#x27;, &#x27;default&#x27;: &#x27;hgvs&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;extra&#x27;: {&#x27;param_section&#x27;: &#x27;calculation:calculations:NOMEN:options&#x27;}}, &#x27;transcripts&#x27;: {&#x27;metavar&#x27;: &#x27;transcripts&#x27;, &#x27;help&#x27;: &#x27;Transcripts TSV file,\\nwith Transcript in first column, optional Gene in second column.\\n&#x27;, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;TSV file (*.tsv)|*.tsv|All files (*)|*&#x27;}}, &#x27;extra&#x27;: {&#x27;param_section&#x27;: &#x27;calculation:calculations:NOMEN:options&#x27;}}, &#x27;trio_pedigree&#x27;: {&#x27;metavar&#x27;: &#x27;trio pedigree&#x27;, &#x27;help&#x27;: &#x27;Pedigree Trio for trio inheritance calculation.\\nEither a JSON file or JSON string or a list of samples\\n(e.g. \\&#x27;sample1,sample2,sample3\\&#x27; for father, mother and child,\\n \\&#x27;{&quot;father&quot;: &quot;sample1&quot;, &quot;mother&quot;: &quot;sample2&quot;, &quot;child&quot;: &quot;sample3&quot;}\\&#x27;).\\n&#x27;, &#x27;default&#x27;: None, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;JSON file (*.json)|*.json|All files (*)|*&#x27;}}, &#x27;extra&#x27;: {&#x27;param_section&#x27;: &#x27;calculation:calculations:TRIO&#x27;}}, &#x27;family_pedigree&#x27;: {&#x27;metavar&#x27;: &#x27;family pedigree&#x27;, &#x27;help&#x27;: &#x27;Pedigree family for barcode calculation on genotype.\\nEither a JSON file or JSON string or a list of samples\\n(e.g. \\&#x27;sample1,sample2,sample3,sample4\\&#x27;,\\n \\&#x27;{&quot;father&quot;: &quot;sample1&quot;, &quot;mother&quot;: &quot;sample2&quot;, &quot;child1&quot;: &quot;sample3&quot;, &quot;child2&quot;: &quot;sample3&quot;}\\&#x27;).\\n&#x27;, &#x27;default&#x27;: None, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;JSON file (*.json)|*.json|All files (*)|*&#x27;}}, &#x27;extra&#x27;: {&#x27;param_section&#x27;: &#x27;calculation:calculations:BARCODEFAMILY&#x27;}}, &#x27;stats_md&#x27;: {&#x27;metavar&#x27;: &#x27;stats markdown&#x27;, &#x27;help&#x27;: &#x27;Stats Output file in MarkDown format.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileSaver&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;Markdown file (*.md)|*.md&#x27;}}, &#x27;extra&#x27;: {&#x27;examples&#x27;: {&#x27;Export statistics in Markdown format&#x27;: &#x27;&quot;stats_md&quot;: &quot;/tmp/stats.md&quot; &#x27;}}}, &#x27;stats_json&#x27;: {&#x27;metavar&#x27;: &#x27;stats json&#x27;, &#x27;help&#x27;: &#x27;Stats Output file in JSON format.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileSaver&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;JSON file (*.json)|*.json&#x27;}}, &#x27;extra&#x27;: {&#x27;examples&#x27;: {&#x27;Export statistics in JSON format&#x27;: &#x27;&quot;stats_json&quot;: &quot;/tmp/stats.json&quot; &#x27;}}}, &#x27;assembly&#x27;: {&#x27;metavar&#x27;: &#x27;assembly&#x27;, &#x27;help&#x27;: &quot;Genome Assembly (e.g. &#x27;hg19&#x27;, &#x27;hg38&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;hg19&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;extra&#x27;: {&#x27;examples&#x27;: {&#x27;Default assembly for all analysis tools&#x27;: &#x27;&quot;assembly&quot;: &quot;hg19&quot; &#x27;, &#x27;List of assemblies for databases download tool&#x27;: &#x27;&quot;assembly&quot;: &quot;hg19,hg38&quot; &#x27;}}}, &#x27;genome&#x27;: {&#x27;metavar&#x27;: &#x27;genome&#x27;, &#x27;help&#x27;: &quot;Genome file in fasta format (e.g. &#x27;hg19.fa&#x27;, &#x27;hg38.fa&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;/Users/lebechea/howard/databases/genomes/current/hg19/hg19.fa&#x27;, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;All files (*)|*&#x27;}}}, &#x27;hgvs_options&#x27;: {&#x27;metavar&#x27;: &#x27;HGVS options&#x27;, &#x27;help&#x27;: &quot;Quick HGVS annotation options.\\nThis option will skip all other hgvs options.\\nExamples:\\n- &#x27;default&#x27; (for default options)\\n- &#x27;full_format&#x27; (for full format HGVS annotation)\\n- &#x27;use_gene=True:add_protein=true:codon_type=FULL&#x27;\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;use_gene&#x27;: {&#x27;help&#x27;: &quot;Use Gene information to generate HGVS annotation\\n(e.g. &#x27;NM_152232(TAS1R2):c.231T&gt;C&#x27;)&quot;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;use_exon&#x27;: {&#x27;help&#x27;: &quot;Use Exon information to generate HGVS annotation\\n(e.g. &#x27;NM_152232(exon2):c.231T&gt;C&#x27;).\\nOnly if &#x27;use_gene&#x27; is not enabled.\\n&quot;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;use_protein&#x27;: {&#x27;help&#x27;: &quot;Use Protein level to generate HGVS annotation\\n(e.g. &#x27;NP_689418:p.Cys77Arg&#x27;).\\nCan be used with &#x27;use_exon&#x27; or &#x27;use_gene&#x27;.\\n&quot;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;add_protein&#x27;: {&#x27;help&#x27;: &quot;Add Protein level to DNA HGVS annotation (e.g &#x27;NM_152232:c.231T&gt;C,NP_689418:p.Cys77Arg&#x27;).\\n&quot;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;full_format&#x27;: {&#x27;help&#x27;: &quot;Generates HGVS annotation in a full format\\nby using all information to generates an exhaustive annotation\\n(non-standard, e.g. &#x27;TAS1R2:NM_152232:NP_689418:c.231T&gt;C:p.Cys77Arg&#x27;).\\nUse &#x27;use_exon&#x27; to add exon information\\n(e.g &#x27;TAS1R2:NM_152232:NP_689418:exon2:c.231T&gt;C:p.Cys77Arg&#x27;).\\n&quot;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;use_version&#x27;: {&#x27;help&#x27;: &quot;Generates HGVS annotation with transcript version\\n(e.g. &#x27;NM_152232.1:c.231T&gt;C&#x27;).\\n&quot;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;codon_type&#x27;: {&#x27;metavar&#x27;: &#x27;Codon type&#x27;, &#x27;help&#x27;: &quot;Amino Acide Codon format type to use to generate HGVS annotation.\\nAvailable:\\n- &#x27;1&#x27;: codon in 1 character (e.g. &#x27;C&#x27;, &#x27;R&#x27;)\\n- &#x27;3&#x27;: codon in 3 character (e.g. &#x27;Cys&#x27;, &#x27;Arg&#x27;)\\n-&#x27;FULL&#x27;: codon in full name (e.g. &#x27;Cysteine&#x27;, &#x27;Arginine&#x27;)\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;3&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;choices&#x27;: [&#x27;1&#x27;, &#x27;3&#x27;, &#x27;FULL&#x27;], &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;Dropdown&#x27;, &#x27;options&#x27;: {}}}, &#x27;refgene&#x27;: {&#x27;metavar&#x27;: &#x27;refGene&#x27;, &#x27;help&#x27;: &#x27;Path to refGene annotation file.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;All files (*)|*&#x27;, &#x27;default_dir&#x27;: &#x27;/Users/lebechea/howard/databases/refseq/current&#x27;, &#x27;default_file&#x27;: &#x27;ncbiRefSeq.txt&#x27;, &#x27;message&#x27;: &#x27;Path to refGene annotation file&#x27;}}}, &#x27;refseqlink&#x27;: {&#x27;metavar&#x27;: &#x27;refSeqLink&#x27;, &#x27;help&#x27;: &#x27;Path to refSeqLink annotation file.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;All files (*)|*&#x27;, &#x27;default_dir&#x27;: &#x27;/Users/lebechea/howard/databases/refseq/current&#x27;, &#x27;default_file&#x27;: &#x27;ncbiRefSeq.txt&#x27;, &#x27;message&#x27;: &#x27;Path to refGeneLink annotation file&#x27;}}}, &#x27;refseq-folder&#x27;: {&#x27;metavar&#x27;: &#x27;refseq folder&#x27;, &#x27;help&#x27;: &#x27;Folder containing refSeq files.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;/Users/lebechea/howard/databases/refseq/current&#x27;, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;DirChooser&#x27;, &#x27;options&#x27;: {&#x27;default_dir&#x27;: &#x27;/Users/lebechea/howard/databases/refseq/current&#x27;, &#x27;message&#x27;: &#x27;Path to refGenefolder&#x27;}}}, &#x27;download-genomes&#x27;: {&#x27;metavar&#x27;: &#x27;genomes&#x27;, &#x27;help&#x27;: &quot;Path to genomes folder\\nwith Fasta files, indexes,\\nand all files generated by pygenome module.\\n(e.g. &#x27;/Users/lebechea/howard/databases/genomes/current&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;DirChooser&#x27;, &#x27;options&#x27;: {&#x27;default_dir&#x27;: &#x27;/Users/lebechea/howard/databases&#x27;, &#x27;message&#x27;: &#x27;Path to genomes folder&#x27;}}}, &#x27;download-genomes-provider&#x27;: {&#x27;metavar&#x27;: &#x27;genomes provider&#x27;, &#x27;help&#x27;: &#x27;Download Genome from an external provider.\\nAvailable: GENCODE, Ensembl, UCSC, NCBI.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;UCSC&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;choices&#x27;: [&#x27;GENCODE&#x27;, &#x27;Ensembl&#x27;, &#x27;UCSC&#x27;, &#x27;NCBI&#x27;], &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;Dropdown&#x27;, &#x27;options&#x27;: {}}}, &#x27;download-genomes-contig-regex&#x27;: {&#x27;metavar&#x27;: &#x27;genomes contig regex&#x27;, &#x27;help&#x27;: &quot;Regular expression to select specific chromosome\\n(e.g &#x27;chr[0-9XYM]+$&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-annovar&#x27;: {&#x27;metavar&#x27;: &#x27;Annovar&#x27;, &#x27;help&#x27;: &quot;Path to Annovar databases\\n(e.g. &#x27;/Users/lebechea/howard/databases/annovar/current&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;default&#x27;: None, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;DirChooser&#x27;, &#x27;options&#x27;: {&#x27;default_dir&#x27;: &#x27;/Users/lebechea/howard/databases&#x27;, &#x27;message&#x27;: &#x27;Path to Annovar databases folder&#x27;}}}, &#x27;download-annovar-files&#x27;: {&#x27;metavar&#x27;: &#x27;Annovar code&#x27;, &#x27;help&#x27;: &quot;Download Annovar databases for a list of Annovar file code (see Annovar Doc).\\nUse None to donwload all available files,\\nor Annovar keyword (e.g. &#x27;refGene&#x27;, &#x27;cosmic70&#x27;, &#x27;clinvar_202*&#x27;).\\nNote that refGene will at least be downloaded,\\nand only files that not already exist or changed will be downloaded.\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-annovar-url&#x27;: {&#x27;metavar&#x27;: &#x27;Annovar url&#x27;, &#x27;help&#x27;: &#x27;Annovar databases URL (see Annovar Doc).\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;http://www.openbioinformatics.org/annovar/download&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-snpeff&#x27;: {&#x27;metavar&#x27;: &#x27;snpEff&#x27;, &#x27;help&#x27;: &#x27;Download snpEff databases within snpEff folder&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;DirChooser&#x27;, &#x27;options&#x27;: {&#x27;default_dir&#x27;: &#x27;/Users/lebechea/howard/databases&#x27;, &#x27;message&#x27;: &#x27;Path to snpEff databases folder&#x27;}}}, &#x27;download-refseq&#x27;: {&#x27;metavar&#x27;: &#x27;refSeq&#x27;, &#x27;help&#x27;: &quot;Path to refSeq databases\\n(e.g. &#x27;/Users/lebechea/howard/databases/refseq/current&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;DirChooser&#x27;, &#x27;options&#x27;: {&#x27;default_dir&#x27;: &#x27;/Users/lebechea/howard/databases&#x27;, &#x27;message&#x27;: &#x27;Path to refGene files folder&#x27;}}}, &#x27;download-refseq-url&#x27;: {&#x27;metavar&#x27;: &#x27;refSeq url&#x27;, &#x27;help&#x27;: &quot;refSeq databases URL (see refSeq WebSite)\\n(e.g. &#x27;http://hgdownload.soe.ucsc.edu/goldenPath&#x27;)\u2022/n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;http://hgdownload.soe.ucsc.edu/goldenPath&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-refseq-prefix&#x27;: {&#x27;metavar&#x27;: &#x27;refSeq prefix&#x27;, &#x27;help&#x27;: &#x27;Check existing refSeq files in refSeq folder.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;ncbiRefSeq&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-refseq-files&#x27;: {&#x27;metavar&#x27;: &#x27;refSeq files&#x27;, &#x27;help&#x27;: &#x27;List of refSeq files to download.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;ncbiRefSeq.txt,ncbiRefSeqLink.txt&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-refseq-format-file&#x27;: {&#x27;metavar&#x27;: &#x27;refSeq format file&#x27;, &#x27;help&#x27;: &quot;Name of refSeq file to convert in BED format\\n(e.g. &#x27;ncbiRefSeq.txt&#x27;).\\nProcess only if not None.\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-refseq-include-utr5&#x27;: {&#x27;help&#x27;: &quot;Formating BED refSeq file including 5&#x27;UTR.\\n&quot;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;download-refseq-include-utr3&#x27;: {&#x27;help&#x27;: &quot;Formating BED refSeq file including 3&#x27;UTR.\\n&quot;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;download-refseq-include-chrM&#x27;: {&#x27;help&#x27;: &quot;Formating BED refSeq file including Mitochondiral chromosome &#x27;chrM&#x27; or &#x27;chrMT&#x27;.\\n&quot;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;download-refseq-include-non-canonical-chr&#x27;: {&#x27;help&#x27;: &#x27;Formating BED refSeq file including non canonical chromosomes.\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;download-refseq-include-non-coding-transcripts&#x27;: {&#x27;help&#x27;: &#x27;Formating BED refSeq file including non coding transcripts.\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;download-refseq-include-transcript-version&#x27;: {&#x27;help&#x27;: &#x27;Formating BED refSeq file including transcript version.\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;download-dbnsfp&#x27;: {&#x27;metavar&#x27;: &#x27;dbNSFP&#x27;, &#x27;help&#x27;: &quot;Download dbNSFP databases within dbNSFP folder(e.g. &#x27;/Users/lebechea/howard/databases&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;DirChooser&#x27;, &#x27;options&#x27;: {&#x27;default_dir&#x27;: &#x27;/Users/lebechea/howard/databases&#x27;, &#x27;message&#x27;: &#x27;Path to dbNSFP databases folder&#x27;}}}, &#x27;download-dbnsfp-url&#x27;: {&#x27;metavar&#x27;: &#x27;dbNSFP url&#x27;, &#x27;help&#x27;: &quot;Download dbNSFP databases URL (see dbNSFP website)\\n(e.g. https://dbnsfp.s3.amazonaws.com&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;https://dbnsfp.s3.amazonaws.com&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-dbnsfp-release&#x27;: {&#x27;metavar&#x27;: &#x27;dnNSFP release&#x27;, &#x27;help&#x27;: &quot;Release of dbNSFP to download (see dbNSFP website)\\n(e.g. &#x27;4.4a&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;4.4a&#x27;}, &#x27;download-dbnsfp-parquet-size&#x27;: {&#x27;metavar&#x27;: &#x27;dbNSFP parquet size&#x27;, &#x27;help&#x27;: &#x27;Maximum size (Mb) of data files in Parquet folder.\\nParquet folder are partitioned (hive) by chromosome (sub-folder),\\nwhich contain N data files.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: 100, &#x27;type&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;IntegerField&#x27;, &#x27;options&#x27;: {&#x27;min&#x27;: 1, &#x27;max&#x27;: 100000, &#x27;increment&#x27;: 10}}}, &#x27;download-dbnsfp-subdatabases&#x27;: {&#x27;help&#x27;: &#x27;Generate dbNSFP sub-databases.\\ndbNSFP provides multiple databases which are split onto multiple columns.\\nThis option create a Parquet folder for each sub-database (based on columns names).\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;download-dbnsfp-parquet&#x27;: {&#x27;help&#x27;: &#x27;Generate a Parquet file for each Parquet folder.\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;download-dbnsfp-vcf&#x27;: {&#x27;help&#x27;: &#x27;Generate a VCF file for each Parquet folder.\\nNeed genome FASTA file (see --download-genome).\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;download-dbnsfp-no-files-all&#x27;: {&#x27;help&#x27;: &quot;Not generate database Parquet/VCF file for the entire database (&#x27;ALL&#x27;).\\nOnly sub-databases files will be generated.\\n(see &#x27;--download-dbnsfp-subdatabases&#x27;).\\n&quot;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;download-dbnsfp-add-info&#x27;: {&#x27;help&#x27;: &#x27;Add INFO column (VCF format) in Parquet folder and file.\\nUseful for speed up full annotation (all available columns).\\nIncrease memory and space during generation of files.\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;download-dbnsfp-only-info&#x27;: {&#x27;help&#x27;: &#x27;Add only INFO column (VCF format) in Parquet folder and file.\\nUseful for speed up full annotation (all available columns).\\nDecrease memory and space during generation of files.\\nIncrease time for partial annotation (some available columns).\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;download-dbnsfp-uniquify&#x27;: {&#x27;help&#x27;: &#x27;Uniquify values within column\\n(e.g. &quot;D,D&quot; to &quot;D&quot;, &quot;D,.,T&quot; to &quot;D,T&quot;).\\nRemove transcripts information details.\\nUsefull to reduce size of the database.\\nIncrease memory and space during generation of files.\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;download-dbnsfp-row-group-size&#x27;: {&#x27;metavar&#x27;: &#x27;dnNSFP row grooup size&#x27;, &#x27;help&#x27;: &#x27;Minimum number of rows in a parquet row group (see duckDB doc).\\nLower can reduce memory usage and slightly increase space during generation,\\nspeed up highly selective queries, slow down whole file queries (e.g. aggregations).\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: 100000, &#x27;type&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;IntegerField&#x27;, &#x27;options&#x27;: {&#x27;min&#x27;: 1, &#x27;max&#x27;: 100000000000, &#x27;increment&#x27;: 10000}}}, &#x27;download-alphamissense&#x27;: {&#x27;metavar&#x27;: &#x27;AlphaMissense&#x27;, &#x27;help&#x27;: &#x27;Path to AlphaMissense databases&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;DirChooser&#x27;, &#x27;options&#x27;: {&#x27;default_dir&#x27;: &#x27;/Users/lebechea/howard/databases&#x27;, &#x27;message&#x27;: &#x27;Path to Alphamissense databases folder&#x27;}}}, &#x27;download-alphamissense-url&#x27;: {&#x27;metavar&#x27;: &#x27;AlphaMissense url&#x27;, &#x27;help&#x27;: &quot;Download AlphaMissense databases URL (see AlphaMissense website)\\n(e.g. &#x27;https://storage.googleapis.com/dm_alphamissense&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;https://storage.googleapis.com/dm_alphamissense&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-exomiser&#x27;: {&#x27;metavar&#x27;: &#x27;Exomiser&#x27;, &#x27;help&#x27;: &#x27;Path to Exomiser databases\\n(e.g. /Users/lebechea/howard/databases/exomiser/current).\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;DirChooser&#x27;, &#x27;options&#x27;: {&#x27;default_dir&#x27;: &#x27;/Users/lebechea/howard/databases&#x27;, &#x27;message&#x27;: &#x27;Path to Exomiser databases folder&#x27;}}}, &#x27;download-exomiser-application-properties&#x27;: {&#x27;metavar&#x27;: &#x27;Exomiser application properties&#x27;, &#x27;help&#x27;: &quot;Exomiser Application Properties configuration file (see Exomiser website).\\nThis file contains configuration settings for the Exomiser tool.\\nIf this parameter is not provided, the function will attempt to locate\\nthe application properties file automatically based on the Exomiser.\\nConfiguration information will be used to download expected releases (if no other parameters).\\nCADD and REMM will be downloaded only if &#x27;path&#x27; are provided.\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;All files (*)|*&#x27;, &#x27;options&#x27;: {&#x27;default_dir&#x27;: &#x27;/Users/lebechea/howard/databases/exomiser/current&#x27;, &#x27;message&#x27;: &#x27;Path to Exomiser application properties file&#x27;}}}}, &#x27;download-exomiser-url&#x27;: {&#x27;metavar&#x27;: &#x27;Exomiser url&#x27;, &#x27;help&#x27;: &quot;URL where Exomiser database files can be downloaded from\\n(e.g. &#x27;http://data.monarchinitiative.org/exomiser&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;http://data.monarchinitiative.org/exomiser&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-exomiser-release&#x27;: {&#x27;metavar&#x27;: &#x27;Exomiser release&#x27;, &#x27;help&#x27;: &#x27;Release of Exomiser data to download.\\nIf &quot;default&quot;, &quot;auto&quot;, or &quot;config&quot;, retrieve from Application Properties file.\\nIf not provided (None), from Application Properties file (Exomiser data-version) \\nor default \\&#x27;2109\\&#x27;.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-exomiser-phenotype-release&#x27;: {&#x27;metavar&#x27;: &#x27;Exomiser phenoptye release&#x27;, &#x27;help&#x27;: &#x27;Release of Exomiser phenotype to download.\\nIf not provided (None), from Application Properties file (Exomiser Phenotype data-version)\\nor Exomiser release.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-exomiser-remm-release&#x27;: {&#x27;metavar&#x27;: &#x27;Exomiser remm release&#x27;, &#x27;help&#x27;: &#x27;Release of ReMM (Regulatory Mendelian Mutation) database to download.\\nIf &quot;default&quot;, &quot;auto&quot;, or &quot;config&quot;, retrieve from Application Properties file.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-exomiser-remm-url&#x27;: {&#x27;metavar&#x27;: &#x27;Exomiser remm url&#x27;, &#x27;help&#x27;: &quot;URL where ReMM (Regulatory Mendelian Mutation) database files can be downloaded from\\n(e.g. &#x27;https://kircherlab.bihealth.org/download/ReMM&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;https://kircherlab.bihealth.org/download/ReMM&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-exomiser-cadd-release&#x27;: {&#x27;metavar&#x27;: &#x27;Exomiser cadd release&#x27;, &#x27;help&#x27;: &#x27;Release of CADD (Combined Annotation Dependent Depletion) database to download.\\nIf &quot;default&quot;, &quot;auto&quot;, or &quot;config&quot;, retrieve from Application Properties file.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-exomiser-cadd-url&#x27;: {&#x27;metavar&#x27;: &#x27;Exomiser cadd url&#x27;, &#x27;help&#x27;: &quot;URL where CADD (Combined Annotation Dependent Depletion) database files can be downloaded from\\n(e.g. &#x27;https://kircherlab.bihealth.org/download/CADD&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;https://kircherlab.bihealth.org/download/CADD&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-exomiser-cadd-url-snv-file&#x27;: {&#x27;metavar&#x27;: &#x27;Exomiser url snv file&#x27;, &#x27;help&#x27;: &#x27;Name of the file containing the SNV (Single Nucleotide Variant) data\\nfor the CADD (Combined Annotation Dependent Depletion) database.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;whole_genome_SNVs.tsv.gz&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-exomiser-cadd-url-indel-file&#x27;: {&#x27;metavar&#x27;: &#x27;Exomiser cadd url indel&#x27;, &#x27;help&#x27;: &#x27;Name of the file containing the INDEL (Insertion-Deletion) data\\nfor the CADD (Combined Annotation Dependent Depletion) database.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;InDels.tsv.gz&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-dbsnp&#x27;: {&#x27;metavar&#x27;: &#x27;dnSNP&#x27;, &#x27;help&#x27;: &quot;Path to dbSNP databases\\n(e.g. &#x27;/Users/lebechea/howard/databases/exomiser/dbsnp&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;DirChooser&#x27;, &#x27;options&#x27;: {&#x27;default_dir&#x27;: &#x27;/Users/lebechea/howard/databases&#x27;, &#x27;message&#x27;: &#x27;Path to dbSNP databases folder&#x27;}}}, &#x27;download-dbsnp-releases&#x27;: {&#x27;metavar&#x27;: &#x27;dnSNP releases&#x27;, &#x27;help&#x27;: &quot;Release of dbSNP to download\\n(e.g. &#x27;b152&#x27;, &#x27;b152,b156&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;b156&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-dbsnp-release-default&#x27;: {&#x27;metavar&#x27;: &#x27;dnSNP release default&#x27;, &#x27;help&#x27;: &quot;Default Release of dbSNP (&#x27;default&#x27; symlink)\\n(e.g. &#x27;b156&#x27;).\\nIf None, first release to download will be assigned as default\\nonly if it does not exists.\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-dbsnp-url&#x27;: {&#x27;metavar&#x27;: &#x27;dbSNP url&#x27;, &#x27;help&#x27;: &quot;URL where dbSNP database files can be downloaded from.\\n(e.g. &#x27;https://ftp.ncbi.nih.gov/snp/archive&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;https://ftp.ncbi.nih.gov/snp/archive&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-dbsnp-url-files&#x27;: {&#x27;metavar&#x27;: &#x27;dbSNP url files&#x27;, &#x27;help&#x27;: &#x27;Dictionary that maps assembly names to specific dbSNP URL files.\\nIt allows you to provide custom dbSNP URL files for specific assemblies\\ninstead of using the default file naming convention.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-dbsnp-url-files-prefix&#x27;: {&#x27;metavar&#x27;: &#x27;dbSNP url files prefix&#x27;, &#x27;help&#x27;: &#x27;String that represents the prefix of the dbSNP file name for a specific assembly.\\nIt is used to construct the full URL of the dbSNP file to be downloaded.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;GCF_000001405&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;download-dbsnp-assemblies-map&#x27;: {&#x27;metavar&#x27;: &#x27;dbSNP assemblies map&#x27;, &#x27;help&#x27;: &#x27;dictionary that maps assembly names to their corresponding dbSNP versions.\\nIt is used to construct the dbSNP file name based on the assembly name.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: {&#x27;hg19&#x27;: &#x27;25&#x27;, &#x27;hg38&#x27;: &#x27;40&#x27;}, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;gooey&#x27;: {&#x27;options&#x27;: {&#x27;initial_value&#x27;: &#x27;{&quot;hg19&quot;: &quot;25&quot;, &quot;hg38&quot;: &quot;40&quot;}&#x27;}}}, &#x27;download-dbsnp-vcf&#x27;: {&#x27;help&#x27;: &#x27;Generate well-formatted VCF from downloaded file:\\n- Add and filter contigs associated to assembly\\n- Normalize by splitting multiallelics\\n- Need genome (see --download-genome)\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;download-dbsnp-parquet&#x27;: {&#x27;help&#x27;: &#x27;Generate Parquet file from VCF.\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;convert-hgmd&#x27;: {&#x27;metavar&#x27;: &#x27;HGMD&#x27;, &#x27;help&#x27;: &#x27;Convert HGMD databases.\\nFolder where the HGMD databases will be stored.\\nFields in VCF, Parquet and TSV will be generated.\\nIf the folder does not exist, it will be created.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;DirChooser&#x27;}}, &#x27;convert-hgmd-file&#x27;: {&#x27;metavar&#x27;: &#x27;HGMD file&#x27;, &#x27;help&#x27;: &quot;File from HGMD.\\nName format &#x27;HGMD_Pro_&lt;release&gt;_&lt;assembly&gt;.vcf.gz&#x27;.\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;}}, &#x27;convert-hgmd-basename&#x27;: {&#x27;metavar&#x27;: &#x27;HGMD basename&#x27;, &#x27;help&#x27;: &quot;File output basename.\\nGenerated files will be prefixed by basename\\n(e.g. &#x27;HGMD_Pro_MY_RELEASE&#x27;)\\nBy default (None), input file name without &#x27;.vcf.gz&#x27;.\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;generate-param&#x27;: {&#x27;metavar&#x27;: &#x27;param&#x27;, &#x27;help&#x27;: &#x27;Parameter file (JSON) with all databases found.\\nDatabases folders scanned are defined in config file.\\nStructure of databases follow this structure (see doc):\\n.../&lt;database&gt;/&lt;release&gt;/&lt;assembly&gt;/*.[parquet|vcf.gz|...]\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileSaver&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;JSON file (*.json)|*.json&#x27;}}}, &#x27;generate-param-description&#x27;: {&#x27;metavar&#x27;: &#x27;param description&#x27;, &#x27;help&#x27;: &#x27;Description file (JSON) with all databases found.\\nContains all databases with description of format, assembly, fields...\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileSaver&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;JSON file (*.json)|*.json&#x27;}}}, &#x27;generate-param-releases&#x27;: {&#x27;metavar&#x27;: &#x27;param release&#x27;, &#x27;help&#x27;: &quot;List of database folder releases to check\\n(e.g. &#x27;current&#x27;, &#x27;latest&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;current&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;generate-param-formats&#x27;: {&#x27;metavar&#x27;: &#x27;param formats&#x27;, &#x27;help&#x27;: &quot;List of database formats to check\\n(e.g. &#x27;parquet&#x27;, &#x27;parquet,vcf,bed,tsv&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;parquet&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;generate-param-bcftools&#x27;: {&#x27;help&#x27;: &quot;Generate parameter JSON file with BCFTools annotation for allowed formats\\n(i.e. &#x27;vcf&#x27;, &#x27;bed&#x27;).\\n&quot;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;help_md&#x27;: {&#x27;metavar&#x27;: &#x27;help markdown&#x27;, &#x27;help&#x27;: &#x27;Help Output file in MarkDown format.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileSaver&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;HTML file (*.md)|*.md&#x27;}}}, &#x27;help_html&#x27;: {&#x27;metavar&#x27;: &#x27;help html&#x27;, &#x27;help&#x27;: &#x27;Help Output file in HTML format.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileSaver&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;HTML file (*.html)|*.html&#x27;}}}, &#x27;help_pdf&#x27;: {&#x27;metavar&#x27;: &#x27;help pdf&#x27;, &#x27;help&#x27;: &#x27;Help Output file in PDF format.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileSaver&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;PDF file (*.pdf)|*.pdf&#x27;}}}, &#x27;help_json_input&#x27;: {&#x27;metavar&#x27;: &#x27;help JSON input&#x27;, &#x27;help&#x27;: &#x27;Help input file in JSON format.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;JSON file (*.json)|*.json|All files (*)|*&#x27;}}}, &#x27;help_md_input&#x27;: {&#x27;metavar&#x27;: &#x27;help MarkDown input&#x27;, &#x27;help&#x27;: &#x27;Help input file in MarkDown format.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;MarkDown file (*.md)|*.md|All files (*)|*&#x27;}}}, &#x27;code_type&#x27;: {&#x27;metavar&#x27;: &#x27;example code type&#x27;, &#x27;help&#x27;: &quot;Help example code type for input JSON format\\n(e.g. &#x27;json&#x27;, &#x27;bash&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;help_json_input_title&#x27;: {&#x27;metavar&#x27;: &#x27;help JSON input title&#x27;, &#x27;help&#x27;: &#x27;Help JSON input title.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;Help&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;genomes-folder&#x27;: {&#x27;metavar&#x27;: &#x27;genomes&#x27;, &#x27;help&#x27;: &quot;Folder containing genomes.\\n(e.g. &#x27;/Users/lebechea/howard/databases/genomes/current&#x27;&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;/Users/lebechea/howard/databases/genomes/current&#x27;, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;DirChooser&#x27;, &#x27;options&#x27;: {&#x27;default_dir&#x27;: &#x27;/Users/lebechea/howard/databases/genomes/current&#x27;, &#x27;message&#x27;: &#x27;Path to genomes databases folder&#x27;}}}, &#x27;config&#x27;: {&#x27;metavar&#x27;: &#x27;config&#x27;, &#x27;help&#x27;: &#x27;Configuration JSON file defined default configuration regarding \\nresources (e.g. threads, memory),\\nsettings (e.g. verbosity, temporary files),\\ndefault folders (e.g. for databases)\\nand paths to external tools.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: &#x27;{}&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;, &#x27;options&#x27;: {&#x27;initial_value&#x27;: &#x27;{}&#x27;}}}, &#x27;threads&#x27;: {&#x27;metavar&#x27;: &#x27;threads&#x27;, &#x27;help&#x27;: &#x27;Specify the number of threads to use for processing HOWARD.\\nIt determines the level of parallelism,\\neither on python scripts, duckdb engine and external tools.\\nIt and can help speed up the process/tool.\\nUse -1 to use all available CPU/cores.\\nEither non valid value is 1 CPU/core.\\n&#x27;, &#x27;required&#x27;: False, &#x27;type&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;default&#x27;: -1, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;IntegerField&#x27;, &#x27;options&#x27;: {&#x27;min&#x27;: -1, &#x27;max&#x27;: 1000, &#x27;increment&#x27;: 1}}, &#x27;extra&#x27;: {&#x27;examples&#x27;: {&#x27;# Automatically detect all available CPU/cores&#x27;: &#x27;&quot;threads&quot;: -1&#x27;, &#x27;# Define 8 CPU/cores&#x27;: &#x27;&quot;threads&quot;: 8&#x27;}}}, &#x27;memory&#x27;: {&#x27;metavar&#x27;: &#x27;memory&#x27;, &#x27;help&#x27;: &quot;Specify the memory to use in format FLOAT[kMG]\\n(e.g. &#x27;8G&#x27;, &#x27;12.42G&#x27;, &#x27;1024M&#x27;).\\nIt determines the amount of memory for duckDB engine and external tools\\n(especially for JAR programs).\\nIt can help to prevent &#x27;out of memory&#x27; failures.\\nBy default (None) is 80%% of RAM (for duckDB).\\n&quot;, &#x27;required&#x27;: False, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;default&#x27;: None, &#x27;extra&#x27;: {&#x27;format&#x27;: &#x27;FLOAT[kMG]&#x27;, &#x27;examples&#x27;: {&#x27;# Automatically detect all available CPU/cores&#x27;: &#x27;&quot;threads&quot;: -1&#x27;, &#x27;# Define 8 CPU/cores&#x27;: &#x27;&quot;threads&quot;: 8&#x27;}}}, &#x27;chunk_size&#x27;: {&#x27;metavar&#x27;: &#x27;chunk size&#x27;, &#x27;help&#x27;: &#x27;Number of records in batch to export output file.\\nThe lower the chunk size, the less memory consumption.\\nFor Parquet partitioning, files size will depend on the chunk size.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: 1000000, &#x27;type&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;IntegerField&#x27;, &#x27;options&#x27;: {&#x27;min&#x27;: 1, &#x27;max&#x27;: 100000000000, &#x27;increment&#x27;: 10000}}, &#x27;extra&#x27;: {&#x27;examples&#x27;: {&#x27;Chunk size of 1.000.000 by default&#x27;: &#x27;&quot;chunk_size&quot;: 1000000&#x27;, &#x27;Smaller chunk size to reduce Parquet file size and memory usage&#x27;: &#x27;&quot;chunk_size&quot;: 100000&#x27;}}}, &#x27;tmp&#x27;: {&#x27;metavar&#x27;: &#x27;Temporary folder&#x27;, &#x27;help&#x27;: &quot;Temporary folder (e.g. &#x27;/tmp&#x27;).\\nBy default, &#x27;.tmp&#x27; for duckDB (see doc),external tools and python scripts.\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;DirChooser&#x27;}, &#x27;extra&#x27;: {&#x27;examples&#x27;: {&#x27;# System temporary folder&#x27;: &#x27;&quot;tmp&quot;: &quot;/tmp&quot;&#x27;, &#x27;# HOWARD work directory&#x27;: &#x27;&quot;tmp&quot;: &quot;~/howard/tmp&quot;&#x27;, &#x27;# Current work directory&#x27;: &#x27;&quot;tmp&quot;: &quot;.tmp&quot;&#x27;}}}, &#x27;duckdb_settings&#x27;: {&#x27;metavar&#x27;: &#x27;duckDB settings&#x27;, &#x27;help&#x27;: &#x27;DuckDB settings (see duckDB doc) as JSON (string or file).\\nThese settings have priority (see options \\&#x27;threads\\&#x27;, \\&#x27;tmp\\&#x27;...).\\nExamples: \\&#x27;{&quot;TimeZone&quot;: &quot;GMT&quot;, &quot;temp_directory&quot;: &quot;/tmp/duckdb&quot;, &quot;threads&quot;: 8}\\&#x27;.\\n&#x27;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileChooser&#x27;, &#x27;options&#x27;: {&#x27;wildcard&#x27;: &#x27;JSON file (*.json)|*.json|All files (*)|*&#x27;}}, &#x27;extra&#x27;: {&#x27;examples&#x27;: {&#x27;DuckDB settings JSON file&#x27;: &#x27;&quot;duckdb_settings&quot;: &quot;/path/to/duckdb_config.json&quot;&#x27;, &#x27;JSON string for Time zone, temporary directory and threads for duckDB&#x27;: &#x27;&quot;duckdb_settings&quot;: {\\n   &quot;TimeZone&quot;: &quot;GMT&quot;,\\n   &quot;temp_directory&quot;: &quot;/tmp/duckdb&quot;,\\n   &quot;threads&quot;: 8\\n}&#x27;}}}, &#x27;verbosity&#x27;: {&#x27;metavar&#x27;: &#x27;verbosity&#x27;, &#x27;help&#x27;: &#x27;Verbosity level\\nAvailable: CRITICAL, ERROR, WARNING, INFO, DEBUG or NOTSET\\n- DEBUG: Detailed information, typically of interest only when diagnosing problems.\\n- INFO: Confirmation that things are working as expected.\\n- WARNING: An indication that something unexpected happened.\\n- ERROR: Due to a more serious problem.\\n- CRITICAL: A serious error.\\n- NOTSET: All messages.\\n&#x27;, &#x27;required&#x27;: False, &#x27;choices&#x27;: [&#x27;CRITICAL&#x27;, &#x27;ERROR&#x27;, &#x27;WARNING&#x27;, &#x27;INFO&#x27;, &#x27;DEBUG&#x27;, &#x27;NOTSET&#x27;], &#x27;default&#x27;: &#x27;INFO&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;Dropdown&#x27;, &#x27;options&#x27;: {}}, &#x27;extra&#x27;: {&#x27;examples&#x27;: {&#x27;Default verbosity&#x27;: &#x27;&quot;verbosity&quot;: &quot;INFO&quot;&#x27;, &#x27;ERROR level (quiet mode)&#x27;: &#x27;&quot;verbosity&quot;: &quot;ERROR&quot;&#x27;, &#x27;For debug&#x27;: &#x27;&quot;verbosity&quot;: &quot;DEBUG&quot;&#x27;}}}, &#x27;access&#x27;: {&#x27;metavar&#x27;: &#x27;access mode&#x27;, &#x27;help&#x27;: &quot;Access mode to variants file or database.\\nEither &#x27;RW&#x27; for Read and Write, or &#x27;RO&#x27; for Read Only.\\n&quot;, &#x27;default&#x27;: &#x27;RW&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;choices&#x27;: [&#x27;RW&#x27;, &#x27;RO&#x27;], &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;Dropdown&#x27;, &#x27;options&#x27;: {}}, &#x27;extra&#x27;: {&#x27;examples&#x27;: {&#x27;Read and Write mode&#x27;: &#x27;&quot;access&quot;: &quot;RW&quot;&#x27;, &#x27;Read only mode&#x27;: &#x27;&quot;access&quot;: &quot;RO&quot;&#x27;}}}, &#x27;log&#x27;: {&#x27;metavar&#x27;: &#x27;log&#x27;, &#x27;help&#x27;: &quot;Logs file\\n(e.g. &#x27;my.log&#x27;).\\n&quot;, &#x27;required&#x27;: False, &#x27;default&#x27;: None, &#x27;type&#x27;: &lt;howard.tools.tools.PathType object&gt;, &#x27;gooey&#x27;: {&#x27;widget&#x27;: &#x27;FileSaver&#x27;}, &#x27;extra&#x27;: {&#x27;examples&#x27;: {&#x27;Relative path to log file&#x27;: &#x27;&quot;log&quot;: &quot;my.log&quot;&#x27;, &#x27;# HOWARD work directory&#x27;: &#x27;&quot;log&quot;: &quot;~/howard/log&quot;&#x27;, &#x27;Full path to log file&#x27;: &#x27;&quot;log&quot;: &quot;/tmp/my.log&quot;&#x27;}}}, &#x27;quiet&#x27;: {&#x27;help&#x27;: &#x27;==SUPPRESS==&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;verbose&#x27;: {&#x27;help&#x27;: &#x27;==SUPPRESS==&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;debug&#x27;: {&#x27;help&#x27;: &#x27;==SUPPRESS==&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;databases_folder&#x27;: {&#x27;help&#x27;: &#x27;Path of HOWARD database folder.\\n&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;default&#x27;: &#x27;/Users/lebechea/howard/databases&#x27;}, &#x27;database&#x27;: {&#x27;help&#x27;: &#x27;Which database to update.\\n&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;default&#x27;: &#x27;clinvar&#x27;, &#x27;choices&#x27;: [&#x27;clinvar&#x27;]}, &#x27;update_config&#x27;: {&#x27;help&#x27;: &#x27;Path of json configuration file.\\n&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;}, &#x27;current_folder&#x27;: {&#x27;help&#x27;: &#x27;Path of json configuration file.\\n&#x27;, &#x27;type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;default&#x27;: &#x27;current&#x27;}, &#x27;genebe_use_refseq&#x27;: {&#x27;help&#x27;: &#x27;Use refSeq to annotate (default).\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;genebe_use_ensembl&#x27;: {&#x27;help&#x27;: &#x27;Use Ensembl to annotate.\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;not_flatten_consequences&#x27;: {&#x27;help&#x27;: &#x27;Use exploded annotation informations.\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;minimalize_info&#x27;: {&#x27;help&#x27;: &quot;Minimalize INFO field (e.g. &#x27;.&#x27; value).\\n&quot;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;minimalize_id&#x27;: {&#x27;help&#x27;: &quot;Minimalize ID field (e.g. &#x27;.&#x27; value).\\n&quot;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;minimalize_qual&#x27;: {&#x27;help&#x27;: &quot;Minimalize QUAL field (e.g. &#x27;.&#x27; value).\\n&quot;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;minimalize_filter&#x27;: {&#x27;help&#x27;: &quot;Minimalize FILTER field (e.g. &#x27;.&#x27; value).\\n&quot;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;minimalize_samples&#x27;: {&#x27;help&#x27;: &quot;Minimalize samples to keep only genotypes (i.e. &#x27;GT&#x27;).\\n&quot;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}, &#x27;remove_samples&#x27;: {&#x27;help&#x27;: &#x27;Remove all samples to keep only variants.\\n&#x27;, &#x27;action&#x27;: &#x27;store_true&#x27;, &#x27;default&#x27;: False}}, &#x27;commands_arguments&#x27;: {&#x27;query&#x27;: {&#x27;function&#x27;: &#x27;query&#x27;, &#x27;description&#x27;: &quot;Query genetic variations in SQL format. Data can be loaded into &#x27;variants&#x27; table from various formats (e.g. VCF, TSV, Parquet...). Using --explode_infos allow query on INFO/tag annotations. SQL query can also use external data within the request, such as a Parquet file(s).  &quot;, &#x27;help&#x27;: &#x27;Query genetic variations file in SQL format.&#x27;, &#x27;epilog&#x27;: &#x27;Usage examples:\\n   howard query --input=tests/data/example.vcf.gz --query=&quot;SELECT * FROM variants WHERE REF = \\&#x27;A\\&#x27; AND POS &lt; 100000&quot; \\n   howard query --input=tests/data/example.vcf.gz --explode_infos --query=\\&#x27;SELECT &quot;#CHROM&quot;, POS, REF, ALT, DP, CLNSIG, sample2, sample3 FROM variants WHERE DP &gt;= 50 OR CLNSIG NOT NULL ORDER BY DP DESC\\&#x27; \\n   howard query --query=&quot;SELECT \\\\&quot;#CHROM\\\\&quot;, POS, REF, ALT, \\\\&quot;INFO/Interpro_domain\\\\&quot; FROM \\&#x27;tests/databases/annotations/current/hg19/dbnsfp42a.parquet\\&#x27; WHERE \\\\&quot;INFO/Interpro_domain\\\\&quot; NOT NULL ORDER BY \\\\&quot;INFO/SiPhy_29way_logOdds_rankscore\\\\&quot; DESC LIMIT 10&quot; \\n   howard query --explode_infos --explode_infos_prefix=\\&#x27;INFO/\\&#x27; --query=&quot;SELECT \\\\&quot;#CHROM\\\\&quot;, POS, REF, ALT, STRING_AGG(INFO, \\&#x27;;\\&#x27;) AS INFO FROM \\&#x27;tests/databases/annotations/current/hg19/*.parquet\\&#x27; GROUP BY \\\\&quot;#CHROM\\\\&quot;, POS, REF, ALT&quot; --output=/tmp/full_annotation.tsv  &amp;&amp; head -n2 /tmp/full_annotation.tsv \\n   howard query --input=tests/data/example.vcf.gz --param=config/param.json \\n    \\n&#x27;, &#x27;groups&#x27;: {&#x27;main&#x27;: {&#x27;input&#x27;: False, &#x27;output&#x27;: False, &#x27;param&#x27;: False, &#x27;query&#x27;: False}, &#x27;Explode&#x27;: {&#x27;explode_infos&#x27;: False, &#x27;explode_infos_prefix&#x27;: False, &#x27;explode_infos_fields&#x27;: False}, &#x27;Query&#x27;: {&#x27;query_limit&#x27;: False, &#x27;query_print_mode&#x27;: False}, &#x27;Export&#x27;: {&#x27;include_header&#x27;: False, &#x27;parquet_partitions&#x27;: False}}}, &#x27;stats&#x27;: {&#x27;function&#x27;: &#x27;stats&#x27;, &#x27;description&#x27;: &#x27;Statistics on genetic variations, such as: number of variants, number of samples, statistics by chromosome, genotypes by samples...&#x27;, &#x27;help&#x27;: &#x27;Statistics on genetic variations file.&#x27;, &#x27;epilog&#x27;: &#x27;Usage examples:\\n   howard stats --input=tests/data/example.vcf.gz \\n   howard stats --input=tests/data/example.vcf.gz --stats_md=/tmp/stats.md \\n   howard stats --input=tests/data/example.vcf.gz --param=config/param.json \\n    \\n&#x27;, &#x27;groups&#x27;: {&#x27;main&#x27;: {&#x27;input&#x27;: True, &#x27;param&#x27;: False}, &#x27;Stats&#x27;: {&#x27;stats_md&#x27;: False, &#x27;stats_json&#x27;: False}}}, &#x27;convert&#x27;: {&#x27;function&#x27;: &#x27;convert&#x27;, &#x27;description&#x27;: &quot;Convert genetic variations file to another format. Multiple format are available, such as usual and official VCF and BCF format, but also other formats such as TSV, CSV, PSV and Parquet/duckDB. These formats need a header &#x27;.hdr&#x27; file to take advantage of the power of howard (especially through INFO/tag definition), and using howard convert tool automatically generate header file fo futher use. &quot;, &#x27;help&#x27;: &#x27;Convert genetic variations file to another format.&#x27;, &#x27;epilog&#x27;: &#x27;Usage examples:\\n   howard convert --input=tests/data/example.vcf.gz --output=/tmp/example.tsv \\n   howard convert --input=tests/data/example.vcf.gz --output=/tmp/example.parquet \\n   howard convert --input=tests/data/example.vcf.gz --output=/tmp/example.tsv --explode_infos --explode_infos_fields=\\&#x27;CLNSIG,SIFT,DP\\&#x27; --order_by=\\&#x27;CLNSIG DESC, DP DESC\\&#x27; \\n   howard convert --input=tests/data/example.vcf.gz --output=/tmp/example.tsv --explode_infos --explode_infos_prefix=\\&#x27;INFO/\\&#x27; --explode_infos_fields=\\&#x27;CLNSIG,SIFT,DP,*\\&#x27; --order_by=\\&#x27;&quot;INFO/CLNSIG&quot; DESC, &quot;INFO/DP&quot; DESC\\&#x27; --include_header \\n   howard convert --input=tests/data/example.vcf.gz --output=/tmp/example.tsv --param=config/param.json \\n    \\n&#x27;, &#x27;groups&#x27;: {&#x27;main&#x27;: {&#x27;input&#x27;: True, &#x27;output&#x27;: True, &#x27;param&#x27;: False}, &#x27;Explode&#x27;: {&#x27;explode_infos&#x27;: False, &#x27;explode_infos_prefix&#x27;: False, &#x27;explode_infos_fields&#x27;: False}, &#x27;Export&#x27;: {&#x27;include_header&#x27;: False, &#x27;order_by&#x27;: False, &#x27;parquet_partitions&#x27;: False}}}, &#x27;hgvs&#x27;: {&#x27;function&#x27;: &#x27;hgvs&#x27;, &#x27;description&#x27;: &quot;HGVS annotation using HUGO HGVS internation Sequence Variant Nomenclature (http://varnomen.hgvs.org/). Annotation refere to refGene and genome to generate HGVS nomenclature for all available transcripts. This annotation add &#x27;hgvs&#x27; field into VCF INFO column of a VCF file.&quot;, &#x27;help&#x27;: &#x27;HGVS annotation (HUGO internation nomenclature) using refGene, genome and transcripts list.\\n&#x27;, &#x27;epilog&#x27;: &#x27;Usage examples:\\n   howard hgvs --input=tests/data/example.full.vcf --output=/tmp/example.hgvs.vcf \\n   howard hgvs --input=tests/data/example.full.vcf --output=/tmp/example.hgvs.tsv --param=config/param.json \\n   howard hgvs --input=tests/data/example.full.vcf --output=/tmp/example.hgvs.vcf --full_format --use_exon \\n    \\n&#x27;, &#x27;groups&#x27;: {&#x27;main&#x27;: {&#x27;input&#x27;: True, &#x27;output&#x27;: True, &#x27;param&#x27;: False, &#x27;hgvs_options&#x27;: False, &#x27;assembly&#x27;: False}, &#x27;HGVS&#x27;: {&#x27;use_gene&#x27;: False, &#x27;use_exon&#x27;: False, &#x27;use_protein&#x27;: False, &#x27;add_protein&#x27;: False, &#x27;full_format&#x27;: False, &#x27;codon_type&#x27;: False, &#x27;refgene&#x27;: False, &#x27;refseqlink&#x27;: False}}}, &#x27;annotation&#x27;: {&#x27;function&#x27;: &#x27;annotation&#x27;, &#x27;description&#x27;: &#x27;Annotation is mainly based on a build-in Parquet annotation method, and tools such as BCFTOOLS, Annovar and snpEff. It uses available databases (see Annovar and snpEff) and homemade databases. Format of databases are: parquet, duckdb, vcf, bed, Annovar and snpEff (Annovar and snpEff databases are automatically downloaded, see howard databases tool). &#x27;, &#x27;help&#x27;: &#x27;Annotation of genetic variations file using databases/files and tools.&#x27;, &#x27;epilog&#x27;: &quot;Usage examples:\\n   howard annotation --input=tests/data/example.vcf.gz --output=/tmp/example.howard.vcf.gz --annotations=&#x27;tests/databases/annotations/current/hg19/avsnp150.parquet,tests/databases/annotations/current/hg19/dbnsfp42a.parquet,tests/databases/annotations/current/hg19/gnomad211_genome.parquet&#x27; \\n   howard annotation --input=tests/data/example.vcf.gz --output=/tmp/example.howard.tsv --assembly=hg19 --annotations=&#x27;annovar:refGene,annovar:cosmic70,snpeff,tests/databases/annotations/current/hg19/clinvar_20210123.parquet&#x27; \\n   howard annotation --input=tests/data/example.vcf.gz --output=/tmp/example.howard.tsv --assembly=hg19 --annotation_parquet=&#x27;tests/databases/annotations/current/hg19/avsnp150.parquet,tests/databases/annotations/current/hg19/dbnsfp42a.parquet&#x27; \\n   howard annotation --input=tests/data/example.vcf.gz --output=/tmp/example.howard.tsv --assembly=hg19 --annotation_bcftools=&#x27;tests/databases/annotations/current/hg19/nci60.vcf.gz,tests/databases/annotations/current/hg19/dbnsfp42a.vcf.gz&#x27; \\n   howard annotation --input=tests/data/example.vcf.gz --output=/tmp/example.howard.tsv --assembly=hg19 --annotation_snpsift=&#x27;tests/databases/annotations/current/hg19/nci60.vcf.gz,tests/databases/annotations/current/hg19/dbnsfp42a.vcf.gz&#x27; \\n   howard annotation --input=tests/data/example.vcf.gz --output=/tmp/example.howard.tsv --assembly=hg19 --annotation_annovar=&#x27;nci60:cosmic70&#x27; \\n   howard annotation --input=tests/data/example.vcf.gz --output=/tmp/example.howard.tsv --assembly=hg19 --annotation_snpeff=&#x27;-hgvs&#x27; \\n   howard annotation --input=tests/data/example.vcf.gz --output=/tmp/example.howard.tsv --assembly=hg19 --annotation_exomiser=&#x27;preset=exome:transcript_source=refseq&#x27; \\n   howard annotation --input=tests/data/example.vcf.gz --output=/tmp/example.howard.tsv --assembly=hg19 --annotation_splice=&#x27;split_mode=one:spliceai_distance=500:spliceai_mask=1&#x27; \\n   howard annotation --input=tests/data/example.vcf.gz --output=/tmp/example.howard.tsv --assembly=hg19 --annotations=&#x27;ALL:parquet&#x27; \\n   howard annotation --input=tests/data/example.vcf.gz --output=/tmp/example.howard.tsv --param=config/param.json \\n    \\n&quot;, &#x27;groups&#x27;: {&#x27;main&#x27;: {&#x27;input&#x27;: True, &#x27;output&#x27;: True, &#x27;param&#x27;: False, &#x27;annotations&#x27;: False, &#x27;annotation_parquet&#x27;: False, &#x27;annotation_bcftools&#x27;: False, &#x27;annotation_annovar&#x27;: False, &#x27;annotation_snpeff&#x27;: False, &#x27;annotation_snpsift&#x27;: False, &#x27;annotation_exomiser&#x27;: False, &#x27;annotation_splice&#x27;: False, &#x27;assembly&#x27;: False}, &#x27;Annotation&#x27;: {&#x27;annotations_update&#x27;: False, &#x27;annotations_append&#x27;: False}}}, &#x27;calculation&#x27;: {&#x27;function&#x27;: &#x27;calculation&#x27;, &#x27;description&#x27;: &#x27;Calculation processes variants information to generate new information, such as: identify variation type (VarType), harmonizes allele frequency (VAF) and calculate sttistics (VAF_stats), extracts Nomen (transcript, cNomen, pNomen...) from an HGVS field (e.g. snpEff, Annovar) with an optional list of personalized transcripts, generates VaRank format barcode, identify trio inheritance.&#x27;, &#x27;help&#x27;: &#x27;Calculation operations on genetic variations file and genotype information.\\n&#x27;, &#x27;epilog&#x27;: &quot;Usage examples:\\n   howard calculation --input=tests/data/example.full.vcf --output=/tmp/example.calculation.tsv --calculations=&#x27;vartype&#x27; \\n   howard calculation --input=tests/data/example.ann.vcf.gz --output=/tmp/example.calculated.tsv --calculations=&#x27;snpeff_hgvs,NOMEN&#x27; --hgvs_field=snpeff_hgvs --transcripts=tests/data/transcripts.tsv \\n   howard calculation --input=tests/data/example.vcf.gz --output=/tmp/example.calculated.tsv --calculations=&#x27;TRIO&#x27; --trio_pedigree=&#x27;sample1,sample2,sample4&#x27; \\n   howard calculation --input=tests/data/example.vcf.gz --output=/tmp/example.calculated.tsv --calculations=&#x27;BARCODEFAMILY&#x27; --family_pedigree=&#x27;sample1,sample2,sample4&#x27; \\n   howard calculation --input=tests/data/example.ann.transcripts.vcf.gz --output=/tmp/example.calculation.transcripts.tsv --param=config/param.transcripts.json --calculations=&#x27;TRANSCRIPTS_ANNOTATIONS,TRANSCRIPTS_PRIORITIZATION,TRANSCRIPTS_EXPORT&#x27; \\n   howard calculation --input=tests/data/example.ann.vcf.gz --output=/tmp/example.ann.tsv --param=config/param.json \\n   howard calculation --show_calculations \\n    \\n&quot;, &#x27;groups&#x27;: {&#x27;main&#x27;: {&#x27;input&#x27;: False, &#x27;output&#x27;: False, &#x27;param&#x27;: False, &#x27;calculations&#x27;: False}, &#x27;Calculation&#x27;: {&#x27;calculation_config&#x27;: False, &#x27;show_calculations&#x27;: False}, &#x27;NOMEN&#x27;: {&#x27;hgvs_field&#x27;: False, &#x27;transcripts&#x27;: False}, &#x27;TRIO&#x27;: {&#x27;trio_pedigree&#x27;: False}, &#x27;BARCODEFAMILY&#x27;: {&#x27;family_pedigree&#x27;: False}}}, &#x27;prioritization&#x27;: {&#x27;function&#x27;: &#x27;prioritization&#x27;, &#x27;description&#x27;: &quot;Prioritization algorithm uses profiles to flag variants (as passed or filtered), calculate a prioritization score, and automatically generate a comment for each variants (example: &#x27;polymorphism identified in dbSNP. associated to Lung Cancer. Found in ClinVar database&#x27;). Prioritization profiles are defined in a configuration file in JSON format. A profile is defined as a list of annotation/value, using wildcards and comparison options (contains, lower than, greater than, equal...). Annotations fields may be quality values (usually from callers, such as &#x27;DP&#x27;) or other annotations fields provided by annotations tools, such as HOWARD itself (example: COSMIC, Clinvar, 1000genomes, PolyPhen, SIFT). Multiple profiles can be used simultaneously, which is useful to define multiple validation/prioritization levels (example: &#x27;standard&#x27;, &#x27;stringent&#x27;, &#x27;rare variants&#x27;, &#x27;low allele frequency&#x27;).\\n&quot;, &#x27;help&#x27;: &#x27;Prioritization of genetic variations based on annotations criteria (profiles).&#x27;, &#x27;epilog&#x27;: &quot;Usage examples:\\n   howard prioritization --input=tests/data/example.vcf.gz --output=/tmp/example.prioritized.vcf.gz --prioritizations=&#x27;default&#x27; \\n   howard prioritization --input=tests/data/example.vcf.gz --output=/tmp/example.prioritized.vcf.gz --prioritizations=&#x27;default,GERMLINE&#x27; --prioritization_config=config/prioritization_profiles.json \\n   howard prioritization --input=tests/data/example.vcf.gz --output=/tmp/example.prioritized.tsv --param=config/param.json \\n    \\n&quot;, &#x27;groups&#x27;: {&#x27;main&#x27;: {&#x27;input&#x27;: True, &#x27;output&#x27;: True, &#x27;param&#x27;: False, &#x27;prioritizations&#x27;: False}, &#x27;Prioritization&#x27;: {&#x27;default_profile&#x27;: False, &#x27;pzfields&#x27;: False, &#x27;prioritization_score_mode&#x27;: False, &#x27;prioritization_config&#x27;: False}}}, &#x27;process&#x27;: {&#x27;function&#x27;: &#x27;process&#x27;, &#x27;description&#x27;: &#x27;howard process tool manage genetic variations to:\\n- annotates genetic variants with multiple annotation databases/files and tools\\n- calculates and normalizes annotations\\n- prioritizes variants with profiles (list of citeria) to calculate scores and flags\\n- translates into various formats\\n- query genetic variants and annotations\\n- generates variants statistics&#x27;, &#x27;help&#x27;: &#x27;Full genetic variations process: annotation, calculation, prioritization, format, query, filter...&#x27;, &#x27;epilog&#x27;: &#x27;Usage examples:\\n   howard process --input=tests/data/example.vcf.gz --output=/tmp/example.annotated.vcf.gz --param=config/param.json \\n   howard process --input=tests/data/example.vcf.gz --annotations=\\&#x27;snpeff\\&#x27; --calculations=\\&#x27;snpeff_hgvs\\&#x27; --prioritizations=\\&#x27;default\\&#x27; --explode_infos --output=/tmp/example.annotated.tsv --query=\\&#x27;SELECT &quot;#CHROM&quot;, POS, ALT, REF, snpeff_hgvs FROM variants\\&#x27; \\n   howard process --input=tests/data/example.vcf.gz --hgvs_options=\\&#x27;full_format,use_exon\\&#x27; --explode_infos --output=/tmp/example.annotated.tsv --query=\\&#x27;SELECT &quot;#CHROM&quot;, POS, ALT, REF, hgvs FROM variants\\&#x27; \\n   howard process --input=tests/data/example.vcf.gz --output=/tmp/example.howard.vcf.gz --hgvs=\\&#x27;full_format,use_exon\\&#x27; --annotations=\\&#x27;tests/databases/annotations/current/hg19/avsnp150.parquet,tests/databases/annotations/current/hg19/dbnsfp42a.parquet,tests/databases/annotations/current/hg19/gnomad211_genome.parquet\\&#x27; --calculations=\\&#x27;NOMEN\\&#x27; --explode_infos --query=\\&#x27;SELECT NOMEN, REVEL_score, SIFT_score, AF AS \\&#x27;gnomad_AF\\&#x27;, ClinPred_score, ClinPred_pred FROM variants\\&#x27; \\n    \\n&#x27;, &#x27;groups&#x27;: {&#x27;main&#x27;: {&#x27;input&#x27;: True, &#x27;output&#x27;: True, &#x27;param&#x27;: False, &#x27;hgvs_options&#x27;: False, &#x27;annotations&#x27;: False, &#x27;calculations&#x27;: False, &#x27;prioritizations&#x27;: False, &#x27;assembly&#x27;: False}, &#x27;HGVS&#x27;: {&#x27;use_gene&#x27;: False, &#x27;use_exon&#x27;: False, &#x27;use_protein&#x27;: False, &#x27;add_protein&#x27;: False, &#x27;full_format&#x27;: False, &#x27;codon_type&#x27;: False, &#x27;refgene&#x27;: False, &#x27;refseqlink&#x27;: False}, &#x27;Annotation&#x27;: {&#x27;annotations_update&#x27;: False, &#x27;annotations_append&#x27;: False}, &#x27;Calculation&#x27;: {&#x27;calculation_config&#x27;: False}, &#x27;Prioritization&#x27;: {&#x27;default_profile&#x27;: False, &#x27;pzfields&#x27;: False, &#x27;prioritization_score_mode&#x27;: False, &#x27;prioritization_config&#x27;: False}, &#x27;Query&#x27;: {&#x27;query&#x27;: False, &#x27;query_limit&#x27;: False, &#x27;query_print_mode&#x27;: False}, &#x27;Explode&#x27;: {&#x27;explode_infos&#x27;: False, &#x27;explode_infos_prefix&#x27;: False, &#x27;explode_infos_fields&#x27;: False}, &#x27;Export&#x27;: {&#x27;include_header&#x27;: False, &#x27;order_by&#x27;: False, &#x27;parquet_partitions&#x27;: False}}}, &#x27;databases&#x27;: {&#x27;function&#x27;: &#x27;databases&#x27;, &#x27;description&#x27;: &#x27;Download databases and needed files for howard and associated tools&#x27;, &#x27;help&#x27;: &#x27;Download databases and needed files for howard and associated tools&#x27;, &#x27;epilog&#x27;: &quot;Usage examples:\\n   howard databases --assembly=hg19 --download-genomes=~/howard/databases/genomes/current --download-genomes-provider=UCSC --download-genomes-contig-regex=&#x27;chr[0-9XYM]+$&#x27; \\n   howard databases --assembly=hg19 --download-annovar=~/howard/databases/annovar/current --download-annovar-files=&#x27;refGene,cosmic70,nci60&#x27; \\n   howard databases --assembly=hg19 --download-snpeff=~/howard/databases/snpeff/current \\n   howard databases --assembly=hg19 --download-refseq=~/howard/databases/refseq/current --download-refseq-format-file=&#x27;ncbiRefSeq.txt&#x27; \\n   howard databases --assembly=hg19 --download-dbnsfp=~/howard/databases/dbnsfp/current --download-dbnsfp-release=&#x27;4.4a&#x27; --download-dbnsfp-subdatabases \\n   howard databases --assembly=hg19 --download-alphamissense=~/howard/databases/alphamissense/current \\n   howard databases --assembly=hg19 --download-exomiser=~/howard/databases/exomiser/current \\n   howard databases --assembly=hg19 --download-dbsnp=~/howard/databases/dbsnp/current --download-dbsnp-vcf \\n   cd ~/howard/databases &amp;&amp; howard databases --assembly=hg19 --download-genomes=genomes/current --download-genomes-provider=UCSC --download-genomes-contig-regex=&#x27;chr[0-9XYM]+$&#x27; --download-annovar=annovar/current --download-annovar-files=&#x27;refGene,cosmic70,nci60&#x27; --download-snpeff=snpeff/current --download-refseq=refseq/current --download-refseq-format-file=&#x27;ncbiRefSeq.txt&#x27; --download-dbnsfp=dbnsfp/current --download-dbnsfp-release=&#x27;4.4a&#x27; --download-dbnsfp-subdatabases --download-alphamissense=alphamissense/current --download-exomiser=exomiser/current --download-dbsnp=dbsnp/current --download-dbsnp-vcf --threads=8 \\n   howard databases --generate-param=/tmp/param.json --generate-param-description=/tmp/test.description.json --generate-param-formats=parquet \\n   howard databases --input_annovar=tests/databases/others/hg19_nci60.txt --output_annovar=/tmp/nci60.from_annovar.vcf.gz --annovar_to_parquet=/tmp/nci60.from_annovar.parquet --annovar_code=nci60 --genome=~/howard/databases/genomes/current/hg19.fa \\n\\nNotes:\\n   - Downloading databases can take a while, depending on network, threads and memory\\n   - Proxy: Beware of network and proxy configuration\\n   - dbNSFP download: More threads, more memory usage (8 threads ~ 16Gb, 24 threads ~ 32Gb)\\n    \\n&quot;, &#x27;groups&#x27;: {&#x27;main&#x27;: {&#x27;assembly&#x27;: False, &#x27;genomes-folder&#x27;: False, &#x27;genome&#x27;: False, &#x27;param&#x27;: False}, &#x27;Genomes&#x27;: {&#x27;download-genomes&#x27;: False, &#x27;download-genomes-provider&#x27;: False, &#x27;download-genomes-contig-regex&#x27;: False}, &#x27;snpEff&#x27;: {&#x27;download-snpeff&#x27;: False}, &#x27;Annovar&#x27;: {&#x27;download-annovar&#x27;: False, &#x27;download-annovar-files&#x27;: False, &#x27;download-annovar-url&#x27;: False}, &#x27;refSeq&#x27;: {&#x27;download-refseq&#x27;: False, &#x27;download-refseq-url&#x27;: False, &#x27;download-refseq-prefix&#x27;: False, &#x27;download-refseq-files&#x27;: False, &#x27;download-refseq-format-file&#x27;: False, &#x27;download-refseq-include-utr5&#x27;: False, &#x27;download-refseq-include-utr3&#x27;: False, &#x27;download-refseq-include-chrM&#x27;: False, &#x27;download-refseq-include-non-canonical-chr&#x27;: False, &#x27;download-refseq-include-non-coding-transcripts&#x27;: False, &#x27;download-refseq-include-transcript-version&#x27;: False}, &#x27;dbNSFP&#x27;: {&#x27;download-dbnsfp&#x27;: False, &#x27;download-dbnsfp-url&#x27;: False, &#x27;download-dbnsfp-release&#x27;: False, &#x27;download-dbnsfp-parquet-size&#x27;: False, &#x27;download-dbnsfp-subdatabases&#x27;: False, &#x27;download-dbnsfp-parquet&#x27;: False, &#x27;download-dbnsfp-vcf&#x27;: False, &#x27;download-dbnsfp-no-files-all&#x27;: False, &#x27;download-dbnsfp-add-info&#x27;: False, &#x27;download-dbnsfp-only-info&#x27;: False, &#x27;download-dbnsfp-uniquify&#x27;: False, &#x27;download-dbnsfp-row-group-size&#x27;: False}, &#x27;AlphaMissense&#x27;: {&#x27;download-alphamissense&#x27;: False, &#x27;download-alphamissense-url&#x27;: False}, &#x27;Exomiser&#x27;: {&#x27;download-exomiser&#x27;: False, &#x27;download-exomiser-application-properties&#x27;: False, &#x27;download-exomiser-url&#x27;: False, &#x27;download-exomiser-release&#x27;: False, &#x27;download-exomiser-phenotype-release&#x27;: False, &#x27;download-exomiser-remm-release&#x27;: False, &#x27;download-exomiser-remm-url&#x27;: False, &#x27;download-exomiser-cadd-release&#x27;: False, &#x27;download-exomiser-cadd-url&#x27;: False, &#x27;download-exomiser-cadd-url-snv-file&#x27;: False, &#x27;download-exomiser-cadd-url-indel-file&#x27;: False}, &#x27;dbSNP&#x27;: {&#x27;download-dbsnp&#x27;: False, &#x27;download-dbsnp-releases&#x27;: False, &#x27;download-dbsnp-release-default&#x27;: False, &#x27;download-dbsnp-url&#x27;: False, &#x27;download-dbsnp-url-files&#x27;: False, &#x27;download-dbsnp-url-files-prefix&#x27;: False, &#x27;download-dbsnp-assemblies-map&#x27;: False, &#x27;download-dbsnp-vcf&#x27;: False, &#x27;download-dbsnp-parquet&#x27;: False}, &#x27;HGMD&#x27;: {&#x27;convert-hgmd&#x27;: False, &#x27;convert-hgmd-file&#x27;: False, &#x27;convert-hgmd-basename&#x27;: False}, &#x27;from_Annovar&#x27;: {&#x27;input_annovar&#x27;: False, &#x27;output_annovar&#x27;: False, &#x27;annovar_code&#x27;: False, &#x27;annovar_to_parquet&#x27;: False, &#x27;annovar_reduce_memory&#x27;: False, &#x27;annovar_multi_variant&#x27;: False}, &#x27;from_extann&#x27;: {&#x27;input_extann&#x27;: False, &#x27;output_extann&#x27;: False, &#x27;refgene&#x27;: False, &#x27;transcripts&#x27;: False, &#x27;param_extann&#x27;: False, &#x27;mode_extann&#x27;: False}, &#x27;Parameters&#x27;: {&#x27;generate-param&#x27;: False, &#x27;generate-param-description&#x27;: False, &#x27;generate-param-releases&#x27;: False, &#x27;generate-param-formats&#x27;: False, &#x27;generate-param-bcftools&#x27;: False}}}, &#x27;gui&#x27;: {&#x27;function&#x27;: &#x27;gui&#x27;, &#x27;description&#x27;: &#x27;Graphical User Interface tools&#x27;, &#x27;help&#x27;: &#x27;Graphical User Interface tools&#x27;, &#x27;epilog&#x27;: &#x27;Usage examples:\\n   howard gui &#x27;, &#x27;groups&#x27;: {}}, &#x27;help&#x27;: {&#x27;function&#x27;: &#x27;help&#x27;, &#x27;description&#x27;: &#x27;Help tools&#x27;, &#x27;help&#x27;: &#x27;Help tools&#x27;, &#x27;epilog&#x27;: &quot;Usage examples:\\n   howard help --help_md=docs/help.md --help_html=docs/html/help.html --help_pdf=docs/pdf/help.pdf\\n   howard help --help_json_input=docs/json/help.configuration.json --help_json_input_title=&#x27;HOWARD Configuration&#x27; --help_md=docs/help.configuration.md --help_html=docs/html/help.configuration.html --help_pdf=docs/pdf/help.configuration.pdf --code_type=&#x27;json&#x27;\\n   howard help --help_json_input=docs/json/help.parameteres.json --help_json_input_title=&#x27;HOWARD Parameters&#x27; --help_md=docs/help.parameteres.md --help_html=docs/html/help.parameteres.html --help_pdf=docs/pdf/help.parameteres.pdf --code_type=&#x27;json&#x27; \\n   howard help --help_json_input=docs/json/help.parameteres.databases.json --help_json_input_title=&#x27;HOWARD Parameters Databases&#x27; --help_md=docs/help.parameteres.databases.md --help_html=docs/html/help.parameteres.databases.html --help_pdf=docs/pdf/help.parameteres.databases.pdf --code_type=&#x27;json&#x27; \\n    \\n&quot;, &#x27;groups&#x27;: {&#x27;main&#x27;: {&#x27;help_md&#x27;: False, &#x27;help_html&#x27;: False, &#x27;help_pdf&#x27;: False, &#x27;help_md_input&#x27;: False, &#x27;help_json_input&#x27;: False, &#x27;help_json_input_title&#x27;: False, &#x27;code_type&#x27;: False}}}, &#x27;update_database&#x27;: {&#x27;function&#x27;: &#x27;update_database&#x27;, &#x27;description&#x27;: &#x27;Update HOWARD database\\n&#x27;, &#x27;help&#x27;: &#x27;Update HOWARD database&#x27;, &#x27;epilog&#x27;: &#x27;Usage examples:\\n   howard update_database --database clinvar --databases_folder /home1/DB/HOWARD --update_config update_databases.json  \\n    \\n&#x27;, &#x27;groups&#x27;: {&#x27;main&#x27;: {&#x27;param&#x27;: False}, &#x27;Update_database&#x27;: {&#x27;databases_folder&#x27;: False, &#x27;database&#x27;: False, &#x27;update_config&#x27;: False, &#x27;current_folder&#x27;: False}, &#x27;Options&#x27;: {&#x27;show&#x27;: False, &#x27;limit&#x27;: False}}}, &#x27;genebe&#x27;: {&#x27;function&#x27;: &#x27;genebe&#x27;, &#x27;description&#x27;: &#x27;GeneBe annotation using REST API (see https://genebe.net/).\\n&#x27;, &#x27;help&#x27;: &#x27;GeneBe annotation using REST API&#x27;, &#x27;epilog&#x27;: &#x27;Usage examples:\\n   howard genebe --input=tests/data/example.vcf.gz --output=/tmp/example.genebe.vcf.gz --genebe_use_refseq\\n    \\n&#x27;, &#x27;groups&#x27;: {&#x27;main&#x27;: {&#x27;input&#x27;: True, &#x27;output&#x27;: True, &#x27;param&#x27;: False, &#x27;assembly&#x27;: False}, &#x27;GeneBe&#x27;: {&#x27;genebe_use_refseq&#x27;: False, &#x27;genebe_use_ensembl&#x27;: False, &#x27;not_flatten_consequences&#x27;: False}, &#x27;Explode&#x27;: {&#x27;explode_infos&#x27;: False, &#x27;explode_infos_prefix&#x27;: False, &#x27;explode_infos_fields&#x27;: False}, &#x27;Export&#x27;: {&#x27;include_header&#x27;: False, &#x27;order_by&#x27;: False, &#x27;parquet_partitions&#x27;: False}}}, &#x27;minimalize&#x27;: {&#x27;function&#x27;: &#x27;minimalize&#x27;, &#x27;description&#x27;: &quot;Minimalize a VCF file consists in put missing value (&#x27;.&#x27;) on INFO/Tags, ID, QUAL or FILTER fields. Options can also minimalize samples (keep only GT) or remove all samples. INFO/tags can by exploded before minimalize to keep tags into separated columns (useful for Parquet or TSV format to constitute a database).\\n&quot;, &#x27;help&#x27;: &#x27;Minimalize a VCF file, such as removing INFO/Tags or samples&#x27;, &#x27;epilog&#x27;: &#x27;Usage examples:\\n   howard minimalize --input=tests/data/example.vcf.gz --output=/tmp/example.minimal.vcf.gz --minimalize_info --minimalize_filter --minimalize_qual --minimalize_id --minimalize_samples\\n   howard minimalize --input=tests/data/example.vcf.gz --output=/tmp/example.minimal.tsv --remove_samples --explode_infos --minimalize_info\\n    \\n&#x27;, &#x27;groups&#x27;: {&#x27;main&#x27;: {&#x27;input&#x27;: True, &#x27;output&#x27;: True, &#x27;param&#x27;: False}, &#x27;Minimalize&#x27;: {&#x27;minimalize_info&#x27;: False, &#x27;minimalize_id&#x27;: False, &#x27;minimalize_qual&#x27;: False, &#x27;minimalize_filter&#x27;: False, &#x27;minimalize_samples&#x27;: False, &#x27;remove_samples&#x27;: False}, &#x27;Explode&#x27;: {&#x27;explode_infos&#x27;: False, &#x27;explode_infos_prefix&#x27;: False, &#x27;explode_infos_fields&#x27;: False}, &#x27;Export&#x27;: {&#x27;include_header&#x27;: False, &#x27;order_by&#x27;: False, &#x27;parquet_partitions&#x27;: False}}}}, &#x27;shared_arguments&#x27;: [&#x27;config&#x27;, &#x27;threads&#x27;, &#x27;memory&#x27;, &#x27;chunk_size&#x27;, &#x27;tmp&#x27;, &#x27;duckdb_settings&#x27;, &#x27;verbosity&#x27;, &#x27;log&#x27;, &#x27;quiet&#x27;, &#x27;verbose&#x27;, &#x27;debug&#x27;]}"}}, "docInfo": {"howard": {"qualname": 0, "fullname": 1, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.functions": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.file_folder": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.subfolder_plugins": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.folder_main": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.folder_config": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.folder_user_home": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.folder_howard_home": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.folder_plugins": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.comparison_map": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 44, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.code_type_map": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 21, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.code_type_map_to_sql": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 30, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.file_format_delimiters": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 36, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.file_format_allowed": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 26, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.file_compressed_format": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 8, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.vcf_required_release": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.vcf_required_columns": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 26, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.vcf_required": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 10, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.DEFAULT_TOOLS_FOLDER": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.DEFAULT_TOOLS_BIN": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 132, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.DEFAULT_ANNOVAR_URL": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.DEFAULT_REFSEQ_URL": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 8, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.DEFAULT_DBNSFP_URL": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 8, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.DEFAULT_EXOMISER_URL": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.DEFAULT_EXOMISER_REMM_URL": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.DEFAULT_EXOMISER_CADD_URL": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.DEFAULT_ALPHAMISSENSE_URL": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 8, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.DEFAULT_DBSNP_URL": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 8, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.DEFAULT_DATABASE_FOLDER": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.DEFAULT_ANNOTATIONS_FOLDER": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.DEFAULT_GENOME_FOLDER": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.DEFAULT_SNPEFF_FOLDER": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.DEFAULT_ANNOVAR_FOLDER": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.DEFAULT_REFSEQ_FOLDER": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.DEFAULT_DBNSFP_FOLDER": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.DEFAULT_EXOMISER_FOLDER": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.DEFAULT_DBSNP_FOLDER": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.DEFAULT_SPLICE_FOLDER": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.DEFAULT_SPLICEAI_FOLDER": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.DEFAULT_SPIP_FOLDER": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.DEFAULT_DATA_FOLDER": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.DEFAULT_ASSEMBLY": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.DUCKDB_EXTENSION": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 6, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.MACHIN_LIST": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 16, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.BCFTOOLS_FORMAT": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 8, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.LOG_FORMAT": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 13, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.CODE_TYPE_MAP": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 21, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.GENOTYPE_MAP": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 16, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.DTYPE_LIMIT_AUTO": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 1, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.DEFAULT_CHUNK_SIZE": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 1, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.commons.remove_if_exists": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 45}, "howard.functions.commons.set_log_level": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 28}, "howard.functions.commons.split_interval": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 95}, "howard.functions.commons.merge_regions": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 79}, "howard.functions.commons.create_where_clause": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 41, "bases": 0, "doc": 97}, "howard.functions.commons.command": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 51}, "howard.functions.commons.run_parallel_commands": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 65}, "howard.functions.commons.run_parallel_functions": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 73}, "howard.functions.commons.example_function": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 55}, "howard.functions.commons.find": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 72}, "howard.functions.commons.find_all": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 136}, "howard.functions.commons.find_genome": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 54, "bases": 0, "doc": 148}, "howard.functions.commons.find_file_prefix": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 82, "bases": 0, "doc": 149}, "howard.functions.commons.find_nomen": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 63, "bases": 0, "doc": 122}, "howard.functions.commons.explode_annotation_format": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 293, "bases": 0, "doc": 394}, "howard.functions.commons.extract_snpeff_hgvs": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 230, "bases": 0, "doc": 127}, "howard.functions.commons.explode_snpeff_ann": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 293, "bases": 0, "doc": 347}, "howard.functions.commons.get_index": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 137}, "howard.functions.commons.get_file_format": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 51}, "howard.functions.commons.findbypipeline": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 152}, "howard.functions.commons.genotypeconcordance": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 127}, "howard.functions.commons.genotype_compression": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 106}, "howard.functions.commons.genotype_barcode": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 98}, "howard.functions.commons.barcode": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 76}, "howard.functions.commons.trio": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 100}, "howard.functions.commons.vaf_normalization": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 144}, "howard.functions.commons.genotype_stats": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 49, "bases": 0, "doc": 175}, "howard.functions.commons.extract_file": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 160}, "howard.functions.commons.download_file": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 124, "bases": 0, "doc": 464}, "howard.functions.commons.whereis_bin": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 3}, "howard.functions.commons.get_bin": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 132, "bases": 0, "doc": 293}, "howard.functions.commons.get_bin_command": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 146, "bases": 0, "doc": 501}, "howard.functions.commons.get_tmp": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 65, "bases": 0, "doc": 286}, "howard.functions.commons.get_threads": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 43, "bases": 0, "doc": 154}, "howard.functions.commons.get_memory": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 43, "bases": 0, "doc": 218}, "howard.functions.commons.extract_float_from_str": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 133}, "howard.functions.commons.extract_memory_in_go": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 176}, "howard.functions.commons.concat_file": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 131}, "howard.functions.commons.compress_file": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 68}, "howard.functions.commons.get_compression_type": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 129}, "howard.functions.commons.get_file_compressed": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 58}, "howard.functions.commons.concat_into_infile": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 92, "bases": 0, "doc": 272}, "howard.functions.commons.concat_and_compress_files": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 165, "bases": 0, "doc": 458}, "howard.functions.commons.get_plateform_name_from_duckdb": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 77}, "howard.functions.commons.get_duckdb_extension_file": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 104}, "howard.functions.commons.load_duckdb_extension": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 90}, "howard.functions.commons.TimeoutException": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 11}, "howard.functions.commons.time_limit": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "howard.functions.commons.duckdb_execute": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 154}, "howard.functions.commons.genome_build_switch": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 86}, "howard.functions.commons.get_argument": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 122, "bases": 0, "doc": 271}, "howard.functions.commons.get_argument_gooey": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 43, "bases": 0, "doc": 86}, "howard.functions.commons.get_argument_to_mk": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 57, "bases": 0, "doc": 228}, "howard.functions.commons.help_generation_from_dict": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 191, "bases": 0, "doc": 737}, "howard.functions.commons.help_generation_from_json": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 98, "bases": 0, "doc": 378}, "howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 39}, "howard.functions.commons.help_generation": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 77, "bases": 0, "doc": 205}, "howard.functions.commons.format_arg_help": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 163}, "howard.functions.commons.bed_sort": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 109}, "howard.functions.commons.full_path": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 119}, "howard.functions.commons.get_default_argument": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 139}, "howard.functions.commons.set_param": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 100, "bases": 0, "doc": 328}, "howard.functions.commons.add_value_into_dict": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 217}, "howard.functions.commons.load_param": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 102}, "howard.functions.commons.load_config_args": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 109}, "howard.functions.commons.load_args": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 145, "bases": 0, "doc": 422}, "howard.functions.commons.get_random": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 110}, "howard.functions.commons.transcripts_file_to_df": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 73, "bases": 0, "doc": 170}, "howard.functions.commons.identical": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 65, "bases": 0, "doc": 254}, "howard.functions.commons.check_docker_image_exists": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 56}, "howard.functions.commons.params_string_to_dict": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 136, "bases": 0, "doc": 366}, "howard.functions.commons.determine_value_type": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 73, "bases": 0, "doc": 296}, "howard.functions.commons.determine_column_types": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 157}, "howard.functions.commons.detect_column_type": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 112}, "howard.functions.commons.determine_column_number": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 3}, "howard.functions.commons.clean_annotation_field": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 167}, "howard.functions.databases": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.databases.generate_databases_param": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 63, "bases": 0, "doc": 150}, "howard.functions.databases.query_and_concatenate_columns": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 77}, "howard.functions.databases.databases_infos": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 115, "bases": 0, "doc": 253}, "howard.functions.databases.databases_param": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 78, "bases": 0, "doc": 277}, "howard.functions.databases.databases_download_annovar": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 114, "bases": 0, "doc": 145}, "howard.functions.databases.databases_download_snpeff": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 89, "bases": 0, "doc": 198}, "howard.functions.databases.databases_download_genomes": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 102, "bases": 0, "doc": 241}, "howard.functions.databases.databases_download_refseq": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 323, "bases": 0, "doc": 825}, "howard.functions.databases.databases_format_refseq": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 210, "bases": 0, "doc": 650}, "howard.functions.databases.databases_download_dbnsfp": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 313, "bases": 0, "doc": 925}, "howard.functions.databases.databases_download_alphamissense": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 87, "bases": 0, "doc": 222}, "howard.functions.databases.databases_download_exomiser": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 295, "bases": 0, "doc": 631}, "howard.functions.databases.databases_download_dbsnp": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 336, "bases": 0, "doc": 476}, "howard.functions.databases.databases_download_hgmd": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 167, "bases": 0, "doc": 429}, "howard.functions.from_annovar": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.from_annovar.TYPES": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 37, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.from_annovar.from_annovar": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 46}, "howard.functions.from_annovar.annovar_to_vcf": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 247, "bases": 0, "doc": 492}, "howard.functions.from_annovar.parquet_info_explode": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 88, "bases": 0, "doc": 181}, "howard.functions.from_annovar.tsv_to_parquet": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 121, "bases": 0, "doc": 298}, "howard.functions.from_extann": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.from_extann.create_metaheader": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 70, "bases": 0, "doc": 29}, "howard.functions.from_extann.add_default_metaheader": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 3}, "howard.functions.from_extann.read_json": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 8}, "howard.functions.from_extann.read_refgene": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 3}, "howard.functions.from_extann.metaheader_rows": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 59, "bases": 0, "doc": 30}, "howard.functions.from_extann.replace_values": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 3}, "howard.functions.from_extann.write_extann": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 73, "bases": 0, "doc": 13}, "howard.functions.from_extann.extann_to_info": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 20}, "howard.functions.from_extann.get_longest_transcript": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 66, "bases": 0, "doc": 29}, "howard.functions.from_extann.get_all_transcript": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 66, "bases": 0, "doc": 11}, "howard.functions.from_extann.get_chosen_transcript": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 71, "bases": 0, "doc": 31}, "howard.functions.from_extann.get_gene_coordinate": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 117, "bases": 0, "doc": 42}, "howard.functions.from_extann.from_extann": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 72}, "howard.functions.plugins": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.functions.plugins.plugins_infos": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 191}, "howard.functions.plugins.plugins_list": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 257}, "howard.functions.plugins.plugins_to_load": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 144}, "howard.functions.utils": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 5}, "howard.functions.utils.read_refgene": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 96}, "howard.functions.utils.read_genepred": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 265}, "howard.functions.utils.make_transcript": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 12, "bases": 0, "doc": 71}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"qualname": 6, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 22, "bases": 0, "doc": 241}, "howard.functions.utils.read_transcripts": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 12, "bases": 0, "doc": 100}, "howard.functions.utils.get_genomic_sequence": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 160}, "howard.functions.utils.get_vcf_allele": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 186}, "howard.functions.utils.get_alt_from_sequence": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 144}, "howard.functions.utils.matches_ref_allele": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 158}, "howard.functions.utils.hgvs_justify_dup": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 184}, "howard.functions.utils.hgvs_justify_indel": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 269}, "howard.functions.utils.hgvs_normalize_variant": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 41, "bases": 0, "doc": 234}, "howard.functions.utils.parse_hgvs_name": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 104, "bases": 0, "doc": 429}, "howard.functions.utils.cdna_to_protein": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 78, "bases": 0, "doc": 329}, "howard.functions.utils.variant_to_hgvs_name": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 113, "bases": 0, "doc": 470}, "howard.functions.utils.format_hgvs_name": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 173, "bases": 0, "doc": 778}, "howard.functions.utils.create_refseq_table": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 54, "bases": 0, "doc": 187}, "howard.functions.utils.get_refseq_table": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 54, "bases": 0, "doc": 208}, "howard.functions.utils.get_transcript": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 98}, "howard.main": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.main.msg_gui_disable": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "howard.main.main_folder": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "howard.main.main": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 18}, "howard.objects": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.cdna": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.cdna.CDNA_START_CODON": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 6, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.cdna.CDNA_STOP_CODON": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 6, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.cdna.CDNACoord": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 189}, "howard.objects.cdna.CDNACoord.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 52, "bases": 0, "doc": 81}, "howard.objects.cdna.CDNACoord.parse": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 17, "bases": 0, "doc": 9}, "howard.objects.database": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.database.SEP_TYPE": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 36, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 258, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.database.DEFAULT_VCF_HEADER": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 26, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.database.DEFAULT_VCF_HEADER_DUCKDB_TYPES": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 65, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.database.DEFAULT_HEADER_LIST": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 10, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.database.FILE_FORMAT_DELIMITERS": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 36, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.database.DUCKDB_EXTENSION_TO_LOAD": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 6, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.database.Database": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.database.Database.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 162, "bases": 0, "doc": 414}, "howard.objects.database.Database.database": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.database.Database.format": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.database.Database.header": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.database.Database.header_file": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.database.Database.databases_folders": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.database.Database.assembly": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.database.Database.table": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.database.Database.set_database": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 81, "bases": 0, "doc": 219}, "howard.objects.database.Database.set_databases_folders": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 70}, "howard.objects.database.Database.get_database_folders": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 50}, "howard.objects.database.Database.read_header_file": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 64}, "howard.objects.database.Database.get_header_length": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 94}, "howard.objects.database.Database.get_header_file_columns": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 77}, "howard.objects.database.Database.get_header_from_list": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 64, "bases": 0, "doc": 112}, "howard.objects.database.Database.get_header_from_file": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 57, "bases": 0, "doc": 124}, "howard.objects.database.Database.find_header_file": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 131}, "howard.objects.database.Database.get_header": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 120, "bases": 0, "doc": 296}, "howard.objects.database.Database.get_header_from_columns": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 71, "bases": 0, "doc": 266}, "howard.objects.database.Database.query": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 109}, "howard.objects.database.Database.set_header": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 100, "bases": 0, "doc": 151}, "howard.objects.database.Database.set_header_file": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 84}, "howard.objects.database.Database.get_header_columns_from_database": {"qualname": 6, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 97}, "howard.objects.database.Database.get_header_file": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 111, "bases": 0, "doc": 355}, "howard.objects.database.Database.set_assembly": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 88}, "howard.objects.database.Database.get_assembly": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 55}, "howard.objects.database.Database.find_database": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 95, "bases": 0, "doc": 231}, "howard.objects.database.Database.get_database": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 44}, "howard.objects.database.Database.get_database_basename": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 132}, "howard.objects.database.Database.get_database_dirname": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 122}, "howard.objects.database.Database.exists": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 128}, "howard.objects.database.Database.set_format": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 80}, "howard.objects.database.Database.get_format": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 151}, "howard.objects.database.Database.get_type": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 212}, "howard.objects.database.Database.get_database_tables": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 49, "bases": 0, "doc": 89}, "howard.objects.database.Database.get_database_table": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 84}, "howard.objects.database.Database.get_type_from_columns": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 117}, "howard.objects.database.Database.get_needed_columns": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 50, "bases": 0, "doc": 157}, "howard.objects.database.Database.get_sql_from": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 71, "bases": 0, "doc": 152}, "howard.objects.database.Database.get_sql_database_attach": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 58, "bases": 0, "doc": 153}, "howard.objects.database.Database.get_sql_database_link": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 147}, "howard.objects.database.Database.create_view": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 59, "bases": 0, "doc": 119}, "howard.objects.database.Database.get_view": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 154}, "howard.objects.database.Database.is_compressed": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 127}, "howard.objects.database.Database.get_header_infos_list": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 111}, "howard.objects.database.Database.find_column": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 118, "bases": 0, "doc": 307}, "howard.objects.database.Database.map_columns": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 95, "bases": 0, "doc": 206}, "howard.objects.database.Database.get_columns": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 89, "bases": 0, "doc": 351}, "howard.objects.database.Database.get_table_columns_from_format": {"qualname": 6, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 108}, "howard.objects.database.Database.get_table_columns_from_file": {"qualname": 6, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 72, "bases": 0, "doc": 149}, "howard.objects.database.Database.get_annotations": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 132}, "howard.objects.database.Database.get_extra_columns": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 71, "bases": 0, "doc": 217}, "howard.objects.database.Database.is_vcf": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 49, "bases": 0, "doc": 182}, "howard.objects.database.Database.get_conn": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 33}, "howard.objects.database.Database.is_genotype_column": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 81, "bases": 0, "doc": 320}, "howard.objects.database.Database.export": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 356, "bases": 0, "doc": 1059}, "howard.objects.genome": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.genome.ChromosomeSubset": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "howard.objects.genome.ChromosomeSubset.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 3}, "howard.objects.genome.ChromosomeSubset.name": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.genome.ChromosomeSubset.genome": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.genome.GenomeSubset": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 13}, "howard.objects.genome.GenomeSubset.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 3}, "howard.objects.genome.GenomeSubset.genome": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.genome.GenomeSubset.chrom": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.genome.GenomeSubset.start": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.genome.GenomeSubset.end": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.genome.GenomeSubset.seqid": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.genome.MockGenomeError": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 11}, "howard.objects.genome.MockSequence": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.genome.MockSequence.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 3}, "howard.objects.genome.MockSequence.sequence": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.genome.MockChromosome": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.genome.MockChromosome.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 3}, "howard.objects.genome.MockChromosome.name": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.genome.MockChromosome.genome": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.genome.MockGenome": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.genome.MockGenome.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 87}, "howard.objects.genome.MockGenome.get_seq": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 22}, "howard.objects.genome.MockGenome.read": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 21}, "howard.objects.genome.MockGenome.write": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 10}, "howard.objects.genome.MockGenomeTestFile": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 3}, "howard.objects.genome.MockGenomeTestFile.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 62, "bases": 0, "doc": 87}, "howard.objects.genome.MockGenomeTestFile.get_seq": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 22}, "howard.objects.hgvs": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 453}, "howard.objects.hgvs.CHROM_PREFIX": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.CODON_1": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 450, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.CODON_3": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 450, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.CODON_FULL": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 454, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.NUCLEOTIDE_TRANSLATE": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 30, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSRegex": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 9}, "howard.objects.hgvs.HGVSRegex.BASE": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSRegex.BASES": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSRegex.DNA_REF": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 9, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSRegex.DNA_ALT": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 9, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSRegex.EQUAL": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 9, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSRegex.SUB": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 10, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSRegex.INS": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 10, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSRegex.DEL": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 10, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSRegex.DUP": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 10, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSRegex.COORD_START": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 9, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSRegex.COORD_END": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 9, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSRegex.COORD_RANGE": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 14, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSRegex.CDNA_COORD": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 28, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSRegex.CDNA_START": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 36, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSRegex.CDNA_END": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 36, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSRegex.CDNA_RANGE": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 68, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 994, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 929, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSRegex.PEP": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 9, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSRegex.PEP_REF": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 13, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSRegex.PEP_REF2": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 13, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSRegex.PEP_ALT": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 13, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSRegex.PEP_EXTRA": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 11, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 148, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE_REGEXES": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 163, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 346, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE_REGEXES": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 417, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.REFSEQ_PREFIXES": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 191, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 207, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.get_refseq_type": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 69}, "howard.objects.hgvs.InvalidHGVSName": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 9}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 65, "bases": 0, "doc": 142}, "howard.objects.hgvs.InvalidHGVSName.name": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.InvalidHGVSName.part": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.InvalidHGVSName.reason": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSName": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 8}, "howard.objects.hgvs.HGVSName.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 348, "bases": 0, "doc": 702}, "howard.objects.hgvs.HGVSName.name": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSName.prefix": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSName.chrom": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSName.transcript": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSName.transcript_protein": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSName.gene": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSName.exon": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSName.kind": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSName.mutation_type": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSName.start": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSName.end": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSName.ref_allele": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSName.ref2_allele": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSName.alt_allele": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSName.cdna_start": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSName.cdna_end": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSName.pep_extra": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.hgvs.HGVSName.parse": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 77}, "howard.objects.hgvs.HGVSName.parse_prefix": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 122}, "howard.objects.hgvs.HGVSName.parse_allele": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 127}, "howard.objects.hgvs.HGVSName.parse_cdna": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 102}, "howard.objects.hgvs.HGVSName.parse_protein": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 119}, "howard.objects.hgvs.HGVSName.parse_genome": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 88}, "howard.objects.hgvs.HGVSName.format": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 122, "bases": 0, "doc": 338}, "howard.objects.hgvs.HGVSName.format_prefix": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 110, "bases": 0, "doc": 309}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 84}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 73}, "howard.objects.hgvs.HGVSName.format_cdna": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 52}, "howard.objects.hgvs.HGVSName.format_protein": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 64}, "howard.objects.hgvs.HGVSName.format_coords": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 60}, "howard.objects.hgvs.HGVSName.format_genome": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 48}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 109}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 96}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 100}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 189}, "howard.objects.transcript": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 8}, "howard.objects.transcript.Gene": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.transcript.Gene.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 3}, "howard.objects.transcript.Gene.name": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.transcript.Transcript": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.transcript.Transcript.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 141, "bases": 0, "doc": 363}, "howard.objects.transcript.Transcript.name": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.transcript.Transcript.version": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.transcript.Transcript.gene": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.transcript.Transcript.tx_position": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.transcript.Transcript.cds_position": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.transcript.Transcript.is_default": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.transcript.Transcript.cdna_match": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.transcript.Transcript.full_name": {"qualname": 3, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 68}, "howard.objects.transcript.Transcript.is_coding": {"qualname": 3, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 45}, "howard.objects.transcript.Transcript.strand": {"qualname": 2, "fullname": 5, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 74}, "howard.objects.transcript.Transcript.ordered_cdna_match": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 45}, "howard.objects.transcript.Transcript.get_cds_start_stop": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 50}, "howard.objects.transcript.Transcript.start_codon": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 30}, "howard.objects.transcript.Transcript.stop_codon": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 41}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 80}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 25, "bases": 0, "doc": 73}, "howard.objects.transcript.Transcript.find_exon_number": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 75}, "howard.objects.transcript.BED6Interval_base": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 13}, "howard.objects.transcript.BED6Interval_base.__init__": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 17}, "howard.objects.transcript.BED6Interval_base.chrom": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 7}, "howard.objects.transcript.BED6Interval_base.chrom_start": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 7}, "howard.objects.transcript.BED6Interval_base.chrom_end": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 7}, "howard.objects.transcript.BED6Interval_base.name": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 7}, "howard.objects.transcript.BED6Interval_base.score": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 7}, "howard.objects.transcript.BED6Interval_base.strand": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 7}, "howard.objects.transcript.BED6Interval": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 13}, "howard.objects.transcript.BED6Interval.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 17}, "howard.objects.transcript.BED6Interval.distance": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 141}, "howard.objects.transcript.Exon": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.transcript.Exon.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 53, "bases": 0, "doc": 123}, "howard.objects.transcript.Exon.transcript": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.transcript.Exon.tx_position": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.transcript.Exon.number": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.transcript.Exon.name": {"qualname": 2, "fullname": 5, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 49}, "howard.objects.transcript.Exon.get_as_interval": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 137}, "howard.objects.transcript.Exon.strand": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.transcript.CDNA_Match": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 3}, "howard.objects.transcript.CDNA_Match.__init__": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 88, "bases": 0, "doc": 214}, "howard.objects.transcript.CDNA_Match.cdna_start": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.transcript.CDNA_Match.cdna_end": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.transcript.CDNA_Match.gap": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.transcript.CDNA_Match.length": {"qualname": 3, "fullname": 6, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 51}, "howard.objects.transcript.CDNA_Match.get_offset": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 41, "bases": 0, "doc": 210}, "howard.objects.variant": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 8}, "howard.objects.variant.Position": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 8}, "howard.objects.variant.Position.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 3}, "howard.objects.variant.Position.chrom": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.variant.Position.chrom_start": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.variant.Position.chrom_stop": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.variant.Position.is_forward_strand": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.variant.revcomp": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 5}, "howard.objects.variant.get_sequence": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 19}, "howard.objects.variant.get_sequence_from_position": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 18}, "howard.objects.variant.justify_indel": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 79}, "howard.objects.variant.justify_genomic_indel": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 12}, "howard.objects.variant.normalize_variant": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 80, "bases": 0, "doc": 43}, "howard.objects.variant.NormalizedVariant": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 9}, "howard.objects.variant.NormalizedVariant.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 95, "bases": 0, "doc": 68}, "howard.objects.variant.NormalizedVariant.position": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.variant.NormalizedVariant.alleles": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.variant.NormalizedVariant.seq_5p": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.variant.NormalizedVariant.seq_3p": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.variant.NormalizedVariant.genome": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.variant.NormalizedVariant.log": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.variant.NormalizedVariant.indels_start_with_same_base": {"qualname": 6, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.variant.NormalizedVariant.molecular_class": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.variant.NormalizedVariant.ref_allele": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.variant.NormalizedVariant.alt_alleles": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.variant.NormalizedVariant.variant": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.variants": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.variants.Variants": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.objects.variants.Variants.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 105, "bases": 0, "doc": 80}, "howard.objects.variants.Variants.set_samples": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 114}, "howard.objects.variants.Variants.get_samples": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 36}, "howard.objects.variants.Variants.get_samples_check": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 77}, "howard.objects.variants.Variants.set_input": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 73}, "howard.objects.variants.Variants.set_config": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 84}, "howard.objects.variants.Variants.set_param": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 56}, "howard.objects.variants.Variants.init_variables": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 17}, "howard.objects.variants.Variants.get_indexing": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 39}, "howard.objects.variants.Variants.get_connexion_config": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 46}, "howard.objects.variants.Variants.get_duckdb_settings": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 46}, "howard.objects.variants.Variants.set_connexion_db": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 43}, "howard.objects.variants.Variants.set_connexion": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 88}, "howard.objects.variants.Variants.set_output": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 100}, "howard.objects.variants.Variants.set_header": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 23}, "howard.objects.variants.Variants.get_query_to_df": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 66, "bases": 0, "doc": 173}, "howard.objects.variants.Variants.get_overview": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 15}, "howard.objects.variants.Variants.get_stats": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 55}, "howard.objects.variants.Variants.stats_to_file": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 84}, "howard.objects.variants.Variants.print_stats": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 50, "bases": 0, "doc": 176}, "howard.objects.variants.Variants.get_input": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 26}, "howard.objects.variants.Variants.get_input_format": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 100}, "howard.objects.variants.Variants.get_input_compressed": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 116}, "howard.objects.variants.Variants.get_output": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 26}, "howard.objects.variants.Variants.get_output_format": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 112}, "howard.objects.variants.Variants.get_config": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 22}, "howard.objects.variants.Variants.get_param": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 22}, "howard.objects.variants.Variants.get_connexion_db": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 27}, "howard.objects.variants.Variants.get_prefix": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 25}, "howard.objects.variants.Variants.get_table_variants": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 60}, "howard.objects.variants.Variants.get_tmp_dir": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 57}, "howard.objects.variants.Variants.get_connexion_type": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 34}, "howard.objects.variants.Variants.get_connexion": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 20}, "howard.objects.variants.Variants.close_connexion": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 26}, "howard.objects.variants.Variants.get_header": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 57}, "howard.objects.variants.Variants.get_header_infos_list": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 32}, "howard.objects.variants.Variants.get_header_length": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 102}, "howard.objects.variants.Variants.get_header_columns": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 27}, "howard.objects.variants.Variants.get_header_columns_as_list": {"qualname": 6, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 27}, "howard.objects.variants.Variants.get_header_columns_as_sql": {"qualname": 6, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 27}, "howard.objects.variants.Variants.get_header_sample_list": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 70, "bases": 0, "doc": 267}, "howard.objects.variants.Variants.is_genotype_column": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 150}, "howard.objects.variants.Variants.get_verbose": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 42}, "howard.objects.variants.Variants.get_connexion_format": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 27}, "howard.objects.variants.Variants.insert_file_to_table": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 95, "bases": 0, "doc": 303}, "howard.objects.variants.Variants.load_data": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 73, "bases": 0, "doc": 168}, "howard.objects.variants.Variants.get_explode_infos": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 62}, "howard.objects.variants.Variants.get_explode_infos_fields": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 57, "bases": 0, "doc": 233}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 33, "bases": 0, "doc": 102}, "howard.objects.variants.Variants.add_column": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 66, "bases": 0, "doc": 261}, "howard.objects.variants.Variants.drop_column": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 71, "bases": 0, "doc": 162}, "howard.objects.variants.Variants.explode_infos": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 127, "bases": 0, "doc": 428}, "howard.objects.variants.Variants.create_indexes": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 9}, "howard.objects.variants.Variants.drop_indexes": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 9}, "howard.objects.variants.Variants.read_vcf_header": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 50}, "howard.objects.variants.Variants.read_vcf_header_file": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 99}, "howard.objects.variants.Variants.execute_query": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 50}, "howard.objects.variants.Variants.export_output": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 243, "bases": 0, "doc": 593}, "howard.objects.variants.Variants.get_extra_infos": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 124}, "howard.objects.variants.Variants.get_extra_infos_sql": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 67}, "howard.objects.variants.Variants.export_header": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 116, "bases": 0, "doc": 345}, "howard.objects.variants.Variants.export_variant_vcf": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 149, "bases": 0, "doc": 445}, "howard.objects.variants.Variants.run_commands": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 53}, "howard.objects.variants.Variants.get_threads": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 113}, "howard.objects.variants.Variants.get_memory": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 143}, "howard.objects.variants.Variants.update_from_vcf": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 25, "bases": 0, "doc": 40}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 25, "bases": 0, "doc": 46}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 25, "bases": 0, "doc": 62}, "howard.objects.variants.Variants.drop_variants_table": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 12}, "howard.objects.variants.Variants.set_variant_id": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 105}, "howard.objects.variants.Variants.get_variant_id_column": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 110}, "howard.objects.variants.Variants.scan_databases": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 69, "bases": 0, "doc": 150}, "howard.objects.variants.Variants.annotation": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 16}, "howard.objects.variants.Variants.annotation_snpsift": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 41}, "howard.objects.variants.Variants.annotation_bcftools": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 41}, "howard.objects.variants.Variants.annotation_exomiser": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 408}, "howard.objects.variants.Variants.annotation_snpeff": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 42}, "howard.objects.variants.Variants.annotation_annovar": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 54}, "howard.objects.variants.Variants.annotation_parquet": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 50}, "howard.objects.variants.Variants.annotation_splice": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 42}, "howard.objects.variants.Variants.get_config_default": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 147}, "howard.objects.variants.Variants.get_config_json": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 227}, "howard.objects.variants.Variants.prioritization": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 71, "bases": 0, "doc": 215}, "howard.objects.variants.Variants.annotation_hgvs": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 76}, "howard.objects.variants.Variants.get_operations_help": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 3}, "howard.objects.variants.Variants.calculation": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 73, "bases": 0, "doc": 51}, "howard.objects.variants.Variants.calculation_process_sql": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 101}, "howard.objects.variants.Variants.calculation_process_function": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 90}, "howard.objects.variants.Variants.calculation_variant_id": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 33}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 62, "bases": 0, "doc": 148}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 102, "bases": 0, "doc": 265}, "howard.objects.variants.Variants.calculation_extract_nomen": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 14}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 90}, "howard.objects.variants.Variants.calculation_genotype_concordance": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 27}, "howard.objects.variants.Variants.calculation_barcode": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 91}, "howard.objects.variants.Variants.calculation_barcode_family": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 96}, "howard.objects.variants.Variants.calculation_trio": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 27}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 48}, "howard.objects.variants.Variants.calculation_genotype_stats": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 102}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 50, "bases": 0, "doc": 143}, "howard.objects.variants.Variants.calculation_transcripts_prioritization": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 21}, "howard.objects.variants.Variants.calculation_transcripts_export": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 3}, "howard.objects.variants.Variants.transcripts_export": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 49, "bases": 0, "doc": 3}, "howard.objects.variants.Variants.transcripts_prioritization": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 49, "bases": 0, "doc": 188}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"qualname": 7, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 189, "bases": 0, "doc": 568}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"qualname": 7, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 170, "bases": 0, "doc": 514}, "howard.objects.variants.Variants.create_transcript_view": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 72, "bases": 0, "doc": 258}, "howard.objects.variants.Variants.annotation_format_to_table": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 160, "bases": 0, "doc": 506}, "howard.objects.variants.Variants.transcript_view_to_variants": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 154, "bases": 0, "doc": 446}, "howard.tools": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.tools.annotation": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.tools.annotation.annotation": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 71}, "howard.tools.calculation": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.tools.calculation.calculation": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 54}, "howard.tools.databases": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.tools.databases.databases": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 78}, "howard.tools.gui": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.tools.gui.main_folder": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "howard.tools.gui.image_dir": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "howard.tools.gui.gui": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 98}, "howard.tools.help": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.tools.help.main_folder": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "howard.tools.help.help": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 93}, "howard.tools.hgvs": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.tools.hgvs.hgvs": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 75}, "howard.tools.prioritization": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.tools.prioritization.prioritization": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 76}, "howard.tools.process": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.tools.process.process": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 81}, "howard.tools.query": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.tools.query.query": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 60}, "howard.tools.stats": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.tools.stats.stats": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 92}, "howard.tools.tools": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.tools.tools.PathType": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "howard.tools.tools.PathType.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 49}, "howard.tools.tools.arguments": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 12501, "signature": 0, "bases": 0, "doc": 3}, "howard.tools.tools.shared_arguments": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 37, "signature": 0, "bases": 0, "doc": 3}, "howard.tools.tools.commands_arguments": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 4172, "signature": 0, "bases": 0, "doc": 3}, "howard.tools.tools.arguments_dict": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 16725, "signature": 0, "bases": 0, "doc": 3}}, "length": 586, "save": true}, "index": {"qualname": {"root": {"1": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}}, "df": 1}, "3": {"docs": {"howard.objects.hgvs.CODON_3": {"tf": 1}}, "df": 1, "p": {"docs": {"howard.objects.variant.NormalizedVariant.seq_3p": {"tf": 1}}, "df": 1}}, "5": {"docs": {}, "df": 0, "p": {"docs": {"howard.objects.variant.NormalizedVariant.seq_5p": {"tf": 1}}, "df": 1}}, "docs": {"howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.genome.ChromosomeSubset.__init__": {"tf": 1}, "howard.objects.genome.GenomeSubset.__init__": {"tf": 1}, "howard.objects.genome.MockSequence.__init__": {"tf": 1}, "howard.objects.genome.MockChromosome.__init__": {"tf": 1}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.transcript.Gene.__init__": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval.__init__": {"tf": 1}, "howard.objects.transcript.Exon.__init__": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}, "howard.objects.variant.Position.__init__": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}, "howard.objects.variants.Variants.__init__": {"tf": 1}, "howard.tools.tools.PathType.__init__": {"tf": 1}}, "df": 20, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.file_folder": {"tf": 1}, "howard.functions.commons.file_format_delimiters": {"tf": 1}, "howard.functions.commons.file_format_allowed": {"tf": 1}, "howard.functions.commons.file_compressed_format": {"tf": 1}, "howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.functions.commons.get_file_format": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.compress_file": {"tf": 1}, "howard.functions.commons.get_file_compressed": {"tf": 1}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.objects.database.FILE_FORMAT_DELIMITERS": {"tf": 1}, "howard.objects.database.Database.header_file": {"tf": 1}, "howard.objects.database.Database.read_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.find_header_file": {"tf": 1}, "howard.objects.database.Database.set_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}}, "df": 25, "s": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.find": {"tf": 1}, "howard.functions.commons.find_all": {"tf": 1}, "howard.functions.commons.find_genome": {"tf": 1}, "howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.functions.commons.find_nomen": {"tf": 1}, "howard.objects.database.Database.find_header_file": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 1}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}}, "df": 10, "b": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.findbypipeline": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.clean_annotation_field": {"tf": 1}}, "df": 1, "s": {"docs": {"howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.file_folder": {"tf": 1}, "howard.functions.commons.folder_main": {"tf": 1}, "howard.functions.commons.folder_config": {"tf": 1}, "howard.functions.commons.folder_user_home": {"tf": 1}, "howard.functions.commons.folder_howard_home": {"tf": 1}, "howard.functions.commons.folder_plugins": {"tf": 1}, "howard.functions.commons.DEFAULT_TOOLS_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_DATABASE_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_ANNOTATIONS_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_GENOME_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_SNPEFF_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_ANNOVAR_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_REFSEQ_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_DBNSFP_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_EXOMISER_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_DBSNP_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_SPLICE_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_SPLICEAI_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_SPIP_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_DATA_FOLDER": {"tf": 1}, "howard.main.main_folder": {"tf": 1}, "howard.tools.gui.main_folder": {"tf": 1}, "howard.tools.help.main_folder": {"tf": 1}}, "df": 23, "s": {"docs": {"howard.objects.database.Database.databases_folders": {"tf": 1}, "howard.objects.database.Database.set_databases_folders": {"tf": 1}, "howard.objects.database.Database.get_database_folders": {"tf": 1}}, "df": 3}}}}}, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.file_format_delimiters": {"tf": 1}, "howard.functions.commons.file_format_allowed": {"tf": 1}, "howard.functions.commons.file_compressed_format": {"tf": 1}, "howard.functions.commons.BCFTOOLS_FORMAT": {"tf": 1}, "howard.functions.commons.LOG_FORMAT": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.get_file_format": {"tf": 1}, "howard.functions.commons.format_arg_help": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.database.FILE_FORMAT_DELIMITERS": {"tf": 1}, "howard.objects.database.Database.format": {"tf": 1}, "howard.objects.database.Database.set_format": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_output_format": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_format": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 28}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.variant.Position.is_forward_strand": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.example_function": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}}, "df": 2, "s": {"docs": {"howard.functions.commons.run_parallel_functions": {"tf": 1}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.full_path": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}, "howard.objects.transcript.Transcript.full_name": {"tf": 1}}, "df": 3}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.extract_float_from_str": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.commons.extract_float_from_str": {"tf": 1}, "howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.from_annovar.from_annovar": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1}, "howard.objects.variant.get_sequence_from_position": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}}, "df": 21}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {"howard.objects.hgvs.HGVSRegex.SUB": {"tf": 1}}, "df": 1, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.subfolder_plugins": {"tf": 1}}, "df": 1}}}}}}}}, "q": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.code_type_map_to_sql": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_sql": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}}, "df": 7, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {"howard.functions.commons.DEFAULT_SNPEFF_FOLDER": {"tf": 1}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.objects.variants.Variants.annotation_snpeff": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}}, "df": 7}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.variants.Variants.annotation_snpsift": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.DEFAULT_SPLICE_FOLDER": {"tf": 1}, "howard.objects.variants.Variants.annotation_splice": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "i": {"docs": {"howard.functions.commons.DEFAULT_SPLICEAI_FOLDER": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {"howard.functions.commons.split_interval": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.commons.DEFAULT_SPIP_FOLDER": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.DEFAULT_CHUNK_SIZE": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.set_log_level": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1}, "howard.objects.database.Database.set_database": {"tf": 1}, "howard.objects.database.Database.set_databases_folders": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.objects.database.Database.set_header_file": {"tf": 1}, "howard.objects.database.Database.set_assembly": {"tf": 1}, "howard.objects.database.Database.set_format": {"tf": 1}, "howard.objects.variants.Variants.set_samples": {"tf": 1}, "howard.objects.variants.Variants.set_input": {"tf": 1}, "howard.objects.variants.Variants.set_config": {"tf": 1}, "howard.objects.variants.Variants.set_param": {"tf": 1}, "howard.objects.variants.Variants.set_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.set_output": {"tf": 1}, "howard.objects.variants.Variants.set_header": {"tf": 1}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1}}, "df": 17, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.variants.Variants.get_duckdb_settings": {"tf": 1}}, "df": 1}}}}}}, "q": {"docs": {"howard.objects.genome.MockGenome.get_seq": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.get_seq": {"tf": 1}, "howard.objects.variant.NormalizedVariant.seq_5p": {"tf": 1}, "howard.objects.variant.NormalizedVariant.seq_3p": {"tf": 1}}, "df": 4, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.objects.genome.MockSequence.sequence": {"tf": 1}, "howard.objects.variant.get_sequence": {"tf": 1}, "howard.objects.variant.get_sequence_from_position": {"tf": 1}}, "df": 5}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.genome.GenomeSubset.seqid": {"tf": 1}}, "df": 1}}}, "p": {"docs": {"howard.objects.database.SEP_TYPE": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.get_stats": {"tf": 1}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}}, "df": 6}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.cdna.CDNA_START_CODON": {"tf": 1}, "howard.objects.genome.GenomeSubset.start": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_START": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_START": {"tf": 1}, "howard.objects.hgvs.HGVSName.start": {"tf": 1}, "howard.objects.hgvs.HGVSName.cdna_start": {"tf": 1}, "howard.objects.transcript.Transcript.get_cds_start_stop": {"tf": 1}, "howard.objects.transcript.Transcript.start_codon": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom_start": {"tf": 1}, "howard.objects.transcript.CDNA_Match.cdna_start": {"tf": 1}, "howard.objects.variant.Position.chrom_start": {"tf": 1}, "howard.objects.variant.NormalizedVariant.indels_start_with_same_base": {"tf": 1}}, "df": 12}}}, "r": {"docs": {"howard.functions.commons.extract_float_from_str": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.params_string_to_dict": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.transcript.Transcript.strand": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.strand": {"tf": 1}, "howard.objects.transcript.Exon.strand": {"tf": 1}, "howard.objects.variant.Position.is_forward_strand": {"tf": 1}}, "df": 4}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {"howard.objects.cdna.CDNA_STOP_CODON": {"tf": 1}, "howard.objects.transcript.Transcript.get_cds_start_stop": {"tf": 1}, "howard.objects.transcript.Transcript.stop_codon": {"tf": 1}, "howard.objects.variant.Position.chrom_stop": {"tf": 1}}, "df": 4}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"howard.functions.commons.genome_build_switch": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.bed_sort": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.transcript.BED6Interval_base.score": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.variants.Variants.scan_databases": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variant.NormalizedVariant.indels_start_with_same_base": {"tf": 1}}, "df": 1}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.get_header_sample_list": {"tf": 1}}, "df": 1, "s": {"docs": {"howard.objects.variants.Variants.set_samples": {"tf": 1}, "howard.objects.variants.Variants.get_samples": {"tf": 1}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1}}, "df": 3}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.shared_arguments": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.subfolder_plugins": {"tf": 1}, "howard.functions.commons.folder_plugins": {"tf": 1}, "howard.functions.plugins.plugins_infos": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1}, "howard.functions.plugins.plugins_to_load": {"tf": 1}}, "df": 5}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.run_parallel_commands": {"tf": 1}, "howard.functions.commons.run_parallel_functions": {"tf": 1}}, "df": 2}}}}, "m": {"docs": {"howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1}, "howard.objects.variants.Variants.set_param": {"tf": 1}, "howard.objects.variants.Variants.get_param": {"tf": 1}}, "df": 6, "s": {"docs": {"howard.functions.commons.params_string_to_dict": {"tf": 1}}, "df": 1}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.objects.variants.Variants.annotation_parquet": {"tf": 1}}, "df": 3}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.objects.cdna.CDNACoord.parse": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}}, "df": 8}}, "t": {"docs": {"howard.objects.hgvs.InvalidHGVSName.part": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"howard.functions.commons.full_path": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.PathType": {"tf": 1}, "howard.tools.tools.PathType.__init__": {"tf": 1}}, "df": 2}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.objects.hgvs.CHROM_PREFIX": {"tf": 1}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1}, "howard.objects.hgvs.HGVSName.prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}, "howard.objects.variants.Variants.get_prefix": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1}}, "df": 8, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.transcript_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1}}, "df": 4}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}, "howard.tools.process.process": {"tf": 1}}, "df": 3}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.variants.Variants.print_stats": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}}, "df": 4}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {"howard.objects.hgvs.HGVSRegex.PEP": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_REF": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_REF2": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALT": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_EXTRA": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE_REGEXES": {"tf": 1}, "howard.objects.hgvs.HGVSName.pep_extra": {"tf": 1}}, "df": 8}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.transcript.Transcript.tx_position": {"tf": 1}, "howard.objects.transcript.Transcript.cds_position": {"tf": 1}, "howard.objects.transcript.Exon.tx_position": {"tf": 1}, "howard.objects.variant.Position": {"tf": 1}, "howard.objects.variant.Position.__init__": {"tf": 1}, "howard.objects.variant.Position.chrom": {"tf": 1}, "howard.objects.variant.Position.chrom_start": {"tf": 1}, "howard.objects.variant.Position.chrom_stop": {"tf": 1}, "howard.objects.variant.Position.is_forward_strand": {"tf": 1}, "howard.objects.variant.get_sequence_from_position": {"tf": 1}, "howard.objects.variant.NormalizedVariant.position": {"tf": 1}}, "df": 11}}}}}}}, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}}, "df": 1}}}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.folder_main": {"tf": 1}, "howard.main.main_folder": {"tf": 1}, "howard.main.main": {"tf": 1}, "howard.tools.gui.main_folder": {"tf": 1}, "howard.tools.help.main_folder": {"tf": 1}}, "df": 5}}, "p": {"docs": {"howard.functions.commons.comparison_map": {"tf": 1}, "howard.functions.commons.code_type_map": {"tf": 1}, "howard.functions.commons.code_type_map_to_sql": {"tf": 1}, "howard.functions.commons.CODE_TYPE_MAP": {"tf": 1}, "howard.functions.commons.GENOTYPE_MAP": {"tf": 1}, "howard.objects.database.Database.map_columns": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}}, "df": 7}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.MACHIN_LIST": {"tf": 1}}, "df": 1}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.utils.make_transcript": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.objects.transcript.Transcript.cdna_match": {"tf": 1}, "howard.objects.transcript.Transcript.ordered_cdna_match": {"tf": 1}, "howard.objects.transcript.CDNA_Match": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}, "howard.objects.transcript.CDNA_Match.cdna_start": {"tf": 1}, "howard.objects.transcript.CDNA_Match.cdna_end": {"tf": 1}, "howard.objects.transcript.CDNA_Match.gap": {"tf": 1}, "howard.objects.transcript.CDNA_Match.length": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}}, "df": 10, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.utils.matches_ref_allele": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.merge_regions": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.get_memory": {"tf": 1}, "howard.functions.commons.extract_memory_in_go": {"tf": 1}, "howard.objects.variants.Variants.get_memory": {"tf": 1}}, "df": 3}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.from_extann.create_metaheader": {"tf": 1}, "howard.functions.from_extann.add_default_metaheader": {"tf": 1}, "howard.functions.from_extann.metaheader_rows": {"tf": 1}}, "df": 3}}}}}}}}}, "k": {"docs": {"howard.functions.commons.get_argument_to_mk": {"tf": 1}}, "df": 1}, "s": {"docs": {}, "df": 0, "g": {"docs": {"howard.main.msg_gui_disable": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.genome.MockGenome": {"tf": 1}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenome.get_seq": {"tf": 1}, "howard.objects.genome.MockGenome.read": {"tf": 1}, "howard.objects.genome.MockGenome.write": {"tf": 1}}, "df": 5, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"howard.objects.genome.MockGenomeError": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.genome.MockGenomeTestFile": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.get_seq": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.genome.MockSequence": {"tf": 1}, "howard.objects.genome.MockSequence.__init__": {"tf": 1}, "howard.objects.genome.MockSequence.sequence": {"tf": 1}}, "df": 3}}}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.genome.MockChromosome": {"tf": 1}, "howard.objects.genome.MockChromosome.__init__": {"tf": 1}, "howard.objects.genome.MockChromosome.name": {"tf": 1}, "howard.objects.genome.MockChromosome.genome": {"tf": 1}}, "df": 4}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"howard.objects.variant.NormalizedVariant.molecular_class": {"tf": 1}}, "df": 1}}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.hgvs.HGVSName.mutation_type": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.folder_config": {"tf": 1}, "howard.functions.commons.load_config_args": {"tf": 1}, "howard.objects.variants.Variants.set_config": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_config": {"tf": 1}, "howard.objects.variants.Variants.get_config": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}}, "df": 7}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.databases.query_and_concatenate_columns": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.calculation_genotype_concordance": {"tf": 1}}, "df": 1}}}}}}}}, "n": {"docs": {"howard.objects.database.Database.get_conn": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.variants.Variants.get_connexion_config": {"tf": 1}, "howard.objects.variants.Variants.set_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_type": {"tf": 1}, "howard.objects.variants.Variants.get_connexion": {"tf": 1}, "howard.objects.variants.Variants.close_connexion": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_format": {"tf": 1}}, "df": 8}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.comparison_map": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.compress_file": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.file_compressed_format": {"tf": 1}, "howard.functions.commons.get_file_compressed": {"tf": 1}, "howard.objects.database.Database.is_compressed": {"tf": 1}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1}}, "df": 4}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.genotype_compression": {"tf": 1}, "howard.functions.commons.get_compression_type": {"tf": 1}}, "df": 2}}}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.command": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1}}, "df": 2, "s": {"docs": {"howard.functions.commons.run_parallel_commands": {"tf": 1}, "howard.objects.variants.Variants.run_commands": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 1}}, "df": 3}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.code_type_map": {"tf": 1}, "howard.functions.commons.code_type_map_to_sql": {"tf": 1}, "howard.functions.commons.CODE_TYPE_MAP": {"tf": 1}}, "df": 3}, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.cdna.CDNA_START_CODON": {"tf": 1}, "howard.objects.cdna.CDNA_STOP_CODON": {"tf": 1}, "howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}, "howard.objects.transcript.Transcript.start_codon": {"tf": 1}, "howard.objects.transcript.Transcript.stop_codon": {"tf": 1}}, "df": 7}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.transcript.Transcript.is_coding": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.commons.detect_column_type": {"tf": 1}, "howard.functions.commons.determine_column_number": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.drop_column": {"tf": 1}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}}, "df": 10, "s": {"docs": {"howard.functions.commons.vcf_required_columns": {"tf": 1}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1}, "howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"tf": 1}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1}, "howard.objects.database.Database.map_columns": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_sql": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}}, "df": 17}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.hgvs.HGVSRegex.COORD_START": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_END": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_RANGE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_COORD": {"tf": 1}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1}}, "df": 6, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.from_extann.get_gene_coordinate": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {"howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}}, "df": 5}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.DEFAULT_EXOMISER_CADD_URL": {"tf": 1}}, "df": 1}}, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.variants.Variants.calculation": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}, "howard.objects.variants.Variants.calculation_variant_id": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_nomen": {"tf": 1}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_concordance": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1}, "howard.objects.variants.Variants.calculation_trio": {"tf": 1}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_export": {"tf": 1}, "howard.tools.calculation.calculation": {"tf": 1}}, "df": 18}}}}}}}}}}, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {"howard.functions.commons.DEFAULT_CHUNK_SIZE": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"howard.functions.commons.check_docker_image_exists": {"tf": 1}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.from_extann.get_chosen_transcript": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"howard.objects.genome.GenomeSubset.chrom": {"tf": 1}, "howard.objects.hgvs.CHROM_PREFIX": {"tf": 1}, "howard.objects.hgvs.HGVSName.chrom": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom_start": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom_end": {"tf": 1}, "howard.objects.variant.Position.chrom": {"tf": 1}, "howard.objects.variant.Position.chrom_start": {"tf": 1}, "howard.objects.variant.Position.chrom_stop": {"tf": 1}}, "df": 9, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.genome.ChromosomeSubset": {"tf": 1}, "howard.objects.genome.ChromosomeSubset.__init__": {"tf": 1}, "howard.objects.genome.ChromosomeSubset.name": {"tf": 1}, "howard.objects.genome.ChromosomeSubset.genome": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.create_where_clause": {"tf": 1}, "howard.functions.from_extann.create_metaheader": {"tf": 1}, "howard.functions.utils.create_refseq_table": {"tf": 1}, "howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.variants.Variants.create_indexes": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}}, "df": 8}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.create_where_clause": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.variant.NormalizedVariant.molecular_class": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.clean_annotation_field": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.close_connexion": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {"howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.objects.cdna.CDNA_START_CODON": {"tf": 1}, "howard.objects.cdna.CDNA_STOP_CODON": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_COORD": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_START": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_END": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_RANGE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"tf": 1}, "howard.objects.hgvs.HGVSName.cdna_start": {"tf": 1}, "howard.objects.hgvs.HGVSName.cdna_end": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 1}, "howard.objects.transcript.Transcript.cdna_match": {"tf": 1}, "howard.objects.transcript.Transcript.ordered_cdna_match": {"tf": 1}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1}, "howard.objects.transcript.CDNA_Match": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}, "howard.objects.transcript.CDNA_Match.cdna_start": {"tf": 1.4142135623730951}, "howard.objects.transcript.CDNA_Match.cdna_end": {"tf": 1.4142135623730951}, "howard.objects.transcript.CDNA_Match.gap": {"tf": 1}, "howard.objects.transcript.CDNA_Match.length": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}}, "df": 26, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.cdna.CDNACoord": {"tf": 1}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.cdna.CDNACoord.parse": {"tf": 1}}, "df": 3}}}}}}}, "s": {"docs": {"howard.objects.transcript.Transcript.cds_position": {"tf": 1}, "howard.objects.transcript.Transcript.get_cds_start_stop": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.folder_user_home": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.DEFAULT_ANNOVAR_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_REFSEQ_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_DBNSFP_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_EXOMISER_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_EXOMISER_REMM_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_EXOMISER_CADD_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_ALPHAMISSENSE_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_DBSNP_URL": {"tf": 1}}, "df": 8}}, "p": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.update_from_vcf": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1}}, "df": 3}}}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.folder_user_home": {"tf": 1}, "howard.functions.commons.folder_howard_home": {"tf": 1}}, "df": 2}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.folder_howard_home": {"tf": 1}}, "df": 1}}}}}, "g": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1}}, "df": 10, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"howard.objects.hgvs.HGVSRegex": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.BASE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.BASES": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DNA_REF": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DNA_ALT": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.EQUAL": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.SUB": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.INS": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DEL": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DUP": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_START": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_END": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_RANGE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_COORD": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_START": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_END": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_RANGE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_REF": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_REF2": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALT": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_EXTRA": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE_REGEXES": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE_REGEXES": {"tf": 1}}, "df": 28}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.HGVSName": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.name": {"tf": 1}, "howard.objects.hgvs.HGVSName.prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.chrom": {"tf": 1}, "howard.objects.hgvs.HGVSName.transcript": {"tf": 1}, "howard.objects.hgvs.HGVSName.transcript_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.gene": {"tf": 1}, "howard.objects.hgvs.HGVSName.exon": {"tf": 1}, "howard.objects.hgvs.HGVSName.kind": {"tf": 1}, "howard.objects.hgvs.HGVSName.mutation_type": {"tf": 1}, "howard.objects.hgvs.HGVSName.start": {"tf": 1}, "howard.objects.hgvs.HGVSName.end": {"tf": 1}, "howard.objects.hgvs.HGVSName.ref_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.ref2_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.alt_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.cdna_start": {"tf": 1}, "howard.objects.hgvs.HGVSName.cdna_end": {"tf": 1}, "howard.objects.hgvs.HGVSName.pep_extra": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}}, "df": 37}}}}}}, "m": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.databases.databases_download_hgmd": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.format_arg_help": {"tf": 1}, "howard.objects.variants.Variants.get_operations_help": {"tf": 1}, "howard.tools.help.help": {"tf": 1}}, "df": 6}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.objects.database.DEFAULT_VCF_HEADER": {"tf": 1}, "howard.objects.database.DEFAULT_VCF_HEADER_DUCKDB_TYPES": {"tf": 1}, "howard.objects.database.DEFAULT_HEADER_LIST": {"tf": 1}, "howard.objects.database.Database.header": {"tf": 1}, "howard.objects.database.Database.header_file": {"tf": 1}, "howard.objects.database.Database.read_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_length": {"tf": 1}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.find_header_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.objects.database.Database.set_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.variants.Variants.set_header": {"tf": 1}, "howard.objects.variants.Variants.get_header": {"tf": 1}, "howard.objects.variants.Variants.get_header_infos_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_length": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_sql": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1}}, "df": 29}}}}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.code_type_map": {"tf": 1}, "howard.functions.commons.code_type_map_to_sql": {"tf": 1}, "howard.functions.commons.CODE_TYPE_MAP": {"tf": 1}, "howard.functions.commons.get_compression_type": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.commons.detect_column_type": {"tf": 1}, "howard.objects.database.SEP_TYPE": {"tf": 1}, "howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1}, "howard.objects.hgvs.get_refseq_type": {"tf": 1}, "howard.objects.hgvs.HGVSName.mutation_type": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_type": {"tf": 1}}, "df": 13, "s": {"docs": {"howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.from_annovar.TYPES": {"tf": 1}, "howard.objects.database.DEFAULT_VCF_HEADER_DUCKDB_TYPES": {"tf": 1}}, "df": 3}}}}, "o": {"docs": {"howard.functions.commons.code_type_map_to_sql": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.functions.from_extann.extann_to_info": {"tf": 1}, "howard.functions.plugins.plugins_to_load": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.objects.database.DUCKDB_EXTENSION_TO_LOAD": {"tf": 1}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 19, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.DEFAULT_TOOLS_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_TOOLS_BIN": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {"howard.functions.commons.trio": {"tf": 1}, "howard.objects.variants.Variants.calculation_trio": {"tf": 1}}, "df": 2}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.from_extann.get_longest_transcript": {"tf": 1}, "howard.functions.from_extann.get_all_transcript": {"tf": 1}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1}, "howard.functions.utils.make_transcript": {"tf": 1}, "howard.functions.utils.get_transcript": {"tf": 1}, "howard.objects.hgvs.HGVSName.transcript": {"tf": 1}, "howard.objects.hgvs.HGVSName.transcript_protein": {"tf": 1}, "howard.objects.transcript.Transcript": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.transcript.Transcript.name": {"tf": 1}, "howard.objects.transcript.Transcript.version": {"tf": 1}, "howard.objects.transcript.Transcript.gene": {"tf": 1}, "howard.objects.transcript.Transcript.tx_position": {"tf": 1}, "howard.objects.transcript.Transcript.cds_position": {"tf": 1}, "howard.objects.transcript.Transcript.is_default": {"tf": 1}, "howard.objects.transcript.Transcript.cdna_match": {"tf": 1}, "howard.objects.transcript.Transcript.full_name": {"tf": 1}, "howard.objects.transcript.Transcript.is_coding": {"tf": 1}, "howard.objects.transcript.Transcript.strand": {"tf": 1}, "howard.objects.transcript.Transcript.ordered_cdna_match": {"tf": 1}, "howard.objects.transcript.Transcript.get_cds_start_stop": {"tf": 1}, "howard.objects.transcript.Transcript.start_codon": {"tf": 1}, "howard.objects.transcript.Transcript.stop_codon": {"tf": 1}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 1}, "howard.objects.transcript.Exon.transcript": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 31, "s": {"docs": {"howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.utils.read_transcripts": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_export": {"tf": 1}, "howard.objects.variants.Variants.transcripts_export": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}}, "df": 7}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.NUCLEOTIDE_TRANSLATE": {"tf": 1}}, "df": 1}}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.commons.get_tmp": {"tf": 1}, "howard.objects.variants.Variants.get_tmp_dir": {"tf": 1}}, "df": 2}}, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.get_threads": {"tf": 1}, "howard.objects.variants.Variants.get_threads": {"tf": 1}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.time_limit": {"tf": 1}}, "df": 1, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.TimeoutException": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "v": {"docs": {"howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.utils.create_refseq_table": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.objects.database.Database.table": {"tf": 1}, "howard.objects.database.Database.get_database_table": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1}, "howard.objects.variants.Variants.get_table_variants": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.drop_variants_table": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 10, "s": {"docs": {"howard.objects.database.Database.get_database_tables": {"tf": 1}}, "df": 1}}}}}, "x": {"docs": {"howard.objects.transcript.Transcript.tx_position": {"tf": 1}, "howard.objects.transcript.Exon.tx_position": {"tf": 1}}, "df": 2}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"howard.objects.hgvs.HGVSRegex.DEL": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.file_format_delimiters": {"tf": 1}, "howard.objects.database.FILE_FORMAT_DELIMITERS": {"tf": 1}}, "df": 2}}}}}}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.DEFAULT_TOOLS_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_TOOLS_BIN": {"tf": 1}, "howard.functions.commons.DEFAULT_ANNOVAR_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_REFSEQ_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_DBNSFP_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_EXOMISER_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_EXOMISER_REMM_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_EXOMISER_CADD_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_ALPHAMISSENSE_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_DBSNP_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_DATABASE_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_ANNOTATIONS_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_GENOME_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_SNPEFF_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_ANNOVAR_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_REFSEQ_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_DBNSFP_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_EXOMISER_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_DBSNP_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_SPLICE_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_SPLICEAI_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_SPIP_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_DATA_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_ASSEMBLY": {"tf": 1}, "howard.functions.commons.DEFAULT_CHUNK_SIZE": {"tf": 1}, "howard.functions.commons.get_default_argument": {"tf": 1}, "howard.functions.from_extann.add_default_metaheader": {"tf": 1}, "howard.objects.database.DEFAULT_VCF_HEADER": {"tf": 1}, "howard.objects.database.DEFAULT_VCF_HEADER_DUCKDB_TYPES": {"tf": 1}, "howard.objects.database.DEFAULT_HEADER_LIST": {"tf": 1}, "howard.objects.transcript.Transcript.is_default": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1}}, "df": 32}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.commons.determine_column_number": {"tf": 1}}, "df": 3}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.detect_column_type": {"tf": 1}}, "df": 1}}}}}, "b": {"docs": {"howard.objects.variants.Variants.set_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_db": {"tf": 1}}, "df": 2, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.commons.DEFAULT_DBNSFP_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_DBNSFP_FOLDER": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}}, "df": 3}}}}, "s": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.commons.DEFAULT_DBSNP_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_DBSNP_FOLDER": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"howard.functions.commons.DEFAULT_DATA_FOLDER": {"tf": 1}, "howard.objects.variants.Variants.load_data": {"tf": 1}}, "df": 2, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.DEFAULT_DATABASE_FOLDER": {"tf": 1}, "howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"tf": 1}, "howard.objects.database.Database": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.database.Database.database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.format": {"tf": 1}, "howard.objects.database.Database.header": {"tf": 1}, "howard.objects.database.Database.header_file": {"tf": 1}, "howard.objects.database.Database.databases_folders": {"tf": 1}, "howard.objects.database.Database.assembly": {"tf": 1}, "howard.objects.database.Database.table": {"tf": 1}, "howard.objects.database.Database.set_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_databases_folders": {"tf": 1}, "howard.objects.database.Database.get_database_folders": {"tf": 1.4142135623730951}, "howard.objects.database.Database.read_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_length": {"tf": 1}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.find_header_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.query": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.objects.database.Database.set_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.set_assembly": {"tf": 1}, "howard.objects.database.Database.get_assembly": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_basename": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_dirname": {"tf": 1.4142135623730951}, "howard.objects.database.Database.exists": {"tf": 1}, "howard.objects.database.Database.set_format": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.get_database_tables": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_table": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1.4142135623730951}, "howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.database.Database.get_view": {"tf": 1}, "howard.objects.database.Database.is_compressed": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.database.Database.map_columns": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1}, "howard.objects.database.Database.get_annotations": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.database.Database.get_conn": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}}, "df": 59, "s": {"docs": {"howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.objects.database.Database.databases_folders": {"tf": 1}, "howard.objects.database.Database.set_databases_folders": {"tf": 1}, "howard.objects.variants.Variants.scan_databases": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}}, "df": 17}}}}}}}}, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "b": {"docs": {"howard.functions.commons.DUCKDB_EXTENSION": {"tf": 1}, "howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1}, "howard.functions.commons.load_duckdb_extension": {"tf": 1}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.objects.database.DEFAULT_VCF_HEADER_DUCKDB_TYPES": {"tf": 1}, "howard.objects.database.DUCKDB_EXTENSION_TO_LOAD": {"tf": 1}, "howard.objects.variants.Variants.get_duckdb_settings": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 1}}, "df": 9}}}}, "p": {"docs": {"howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DUP": {"tf": 1}}, "df": 2}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.DTYPE_LIMIT_AUTO": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.download_file": {"tf": 1}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}}, "df": 10}}}}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.check_docker_image_exists": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 4}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.main.msg_gui_disable": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.transcript.BED6Interval.distance": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {"howard.objects.variants.Variants.get_tmp_dir": {"tf": 1}, "howard.tools.gui.image_dir": {"tf": 1}}, "df": 2, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.database.Database.get_database_dirname": {"tf": 1}}, "df": 1}}}}}}, "f": {"docs": {"howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}}, "df": 2}, "n": {"docs": {}, "df": 0, "a": {"docs": {"howard.objects.hgvs.HGVSRegex.DNA_REF": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DNA_ALT": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1}}, "df": 3}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"howard.objects.variants.Variants.drop_column": {"tf": 1}, "howard.objects.variants.Variants.drop_indexes": {"tf": 1}, "howard.objects.variants.Variants.drop_variants_table": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.find_all": {"tf": 1}, "howard.functions.from_extann.get_all_transcript": {"tf": 1}}, "df": 2, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.file_format_allowed": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE_REGEXES": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE_REGEXES": {"tf": 1}, "howard.objects.hgvs.HGVSName.ref_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.ref2_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.alt_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1}, "howard.objects.variant.NormalizedVariant.ref_allele": {"tf": 1}}, "df": 14, "s": {"docs": {"howard.objects.variant.NormalizedVariant.alleles": {"tf": 1}, "howard.objects.variant.NormalizedVariant.alt_alleles": {"tf": 1}}, "df": 2}}}}}, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.DEFAULT_ALPHAMISSENSE_URL": {"tf": 1}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}}, "df": 2}}}}}}}}}}}, "t": {"docs": {"howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DNA_ALT": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALT": {"tf": 1}, "howard.objects.hgvs.HGVSName.alt_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.variant.NormalizedVariant.alt_alleles": {"tf": 1}}, "df": 6}}, "n": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}}, "df": 2, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.DEFAULT_ANNOVAR_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_ANNOVAR_FOLDER": {"tf": 1}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.from_annovar.from_annovar": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 1}}, "df": 6}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.clean_annotation_field": {"tf": 1}, "howard.objects.variants.Variants.annotation": {"tf": 1}, "howard.objects.variants.Variants.annotation_snpsift": {"tf": 1}, "howard.objects.variants.Variants.annotation_bcftools": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.annotation_snpeff": {"tf": 1}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 1}, "howard.objects.variants.Variants.annotation_parquet": {"tf": 1}, "howard.objects.variants.Variants.annotation_splice": {"tf": 1}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}, "howard.tools.annotation.annotation": {"tf": 1}}, "df": 14, "s": {"docs": {"howard.functions.commons.DEFAULT_ANNOTATIONS_FOLDER": {"tf": 1}, "howard.objects.database.Database.get_annotations": {"tf": 1}}, "df": 2}}}}}}}}}, "d": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1}}, "df": 2}}, "s": {"docs": {"howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_sql": {"tf": 1}}, "df": 3, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.DEFAULT_ASSEMBLY": {"tf": 1}, "howard.objects.database.Database.assembly": {"tf": 1}, "howard.objects.database.Database.set_assembly": {"tf": 1}, "howard.objects.database.Database.get_assembly": {"tf": 1}}, "df": 4}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {"howard.functions.commons.DTYPE_LIMIT_AUTO": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.format_arg_help": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.get_argument_gooey": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.get_default_argument": {"tf": 1}}, "df": 4, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.shared_arguments": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 4}}}}}}, "s": {"docs": {"howard.functions.commons.load_config_args": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}}, "df": 2}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.from_extann.add_default_metaheader": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}}, "df": 3}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"howard.objects.database.Database.get_sql_database_attach": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "f": {"docs": {"howard.functions.commons.vcf_required_release": {"tf": 1}, "howard.functions.commons.vcf_required_columns": {"tf": 1}, "howard.functions.commons.vcf_required": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.objects.database.DEFAULT_VCF_HEADER": {"tf": 1}, "howard.objects.database.DEFAULT_VCF_HEADER_DUCKDB_TYPES": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1}}, "df": 15}}, "a": {"docs": {}, "df": 0, "f": {"docs": {"howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1}}, "df": 2}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1}}, "df": 2, "s": {"docs": {"howard.functions.from_extann.replace_values": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.objects.variant.normalize_variant": {"tf": 1}, "howard.objects.variant.NormalizedVariant.variant": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1}, "howard.objects.variants.Variants.calculation_variant_id": {"tf": 1}}, "df": 8, "s": {"docs": {"howard.objects.variants.Variants": {"tf": 1}, "howard.objects.variants.Variants.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_samples": {"tf": 1}, "howard.objects.variants.Variants.get_samples": {"tf": 1}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1}, "howard.objects.variants.Variants.set_input": {"tf": 1}, "howard.objects.variants.Variants.set_config": {"tf": 1}, "howard.objects.variants.Variants.set_param": {"tf": 1}, "howard.objects.variants.Variants.init_variables": {"tf": 1}, "howard.objects.variants.Variants.get_indexing": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_config": {"tf": 1}, "howard.objects.variants.Variants.get_duckdb_settings": {"tf": 1}, "howard.objects.variants.Variants.set_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.set_output": {"tf": 1}, "howard.objects.variants.Variants.set_header": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.get_overview": {"tf": 1}, "howard.objects.variants.Variants.get_stats": {"tf": 1}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1}, "howard.objects.variants.Variants.get_input": {"tf": 1}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1}, "howard.objects.variants.Variants.get_output": {"tf": 1}, "howard.objects.variants.Variants.get_output_format": {"tf": 1}, "howard.objects.variants.Variants.get_config": {"tf": 1}, "howard.objects.variants.Variants.get_param": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.get_prefix": {"tf": 1}, "howard.objects.variants.Variants.get_table_variants": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_tmp_dir": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_type": {"tf": 1}, "howard.objects.variants.Variants.get_connexion": {"tf": 1}, "howard.objects.variants.Variants.close_connexion": {"tf": 1}, "howard.objects.variants.Variants.get_header": {"tf": 1}, "howard.objects.variants.Variants.get_header_infos_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_length": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_sql": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.get_verbose": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_format": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.load_data": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.drop_column": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}, "howard.objects.variants.Variants.create_indexes": {"tf": 1}, "howard.objects.variants.Variants.drop_indexes": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}, "howard.objects.variants.Variants.execute_query": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.run_commands": {"tf": 1}, "howard.objects.variants.Variants.get_threads": {"tf": 1}, "howard.objects.variants.Variants.get_memory": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1}, "howard.objects.variants.Variants.drop_variants_table": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1}, "howard.objects.variants.Variants.scan_databases": {"tf": 1}, "howard.objects.variants.Variants.annotation": {"tf": 1}, "howard.objects.variants.Variants.annotation_snpsift": {"tf": 1}, "howard.objects.variants.Variants.annotation_bcftools": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.annotation_snpeff": {"tf": 1}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 1}, "howard.objects.variants.Variants.annotation_parquet": {"tf": 1}, "howard.objects.variants.Variants.annotation_splice": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}, "howard.objects.variants.Variants.get_operations_help": {"tf": 1}, "howard.objects.variants.Variants.calculation": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}, "howard.objects.variants.Variants.calculation_variant_id": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_nomen": {"tf": 1}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_concordance": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1}, "howard.objects.variants.Variants.calculation_trio": {"tf": 1}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_export": {"tf": 1}, "howard.objects.variants.Variants.transcripts_export": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1.4142135623730951}}, "df": 110}}}, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.variants.Variants.init_variables": {"tf": 1}}, "df": 1}}}}}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.database.Database.get_view": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 6}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.transcript.Transcript.version": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.get_verbose": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.vcf_required_release": {"tf": 1}, "howard.functions.commons.vcf_required_columns": {"tf": 1}, "howard.functions.commons.vcf_required": {"tf": 1}}, "df": 3}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.vcf_required_release": {"tf": 1}}, "df": 1}}}}}, "f": {"2": {"docs": {"howard.objects.hgvs.HGVSRegex.PEP_REF2": {"tf": 1}, "howard.objects.hgvs.HGVSName.ref2_allele": {"tf": 1}}, "df": 2}, "docs": {"howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DNA_REF": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_REF": {"tf": 1}, "howard.objects.hgvs.HGVSName.ref_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.variant.NormalizedVariant.ref_allele": {"tf": 1}}, "df": 7, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {"howard.functions.commons.DEFAULT_REFSEQ_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_REFSEQ_FOLDER": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.utils.create_refseq_table": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1}, "howard.objects.hgvs.get_refseq_type": {"tf": 1}}, "df": 9}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.from_extann.read_refgene": {"tf": 1}, "howard.functions.utils.read_refgene": {"tf": 1}}, "df": 2}}}}}, "m": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.commons.DEFAULT_EXOMISER_REMM_URL": {"tf": 1}}, "df": 1}, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.remove_if_exists": {"tf": 1}}, "df": 1}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.merge_regions": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE_REGEXES": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE_REGEXES": {"tf": 1}}, "df": 3}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.from_extann.read_json": {"tf": 1}, "howard.functions.from_extann.read_refgene": {"tf": 1}, "howard.functions.utils.read_refgene": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.read_transcripts": {"tf": 1}, "howard.objects.database.Database.read_header_file": {"tf": 1}, "howard.objects.genome.MockGenome.read": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}}, "df": 9}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.hgvs.InvalidHGVSName.reason": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.from_extann.replace_values": {"tf": 1}}, "df": 1}}}}}, "v": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {"howard.objects.variant.revcomp": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.run_parallel_commands": {"tf": 1}, "howard.functions.commons.run_parallel_functions": {"tf": 1}, "howard.objects.variants.Variants.run_commands": {"tf": 1}}, "df": 3}}, "a": {"docs": {}, "df": 0, "w": {"docs": {"howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.commons.get_random": {"tf": 1}}, "df": 1}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.HGVSRegex.COORD_RANGE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_RANGE": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.from_extann.metaheader_rows": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.DEFAULT_TOOLS_BIN": {"tf": 1}, "howard.functions.commons.whereis_bin": {"tf": 1}, "howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1}}, "df": 4}}, "c": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.BCFTOOLS_FORMAT": {"tf": 1}, "howard.objects.variants.Variants.annotation_bcftools": {"tf": 1}}, "df": 2}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.genotype_barcode": {"tf": 1}, "howard.functions.commons.barcode": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1}}, "df": 4}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.HGVSRegex.BASE": {"tf": 1}, "howard.objects.transcript.BED6Interval_base": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom_start": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom_end": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.name": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.score": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.strand": {"tf": 1}, "howard.objects.variant.NormalizedVariant.indels_start_with_same_base": {"tf": 1}}, "df": 10, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.database.Database.get_database_basename": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {"howard.objects.hgvs.HGVSRegex.BASES": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.genome_build_switch": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "d": {"6": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.objects.transcript.BED6Interval_base": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom_start": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom_end": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.name": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.score": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.strand": {"tf": 1}, "howard.objects.transcript.BED6Interval": {"tf": 1}, "howard.objects.transcript.BED6Interval.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval.distance": {"tf": 1}}, "df": 11}}}}}}}}}, "docs": {"howard.functions.commons.bed_sort": {"tf": 1}}, "df": 1}}, "y": {"docs": {"howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.DEFAULT_EXOMISER_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_EXOMISER_REMM_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_EXOMISER_CADD_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_EXOMISER_FOLDER": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 6}}}}}, "n": {"docs": {"howard.objects.hgvs.HGVSName.exon": {"tf": 1}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 1}, "howard.objects.transcript.Exon": {"tf": 1}, "howard.objects.transcript.Exon.__init__": {"tf": 1}, "howard.objects.transcript.Exon.transcript": {"tf": 1}, "howard.objects.transcript.Exon.tx_position": {"tf": 1}, "howard.objects.transcript.Exon.number": {"tf": 1}, "howard.objects.transcript.Exon.name": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.transcript.Exon.strand": {"tf": 1}}, "df": 10, "s": {"docs": {"howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.DUCKDB_EXTENSION": {"tf": 1}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1}, "howard.functions.commons.load_duckdb_extension": {"tf": 1}, "howard.objects.database.DUCKDB_EXTENSION_TO_LOAD": {"tf": 1}}, "df": 4}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {"howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_EXTRA": {"tf": 1}, "howard.objects.hgvs.HGVSName.pep_extra": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1}}, "df": 5, "c": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.extract_float_from_str": {"tf": 1}, "howard.functions.commons.extract_memory_in_go": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_nomen": {"tf": 1}}, "df": 6}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.from_extann.write_extann": {"tf": 1}, "howard.functions.from_extann.extann_to_info": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}}, "df": 3}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.remove_if_exists": {"tf": 1}, "howard.functions.commons.check_docker_image_exists": {"tf": 1}, "howard.objects.database.Database.exists": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.example_function": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}}, "df": 8}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_export": {"tf": 1}, "howard.objects.variants.Variants.transcripts_export": {"tf": 1}}, "df": 6}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.objects.variants.Variants.execute_query": {"tf": 1}}, "df": 2}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.genome.GenomeSubset.end": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_END": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_END": {"tf": 1}, "howard.objects.hgvs.HGVSName.end": {"tf": 1}, "howard.objects.hgvs.HGVSName.cdna_end": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom_end": {"tf": 1}, "howard.objects.transcript.CDNA_Match.cdna_end": {"tf": 1}}, "df": 7}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.objects.hgvs.HGVSRegex.EQUAL": {"tf": 1}}, "df": 1}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.DEFAULT_GENOME_FOLDER": {"tf": 1}, "howard.functions.commons.find_genome": {"tf": 1}, "howard.functions.commons.genome_build_switch": {"tf": 1}, "howard.objects.genome.ChromosomeSubset.genome": {"tf": 1}, "howard.objects.genome.GenomeSubset.genome": {"tf": 1}, "howard.objects.genome.MockChromosome.genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1}, "howard.objects.variant.NormalizedVariant.genome": {"tf": 1}}, "df": 9, "s": {"docs": {"howard.functions.databases.databases_download_genomes": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.genome.GenomeSubset": {"tf": 1}, "howard.objects.genome.GenomeSubset.__init__": {"tf": 1}, "howard.objects.genome.GenomeSubset.genome": {"tf": 1}, "howard.objects.genome.GenomeSubset.chrom": {"tf": 1}, "howard.objects.genome.GenomeSubset.start": {"tf": 1}, "howard.objects.genome.GenomeSubset.end": {"tf": 1}, "howard.objects.genome.GenomeSubset.seqid": {"tf": 1}}, "df": 7}}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {"howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE_REGEXES": {"tf": 1}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1}, "howard.objects.variant.justify_genomic_indel": {"tf": 1}}, "df": 6}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.GENOTYPE_MAP": {"tf": 1}, "howard.functions.commons.genotype_compression": {"tf": 1}, "howard.functions.commons.genotype_barcode": {"tf": 1}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_concordance": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}}, "df": 8, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.genotypeconcordance": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}, "e": {"docs": {"howard.functions.from_extann.get_gene_coordinate": {"tf": 1}, "howard.objects.hgvs.HGVSName.gene": {"tf": 1}, "howard.objects.transcript.Gene": {"tf": 1}, "howard.objects.transcript.Gene.__init__": {"tf": 1}, "howard.objects.transcript.Gene.name": {"tf": 1}, "howard.objects.transcript.Transcript.gene": {"tf": 1}}, "df": 6, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}}, "df": 3}}}, "e": {"docs": {"howard.functions.databases.generate_databases_param": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.utils.read_genepred": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {"howard.functions.commons.get_index": {"tf": 1}, "howard.functions.commons.get_file_format": {"tf": 1}, "howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.get_tmp": {"tf": 1}, "howard.functions.commons.get_threads": {"tf": 1}, "howard.functions.commons.get_memory": {"tf": 1}, "howard.functions.commons.get_compression_type": {"tf": 1}, "howard.functions.commons.get_file_compressed": {"tf": 1}, "howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.get_argument_gooey": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.get_default_argument": {"tf": 1}, "howard.functions.commons.get_random": {"tf": 1}, "howard.functions.from_extann.get_longest_transcript": {"tf": 1}, "howard.functions.from_extann.get_all_transcript": {"tf": 1}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.functions.utils.get_transcript": {"tf": 1}, "howard.objects.database.Database.get_database_folders": {"tf": 1}, "howard.objects.database.Database.get_header_length": {"tf": 1}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.get_assembly": {"tf": 1}, "howard.objects.database.Database.get_database": {"tf": 1}, "howard.objects.database.Database.get_database_basename": {"tf": 1}, "howard.objects.database.Database.get_database_dirname": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.get_database_tables": {"tf": 1}, "howard.objects.database.Database.get_database_table": {"tf": 1}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1}, "howard.objects.database.Database.get_view": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1}, "howard.objects.database.Database.get_annotations": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.database.Database.get_conn": {"tf": 1}, "howard.objects.genome.MockGenome.get_seq": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.get_seq": {"tf": 1}, "howard.objects.hgvs.get_refseq_type": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.transcript.Transcript.get_cds_start_stop": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variant.get_sequence": {"tf": 1}, "howard.objects.variant.get_sequence_from_position": {"tf": 1}, "howard.objects.variants.Variants.get_samples": {"tf": 1}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1}, "howard.objects.variants.Variants.get_indexing": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_config": {"tf": 1}, "howard.objects.variants.Variants.get_duckdb_settings": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.get_overview": {"tf": 1}, "howard.objects.variants.Variants.get_stats": {"tf": 1}, "howard.objects.variants.Variants.get_input": {"tf": 1}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1}, "howard.objects.variants.Variants.get_output": {"tf": 1}, "howard.objects.variants.Variants.get_output_format": {"tf": 1}, "howard.objects.variants.Variants.get_config": {"tf": 1}, "howard.objects.variants.Variants.get_param": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.get_prefix": {"tf": 1}, "howard.objects.variants.Variants.get_table_variants": {"tf": 1}, "howard.objects.variants.Variants.get_tmp_dir": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_type": {"tf": 1}, "howard.objects.variants.Variants.get_connexion": {"tf": 1}, "howard.objects.variants.Variants.get_header": {"tf": 1}, "howard.objects.variants.Variants.get_header_infos_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_length": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_sql": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1}, "howard.objects.variants.Variants.get_verbose": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_format": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1}, "howard.objects.variants.Variants.get_threads": {"tf": 1}, "howard.objects.variants.Variants.get_memory": {"tf": 1}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.objects.variants.Variants.get_operations_help": {"tf": 1}}, "df": 108}}, "o": {"docs": {"howard.functions.commons.extract_memory_in_go": {"tf": 1}}, "df": 1, "o": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.get_argument_gooey": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "i": {"docs": {"howard.main.msg_gui_disable": {"tf": 1}, "howard.tools.gui.gui": {"tf": 1}}, "df": 2}}, "a": {"docs": {}, "df": 0, "p": {"docs": {"howard.objects.transcript.CDNA_Match.gap": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.MACHIN_LIST": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1}, "howard.objects.database.DEFAULT_HEADER_LIST": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_infos_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1}}, "df": 8}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.DTYPE_LIMIT_AUTO": {"tf": 1}, "howard.functions.commons.time_limit": {"tf": 1}}, "df": 2}}}, "n": {"docs": {}, "df": 0, "k": {"docs": {"howard.objects.database.Database.get_sql_database_link": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.LOG_FORMAT": {"tf": 1}, "howard.functions.commons.set_log_level": {"tf": 1}, "howard.objects.variant.NormalizedVariant.log": {"tf": 1}}, "df": 3}, "a": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.load_duckdb_extension": {"tf": 1}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.load_config_args": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.plugins.plugins_to_load": {"tf": 1}, "howard.objects.database.DUCKDB_EXTENSION_TO_LOAD": {"tf": 1}, "howard.objects.variants.Variants.load_data": {"tf": 1}}, "df": 7}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.from_extann.get_longest_transcript": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.set_log_level": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"howard.objects.database.Database.get_header_length": {"tf": 1}, "howard.objects.transcript.CDNA_Match.length": {"tf": 1}, "howard.objects.variants.Variants.get_header_length": {"tf": 1}}, "df": 3}}}}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {"howard.functions.commons.remove_if_exists": {"tf": 1}}, "df": 1}, "n": {"docs": {"howard.functions.commons.extract_memory_in_go": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.split_interval": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}}, "df": 2}}}}}, "o": {"docs": {"howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.add_value_into_dict": {"tf": 1}}, "df": 2}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"howard.functions.commons.get_index": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.variants.Variants.get_indexing": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.variants.Variants.create_indexes": {"tf": 1}, "howard.objects.variants.Variants.drop_indexes": {"tf": 1}}, "df": 2}}}, "l": {"docs": {"howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 1}, "howard.objects.variant.justify_genomic_indel": {"tf": 1}}, "df": 3, "s": {"docs": {"howard.objects.variant.NormalizedVariant.indels_start_with_same_base": {"tf": 1}}, "df": 1}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.concat_into_infile": {"tf": 1}}, "df": 1}}}, "o": {"docs": {"howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.from_extann.extann_to_info": {"tf": 1}}, "df": 2, "s": {"docs": {"howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.plugins.plugins_infos": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_infos_list": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1}}, "df": 10}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.genome.ChromosomeSubset.__init__": {"tf": 1}, "howard.objects.genome.GenomeSubset.__init__": {"tf": 1}, "howard.objects.genome.MockSequence.__init__": {"tf": 1}, "howard.objects.genome.MockChromosome.__init__": {"tf": 1}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.transcript.Gene.__init__": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval.__init__": {"tf": 1}, "howard.objects.transcript.Exon.__init__": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}, "howard.objects.variant.Position.__init__": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}, "howard.objects.variants.Variants.__init__": {"tf": 1}, "howard.objects.variants.Variants.init_variables": {"tf": 1}, "howard.tools.tools.PathType.__init__": {"tf": 1}}, "df": 21}}, "s": {"docs": {"howard.objects.hgvs.HGVSRegex.INS": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.InvalidHGVSName": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.name": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.part": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.reason": {"tf": 1}}, "df": 5}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.variants.Variants.set_input": {"tf": 1}, "howard.objects.variants.Variants.get_input": {"tf": 1}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1}}, "df": 4}}}}, "d": {"docs": {"howard.objects.variants.Variants.set_variant_id": {"tf": 1}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1}, "howard.objects.variants.Variants.calculation_variant_id": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.identical": {"tf": 1}}, "df": 1}}}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.check_docker_image_exists": {"tf": 1}, "howard.tools.gui.image_dir": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {"howard.objects.database.Database.is_compressed": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.transcript.Transcript.is_default": {"tf": 1}, "howard.objects.transcript.Transcript.is_coding": {"tf": 1}, "howard.objects.variant.Position.is_forward_strand": {"tf": 1}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1}}, "df": 7}}, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.create_where_clause": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.whereis_bin": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.from_extann.write_extann": {"tf": 1}, "howard.objects.genome.MockGenome.write": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"howard.objects.variant.NormalizedVariant.indels_start_with_same_base": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.find_nomen": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_nomen": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {"howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.objects.variant.normalize_variant": {"tf": 1}}, "df": 2, "d": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.variant.NormalizedVariant": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}, "howard.objects.variant.NormalizedVariant.position": {"tf": 1}, "howard.objects.variant.NormalizedVariant.alleles": {"tf": 1}, "howard.objects.variant.NormalizedVariant.seq_5p": {"tf": 1}, "howard.objects.variant.NormalizedVariant.seq_3p": {"tf": 1}, "howard.objects.variant.NormalizedVariant.genome": {"tf": 1}, "howard.objects.variant.NormalizedVariant.log": {"tf": 1}, "howard.objects.variant.NormalizedVariant.indels_start_with_same_base": {"tf": 1}, "howard.objects.variant.NormalizedVariant.molecular_class": {"tf": 1}, "howard.objects.variant.NormalizedVariant.ref_allele": {"tf": 1}, "howard.objects.variant.NormalizedVariant.alt_alleles": {"tf": 1}, "howard.objects.variant.NormalizedVariant.variant": {"tf": 1}}, "df": 13}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.genome.ChromosomeSubset.name": {"tf": 1}, "howard.objects.genome.MockChromosome.name": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.name": {"tf": 1}, "howard.objects.hgvs.HGVSName.name": {"tf": 1}, "howard.objects.transcript.Gene.name": {"tf": 1}, "howard.objects.transcript.Transcript.name": {"tf": 1}, "howard.objects.transcript.Transcript.full_name": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.name": {"tf": 1}, "howard.objects.transcript.Exon.name": {"tf": 1}}, "df": 13}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.determine_column_number": {"tf": 1}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 1}, "howard.objects.transcript.Exon.number": {"tf": 1}}, "df": 3}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.NUCLEOTIDE_TRANSLATE": {"tf": 1}}, "df": 1}}}}}}}}}, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1}}, "df": 2}}}}}}, "j": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.from_extann.read_json": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}}, "df": 4}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 1}, "howard.objects.variant.justify_genomic_indel": {"tf": 1}}, "df": 4}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.databases.query_and_concatenate_columns": {"tf": 1}, "howard.objects.database.Database.query": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.execute_query": {"tf": 1}, "howard.tools.query.query": {"tf": 1}}, "df": 5}}}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.hgvs.HGVSName.kind": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.transcript.Transcript.ordered_cdna_match": {"tf": 1}}, "df": 1}}}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.variants.Variants.set_output": {"tf": 1}, "howard.objects.variants.Variants.get_output": {"tf": 1}, "howard.objects.variants.Variants.get_output_format": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}}, "df": 4}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"howard.objects.variants.Variants.get_overview": {"tf": 1}}, "df": 1}}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.variants.Variants.get_operations_help": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "fullname": {"root": {"1": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}}, "df": 1}, "3": {"docs": {"howard.objects.hgvs.CODON_3": {"tf": 1}}, "df": 1, "p": {"docs": {"howard.objects.variant.NormalizedVariant.seq_3p": {"tf": 1}}, "df": 1}}, "5": {"docs": {}, "df": 0, "p": {"docs": {"howard.objects.variant.NormalizedVariant.seq_5p": {"tf": 1}}, "df": 1}}, "docs": {"howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.genome.ChromosomeSubset.__init__": {"tf": 1}, "howard.objects.genome.GenomeSubset.__init__": {"tf": 1}, "howard.objects.genome.MockSequence.__init__": {"tf": 1}, "howard.objects.genome.MockChromosome.__init__": {"tf": 1}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.transcript.Gene.__init__": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval.__init__": {"tf": 1}, "howard.objects.transcript.Exon.__init__": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}, "howard.objects.variant.Position.__init__": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}, "howard.objects.variants.Variants.__init__": {"tf": 1}, "howard.tools.tools.PathType.__init__": {"tf": 1}}, "df": 20, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"howard": {"tf": 1}, "howard.functions": {"tf": 1}, "howard.functions.commons": {"tf": 1}, "howard.functions.commons.file_folder": {"tf": 1}, "howard.functions.commons.subfolder_plugins": {"tf": 1}, "howard.functions.commons.folder_main": {"tf": 1}, "howard.functions.commons.folder_config": {"tf": 1}, "howard.functions.commons.folder_user_home": {"tf": 1}, "howard.functions.commons.folder_howard_home": {"tf": 1.4142135623730951}, "howard.functions.commons.folder_plugins": {"tf": 1}, "howard.functions.commons.comparison_map": {"tf": 1}, "howard.functions.commons.code_type_map": {"tf": 1}, "howard.functions.commons.code_type_map_to_sql": {"tf": 1}, "howard.functions.commons.file_format_delimiters": {"tf": 1}, "howard.functions.commons.file_format_allowed": {"tf": 1}, "howard.functions.commons.file_compressed_format": {"tf": 1}, "howard.functions.commons.vcf_required_release": {"tf": 1}, "howard.functions.commons.vcf_required_columns": {"tf": 1}, "howard.functions.commons.vcf_required": {"tf": 1}, "howard.functions.commons.DEFAULT_TOOLS_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_TOOLS_BIN": {"tf": 1}, "howard.functions.commons.DEFAULT_ANNOVAR_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_REFSEQ_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_DBNSFP_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_EXOMISER_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_EXOMISER_REMM_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_EXOMISER_CADD_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_ALPHAMISSENSE_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_DBSNP_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_DATABASE_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_ANNOTATIONS_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_GENOME_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_SNPEFF_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_ANNOVAR_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_REFSEQ_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_DBNSFP_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_EXOMISER_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_DBSNP_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_SPLICE_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_SPLICEAI_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_SPIP_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_DATA_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_ASSEMBLY": {"tf": 1}, "howard.functions.commons.DUCKDB_EXTENSION": {"tf": 1}, "howard.functions.commons.MACHIN_LIST": {"tf": 1}, "howard.functions.commons.BCFTOOLS_FORMAT": {"tf": 1}, "howard.functions.commons.LOG_FORMAT": {"tf": 1}, "howard.functions.commons.CODE_TYPE_MAP": {"tf": 1}, "howard.functions.commons.GENOTYPE_MAP": {"tf": 1}, "howard.functions.commons.DTYPE_LIMIT_AUTO": {"tf": 1}, "howard.functions.commons.DEFAULT_CHUNK_SIZE": {"tf": 1}, "howard.functions.commons.remove_if_exists": {"tf": 1}, "howard.functions.commons.set_log_level": {"tf": 1}, "howard.functions.commons.split_interval": {"tf": 1}, "howard.functions.commons.merge_regions": {"tf": 1}, "howard.functions.commons.create_where_clause": {"tf": 1}, "howard.functions.commons.command": {"tf": 1}, "howard.functions.commons.run_parallel_commands": {"tf": 1}, "howard.functions.commons.run_parallel_functions": {"tf": 1}, "howard.functions.commons.example_function": {"tf": 1}, "howard.functions.commons.find": {"tf": 1}, "howard.functions.commons.find_all": {"tf": 1}, "howard.functions.commons.find_genome": {"tf": 1}, "howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.functions.commons.find_nomen": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.get_index": {"tf": 1}, "howard.functions.commons.get_file_format": {"tf": 1}, "howard.functions.commons.findbypipeline": {"tf": 1}, "howard.functions.commons.genotypeconcordance": {"tf": 1}, "howard.functions.commons.genotype_compression": {"tf": 1}, "howard.functions.commons.genotype_barcode": {"tf": 1}, "howard.functions.commons.barcode": {"tf": 1}, "howard.functions.commons.trio": {"tf": 1}, "howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.whereis_bin": {"tf": 1}, "howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.get_tmp": {"tf": 1}, "howard.functions.commons.get_threads": {"tf": 1}, "howard.functions.commons.get_memory": {"tf": 1}, "howard.functions.commons.extract_float_from_str": {"tf": 1}, "howard.functions.commons.extract_memory_in_go": {"tf": 1}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.compress_file": {"tf": 1}, "howard.functions.commons.get_compression_type": {"tf": 1}, "howard.functions.commons.get_file_compressed": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1}, "howard.functions.commons.load_duckdb_extension": {"tf": 1}, "howard.functions.commons.TimeoutException": {"tf": 1}, "howard.functions.commons.time_limit": {"tf": 1}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.commons.genome_build_switch": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.get_argument_gooey": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.format_arg_help": {"tf": 1}, "howard.functions.commons.bed_sort": {"tf": 1}, "howard.functions.commons.full_path": {"tf": 1}, "howard.functions.commons.get_default_argument": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.load_config_args": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.get_random": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.commons.check_docker_image_exists": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.commons.detect_column_type": {"tf": 1}, "howard.functions.commons.determine_column_number": {"tf": 1}, "howard.functions.commons.clean_annotation_field": {"tf": 1}, "howard.functions.databases": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.from_annovar": {"tf": 1}, "howard.functions.from_annovar.TYPES": {"tf": 1}, "howard.functions.from_annovar.from_annovar": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.functions.from_extann": {"tf": 1}, "howard.functions.from_extann.create_metaheader": {"tf": 1}, "howard.functions.from_extann.add_default_metaheader": {"tf": 1}, "howard.functions.from_extann.read_json": {"tf": 1}, "howard.functions.from_extann.read_refgene": {"tf": 1}, "howard.functions.from_extann.metaheader_rows": {"tf": 1}, "howard.functions.from_extann.replace_values": {"tf": 1}, "howard.functions.from_extann.write_extann": {"tf": 1}, "howard.functions.from_extann.extann_to_info": {"tf": 1}, "howard.functions.from_extann.get_longest_transcript": {"tf": 1}, "howard.functions.from_extann.get_all_transcript": {"tf": 1}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.functions.plugins": {"tf": 1}, "howard.functions.plugins.plugins_infos": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1}, "howard.functions.plugins.plugins_to_load": {"tf": 1}, "howard.functions.utils": {"tf": 1}, "howard.functions.utils.read_refgene": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.make_transcript": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.functions.utils.read_transcripts": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.functions.utils.create_refseq_table": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.functions.utils.get_transcript": {"tf": 1}, "howard.main": {"tf": 1}, "howard.main.msg_gui_disable": {"tf": 1}, "howard.main.main_folder": {"tf": 1}, "howard.main.main": {"tf": 1}, "howard.objects": {"tf": 1}, "howard.objects.cdna": {"tf": 1}, "howard.objects.cdna.CDNA_START_CODON": {"tf": 1}, "howard.objects.cdna.CDNA_STOP_CODON": {"tf": 1}, "howard.objects.cdna.CDNACoord": {"tf": 1}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.cdna.CDNACoord.parse": {"tf": 1}, "howard.objects.database": {"tf": 1}, "howard.objects.database.SEP_TYPE": {"tf": 1}, "howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"tf": 1}, "howard.objects.database.DEFAULT_VCF_HEADER": {"tf": 1}, "howard.objects.database.DEFAULT_VCF_HEADER_DUCKDB_TYPES": {"tf": 1}, "howard.objects.database.DEFAULT_HEADER_LIST": {"tf": 1}, "howard.objects.database.FILE_FORMAT_DELIMITERS": {"tf": 1}, "howard.objects.database.DUCKDB_EXTENSION_TO_LOAD": {"tf": 1}, "howard.objects.database.Database": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.database.Database.database": {"tf": 1}, "howard.objects.database.Database.format": {"tf": 1}, "howard.objects.database.Database.header": {"tf": 1}, "howard.objects.database.Database.header_file": {"tf": 1}, "howard.objects.database.Database.databases_folders": {"tf": 1}, "howard.objects.database.Database.assembly": {"tf": 1}, "howard.objects.database.Database.table": {"tf": 1}, "howard.objects.database.Database.set_database": {"tf": 1}, "howard.objects.database.Database.set_databases_folders": {"tf": 1}, "howard.objects.database.Database.get_database_folders": {"tf": 1}, "howard.objects.database.Database.read_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_length": {"tf": 1}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.find_header_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.query": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.objects.database.Database.set_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.set_assembly": {"tf": 1}, "howard.objects.database.Database.get_assembly": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 1}, "howard.objects.database.Database.get_database": {"tf": 1}, "howard.objects.database.Database.get_database_basename": {"tf": 1}, "howard.objects.database.Database.get_database_dirname": {"tf": 1}, "howard.objects.database.Database.exists": {"tf": 1}, "howard.objects.database.Database.set_format": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.get_database_tables": {"tf": 1}, "howard.objects.database.Database.get_database_table": {"tf": 1}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1}, "howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.database.Database.get_view": {"tf": 1}, "howard.objects.database.Database.is_compressed": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.database.Database.map_columns": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1}, "howard.objects.database.Database.get_annotations": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.database.Database.get_conn": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.genome": {"tf": 1}, "howard.objects.genome.ChromosomeSubset": {"tf": 1}, "howard.objects.genome.ChromosomeSubset.__init__": {"tf": 1}, "howard.objects.genome.ChromosomeSubset.name": {"tf": 1}, "howard.objects.genome.ChromosomeSubset.genome": {"tf": 1}, "howard.objects.genome.GenomeSubset": {"tf": 1}, "howard.objects.genome.GenomeSubset.__init__": {"tf": 1}, "howard.objects.genome.GenomeSubset.genome": {"tf": 1}, "howard.objects.genome.GenomeSubset.chrom": {"tf": 1}, "howard.objects.genome.GenomeSubset.start": {"tf": 1}, "howard.objects.genome.GenomeSubset.end": {"tf": 1}, "howard.objects.genome.GenomeSubset.seqid": {"tf": 1}, "howard.objects.genome.MockGenomeError": {"tf": 1}, "howard.objects.genome.MockSequence": {"tf": 1}, "howard.objects.genome.MockSequence.__init__": {"tf": 1}, "howard.objects.genome.MockSequence.sequence": {"tf": 1}, "howard.objects.genome.MockChromosome": {"tf": 1}, "howard.objects.genome.MockChromosome.__init__": {"tf": 1}, "howard.objects.genome.MockChromosome.name": {"tf": 1}, "howard.objects.genome.MockChromosome.genome": {"tf": 1}, "howard.objects.genome.MockGenome": {"tf": 1}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenome.get_seq": {"tf": 1}, "howard.objects.genome.MockGenome.read": {"tf": 1}, "howard.objects.genome.MockGenome.write": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.get_seq": {"tf": 1}, "howard.objects.hgvs": {"tf": 1}, "howard.objects.hgvs.CHROM_PREFIX": {"tf": 1}, "howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}, "howard.objects.hgvs.NUCLEOTIDE_TRANSLATE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.BASE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.BASES": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DNA_REF": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DNA_ALT": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.EQUAL": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.SUB": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.INS": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DEL": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DUP": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_START": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_END": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_RANGE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_COORD": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_START": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_END": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_RANGE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_REF": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_REF2": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALT": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_EXTRA": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE_REGEXES": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE_REGEXES": {"tf": 1}, "howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1}, "howard.objects.hgvs.get_refseq_type": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.name": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.part": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.reason": {"tf": 1}, "howard.objects.hgvs.HGVSName": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.name": {"tf": 1}, "howard.objects.hgvs.HGVSName.prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.chrom": {"tf": 1}, "howard.objects.hgvs.HGVSName.transcript": {"tf": 1}, "howard.objects.hgvs.HGVSName.transcript_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.gene": {"tf": 1}, "howard.objects.hgvs.HGVSName.exon": {"tf": 1}, "howard.objects.hgvs.HGVSName.kind": {"tf": 1}, "howard.objects.hgvs.HGVSName.mutation_type": {"tf": 1}, "howard.objects.hgvs.HGVSName.start": {"tf": 1}, "howard.objects.hgvs.HGVSName.end": {"tf": 1}, "howard.objects.hgvs.HGVSName.ref_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.ref2_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.alt_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.cdna_start": {"tf": 1}, "howard.objects.hgvs.HGVSName.cdna_end": {"tf": 1}, "howard.objects.hgvs.HGVSName.pep_extra": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.transcript": {"tf": 1}, "howard.objects.transcript.Gene": {"tf": 1}, "howard.objects.transcript.Gene.__init__": {"tf": 1}, "howard.objects.transcript.Gene.name": {"tf": 1}, "howard.objects.transcript.Transcript": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.transcript.Transcript.name": {"tf": 1}, "howard.objects.transcript.Transcript.version": {"tf": 1}, "howard.objects.transcript.Transcript.gene": {"tf": 1}, "howard.objects.transcript.Transcript.tx_position": {"tf": 1}, "howard.objects.transcript.Transcript.cds_position": {"tf": 1}, "howard.objects.transcript.Transcript.is_default": {"tf": 1}, "howard.objects.transcript.Transcript.cdna_match": {"tf": 1}, "howard.objects.transcript.Transcript.full_name": {"tf": 1}, "howard.objects.transcript.Transcript.is_coding": {"tf": 1}, "howard.objects.transcript.Transcript.strand": {"tf": 1}, "howard.objects.transcript.Transcript.ordered_cdna_match": {"tf": 1}, "howard.objects.transcript.Transcript.get_cds_start_stop": {"tf": 1}, "howard.objects.transcript.Transcript.start_codon": {"tf": 1}, "howard.objects.transcript.Transcript.stop_codon": {"tf": 1}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 1}, "howard.objects.transcript.BED6Interval_base": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom_start": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom_end": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.name": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.score": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.strand": {"tf": 1}, "howard.objects.transcript.BED6Interval": {"tf": 1}, "howard.objects.transcript.BED6Interval.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval.distance": {"tf": 1}, "howard.objects.transcript.Exon": {"tf": 1}, "howard.objects.transcript.Exon.__init__": {"tf": 1}, "howard.objects.transcript.Exon.transcript": {"tf": 1}, "howard.objects.transcript.Exon.tx_position": {"tf": 1}, "howard.objects.transcript.Exon.number": {"tf": 1}, "howard.objects.transcript.Exon.name": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.transcript.Exon.strand": {"tf": 1}, "howard.objects.transcript.CDNA_Match": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}, "howard.objects.transcript.CDNA_Match.cdna_start": {"tf": 1}, "howard.objects.transcript.CDNA_Match.cdna_end": {"tf": 1}, "howard.objects.transcript.CDNA_Match.gap": {"tf": 1}, "howard.objects.transcript.CDNA_Match.length": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variant": {"tf": 1}, "howard.objects.variant.Position": {"tf": 1}, "howard.objects.variant.Position.__init__": {"tf": 1}, "howard.objects.variant.Position.chrom": {"tf": 1}, "howard.objects.variant.Position.chrom_start": {"tf": 1}, "howard.objects.variant.Position.chrom_stop": {"tf": 1}, "howard.objects.variant.Position.is_forward_strand": {"tf": 1}, "howard.objects.variant.revcomp": {"tf": 1}, "howard.objects.variant.get_sequence": {"tf": 1}, "howard.objects.variant.get_sequence_from_position": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 1}, "howard.objects.variant.justify_genomic_indel": {"tf": 1}, "howard.objects.variant.normalize_variant": {"tf": 1}, "howard.objects.variant.NormalizedVariant": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}, "howard.objects.variant.NormalizedVariant.position": {"tf": 1}, "howard.objects.variant.NormalizedVariant.alleles": {"tf": 1}, "howard.objects.variant.NormalizedVariant.seq_5p": {"tf": 1}, "howard.objects.variant.NormalizedVariant.seq_3p": {"tf": 1}, "howard.objects.variant.NormalizedVariant.genome": {"tf": 1}, "howard.objects.variant.NormalizedVariant.log": {"tf": 1}, "howard.objects.variant.NormalizedVariant.indels_start_with_same_base": {"tf": 1}, "howard.objects.variant.NormalizedVariant.molecular_class": {"tf": 1}, "howard.objects.variant.NormalizedVariant.ref_allele": {"tf": 1}, "howard.objects.variant.NormalizedVariant.alt_alleles": {"tf": 1}, "howard.objects.variant.NormalizedVariant.variant": {"tf": 1}, "howard.objects.variants": {"tf": 1}, "howard.objects.variants.Variants": {"tf": 1}, "howard.objects.variants.Variants.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_samples": {"tf": 1}, "howard.objects.variants.Variants.get_samples": {"tf": 1}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1}, "howard.objects.variants.Variants.set_input": {"tf": 1}, "howard.objects.variants.Variants.set_config": {"tf": 1}, "howard.objects.variants.Variants.set_param": {"tf": 1}, "howard.objects.variants.Variants.init_variables": {"tf": 1}, "howard.objects.variants.Variants.get_indexing": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_config": {"tf": 1}, "howard.objects.variants.Variants.get_duckdb_settings": {"tf": 1}, "howard.objects.variants.Variants.set_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.set_output": {"tf": 1}, "howard.objects.variants.Variants.set_header": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.get_overview": {"tf": 1}, "howard.objects.variants.Variants.get_stats": {"tf": 1}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1}, "howard.objects.variants.Variants.get_input": {"tf": 1}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1}, "howard.objects.variants.Variants.get_output": {"tf": 1}, "howard.objects.variants.Variants.get_output_format": {"tf": 1}, "howard.objects.variants.Variants.get_config": {"tf": 1}, "howard.objects.variants.Variants.get_param": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.get_prefix": {"tf": 1}, "howard.objects.variants.Variants.get_table_variants": {"tf": 1}, "howard.objects.variants.Variants.get_tmp_dir": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_type": {"tf": 1}, "howard.objects.variants.Variants.get_connexion": {"tf": 1}, "howard.objects.variants.Variants.close_connexion": {"tf": 1}, "howard.objects.variants.Variants.get_header": {"tf": 1}, "howard.objects.variants.Variants.get_header_infos_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_length": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_sql": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.get_verbose": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_format": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.load_data": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.drop_column": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}, "howard.objects.variants.Variants.create_indexes": {"tf": 1}, "howard.objects.variants.Variants.drop_indexes": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}, "howard.objects.variants.Variants.execute_query": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.run_commands": {"tf": 1}, "howard.objects.variants.Variants.get_threads": {"tf": 1}, "howard.objects.variants.Variants.get_memory": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1}, "howard.objects.variants.Variants.drop_variants_table": {"tf": 1}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1}, "howard.objects.variants.Variants.scan_databases": {"tf": 1}, "howard.objects.variants.Variants.annotation": {"tf": 1}, "howard.objects.variants.Variants.annotation_snpsift": {"tf": 1}, "howard.objects.variants.Variants.annotation_bcftools": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.annotation_snpeff": {"tf": 1}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 1}, "howard.objects.variants.Variants.annotation_parquet": {"tf": 1}, "howard.objects.variants.Variants.annotation_splice": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}, "howard.objects.variants.Variants.get_operations_help": {"tf": 1}, "howard.objects.variants.Variants.calculation": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}, "howard.objects.variants.Variants.calculation_variant_id": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_nomen": {"tf": 1}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_concordance": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1}, "howard.objects.variants.Variants.calculation_trio": {"tf": 1}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_export": {"tf": 1}, "howard.objects.variants.Variants.transcripts_export": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}, "howard.tools": {"tf": 1}, "howard.tools.annotation": {"tf": 1}, "howard.tools.annotation.annotation": {"tf": 1}, "howard.tools.calculation": {"tf": 1}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.databases": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}, "howard.tools.gui": {"tf": 1}, "howard.tools.gui.main_folder": {"tf": 1}, "howard.tools.gui.image_dir": {"tf": 1}, "howard.tools.gui.gui": {"tf": 1}, "howard.tools.help": {"tf": 1}, "howard.tools.help.main_folder": {"tf": 1}, "howard.tools.help.help": {"tf": 1}, "howard.tools.hgvs": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.prioritization": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}, "howard.tools.process": {"tf": 1}, "howard.tools.process.process": {"tf": 1}, "howard.tools.query": {"tf": 1}, "howard.tools.query.query": {"tf": 1}, "howard.tools.stats": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}, "howard.tools.tools": {"tf": 1}, "howard.tools.tools.PathType": {"tf": 1}, "howard.tools.tools.PathType.__init__": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.shared_arguments": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 586}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.folder_user_home": {"tf": 1}, "howard.functions.commons.folder_howard_home": {"tf": 1}}, "df": 2}}}, "g": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.hgvs": {"tf": 1}, "howard.objects.hgvs.CHROM_PREFIX": {"tf": 1}, "howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}, "howard.objects.hgvs.NUCLEOTIDE_TRANSLATE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.BASE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.BASES": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DNA_REF": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DNA_ALT": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.EQUAL": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.SUB": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.INS": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DEL": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DUP": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_START": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_END": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_RANGE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_COORD": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_START": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_END": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_RANGE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_REF": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_REF2": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALT": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_EXTRA": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE_REGEXES": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE_REGEXES": {"tf": 1}, "howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1}, "howard.objects.hgvs.get_refseq_type": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.name": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.part": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.reason": {"tf": 1}, "howard.objects.hgvs.HGVSName": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.name": {"tf": 1}, "howard.objects.hgvs.HGVSName.prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.chrom": {"tf": 1}, "howard.objects.hgvs.HGVSName.transcript": {"tf": 1}, "howard.objects.hgvs.HGVSName.transcript_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.gene": {"tf": 1}, "howard.objects.hgvs.HGVSName.exon": {"tf": 1}, "howard.objects.hgvs.HGVSName.kind": {"tf": 1}, "howard.objects.hgvs.HGVSName.mutation_type": {"tf": 1}, "howard.objects.hgvs.HGVSName.start": {"tf": 1}, "howard.objects.hgvs.HGVSName.end": {"tf": 1}, "howard.objects.hgvs.HGVSName.ref_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.ref2_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.alt_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.cdna_start": {"tf": 1}, "howard.objects.hgvs.HGVSName.cdna_end": {"tf": 1}, "howard.objects.hgvs.HGVSName.pep_extra": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1}, "howard.tools.hgvs": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1.4142135623730951}}, "df": 90, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"howard.objects.hgvs.HGVSRegex": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.BASE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.BASES": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DNA_REF": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DNA_ALT": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.EQUAL": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.SUB": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.INS": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DEL": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DUP": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_START": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_END": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_RANGE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_COORD": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_START": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_END": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_RANGE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_REF": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_REF2": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALT": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_EXTRA": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE_REGEXES": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE_REGEXES": {"tf": 1}}, "df": 28}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.HGVSName": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.name": {"tf": 1}, "howard.objects.hgvs.HGVSName.prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.chrom": {"tf": 1}, "howard.objects.hgvs.HGVSName.transcript": {"tf": 1}, "howard.objects.hgvs.HGVSName.transcript_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.gene": {"tf": 1}, "howard.objects.hgvs.HGVSName.exon": {"tf": 1}, "howard.objects.hgvs.HGVSName.kind": {"tf": 1}, "howard.objects.hgvs.HGVSName.mutation_type": {"tf": 1}, "howard.objects.hgvs.HGVSName.start": {"tf": 1}, "howard.objects.hgvs.HGVSName.end": {"tf": 1}, "howard.objects.hgvs.HGVSName.ref_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.ref2_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.alt_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.cdna_start": {"tf": 1}, "howard.objects.hgvs.HGVSName.cdna_end": {"tf": 1}, "howard.objects.hgvs.HGVSName.pep_extra": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}}, "df": 37}}}}}}, "m": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.databases.databases_download_hgmd": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.format_arg_help": {"tf": 1}, "howard.objects.variants.Variants.get_operations_help": {"tf": 1}, "howard.tools.help": {"tf": 1}, "howard.tools.help.main_folder": {"tf": 1}, "howard.tools.help.help": {"tf": 1.4142135623730951}}, "df": 8}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.objects.database.DEFAULT_VCF_HEADER": {"tf": 1}, "howard.objects.database.DEFAULT_VCF_HEADER_DUCKDB_TYPES": {"tf": 1}, "howard.objects.database.DEFAULT_HEADER_LIST": {"tf": 1}, "howard.objects.database.Database.header": {"tf": 1}, "howard.objects.database.Database.header_file": {"tf": 1}, "howard.objects.database.Database.read_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_length": {"tf": 1}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.find_header_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.objects.database.Database.set_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.variants.Variants.set_header": {"tf": 1}, "howard.objects.variants.Variants.get_header": {"tf": 1}, "howard.objects.variants.Variants.get_header_infos_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_length": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_sql": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1}}, "df": 29}}}}}}, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.example_function": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}}, "df": 2, "s": {"docs": {"howard.functions": {"tf": 1}, "howard.functions.commons": {"tf": 1}, "howard.functions.commons.file_folder": {"tf": 1}, "howard.functions.commons.subfolder_plugins": {"tf": 1}, "howard.functions.commons.folder_main": {"tf": 1}, "howard.functions.commons.folder_config": {"tf": 1}, "howard.functions.commons.folder_user_home": {"tf": 1}, "howard.functions.commons.folder_howard_home": {"tf": 1}, "howard.functions.commons.folder_plugins": {"tf": 1}, "howard.functions.commons.comparison_map": {"tf": 1}, "howard.functions.commons.code_type_map": {"tf": 1}, "howard.functions.commons.code_type_map_to_sql": {"tf": 1}, "howard.functions.commons.file_format_delimiters": {"tf": 1}, "howard.functions.commons.file_format_allowed": {"tf": 1}, "howard.functions.commons.file_compressed_format": {"tf": 1}, "howard.functions.commons.vcf_required_release": {"tf": 1}, "howard.functions.commons.vcf_required_columns": {"tf": 1}, "howard.functions.commons.vcf_required": {"tf": 1}, "howard.functions.commons.DEFAULT_TOOLS_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_TOOLS_BIN": {"tf": 1}, "howard.functions.commons.DEFAULT_ANNOVAR_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_REFSEQ_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_DBNSFP_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_EXOMISER_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_EXOMISER_REMM_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_EXOMISER_CADD_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_ALPHAMISSENSE_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_DBSNP_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_DATABASE_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_ANNOTATIONS_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_GENOME_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_SNPEFF_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_ANNOVAR_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_REFSEQ_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_DBNSFP_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_EXOMISER_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_DBSNP_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_SPLICE_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_SPLICEAI_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_SPIP_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_DATA_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_ASSEMBLY": {"tf": 1}, "howard.functions.commons.DUCKDB_EXTENSION": {"tf": 1}, "howard.functions.commons.MACHIN_LIST": {"tf": 1}, "howard.functions.commons.BCFTOOLS_FORMAT": {"tf": 1}, "howard.functions.commons.LOG_FORMAT": {"tf": 1}, "howard.functions.commons.CODE_TYPE_MAP": {"tf": 1}, "howard.functions.commons.GENOTYPE_MAP": {"tf": 1}, "howard.functions.commons.DTYPE_LIMIT_AUTO": {"tf": 1}, "howard.functions.commons.DEFAULT_CHUNK_SIZE": {"tf": 1}, "howard.functions.commons.remove_if_exists": {"tf": 1}, "howard.functions.commons.set_log_level": {"tf": 1}, "howard.functions.commons.split_interval": {"tf": 1}, "howard.functions.commons.merge_regions": {"tf": 1}, "howard.functions.commons.create_where_clause": {"tf": 1}, "howard.functions.commons.command": {"tf": 1}, "howard.functions.commons.run_parallel_commands": {"tf": 1}, "howard.functions.commons.run_parallel_functions": {"tf": 1.4142135623730951}, "howard.functions.commons.example_function": {"tf": 1}, "howard.functions.commons.find": {"tf": 1}, "howard.functions.commons.find_all": {"tf": 1}, "howard.functions.commons.find_genome": {"tf": 1}, "howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.functions.commons.find_nomen": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.get_index": {"tf": 1}, "howard.functions.commons.get_file_format": {"tf": 1}, "howard.functions.commons.findbypipeline": {"tf": 1}, "howard.functions.commons.genotypeconcordance": {"tf": 1}, "howard.functions.commons.genotype_compression": {"tf": 1}, "howard.functions.commons.genotype_barcode": {"tf": 1}, "howard.functions.commons.barcode": {"tf": 1}, "howard.functions.commons.trio": {"tf": 1}, "howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.whereis_bin": {"tf": 1}, "howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.get_tmp": {"tf": 1}, "howard.functions.commons.get_threads": {"tf": 1}, "howard.functions.commons.get_memory": {"tf": 1}, "howard.functions.commons.extract_float_from_str": {"tf": 1}, "howard.functions.commons.extract_memory_in_go": {"tf": 1}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.compress_file": {"tf": 1}, "howard.functions.commons.get_compression_type": {"tf": 1}, "howard.functions.commons.get_file_compressed": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1}, "howard.functions.commons.load_duckdb_extension": {"tf": 1}, "howard.functions.commons.TimeoutException": {"tf": 1}, "howard.functions.commons.time_limit": {"tf": 1}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.commons.genome_build_switch": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.get_argument_gooey": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.format_arg_help": {"tf": 1}, "howard.functions.commons.bed_sort": {"tf": 1}, "howard.functions.commons.full_path": {"tf": 1}, "howard.functions.commons.get_default_argument": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.load_config_args": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.get_random": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.commons.check_docker_image_exists": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.commons.detect_column_type": {"tf": 1}, "howard.functions.commons.determine_column_number": {"tf": 1}, "howard.functions.commons.clean_annotation_field": {"tf": 1}, "howard.functions.databases": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.from_annovar": {"tf": 1}, "howard.functions.from_annovar.TYPES": {"tf": 1}, "howard.functions.from_annovar.from_annovar": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.functions.from_extann": {"tf": 1}, "howard.functions.from_extann.create_metaheader": {"tf": 1}, "howard.functions.from_extann.add_default_metaheader": {"tf": 1}, "howard.functions.from_extann.read_json": {"tf": 1}, "howard.functions.from_extann.read_refgene": {"tf": 1}, "howard.functions.from_extann.metaheader_rows": {"tf": 1}, "howard.functions.from_extann.replace_values": {"tf": 1}, "howard.functions.from_extann.write_extann": {"tf": 1}, "howard.functions.from_extann.extann_to_info": {"tf": 1}, "howard.functions.from_extann.get_longest_transcript": {"tf": 1}, "howard.functions.from_extann.get_all_transcript": {"tf": 1}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.functions.plugins": {"tf": 1}, "howard.functions.plugins.plugins_infos": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1}, "howard.functions.plugins.plugins_to_load": {"tf": 1}, "howard.functions.utils": {"tf": 1}, "howard.functions.utils.read_refgene": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.make_transcript": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.functions.utils.read_transcripts": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.functions.utils.create_refseq_table": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.functions.utils.get_transcript": {"tf": 1}}, "df": 185}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.full_path": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}, "howard.objects.transcript.Transcript.full_name": {"tf": 1}}, "df": 3}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.file_folder": {"tf": 1}, "howard.functions.commons.file_format_delimiters": {"tf": 1}, "howard.functions.commons.file_format_allowed": {"tf": 1}, "howard.functions.commons.file_compressed_format": {"tf": 1}, "howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.functions.commons.get_file_format": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.compress_file": {"tf": 1}, "howard.functions.commons.get_file_compressed": {"tf": 1}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.objects.database.FILE_FORMAT_DELIMITERS": {"tf": 1}, "howard.objects.database.Database.header_file": {"tf": 1}, "howard.objects.database.Database.read_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.find_header_file": {"tf": 1}, "howard.objects.database.Database.set_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}}, "df": 25, "s": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.find": {"tf": 1}, "howard.functions.commons.find_all": {"tf": 1}, "howard.functions.commons.find_genome": {"tf": 1}, "howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.functions.commons.find_nomen": {"tf": 1}, "howard.objects.database.Database.find_header_file": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 1}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}}, "df": 10, "b": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.findbypipeline": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.clean_annotation_field": {"tf": 1}}, "df": 1, "s": {"docs": {"howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.file_folder": {"tf": 1}, "howard.functions.commons.folder_main": {"tf": 1}, "howard.functions.commons.folder_config": {"tf": 1}, "howard.functions.commons.folder_user_home": {"tf": 1}, "howard.functions.commons.folder_howard_home": {"tf": 1}, "howard.functions.commons.folder_plugins": {"tf": 1}, "howard.functions.commons.DEFAULT_TOOLS_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_DATABASE_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_ANNOTATIONS_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_GENOME_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_SNPEFF_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_ANNOVAR_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_REFSEQ_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_DBNSFP_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_EXOMISER_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_DBSNP_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_SPLICE_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_SPLICEAI_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_SPIP_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_DATA_FOLDER": {"tf": 1}, "howard.main.main_folder": {"tf": 1}, "howard.tools.gui.main_folder": {"tf": 1}, "howard.tools.help.main_folder": {"tf": 1}}, "df": 23, "s": {"docs": {"howard.objects.database.Database.databases_folders": {"tf": 1}, "howard.objects.database.Database.set_databases_folders": {"tf": 1}, "howard.objects.database.Database.get_database_folders": {"tf": 1}}, "df": 3}}}}}, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.file_format_delimiters": {"tf": 1}, "howard.functions.commons.file_format_allowed": {"tf": 1}, "howard.functions.commons.file_compressed_format": {"tf": 1}, "howard.functions.commons.BCFTOOLS_FORMAT": {"tf": 1}, "howard.functions.commons.LOG_FORMAT": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.get_file_format": {"tf": 1}, "howard.functions.commons.format_arg_help": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.database.FILE_FORMAT_DELIMITERS": {"tf": 1}, "howard.objects.database.Database.format": {"tf": 1}, "howard.objects.database.Database.set_format": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_output_format": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_format": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 28}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.variant.Position.is_forward_strand": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.extract_float_from_str": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.commons.extract_float_from_str": {"tf": 1}, "howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.from_annovar": {"tf": 1}, "howard.functions.from_annovar.TYPES": {"tf": 1}, "howard.functions.from_annovar.from_annovar": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.functions.from_extann": {"tf": 1}, "howard.functions.from_extann.create_metaheader": {"tf": 1}, "howard.functions.from_extann.add_default_metaheader": {"tf": 1}, "howard.functions.from_extann.read_json": {"tf": 1}, "howard.functions.from_extann.read_refgene": {"tf": 1}, "howard.functions.from_extann.metaheader_rows": {"tf": 1}, "howard.functions.from_extann.replace_values": {"tf": 1}, "howard.functions.from_extann.write_extann": {"tf": 1}, "howard.functions.from_extann.extann_to_info": {"tf": 1}, "howard.functions.from_extann.get_longest_transcript": {"tf": 1}, "howard.functions.from_extann.get_all_transcript": {"tf": 1}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1.4142135623730951}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1}, "howard.objects.variant.get_sequence_from_position": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}}, "df": 39}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons": {"tf": 1}, "howard.functions.commons.file_folder": {"tf": 1}, "howard.functions.commons.subfolder_plugins": {"tf": 1}, "howard.functions.commons.folder_main": {"tf": 1}, "howard.functions.commons.folder_config": {"tf": 1}, "howard.functions.commons.folder_user_home": {"tf": 1}, "howard.functions.commons.folder_howard_home": {"tf": 1}, "howard.functions.commons.folder_plugins": {"tf": 1}, "howard.functions.commons.comparison_map": {"tf": 1}, "howard.functions.commons.code_type_map": {"tf": 1}, "howard.functions.commons.code_type_map_to_sql": {"tf": 1}, "howard.functions.commons.file_format_delimiters": {"tf": 1}, "howard.functions.commons.file_format_allowed": {"tf": 1}, "howard.functions.commons.file_compressed_format": {"tf": 1}, "howard.functions.commons.vcf_required_release": {"tf": 1}, "howard.functions.commons.vcf_required_columns": {"tf": 1}, "howard.functions.commons.vcf_required": {"tf": 1}, "howard.functions.commons.DEFAULT_TOOLS_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_TOOLS_BIN": {"tf": 1}, "howard.functions.commons.DEFAULT_ANNOVAR_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_REFSEQ_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_DBNSFP_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_EXOMISER_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_EXOMISER_REMM_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_EXOMISER_CADD_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_ALPHAMISSENSE_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_DBSNP_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_DATABASE_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_ANNOTATIONS_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_GENOME_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_SNPEFF_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_ANNOVAR_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_REFSEQ_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_DBNSFP_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_EXOMISER_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_DBSNP_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_SPLICE_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_SPLICEAI_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_SPIP_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_DATA_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_ASSEMBLY": {"tf": 1}, "howard.functions.commons.DUCKDB_EXTENSION": {"tf": 1}, "howard.functions.commons.MACHIN_LIST": {"tf": 1}, "howard.functions.commons.BCFTOOLS_FORMAT": {"tf": 1}, "howard.functions.commons.LOG_FORMAT": {"tf": 1}, "howard.functions.commons.CODE_TYPE_MAP": {"tf": 1}, "howard.functions.commons.GENOTYPE_MAP": {"tf": 1}, "howard.functions.commons.DTYPE_LIMIT_AUTO": {"tf": 1}, "howard.functions.commons.DEFAULT_CHUNK_SIZE": {"tf": 1}, "howard.functions.commons.remove_if_exists": {"tf": 1}, "howard.functions.commons.set_log_level": {"tf": 1}, "howard.functions.commons.split_interval": {"tf": 1}, "howard.functions.commons.merge_regions": {"tf": 1}, "howard.functions.commons.create_where_clause": {"tf": 1}, "howard.functions.commons.command": {"tf": 1}, "howard.functions.commons.run_parallel_commands": {"tf": 1}, "howard.functions.commons.run_parallel_functions": {"tf": 1}, "howard.functions.commons.example_function": {"tf": 1}, "howard.functions.commons.find": {"tf": 1}, "howard.functions.commons.find_all": {"tf": 1}, "howard.functions.commons.find_genome": {"tf": 1}, "howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.functions.commons.find_nomen": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.get_index": {"tf": 1}, "howard.functions.commons.get_file_format": {"tf": 1}, "howard.functions.commons.findbypipeline": {"tf": 1}, "howard.functions.commons.genotypeconcordance": {"tf": 1}, "howard.functions.commons.genotype_compression": {"tf": 1}, "howard.functions.commons.genotype_barcode": {"tf": 1}, "howard.functions.commons.barcode": {"tf": 1}, "howard.functions.commons.trio": {"tf": 1}, "howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.whereis_bin": {"tf": 1}, "howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.get_tmp": {"tf": 1}, "howard.functions.commons.get_threads": {"tf": 1}, "howard.functions.commons.get_memory": {"tf": 1}, "howard.functions.commons.extract_float_from_str": {"tf": 1}, "howard.functions.commons.extract_memory_in_go": {"tf": 1}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.compress_file": {"tf": 1}, "howard.functions.commons.get_compression_type": {"tf": 1}, "howard.functions.commons.get_file_compressed": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1}, "howard.functions.commons.load_duckdb_extension": {"tf": 1}, "howard.functions.commons.TimeoutException": {"tf": 1}, "howard.functions.commons.time_limit": {"tf": 1}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.commons.genome_build_switch": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.get_argument_gooey": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.format_arg_help": {"tf": 1}, "howard.functions.commons.bed_sort": {"tf": 1}, "howard.functions.commons.full_path": {"tf": 1}, "howard.functions.commons.get_default_argument": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.load_config_args": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.get_random": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.commons.check_docker_image_exists": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.commons.detect_column_type": {"tf": 1}, "howard.functions.commons.determine_column_number": {"tf": 1}, "howard.functions.commons.clean_annotation_field": {"tf": 1}}, "df": 125}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.command": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1}}, "df": 2, "s": {"docs": {"howard.functions.commons.run_parallel_commands": {"tf": 1}, "howard.objects.variants.Variants.run_commands": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 1}}, "df": 3}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.comparison_map": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.compress_file": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.file_compressed_format": {"tf": 1}, "howard.functions.commons.get_file_compressed": {"tf": 1}, "howard.objects.database.Database.is_compressed": {"tf": 1}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1}}, "df": 4}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.genotype_compression": {"tf": 1}, "howard.functions.commons.get_compression_type": {"tf": 1}}, "df": 2}}}}}}}}}, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.folder_config": {"tf": 1}, "howard.functions.commons.load_config_args": {"tf": 1}, "howard.objects.variants.Variants.set_config": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_config": {"tf": 1}, "howard.objects.variants.Variants.get_config": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}}, "df": 7}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.databases.query_and_concatenate_columns": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.calculation_genotype_concordance": {"tf": 1}}, "df": 1}}}}}}}}, "n": {"docs": {"howard.objects.database.Database.get_conn": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.variants.Variants.get_connexion_config": {"tf": 1}, "howard.objects.variants.Variants.set_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_type": {"tf": 1}, "howard.objects.variants.Variants.get_connexion": {"tf": 1}, "howard.objects.variants.Variants.close_connexion": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_format": {"tf": 1}}, "df": 8}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.code_type_map": {"tf": 1}, "howard.functions.commons.code_type_map_to_sql": {"tf": 1}, "howard.functions.commons.CODE_TYPE_MAP": {"tf": 1}}, "df": 3}, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.cdna.CDNA_START_CODON": {"tf": 1}, "howard.objects.cdna.CDNA_STOP_CODON": {"tf": 1}, "howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}, "howard.objects.transcript.Transcript.start_codon": {"tf": 1}, "howard.objects.transcript.Transcript.stop_codon": {"tf": 1}}, "df": 7}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.transcript.Transcript.is_coding": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.commons.detect_column_type": {"tf": 1}, "howard.functions.commons.determine_column_number": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.drop_column": {"tf": 1}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}}, "df": 10, "s": {"docs": {"howard.functions.commons.vcf_required_columns": {"tf": 1}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1}, "howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"tf": 1}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1}, "howard.objects.database.Database.map_columns": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_sql": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}}, "df": 17}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.hgvs.HGVSRegex.COORD_START": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_END": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_RANGE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_COORD": {"tf": 1}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1}}, "df": 6, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.from_extann.get_gene_coordinate": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {"howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}}, "df": 5}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.DEFAULT_EXOMISER_CADD_URL": {"tf": 1}}, "df": 1}}, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.variants.Variants.calculation": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}, "howard.objects.variants.Variants.calculation_variant_id": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_nomen": {"tf": 1}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_concordance": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1}, "howard.objects.variants.Variants.calculation_trio": {"tf": 1}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_export": {"tf": 1}, "howard.tools.calculation": {"tf": 1}, "howard.tools.calculation.calculation": {"tf": 1.4142135623730951}}, "df": 19}}}}}}}}}}, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {"howard.functions.commons.DEFAULT_CHUNK_SIZE": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"howard.functions.commons.check_docker_image_exists": {"tf": 1}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.from_extann.get_chosen_transcript": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"howard.objects.genome.GenomeSubset.chrom": {"tf": 1}, "howard.objects.hgvs.CHROM_PREFIX": {"tf": 1}, "howard.objects.hgvs.HGVSName.chrom": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom_start": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom_end": {"tf": 1}, "howard.objects.variant.Position.chrom": {"tf": 1}, "howard.objects.variant.Position.chrom_start": {"tf": 1}, "howard.objects.variant.Position.chrom_stop": {"tf": 1}}, "df": 9, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.genome.ChromosomeSubset": {"tf": 1}, "howard.objects.genome.ChromosomeSubset.__init__": {"tf": 1}, "howard.objects.genome.ChromosomeSubset.name": {"tf": 1}, "howard.objects.genome.ChromosomeSubset.genome": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.create_where_clause": {"tf": 1}, "howard.functions.from_extann.create_metaheader": {"tf": 1}, "howard.functions.utils.create_refseq_table": {"tf": 1}, "howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.variants.Variants.create_indexes": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}}, "df": 8}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.create_where_clause": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.variant.NormalizedVariant.molecular_class": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.clean_annotation_field": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.close_connexion": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {"howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.objects.cdna": {"tf": 1}, "howard.objects.cdna.CDNA_START_CODON": {"tf": 1.4142135623730951}, "howard.objects.cdna.CDNA_STOP_CODON": {"tf": 1.4142135623730951}, "howard.objects.cdna.CDNACoord": {"tf": 1}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.cdna.CDNACoord.parse": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_COORD": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_START": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_END": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_RANGE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"tf": 1}, "howard.objects.hgvs.HGVSName.cdna_start": {"tf": 1}, "howard.objects.hgvs.HGVSName.cdna_end": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 1}, "howard.objects.transcript.Transcript.cdna_match": {"tf": 1}, "howard.objects.transcript.Transcript.ordered_cdna_match": {"tf": 1}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1}, "howard.objects.transcript.CDNA_Match": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}, "howard.objects.transcript.CDNA_Match.cdna_start": {"tf": 1.4142135623730951}, "howard.objects.transcript.CDNA_Match.cdna_end": {"tf": 1.4142135623730951}, "howard.objects.transcript.CDNA_Match.gap": {"tf": 1}, "howard.objects.transcript.CDNA_Match.length": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}}, "df": 30, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.cdna.CDNACoord": {"tf": 1}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.cdna.CDNACoord.parse": {"tf": 1}}, "df": 3}}}}}}}, "s": {"docs": {"howard.objects.transcript.Transcript.cds_position": {"tf": 1}, "howard.objects.transcript.Transcript.get_cds_start_stop": {"tf": 1}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {"howard.objects.hgvs.HGVSRegex.SUB": {"tf": 1}}, "df": 1, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.subfolder_plugins": {"tf": 1}}, "df": 1}}}}}}}}, "q": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.code_type_map_to_sql": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_sql": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}}, "df": 7, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {"howard.functions.commons.DEFAULT_SNPEFF_FOLDER": {"tf": 1}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.objects.variants.Variants.annotation_snpeff": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}}, "df": 7}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.variants.Variants.annotation_snpsift": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.DEFAULT_SPLICE_FOLDER": {"tf": 1}, "howard.objects.variants.Variants.annotation_splice": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "i": {"docs": {"howard.functions.commons.DEFAULT_SPLICEAI_FOLDER": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {"howard.functions.commons.split_interval": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.commons.DEFAULT_SPIP_FOLDER": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.DEFAULT_CHUNK_SIZE": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.set_log_level": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1}, "howard.objects.database.Database.set_database": {"tf": 1}, "howard.objects.database.Database.set_databases_folders": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.objects.database.Database.set_header_file": {"tf": 1}, "howard.objects.database.Database.set_assembly": {"tf": 1}, "howard.objects.database.Database.set_format": {"tf": 1}, "howard.objects.variants.Variants.set_samples": {"tf": 1}, "howard.objects.variants.Variants.set_input": {"tf": 1}, "howard.objects.variants.Variants.set_config": {"tf": 1}, "howard.objects.variants.Variants.set_param": {"tf": 1}, "howard.objects.variants.Variants.set_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.set_output": {"tf": 1}, "howard.objects.variants.Variants.set_header": {"tf": 1}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1}}, "df": 17, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.variants.Variants.get_duckdb_settings": {"tf": 1}}, "df": 1}}}}}}, "q": {"docs": {"howard.objects.genome.MockGenome.get_seq": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.get_seq": {"tf": 1}, "howard.objects.variant.NormalizedVariant.seq_5p": {"tf": 1}, "howard.objects.variant.NormalizedVariant.seq_3p": {"tf": 1}}, "df": 4, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.objects.genome.MockSequence.sequence": {"tf": 1}, "howard.objects.variant.get_sequence": {"tf": 1}, "howard.objects.variant.get_sequence_from_position": {"tf": 1}}, "df": 5}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.genome.GenomeSubset.seqid": {"tf": 1}}, "df": 1}}}, "p": {"docs": {"howard.objects.database.SEP_TYPE": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.get_stats": {"tf": 1}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.tools.stats": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1.4142135623730951}}, "df": 7}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.cdna.CDNA_START_CODON": {"tf": 1}, "howard.objects.genome.GenomeSubset.start": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_START": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_START": {"tf": 1}, "howard.objects.hgvs.HGVSName.start": {"tf": 1}, "howard.objects.hgvs.HGVSName.cdna_start": {"tf": 1}, "howard.objects.transcript.Transcript.get_cds_start_stop": {"tf": 1}, "howard.objects.transcript.Transcript.start_codon": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom_start": {"tf": 1}, "howard.objects.transcript.CDNA_Match.cdna_start": {"tf": 1}, "howard.objects.variant.Position.chrom_start": {"tf": 1}, "howard.objects.variant.NormalizedVariant.indels_start_with_same_base": {"tf": 1}}, "df": 12}}}, "r": {"docs": {"howard.functions.commons.extract_float_from_str": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.params_string_to_dict": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.transcript.Transcript.strand": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.strand": {"tf": 1}, "howard.objects.transcript.Exon.strand": {"tf": 1}, "howard.objects.variant.Position.is_forward_strand": {"tf": 1}}, "df": 4}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {"howard.objects.cdna.CDNA_STOP_CODON": {"tf": 1}, "howard.objects.transcript.Transcript.get_cds_start_stop": {"tf": 1}, "howard.objects.transcript.Transcript.stop_codon": {"tf": 1}, "howard.objects.variant.Position.chrom_stop": {"tf": 1}}, "df": 4}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"howard.functions.commons.genome_build_switch": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.bed_sort": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.transcript.BED6Interval_base.score": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.variants.Variants.scan_databases": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variant.NormalizedVariant.indels_start_with_same_base": {"tf": 1}}, "df": 1}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.get_header_sample_list": {"tf": 1}}, "df": 1, "s": {"docs": {"howard.objects.variants.Variants.set_samples": {"tf": 1}, "howard.objects.variants.Variants.get_samples": {"tf": 1}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1}}, "df": 3}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.shared_arguments": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.subfolder_plugins": {"tf": 1}, "howard.functions.commons.folder_plugins": {"tf": 1}, "howard.functions.plugins": {"tf": 1}, "howard.functions.plugins.plugins_infos": {"tf": 1.4142135623730951}, "howard.functions.plugins.plugins_list": {"tf": 1.4142135623730951}, "howard.functions.plugins.plugins_to_load": {"tf": 1.4142135623730951}}, "df": 6}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.run_parallel_commands": {"tf": 1}, "howard.functions.commons.run_parallel_functions": {"tf": 1}}, "df": 2}}}}, "m": {"docs": {"howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1}, "howard.objects.variants.Variants.set_param": {"tf": 1}, "howard.objects.variants.Variants.get_param": {"tf": 1}}, "df": 6, "s": {"docs": {"howard.functions.commons.params_string_to_dict": {"tf": 1}}, "df": 1}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.objects.variants.Variants.annotation_parquet": {"tf": 1}}, "df": 3}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.objects.cdna.CDNACoord.parse": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}}, "df": 8}}, "t": {"docs": {"howard.objects.hgvs.InvalidHGVSName.part": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"howard.functions.commons.full_path": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.PathType": {"tf": 1}, "howard.tools.tools.PathType.__init__": {"tf": 1}}, "df": 2}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.objects.hgvs.CHROM_PREFIX": {"tf": 1}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1}, "howard.objects.hgvs.HGVSName.prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}, "howard.objects.variants.Variants.get_prefix": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1}}, "df": 8, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.transcript_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1}}, "df": 4}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}, "howard.tools.process": {"tf": 1}, "howard.tools.process.process": {"tf": 1.4142135623730951}}, "df": 4}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.variants.Variants.print_stats": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.tools.prioritization": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1.4142135623730951}}, "df": 5}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {"howard.objects.hgvs.HGVSRegex.PEP": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_REF": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_REF2": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALT": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_EXTRA": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE_REGEXES": {"tf": 1}, "howard.objects.hgvs.HGVSName.pep_extra": {"tf": 1}}, "df": 8}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.transcript.Transcript.tx_position": {"tf": 1}, "howard.objects.transcript.Transcript.cds_position": {"tf": 1}, "howard.objects.transcript.Exon.tx_position": {"tf": 1}, "howard.objects.variant.Position": {"tf": 1}, "howard.objects.variant.Position.__init__": {"tf": 1}, "howard.objects.variant.Position.chrom": {"tf": 1}, "howard.objects.variant.Position.chrom_start": {"tf": 1}, "howard.objects.variant.Position.chrom_stop": {"tf": 1}, "howard.objects.variant.Position.is_forward_strand": {"tf": 1}, "howard.objects.variant.get_sequence_from_position": {"tf": 1}, "howard.objects.variant.NormalizedVariant.position": {"tf": 1}}, "df": 11}}}}}}}, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}}, "df": 1}}}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.folder_main": {"tf": 1}, "howard.main": {"tf": 1}, "howard.main.msg_gui_disable": {"tf": 1}, "howard.main.main_folder": {"tf": 1.4142135623730951}, "howard.main.main": {"tf": 1.4142135623730951}, "howard.tools.gui.main_folder": {"tf": 1}, "howard.tools.help.main_folder": {"tf": 1}}, "df": 7}}, "p": {"docs": {"howard.functions.commons.comparison_map": {"tf": 1}, "howard.functions.commons.code_type_map": {"tf": 1}, "howard.functions.commons.code_type_map_to_sql": {"tf": 1}, "howard.functions.commons.CODE_TYPE_MAP": {"tf": 1}, "howard.functions.commons.GENOTYPE_MAP": {"tf": 1}, "howard.objects.database.Database.map_columns": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}}, "df": 7}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.MACHIN_LIST": {"tf": 1}}, "df": 1}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.utils.make_transcript": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.objects.transcript.Transcript.cdna_match": {"tf": 1}, "howard.objects.transcript.Transcript.ordered_cdna_match": {"tf": 1}, "howard.objects.transcript.CDNA_Match": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}, "howard.objects.transcript.CDNA_Match.cdna_start": {"tf": 1}, "howard.objects.transcript.CDNA_Match.cdna_end": {"tf": 1}, "howard.objects.transcript.CDNA_Match.gap": {"tf": 1}, "howard.objects.transcript.CDNA_Match.length": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}}, "df": 10, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.utils.matches_ref_allele": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.merge_regions": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.get_memory": {"tf": 1}, "howard.functions.commons.extract_memory_in_go": {"tf": 1}, "howard.objects.variants.Variants.get_memory": {"tf": 1}}, "df": 3}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.from_extann.create_metaheader": {"tf": 1}, "howard.functions.from_extann.add_default_metaheader": {"tf": 1}, "howard.functions.from_extann.metaheader_rows": {"tf": 1}}, "df": 3}}}}}}}}}, "k": {"docs": {"howard.functions.commons.get_argument_to_mk": {"tf": 1}}, "df": 1}, "s": {"docs": {}, "df": 0, "g": {"docs": {"howard.main.msg_gui_disable": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.genome.MockGenome": {"tf": 1}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenome.get_seq": {"tf": 1}, "howard.objects.genome.MockGenome.read": {"tf": 1}, "howard.objects.genome.MockGenome.write": {"tf": 1}}, "df": 5, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"howard.objects.genome.MockGenomeError": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.genome.MockGenomeTestFile": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.get_seq": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.genome.MockSequence": {"tf": 1}, "howard.objects.genome.MockSequence.__init__": {"tf": 1}, "howard.objects.genome.MockSequence.sequence": {"tf": 1}}, "df": 3}}}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.genome.MockChromosome": {"tf": 1}, "howard.objects.genome.MockChromosome.__init__": {"tf": 1}, "howard.objects.genome.MockChromosome.name": {"tf": 1}, "howard.objects.genome.MockChromosome.genome": {"tf": 1}}, "df": 4}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"howard.objects.variant.NormalizedVariant.molecular_class": {"tf": 1}}, "df": 1}}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.hgvs.HGVSName.mutation_type": {"tf": 1}}, "df": 1}}}}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.folder_user_home": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.DEFAULT_ANNOVAR_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_REFSEQ_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_DBNSFP_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_EXOMISER_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_EXOMISER_REMM_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_EXOMISER_CADD_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_ALPHAMISSENSE_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_DBSNP_URL": {"tf": 1}}, "df": 8}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.utils": {"tf": 1}, "howard.functions.utils.read_refgene": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.make_transcript": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.functions.utils.read_transcripts": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.functions.utils.create_refseq_table": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.functions.utils.get_transcript": {"tf": 1}}, "df": 20}}}}, "p": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.update_from_vcf": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1}}, "df": 3}}}}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.code_type_map": {"tf": 1}, "howard.functions.commons.code_type_map_to_sql": {"tf": 1}, "howard.functions.commons.CODE_TYPE_MAP": {"tf": 1}, "howard.functions.commons.get_compression_type": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.commons.detect_column_type": {"tf": 1}, "howard.objects.database.SEP_TYPE": {"tf": 1}, "howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1}, "howard.objects.hgvs.get_refseq_type": {"tf": 1}, "howard.objects.hgvs.HGVSName.mutation_type": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_type": {"tf": 1}}, "df": 13, "s": {"docs": {"howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.from_annovar.TYPES": {"tf": 1}, "howard.objects.database.DEFAULT_VCF_HEADER_DUCKDB_TYPES": {"tf": 1}}, "df": 3}}}}, "o": {"docs": {"howard.functions.commons.code_type_map_to_sql": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.functions.from_extann.extann_to_info": {"tf": 1}, "howard.functions.plugins.plugins_to_load": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.objects.database.DUCKDB_EXTENSION_TO_LOAD": {"tf": 1}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 19, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.DEFAULT_TOOLS_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_TOOLS_BIN": {"tf": 1}, "howard.tools": {"tf": 1}, "howard.tools.annotation": {"tf": 1}, "howard.tools.annotation.annotation": {"tf": 1}, "howard.tools.calculation": {"tf": 1}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.databases": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}, "howard.tools.gui": {"tf": 1}, "howard.tools.gui.main_folder": {"tf": 1}, "howard.tools.gui.image_dir": {"tf": 1}, "howard.tools.gui.gui": {"tf": 1}, "howard.tools.help": {"tf": 1}, "howard.tools.help.main_folder": {"tf": 1}, "howard.tools.help.help": {"tf": 1}, "howard.tools.hgvs": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.prioritization": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}, "howard.tools.process": {"tf": 1}, "howard.tools.process.process": {"tf": 1}, "howard.tools.query": {"tf": 1}, "howard.tools.query.query": {"tf": 1}, "howard.tools.stats": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}, "howard.tools.tools": {"tf": 1.4142135623730951}, "howard.tools.tools.PathType": {"tf": 1.4142135623730951}, "howard.tools.tools.PathType.__init__": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.shared_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 33}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {"howard.functions.commons.trio": {"tf": 1}, "howard.objects.variants.Variants.calculation_trio": {"tf": 1}}, "df": 2}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.from_extann.get_longest_transcript": {"tf": 1}, "howard.functions.from_extann.get_all_transcript": {"tf": 1}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1}, "howard.functions.utils.make_transcript": {"tf": 1}, "howard.functions.utils.get_transcript": {"tf": 1}, "howard.objects.hgvs.HGVSName.transcript": {"tf": 1}, "howard.objects.hgvs.HGVSName.transcript_protein": {"tf": 1}, "howard.objects.transcript": {"tf": 1}, "howard.objects.transcript.Gene": {"tf": 1}, "howard.objects.transcript.Gene.__init__": {"tf": 1}, "howard.objects.transcript.Gene.name": {"tf": 1}, "howard.objects.transcript.Transcript": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.__init__": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.name": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.version": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.gene": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.tx_position": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.cds_position": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.is_default": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.cdna_match": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.full_name": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.is_coding": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.strand": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.ordered_cdna_match": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.get_cds_start_stop": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.start_codon": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.stop_codon": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 1.4142135623730951}, "howard.objects.transcript.BED6Interval_base": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom_start": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom_end": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.name": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.score": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.strand": {"tf": 1}, "howard.objects.transcript.BED6Interval": {"tf": 1}, "howard.objects.transcript.BED6Interval.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval.distance": {"tf": 1}, "howard.objects.transcript.Exon": {"tf": 1}, "howard.objects.transcript.Exon.__init__": {"tf": 1}, "howard.objects.transcript.Exon.transcript": {"tf": 1.4142135623730951}, "howard.objects.transcript.Exon.tx_position": {"tf": 1}, "howard.objects.transcript.Exon.number": {"tf": 1}, "howard.objects.transcript.Exon.name": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.transcript.Exon.strand": {"tf": 1}, "howard.objects.transcript.CDNA_Match": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}, "howard.objects.transcript.CDNA_Match.cdna_start": {"tf": 1}, "howard.objects.transcript.CDNA_Match.cdna_end": {"tf": 1}, "howard.objects.transcript.CDNA_Match.gap": {"tf": 1}, "howard.objects.transcript.CDNA_Match.length": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 60, "s": {"docs": {"howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.utils.read_transcripts": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_export": {"tf": 1}, "howard.objects.variants.Variants.transcripts_export": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}}, "df": 7}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.NUCLEOTIDE_TRANSLATE": {"tf": 1}}, "df": 1}}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.commons.get_tmp": {"tf": 1}, "howard.objects.variants.Variants.get_tmp_dir": {"tf": 1}}, "df": 2}}, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.get_threads": {"tf": 1}, "howard.objects.variants.Variants.get_threads": {"tf": 1}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.time_limit": {"tf": 1}}, "df": 1, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.TimeoutException": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "v": {"docs": {"howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.utils.create_refseq_table": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.objects.database.Database.table": {"tf": 1}, "howard.objects.database.Database.get_database_table": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1}, "howard.objects.variants.Variants.get_table_variants": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.drop_variants_table": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 10, "s": {"docs": {"howard.objects.database.Database.get_database_tables": {"tf": 1}}, "df": 1}}}}}, "x": {"docs": {"howard.objects.transcript.Transcript.tx_position": {"tf": 1}, "howard.objects.transcript.Exon.tx_position": {"tf": 1}}, "df": 2}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"howard.objects.hgvs.HGVSRegex.DEL": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.file_format_delimiters": {"tf": 1}, "howard.objects.database.FILE_FORMAT_DELIMITERS": {"tf": 1}}, "df": 2}}}}}}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.DEFAULT_TOOLS_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_TOOLS_BIN": {"tf": 1}, "howard.functions.commons.DEFAULT_ANNOVAR_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_REFSEQ_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_DBNSFP_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_EXOMISER_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_EXOMISER_REMM_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_EXOMISER_CADD_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_ALPHAMISSENSE_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_DBSNP_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_DATABASE_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_ANNOTATIONS_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_GENOME_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_SNPEFF_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_ANNOVAR_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_REFSEQ_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_DBNSFP_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_EXOMISER_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_DBSNP_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_SPLICE_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_SPLICEAI_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_SPIP_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_DATA_FOLDER": {"tf": 1}, "howard.functions.commons.DEFAULT_ASSEMBLY": {"tf": 1}, "howard.functions.commons.DEFAULT_CHUNK_SIZE": {"tf": 1}, "howard.functions.commons.get_default_argument": {"tf": 1}, "howard.functions.from_extann.add_default_metaheader": {"tf": 1}, "howard.objects.database.DEFAULT_VCF_HEADER": {"tf": 1}, "howard.objects.database.DEFAULT_VCF_HEADER_DUCKDB_TYPES": {"tf": 1}, "howard.objects.database.DEFAULT_HEADER_LIST": {"tf": 1}, "howard.objects.transcript.Transcript.is_default": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1}}, "df": 32}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.commons.determine_column_number": {"tf": 1}}, "df": 3}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.detect_column_type": {"tf": 1}}, "df": 1}}}}}, "b": {"docs": {"howard.objects.variants.Variants.set_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_db": {"tf": 1}}, "df": 2, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.commons.DEFAULT_DBNSFP_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_DBNSFP_FOLDER": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}}, "df": 3}}}}, "s": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.commons.DEFAULT_DBSNP_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_DBSNP_FOLDER": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"howard.functions.commons.DEFAULT_DATA_FOLDER": {"tf": 1}, "howard.objects.variants.Variants.load_data": {"tf": 1}}, "df": 2, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.DEFAULT_DATABASE_FOLDER": {"tf": 1}, "howard.objects.database": {"tf": 1}, "howard.objects.database.SEP_TYPE": {"tf": 1}, "howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"tf": 1.4142135623730951}, "howard.objects.database.DEFAULT_VCF_HEADER": {"tf": 1}, "howard.objects.database.DEFAULT_VCF_HEADER_DUCKDB_TYPES": {"tf": 1}, "howard.objects.database.DEFAULT_HEADER_LIST": {"tf": 1}, "howard.objects.database.FILE_FORMAT_DELIMITERS": {"tf": 1}, "howard.objects.database.DUCKDB_EXTENSION_TO_LOAD": {"tf": 1}, "howard.objects.database.Database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.__init__": {"tf": 1.4142135623730951}, "howard.objects.database.Database.database": {"tf": 1.7320508075688772}, "howard.objects.database.Database.format": {"tf": 1.4142135623730951}, "howard.objects.database.Database.header": {"tf": 1.4142135623730951}, "howard.objects.database.Database.header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.databases_folders": {"tf": 1.4142135623730951}, "howard.objects.database.Database.assembly": {"tf": 1.4142135623730951}, "howard.objects.database.Database.table": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_database": {"tf": 1.7320508075688772}, "howard.objects.database.Database.set_databases_folders": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_folders": {"tf": 1.7320508075688772}, "howard.objects.database.Database.read_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_length": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_from_list": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_from_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.find_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.query": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_header": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_assembly": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_assembly": {"tf": 1.4142135623730951}, "howard.objects.database.Database.find_database": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_database": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_database_basename": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_database_dirname": {"tf": 1.7320508075688772}, "howard.objects.database.Database.exists": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_format": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_format": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_type": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_tables": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_database_table": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_needed_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_from": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1.7320508075688772}, "howard.objects.database.Database.create_view": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_view": {"tf": 1.4142135623730951}, "howard.objects.database.Database.is_compressed": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1.4142135623730951}, "howard.objects.database.Database.find_column": {"tf": 1.4142135623730951}, "howard.objects.database.Database.map_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_annotations": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_extra_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.is_vcf": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_conn": {"tf": 1.4142135623730951}, "howard.objects.database.Database.is_genotype_column": {"tf": 1.4142135623730951}, "howard.objects.database.Database.export": {"tf": 1.4142135623730951}}, "df": 66, "s": {"docs": {"howard.functions.databases": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1.4142135623730951}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_param": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_annovar": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_snpeff": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_genomes": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_refseq": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_format_refseq": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_exomiser": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_hgmd": {"tf": 1.4142135623730951}, "howard.objects.database.Database.databases_folders": {"tf": 1}, "howard.objects.database.Database.set_databases_folders": {"tf": 1}, "howard.objects.variants.Variants.scan_databases": {"tf": 1}, "howard.tools.databases": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1.4142135623730951}}, "df": 20}}}}}}}}, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "b": {"docs": {"howard.functions.commons.DUCKDB_EXTENSION": {"tf": 1}, "howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1}, "howard.functions.commons.load_duckdb_extension": {"tf": 1}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.objects.database.DEFAULT_VCF_HEADER_DUCKDB_TYPES": {"tf": 1}, "howard.objects.database.DUCKDB_EXTENSION_TO_LOAD": {"tf": 1}, "howard.objects.variants.Variants.get_duckdb_settings": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 1}}, "df": 9}}}}, "p": {"docs": {"howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DUP": {"tf": 1}}, "df": 2}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.DTYPE_LIMIT_AUTO": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.download_file": {"tf": 1}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}}, "df": 10}}}}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.check_docker_image_exists": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 4}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.main.msg_gui_disable": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.transcript.BED6Interval.distance": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {"howard.objects.variants.Variants.get_tmp_dir": {"tf": 1}, "howard.tools.gui.image_dir": {"tf": 1}}, "df": 2, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.database.Database.get_database_dirname": {"tf": 1}}, "df": 1}}}}}}, "f": {"docs": {"howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}}, "df": 2}, "n": {"docs": {}, "df": 0, "a": {"docs": {"howard.objects.hgvs.HGVSRegex.DNA_REF": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DNA_ALT": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1}}, "df": 3}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"howard.objects.variants.Variants.drop_column": {"tf": 1}, "howard.objects.variants.Variants.drop_indexes": {"tf": 1}, "howard.objects.variants.Variants.drop_variants_table": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.find_all": {"tf": 1}, "howard.functions.from_extann.get_all_transcript": {"tf": 1}}, "df": 2, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.file_format_allowed": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE_REGEXES": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE_REGEXES": {"tf": 1}, "howard.objects.hgvs.HGVSName.ref_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.ref2_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.alt_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1}, "howard.objects.variant.NormalizedVariant.ref_allele": {"tf": 1}}, "df": 14, "s": {"docs": {"howard.objects.variant.NormalizedVariant.alleles": {"tf": 1}, "howard.objects.variant.NormalizedVariant.alt_alleles": {"tf": 1}}, "df": 2}}}}}, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.DEFAULT_ALPHAMISSENSE_URL": {"tf": 1}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}}, "df": 2}}}}}}}}}}}, "t": {"docs": {"howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DNA_ALT": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALT": {"tf": 1}, "howard.objects.hgvs.HGVSName.alt_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.variant.NormalizedVariant.alt_alleles": {"tf": 1}}, "df": 6}}, "n": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}}, "df": 2, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.DEFAULT_ANNOVAR_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_ANNOVAR_FOLDER": {"tf": 1}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.from_annovar": {"tf": 1}, "howard.functions.from_annovar.TYPES": {"tf": 1}, "howard.functions.from_annovar.from_annovar": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 1}}, "df": 10}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.clean_annotation_field": {"tf": 1}, "howard.objects.variants.Variants.annotation": {"tf": 1}, "howard.objects.variants.Variants.annotation_snpsift": {"tf": 1}, "howard.objects.variants.Variants.annotation_bcftools": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.annotation_snpeff": {"tf": 1}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 1}, "howard.objects.variants.Variants.annotation_parquet": {"tf": 1}, "howard.objects.variants.Variants.annotation_splice": {"tf": 1}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}, "howard.tools.annotation": {"tf": 1}, "howard.tools.annotation.annotation": {"tf": 1.4142135623730951}}, "df": 15, "s": {"docs": {"howard.functions.commons.DEFAULT_ANNOTATIONS_FOLDER": {"tf": 1}, "howard.objects.database.Database.get_annotations": {"tf": 1}}, "df": 2}}}}}}}}}, "d": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1}}, "df": 2}}, "s": {"docs": {"howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_sql": {"tf": 1}}, "df": 3, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.DEFAULT_ASSEMBLY": {"tf": 1}, "howard.objects.database.Database.assembly": {"tf": 1}, "howard.objects.database.Database.set_assembly": {"tf": 1}, "howard.objects.database.Database.get_assembly": {"tf": 1}}, "df": 4}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {"howard.functions.commons.DTYPE_LIMIT_AUTO": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.format_arg_help": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.get_argument_gooey": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.get_default_argument": {"tf": 1}}, "df": 4, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.shared_arguments": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 4}}}}}}, "s": {"docs": {"howard.functions.commons.load_config_args": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}}, "df": 2}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.from_extann.add_default_metaheader": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}}, "df": 3}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"howard.objects.database.Database.get_sql_database_attach": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "f": {"docs": {"howard.functions.commons.vcf_required_release": {"tf": 1}, "howard.functions.commons.vcf_required_columns": {"tf": 1}, "howard.functions.commons.vcf_required": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.objects.database.DEFAULT_VCF_HEADER": {"tf": 1}, "howard.objects.database.DEFAULT_VCF_HEADER_DUCKDB_TYPES": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1}}, "df": 15}}, "a": {"docs": {}, "df": 0, "f": {"docs": {"howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1}}, "df": 2}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1}}, "df": 2, "s": {"docs": {"howard.functions.from_extann.replace_values": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.objects.variant": {"tf": 1}, "howard.objects.variant.Position": {"tf": 1}, "howard.objects.variant.Position.__init__": {"tf": 1}, "howard.objects.variant.Position.chrom": {"tf": 1}, "howard.objects.variant.Position.chrom_start": {"tf": 1}, "howard.objects.variant.Position.chrom_stop": {"tf": 1}, "howard.objects.variant.Position.is_forward_strand": {"tf": 1}, "howard.objects.variant.revcomp": {"tf": 1}, "howard.objects.variant.get_sequence": {"tf": 1}, "howard.objects.variant.get_sequence_from_position": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 1}, "howard.objects.variant.justify_genomic_indel": {"tf": 1}, "howard.objects.variant.normalize_variant": {"tf": 1.4142135623730951}, "howard.objects.variant.NormalizedVariant": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}, "howard.objects.variant.NormalizedVariant.position": {"tf": 1}, "howard.objects.variant.NormalizedVariant.alleles": {"tf": 1}, "howard.objects.variant.NormalizedVariant.seq_5p": {"tf": 1}, "howard.objects.variant.NormalizedVariant.seq_3p": {"tf": 1}, "howard.objects.variant.NormalizedVariant.genome": {"tf": 1}, "howard.objects.variant.NormalizedVariant.log": {"tf": 1}, "howard.objects.variant.NormalizedVariant.indels_start_with_same_base": {"tf": 1}, "howard.objects.variant.NormalizedVariant.molecular_class": {"tf": 1}, "howard.objects.variant.NormalizedVariant.ref_allele": {"tf": 1}, "howard.objects.variant.NormalizedVariant.alt_alleles": {"tf": 1}, "howard.objects.variant.NormalizedVariant.variant": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1}, "howard.objects.variants.Variants.calculation_variant_id": {"tf": 1}}, "df": 32, "s": {"docs": {"howard.objects.variants": {"tf": 1}, "howard.objects.variants.Variants": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.__init__": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_samples": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_samples": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_input": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_config": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_param": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.init_variables": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_indexing": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_connexion_config": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_duckdb_settings": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_connexion_db": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_connexion": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_output": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_header": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_overview": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_stats": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.print_stats": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_input": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_input_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_output": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_output_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_config": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_param": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_connexion_db": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_prefix": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_table_variants": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_tmp_dir": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_connexion_type": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_connexion": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.close_connexion": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_infos_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_length": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_columns": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_columns_as_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_columns_as_sql": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_verbose": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_connexion_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.load_data": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.add_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.drop_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.explode_infos": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_indexes": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.drop_indexes": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.read_vcf_header": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.execute_query": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_output": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_header": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.run_commands": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_threads": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_memory": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.update_from_vcf": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.drop_variants_table": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.scan_databases": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_snpsift": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_bcftools": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_snpeff": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_parquet": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_splice": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_config_default": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_config_json": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.prioritization": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_operations_help": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_variant_id": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_extract_nomen": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_genotype_concordance": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_trio": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_transcripts_prioritization": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_transcripts_export": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.transcripts_export": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1.7320508075688772}}, "df": 111}}}, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.variants.Variants.init_variables": {"tf": 1}}, "df": 1}}}}}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.database.Database.get_view": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 6}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.transcript.Transcript.version": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.get_verbose": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.vcf_required_release": {"tf": 1}, "howard.functions.commons.vcf_required_columns": {"tf": 1}, "howard.functions.commons.vcf_required": {"tf": 1}}, "df": 3}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.vcf_required_release": {"tf": 1}}, "df": 1}}}}}, "f": {"2": {"docs": {"howard.objects.hgvs.HGVSRegex.PEP_REF2": {"tf": 1}, "howard.objects.hgvs.HGVSName.ref2_allele": {"tf": 1}}, "df": 2}, "docs": {"howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DNA_REF": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_REF": {"tf": 1}, "howard.objects.hgvs.HGVSName.ref_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.variant.NormalizedVariant.ref_allele": {"tf": 1}}, "df": 7, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {"howard.functions.commons.DEFAULT_REFSEQ_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_REFSEQ_FOLDER": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.utils.create_refseq_table": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1}, "howard.objects.hgvs.get_refseq_type": {"tf": 1}}, "df": 9}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.from_extann.read_refgene": {"tf": 1}, "howard.functions.utils.read_refgene": {"tf": 1}}, "df": 2}}}}}, "m": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.commons.DEFAULT_EXOMISER_REMM_URL": {"tf": 1}}, "df": 1}, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.remove_if_exists": {"tf": 1}}, "df": 1}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.merge_regions": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE_REGEXES": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE_REGEXES": {"tf": 1}}, "df": 3}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.from_extann.read_json": {"tf": 1}, "howard.functions.from_extann.read_refgene": {"tf": 1}, "howard.functions.utils.read_refgene": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.read_transcripts": {"tf": 1}, "howard.objects.database.Database.read_header_file": {"tf": 1}, "howard.objects.genome.MockGenome.read": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}}, "df": 9}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.hgvs.InvalidHGVSName.reason": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.from_extann.replace_values": {"tf": 1}}, "df": 1}}}}}, "v": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {"howard.objects.variant.revcomp": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.run_parallel_commands": {"tf": 1}, "howard.functions.commons.run_parallel_functions": {"tf": 1}, "howard.objects.variants.Variants.run_commands": {"tf": 1}}, "df": 3}}, "a": {"docs": {}, "df": 0, "w": {"docs": {"howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.commons.get_random": {"tf": 1}}, "df": 1}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.HGVSRegex.COORD_RANGE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_RANGE": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.from_extann.metaheader_rows": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.DEFAULT_TOOLS_BIN": {"tf": 1}, "howard.functions.commons.whereis_bin": {"tf": 1}, "howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1}}, "df": 4}}, "c": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.BCFTOOLS_FORMAT": {"tf": 1}, "howard.objects.variants.Variants.annotation_bcftools": {"tf": 1}}, "df": 2}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.genotype_barcode": {"tf": 1}, "howard.functions.commons.barcode": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1}}, "df": 4}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.HGVSRegex.BASE": {"tf": 1}, "howard.objects.transcript.BED6Interval_base": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom_start": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom_end": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.name": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.score": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.strand": {"tf": 1}, "howard.objects.variant.NormalizedVariant.indels_start_with_same_base": {"tf": 1}}, "df": 10, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.database.Database.get_database_basename": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {"howard.objects.hgvs.HGVSRegex.BASES": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.genome_build_switch": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "d": {"6": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.objects.transcript.BED6Interval_base": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom_start": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom_end": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.name": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.score": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.strand": {"tf": 1}, "howard.objects.transcript.BED6Interval": {"tf": 1}, "howard.objects.transcript.BED6Interval.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval.distance": {"tf": 1}}, "df": 11}}}}}}}}}, "docs": {"howard.functions.commons.bed_sort": {"tf": 1}}, "df": 1}}, "y": {"docs": {"howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.DEFAULT_EXOMISER_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_EXOMISER_REMM_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_EXOMISER_CADD_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_EXOMISER_FOLDER": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 6}}}}}, "n": {"docs": {"howard.objects.hgvs.HGVSName.exon": {"tf": 1}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 1}, "howard.objects.transcript.Exon": {"tf": 1}, "howard.objects.transcript.Exon.__init__": {"tf": 1}, "howard.objects.transcript.Exon.transcript": {"tf": 1}, "howard.objects.transcript.Exon.tx_position": {"tf": 1}, "howard.objects.transcript.Exon.number": {"tf": 1}, "howard.objects.transcript.Exon.name": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.transcript.Exon.strand": {"tf": 1}}, "df": 10, "s": {"docs": {"howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.DUCKDB_EXTENSION": {"tf": 1}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1}, "howard.functions.commons.load_duckdb_extension": {"tf": 1}, "howard.objects.database.DUCKDB_EXTENSION_TO_LOAD": {"tf": 1}}, "df": 4}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {"howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_EXTRA": {"tf": 1}, "howard.objects.hgvs.HGVSName.pep_extra": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1}}, "df": 5, "c": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.extract_float_from_str": {"tf": 1}, "howard.functions.commons.extract_memory_in_go": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_nomen": {"tf": 1}}, "df": 6}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.from_extann": {"tf": 1}, "howard.functions.from_extann.create_metaheader": {"tf": 1}, "howard.functions.from_extann.add_default_metaheader": {"tf": 1}, "howard.functions.from_extann.read_json": {"tf": 1}, "howard.functions.from_extann.read_refgene": {"tf": 1}, "howard.functions.from_extann.metaheader_rows": {"tf": 1}, "howard.functions.from_extann.replace_values": {"tf": 1}, "howard.functions.from_extann.write_extann": {"tf": 1.4142135623730951}, "howard.functions.from_extann.extann_to_info": {"tf": 1.4142135623730951}, "howard.functions.from_extann.get_longest_transcript": {"tf": 1}, "howard.functions.from_extann.get_all_transcript": {"tf": 1}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1.4142135623730951}}, "df": 14}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.remove_if_exists": {"tf": 1}, "howard.functions.commons.check_docker_image_exists": {"tf": 1}, "howard.objects.database.Database.exists": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.example_function": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}}, "df": 8}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_export": {"tf": 1}, "howard.objects.variants.Variants.transcripts_export": {"tf": 1}}, "df": 6}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.objects.variants.Variants.execute_query": {"tf": 1}}, "df": 2}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.genome.GenomeSubset.end": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_END": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_END": {"tf": 1}, "howard.objects.hgvs.HGVSName.end": {"tf": 1}, "howard.objects.hgvs.HGVSName.cdna_end": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom_end": {"tf": 1}, "howard.objects.transcript.CDNA_Match.cdna_end": {"tf": 1}}, "df": 7}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.objects.hgvs.HGVSRegex.EQUAL": {"tf": 1}}, "df": 1}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.DEFAULT_GENOME_FOLDER": {"tf": 1}, "howard.functions.commons.find_genome": {"tf": 1}, "howard.functions.commons.genome_build_switch": {"tf": 1}, "howard.objects.genome": {"tf": 1}, "howard.objects.genome.ChromosomeSubset": {"tf": 1}, "howard.objects.genome.ChromosomeSubset.__init__": {"tf": 1}, "howard.objects.genome.ChromosomeSubset.name": {"tf": 1}, "howard.objects.genome.ChromosomeSubset.genome": {"tf": 1.4142135623730951}, "howard.objects.genome.GenomeSubset": {"tf": 1}, "howard.objects.genome.GenomeSubset.__init__": {"tf": 1}, "howard.objects.genome.GenomeSubset.genome": {"tf": 1.4142135623730951}, "howard.objects.genome.GenomeSubset.chrom": {"tf": 1}, "howard.objects.genome.GenomeSubset.start": {"tf": 1}, "howard.objects.genome.GenomeSubset.end": {"tf": 1}, "howard.objects.genome.GenomeSubset.seqid": {"tf": 1}, "howard.objects.genome.MockGenomeError": {"tf": 1}, "howard.objects.genome.MockSequence": {"tf": 1}, "howard.objects.genome.MockSequence.__init__": {"tf": 1}, "howard.objects.genome.MockSequence.sequence": {"tf": 1}, "howard.objects.genome.MockChromosome": {"tf": 1}, "howard.objects.genome.MockChromosome.__init__": {"tf": 1}, "howard.objects.genome.MockChromosome.name": {"tf": 1}, "howard.objects.genome.MockChromosome.genome": {"tf": 1.4142135623730951}, "howard.objects.genome.MockGenome": {"tf": 1}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenome.get_seq": {"tf": 1}, "howard.objects.genome.MockGenome.read": {"tf": 1}, "howard.objects.genome.MockGenome.write": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.get_seq": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1}, "howard.objects.variant.NormalizedVariant.genome": {"tf": 1}}, "df": 34, "s": {"docs": {"howard.functions.databases.databases_download_genomes": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.genome.GenomeSubset": {"tf": 1}, "howard.objects.genome.GenomeSubset.__init__": {"tf": 1}, "howard.objects.genome.GenomeSubset.genome": {"tf": 1}, "howard.objects.genome.GenomeSubset.chrom": {"tf": 1}, "howard.objects.genome.GenomeSubset.start": {"tf": 1}, "howard.objects.genome.GenomeSubset.end": {"tf": 1}, "howard.objects.genome.GenomeSubset.seqid": {"tf": 1}}, "df": 7}}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {"howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE_REGEXES": {"tf": 1}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1}, "howard.objects.variant.justify_genomic_indel": {"tf": 1}}, "df": 6}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.GENOTYPE_MAP": {"tf": 1}, "howard.functions.commons.genotype_compression": {"tf": 1}, "howard.functions.commons.genotype_barcode": {"tf": 1}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_concordance": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}}, "df": 8, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.genotypeconcordance": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}, "e": {"docs": {"howard.functions.from_extann.get_gene_coordinate": {"tf": 1}, "howard.objects.hgvs.HGVSName.gene": {"tf": 1}, "howard.objects.transcript.Gene": {"tf": 1}, "howard.objects.transcript.Gene.__init__": {"tf": 1}, "howard.objects.transcript.Gene.name": {"tf": 1}, "howard.objects.transcript.Transcript.gene": {"tf": 1}}, "df": 6, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}}, "df": 3}}}, "e": {"docs": {"howard.functions.databases.generate_databases_param": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.utils.read_genepred": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {"howard.functions.commons.get_index": {"tf": 1}, "howard.functions.commons.get_file_format": {"tf": 1}, "howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.get_tmp": {"tf": 1}, "howard.functions.commons.get_threads": {"tf": 1}, "howard.functions.commons.get_memory": {"tf": 1}, "howard.functions.commons.get_compression_type": {"tf": 1}, "howard.functions.commons.get_file_compressed": {"tf": 1}, "howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.get_argument_gooey": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.get_default_argument": {"tf": 1}, "howard.functions.commons.get_random": {"tf": 1}, "howard.functions.from_extann.get_longest_transcript": {"tf": 1}, "howard.functions.from_extann.get_all_transcript": {"tf": 1}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.functions.utils.get_transcript": {"tf": 1}, "howard.objects.database.Database.get_database_folders": {"tf": 1}, "howard.objects.database.Database.get_header_length": {"tf": 1}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.get_assembly": {"tf": 1}, "howard.objects.database.Database.get_database": {"tf": 1}, "howard.objects.database.Database.get_database_basename": {"tf": 1}, "howard.objects.database.Database.get_database_dirname": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.get_database_tables": {"tf": 1}, "howard.objects.database.Database.get_database_table": {"tf": 1}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1}, "howard.objects.database.Database.get_view": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1}, "howard.objects.database.Database.get_annotations": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.database.Database.get_conn": {"tf": 1}, "howard.objects.genome.MockGenome.get_seq": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.get_seq": {"tf": 1}, "howard.objects.hgvs.get_refseq_type": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.transcript.Transcript.get_cds_start_stop": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variant.get_sequence": {"tf": 1}, "howard.objects.variant.get_sequence_from_position": {"tf": 1}, "howard.objects.variants.Variants.get_samples": {"tf": 1}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1}, "howard.objects.variants.Variants.get_indexing": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_config": {"tf": 1}, "howard.objects.variants.Variants.get_duckdb_settings": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.get_overview": {"tf": 1}, "howard.objects.variants.Variants.get_stats": {"tf": 1}, "howard.objects.variants.Variants.get_input": {"tf": 1}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1}, "howard.objects.variants.Variants.get_output": {"tf": 1}, "howard.objects.variants.Variants.get_output_format": {"tf": 1}, "howard.objects.variants.Variants.get_config": {"tf": 1}, "howard.objects.variants.Variants.get_param": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.get_prefix": {"tf": 1}, "howard.objects.variants.Variants.get_table_variants": {"tf": 1}, "howard.objects.variants.Variants.get_tmp_dir": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_type": {"tf": 1}, "howard.objects.variants.Variants.get_connexion": {"tf": 1}, "howard.objects.variants.Variants.get_header": {"tf": 1}, "howard.objects.variants.Variants.get_header_infos_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_length": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_sql": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1}, "howard.objects.variants.Variants.get_verbose": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_format": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1}, "howard.objects.variants.Variants.get_threads": {"tf": 1}, "howard.objects.variants.Variants.get_memory": {"tf": 1}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.objects.variants.Variants.get_operations_help": {"tf": 1}}, "df": 108}}, "o": {"docs": {"howard.functions.commons.extract_memory_in_go": {"tf": 1}}, "df": 1, "o": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.get_argument_gooey": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "i": {"docs": {"howard.main.msg_gui_disable": {"tf": 1}, "howard.tools.gui": {"tf": 1}, "howard.tools.gui.main_folder": {"tf": 1}, "howard.tools.gui.image_dir": {"tf": 1}, "howard.tools.gui.gui": {"tf": 1.4142135623730951}}, "df": 5}}, "a": {"docs": {}, "df": 0, "p": {"docs": {"howard.objects.transcript.CDNA_Match.gap": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.MACHIN_LIST": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1}, "howard.objects.database.DEFAULT_HEADER_LIST": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_infos_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1}}, "df": 8}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.DTYPE_LIMIT_AUTO": {"tf": 1}, "howard.functions.commons.time_limit": {"tf": 1}}, "df": 2}}}, "n": {"docs": {}, "df": 0, "k": {"docs": {"howard.objects.database.Database.get_sql_database_link": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.LOG_FORMAT": {"tf": 1}, "howard.functions.commons.set_log_level": {"tf": 1}, "howard.objects.variant.NormalizedVariant.log": {"tf": 1}}, "df": 3}, "a": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.load_duckdb_extension": {"tf": 1}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.load_config_args": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.plugins.plugins_to_load": {"tf": 1}, "howard.objects.database.DUCKDB_EXTENSION_TO_LOAD": {"tf": 1}, "howard.objects.variants.Variants.load_data": {"tf": 1}}, "df": 7}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.from_extann.get_longest_transcript": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.set_log_level": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"howard.objects.database.Database.get_header_length": {"tf": 1}, "howard.objects.transcript.CDNA_Match.length": {"tf": 1}, "howard.objects.variants.Variants.get_header_length": {"tf": 1}}, "df": 3}}}}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {"howard.functions.commons.remove_if_exists": {"tf": 1}}, "df": 1}, "n": {"docs": {"howard.functions.commons.extract_memory_in_go": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.split_interval": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}}, "df": 2}}}}}, "o": {"docs": {"howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.add_value_into_dict": {"tf": 1}}, "df": 2}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"howard.functions.commons.get_index": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.variants.Variants.get_indexing": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.variants.Variants.create_indexes": {"tf": 1}, "howard.objects.variants.Variants.drop_indexes": {"tf": 1}}, "df": 2}}}, "l": {"docs": {"howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 1}, "howard.objects.variant.justify_genomic_indel": {"tf": 1}}, "df": 3, "s": {"docs": {"howard.objects.variant.NormalizedVariant.indels_start_with_same_base": {"tf": 1}}, "df": 1}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.concat_into_infile": {"tf": 1}}, "df": 1}}}, "o": {"docs": {"howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.from_extann.extann_to_info": {"tf": 1}}, "df": 2, "s": {"docs": {"howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.plugins.plugins_infos": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_infos_list": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1}}, "df": 10}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.genome.ChromosomeSubset.__init__": {"tf": 1}, "howard.objects.genome.GenomeSubset.__init__": {"tf": 1}, "howard.objects.genome.MockSequence.__init__": {"tf": 1}, "howard.objects.genome.MockChromosome.__init__": {"tf": 1}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.transcript.Gene.__init__": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval.__init__": {"tf": 1}, "howard.objects.transcript.Exon.__init__": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}, "howard.objects.variant.Position.__init__": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}, "howard.objects.variants.Variants.__init__": {"tf": 1}, "howard.objects.variants.Variants.init_variables": {"tf": 1}, "howard.tools.tools.PathType.__init__": {"tf": 1}}, "df": 21}}, "s": {"docs": {"howard.objects.hgvs.HGVSRegex.INS": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.InvalidHGVSName": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.name": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.part": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.reason": {"tf": 1}}, "df": 5}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.variants.Variants.set_input": {"tf": 1}, "howard.objects.variants.Variants.get_input": {"tf": 1}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1}}, "df": 4}}}}, "d": {"docs": {"howard.objects.variants.Variants.set_variant_id": {"tf": 1}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1}, "howard.objects.variants.Variants.calculation_variant_id": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.identical": {"tf": 1}}, "df": 1}}}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.check_docker_image_exists": {"tf": 1}, "howard.tools.gui.image_dir": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {"howard.objects.database.Database.is_compressed": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.transcript.Transcript.is_default": {"tf": 1}, "howard.objects.transcript.Transcript.is_coding": {"tf": 1}, "howard.objects.variant.Position.is_forward_strand": {"tf": 1}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1}}, "df": 7}}, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.create_where_clause": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.whereis_bin": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.from_extann.write_extann": {"tf": 1}, "howard.objects.genome.MockGenome.write": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"howard.objects.variant.NormalizedVariant.indels_start_with_same_base": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.find_nomen": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_nomen": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {"howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.objects.variant.normalize_variant": {"tf": 1}}, "df": 2, "d": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.variant.NormalizedVariant": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}, "howard.objects.variant.NormalizedVariant.position": {"tf": 1}, "howard.objects.variant.NormalizedVariant.alleles": {"tf": 1}, "howard.objects.variant.NormalizedVariant.seq_5p": {"tf": 1}, "howard.objects.variant.NormalizedVariant.seq_3p": {"tf": 1}, "howard.objects.variant.NormalizedVariant.genome": {"tf": 1}, "howard.objects.variant.NormalizedVariant.log": {"tf": 1}, "howard.objects.variant.NormalizedVariant.indels_start_with_same_base": {"tf": 1}, "howard.objects.variant.NormalizedVariant.molecular_class": {"tf": 1}, "howard.objects.variant.NormalizedVariant.ref_allele": {"tf": 1}, "howard.objects.variant.NormalizedVariant.alt_alleles": {"tf": 1}, "howard.objects.variant.NormalizedVariant.variant": {"tf": 1}}, "df": 13}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.genome.ChromosomeSubset.name": {"tf": 1}, "howard.objects.genome.MockChromosome.name": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.name": {"tf": 1}, "howard.objects.hgvs.HGVSName.name": {"tf": 1}, "howard.objects.transcript.Gene.name": {"tf": 1}, "howard.objects.transcript.Transcript.name": {"tf": 1}, "howard.objects.transcript.Transcript.full_name": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.name": {"tf": 1}, "howard.objects.transcript.Exon.name": {"tf": 1}}, "df": 13}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.determine_column_number": {"tf": 1}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 1}, "howard.objects.transcript.Exon.number": {"tf": 1}}, "df": 3}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.NUCLEOTIDE_TRANSLATE": {"tf": 1}}, "df": 1}}}}}}}}}, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1}}, "df": 2}}}}}}, "j": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.from_extann.read_json": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}}, "df": 4}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 1}, "howard.objects.variant.justify_genomic_indel": {"tf": 1}}, "df": 4}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.databases.query_and_concatenate_columns": {"tf": 1}, "howard.objects.database.Database.query": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.execute_query": {"tf": 1}, "howard.tools.query": {"tf": 1}, "howard.tools.query.query": {"tf": 1.4142135623730951}}, "df": 6}}}}}, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects": {"tf": 1}, "howard.objects.cdna": {"tf": 1}, "howard.objects.cdna.CDNA_START_CODON": {"tf": 1}, "howard.objects.cdna.CDNA_STOP_CODON": {"tf": 1}, "howard.objects.cdna.CDNACoord": {"tf": 1}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.cdna.CDNACoord.parse": {"tf": 1}, "howard.objects.database": {"tf": 1}, "howard.objects.database.SEP_TYPE": {"tf": 1}, "howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"tf": 1}, "howard.objects.database.DEFAULT_VCF_HEADER": {"tf": 1}, "howard.objects.database.DEFAULT_VCF_HEADER_DUCKDB_TYPES": {"tf": 1}, "howard.objects.database.DEFAULT_HEADER_LIST": {"tf": 1}, "howard.objects.database.FILE_FORMAT_DELIMITERS": {"tf": 1}, "howard.objects.database.DUCKDB_EXTENSION_TO_LOAD": {"tf": 1}, "howard.objects.database.Database": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.database.Database.database": {"tf": 1}, "howard.objects.database.Database.format": {"tf": 1}, "howard.objects.database.Database.header": {"tf": 1}, "howard.objects.database.Database.header_file": {"tf": 1}, "howard.objects.database.Database.databases_folders": {"tf": 1}, "howard.objects.database.Database.assembly": {"tf": 1}, "howard.objects.database.Database.table": {"tf": 1}, "howard.objects.database.Database.set_database": {"tf": 1}, "howard.objects.database.Database.set_databases_folders": {"tf": 1}, "howard.objects.database.Database.get_database_folders": {"tf": 1}, "howard.objects.database.Database.read_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_length": {"tf": 1}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.find_header_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.query": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.objects.database.Database.set_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.set_assembly": {"tf": 1}, "howard.objects.database.Database.get_assembly": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 1}, "howard.objects.database.Database.get_database": {"tf": 1}, "howard.objects.database.Database.get_database_basename": {"tf": 1}, "howard.objects.database.Database.get_database_dirname": {"tf": 1}, "howard.objects.database.Database.exists": {"tf": 1}, "howard.objects.database.Database.set_format": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.get_database_tables": {"tf": 1}, "howard.objects.database.Database.get_database_table": {"tf": 1}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1}, "howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.database.Database.get_view": {"tf": 1}, "howard.objects.database.Database.is_compressed": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.database.Database.map_columns": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1}, "howard.objects.database.Database.get_annotations": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.database.Database.get_conn": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.genome": {"tf": 1}, "howard.objects.genome.ChromosomeSubset": {"tf": 1}, "howard.objects.genome.ChromosomeSubset.__init__": {"tf": 1}, "howard.objects.genome.ChromosomeSubset.name": {"tf": 1}, "howard.objects.genome.ChromosomeSubset.genome": {"tf": 1}, "howard.objects.genome.GenomeSubset": {"tf": 1}, "howard.objects.genome.GenomeSubset.__init__": {"tf": 1}, "howard.objects.genome.GenomeSubset.genome": {"tf": 1}, "howard.objects.genome.GenomeSubset.chrom": {"tf": 1}, "howard.objects.genome.GenomeSubset.start": {"tf": 1}, "howard.objects.genome.GenomeSubset.end": {"tf": 1}, "howard.objects.genome.GenomeSubset.seqid": {"tf": 1}, "howard.objects.genome.MockGenomeError": {"tf": 1}, "howard.objects.genome.MockSequence": {"tf": 1}, "howard.objects.genome.MockSequence.__init__": {"tf": 1}, "howard.objects.genome.MockSequence.sequence": {"tf": 1}, "howard.objects.genome.MockChromosome": {"tf": 1}, "howard.objects.genome.MockChromosome.__init__": {"tf": 1}, "howard.objects.genome.MockChromosome.name": {"tf": 1}, "howard.objects.genome.MockChromosome.genome": {"tf": 1}, "howard.objects.genome.MockGenome": {"tf": 1}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenome.get_seq": {"tf": 1}, "howard.objects.genome.MockGenome.read": {"tf": 1}, "howard.objects.genome.MockGenome.write": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.get_seq": {"tf": 1}, "howard.objects.hgvs": {"tf": 1}, "howard.objects.hgvs.CHROM_PREFIX": {"tf": 1}, "howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}, "howard.objects.hgvs.NUCLEOTIDE_TRANSLATE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.BASE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.BASES": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DNA_REF": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DNA_ALT": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.EQUAL": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.SUB": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.INS": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DEL": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DUP": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_START": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_END": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_RANGE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_COORD": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_START": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_END": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_RANGE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_REF": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_REF2": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALT": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_EXTRA": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE_REGEXES": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE_REGEXES": {"tf": 1}, "howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1}, "howard.objects.hgvs.get_refseq_type": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.name": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.part": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.reason": {"tf": 1}, "howard.objects.hgvs.HGVSName": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.name": {"tf": 1}, "howard.objects.hgvs.HGVSName.prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.chrom": {"tf": 1}, "howard.objects.hgvs.HGVSName.transcript": {"tf": 1}, "howard.objects.hgvs.HGVSName.transcript_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.gene": {"tf": 1}, "howard.objects.hgvs.HGVSName.exon": {"tf": 1}, "howard.objects.hgvs.HGVSName.kind": {"tf": 1}, "howard.objects.hgvs.HGVSName.mutation_type": {"tf": 1}, "howard.objects.hgvs.HGVSName.start": {"tf": 1}, "howard.objects.hgvs.HGVSName.end": {"tf": 1}, "howard.objects.hgvs.HGVSName.ref_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.ref2_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.alt_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.cdna_start": {"tf": 1}, "howard.objects.hgvs.HGVSName.cdna_end": {"tf": 1}, "howard.objects.hgvs.HGVSName.pep_extra": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.transcript": {"tf": 1}, "howard.objects.transcript.Gene": {"tf": 1}, "howard.objects.transcript.Gene.__init__": {"tf": 1}, "howard.objects.transcript.Gene.name": {"tf": 1}, "howard.objects.transcript.Transcript": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.transcript.Transcript.name": {"tf": 1}, "howard.objects.transcript.Transcript.version": {"tf": 1}, "howard.objects.transcript.Transcript.gene": {"tf": 1}, "howard.objects.transcript.Transcript.tx_position": {"tf": 1}, "howard.objects.transcript.Transcript.cds_position": {"tf": 1}, "howard.objects.transcript.Transcript.is_default": {"tf": 1}, "howard.objects.transcript.Transcript.cdna_match": {"tf": 1}, "howard.objects.transcript.Transcript.full_name": {"tf": 1}, "howard.objects.transcript.Transcript.is_coding": {"tf": 1}, "howard.objects.transcript.Transcript.strand": {"tf": 1}, "howard.objects.transcript.Transcript.ordered_cdna_match": {"tf": 1}, "howard.objects.transcript.Transcript.get_cds_start_stop": {"tf": 1}, "howard.objects.transcript.Transcript.start_codon": {"tf": 1}, "howard.objects.transcript.Transcript.stop_codon": {"tf": 1}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 1}, "howard.objects.transcript.BED6Interval_base": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom_start": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom_end": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.name": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.score": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.strand": {"tf": 1}, "howard.objects.transcript.BED6Interval": {"tf": 1}, "howard.objects.transcript.BED6Interval.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval.distance": {"tf": 1}, "howard.objects.transcript.Exon": {"tf": 1}, "howard.objects.transcript.Exon.__init__": {"tf": 1}, "howard.objects.transcript.Exon.transcript": {"tf": 1}, "howard.objects.transcript.Exon.tx_position": {"tf": 1}, "howard.objects.transcript.Exon.number": {"tf": 1}, "howard.objects.transcript.Exon.name": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.transcript.Exon.strand": {"tf": 1}, "howard.objects.transcript.CDNA_Match": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}, "howard.objects.transcript.CDNA_Match.cdna_start": {"tf": 1}, "howard.objects.transcript.CDNA_Match.cdna_end": {"tf": 1}, "howard.objects.transcript.CDNA_Match.gap": {"tf": 1}, "howard.objects.transcript.CDNA_Match.length": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variant": {"tf": 1}, "howard.objects.variant.Position": {"tf": 1}, "howard.objects.variant.Position.__init__": {"tf": 1}, "howard.objects.variant.Position.chrom": {"tf": 1}, "howard.objects.variant.Position.chrom_start": {"tf": 1}, "howard.objects.variant.Position.chrom_stop": {"tf": 1}, "howard.objects.variant.Position.is_forward_strand": {"tf": 1}, "howard.objects.variant.revcomp": {"tf": 1}, "howard.objects.variant.get_sequence": {"tf": 1}, "howard.objects.variant.get_sequence_from_position": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 1}, "howard.objects.variant.justify_genomic_indel": {"tf": 1}, "howard.objects.variant.normalize_variant": {"tf": 1}, "howard.objects.variant.NormalizedVariant": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}, "howard.objects.variant.NormalizedVariant.position": {"tf": 1}, "howard.objects.variant.NormalizedVariant.alleles": {"tf": 1}, "howard.objects.variant.NormalizedVariant.seq_5p": {"tf": 1}, "howard.objects.variant.NormalizedVariant.seq_3p": {"tf": 1}, "howard.objects.variant.NormalizedVariant.genome": {"tf": 1}, "howard.objects.variant.NormalizedVariant.log": {"tf": 1}, "howard.objects.variant.NormalizedVariant.indels_start_with_same_base": {"tf": 1}, "howard.objects.variant.NormalizedVariant.molecular_class": {"tf": 1}, "howard.objects.variant.NormalizedVariant.ref_allele": {"tf": 1}, "howard.objects.variant.NormalizedVariant.alt_alleles": {"tf": 1}, "howard.objects.variant.NormalizedVariant.variant": {"tf": 1}, "howard.objects.variants": {"tf": 1}, "howard.objects.variants.Variants": {"tf": 1}, "howard.objects.variants.Variants.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_samples": {"tf": 1}, "howard.objects.variants.Variants.get_samples": {"tf": 1}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1}, "howard.objects.variants.Variants.set_input": {"tf": 1}, "howard.objects.variants.Variants.set_config": {"tf": 1}, "howard.objects.variants.Variants.set_param": {"tf": 1}, "howard.objects.variants.Variants.init_variables": {"tf": 1}, "howard.objects.variants.Variants.get_indexing": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_config": {"tf": 1}, "howard.objects.variants.Variants.get_duckdb_settings": {"tf": 1}, "howard.objects.variants.Variants.set_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.set_output": {"tf": 1}, "howard.objects.variants.Variants.set_header": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.get_overview": {"tf": 1}, "howard.objects.variants.Variants.get_stats": {"tf": 1}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1}, "howard.objects.variants.Variants.get_input": {"tf": 1}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1}, "howard.objects.variants.Variants.get_output": {"tf": 1}, "howard.objects.variants.Variants.get_output_format": {"tf": 1}, "howard.objects.variants.Variants.get_config": {"tf": 1}, "howard.objects.variants.Variants.get_param": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.get_prefix": {"tf": 1}, "howard.objects.variants.Variants.get_table_variants": {"tf": 1}, "howard.objects.variants.Variants.get_tmp_dir": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_type": {"tf": 1}, "howard.objects.variants.Variants.get_connexion": {"tf": 1}, "howard.objects.variants.Variants.close_connexion": {"tf": 1}, "howard.objects.variants.Variants.get_header": {"tf": 1}, "howard.objects.variants.Variants.get_header_infos_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_length": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_sql": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.get_verbose": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_format": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.load_data": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.drop_column": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}, "howard.objects.variants.Variants.create_indexes": {"tf": 1}, "howard.objects.variants.Variants.drop_indexes": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}, "howard.objects.variants.Variants.execute_query": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.run_commands": {"tf": 1}, "howard.objects.variants.Variants.get_threads": {"tf": 1}, "howard.objects.variants.Variants.get_memory": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1}, "howard.objects.variants.Variants.drop_variants_table": {"tf": 1}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1}, "howard.objects.variants.Variants.scan_databases": {"tf": 1}, "howard.objects.variants.Variants.annotation": {"tf": 1}, "howard.objects.variants.Variants.annotation_snpsift": {"tf": 1}, "howard.objects.variants.Variants.annotation_bcftools": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.annotation_snpeff": {"tf": 1}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 1}, "howard.objects.variants.Variants.annotation_parquet": {"tf": 1}, "howard.objects.variants.Variants.annotation_splice": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}, "howard.objects.variants.Variants.get_operations_help": {"tf": 1}, "howard.objects.variants.Variants.calculation": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}, "howard.objects.variants.Variants.calculation_variant_id": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_nomen": {"tf": 1}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_concordance": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1}, "howard.objects.variants.Variants.calculation_trio": {"tf": 1}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_export": {"tf": 1}, "howard.objects.variants.Variants.transcripts_export": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 365}}}}}}, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.transcript.Transcript.ordered_cdna_match": {"tf": 1}}, "df": 1}}}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.variants.Variants.set_output": {"tf": 1}, "howard.objects.variants.Variants.get_output": {"tf": 1}, "howard.objects.variants.Variants.get_output_format": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}}, "df": 4}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"howard.objects.variants.Variants.get_overview": {"tf": 1}}, "df": 1}}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.variants.Variants.get_operations_help": {"tf": 1}}, "df": 1}}}}}}}}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.hgvs.HGVSName.kind": {"tf": 1}}, "df": 1}}}}}}, "annotation": {"root": {"docs": {"howard.objects.transcript.Transcript.full_name": {"tf": 1}, "howard.objects.transcript.Transcript.is_coding": {"tf": 1}, "howard.objects.transcript.Transcript.strand": {"tf": 1}, "howard.objects.transcript.Exon.name": {"tf": 1}, "howard.objects.transcript.CDNA_Match.length": {"tf": 1}}, "df": 5, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"howard.objects.transcript.Transcript.full_name": {"tf": 1}, "howard.objects.transcript.Transcript.strand": {"tf": 1}, "howard.objects.transcript.Exon.name": {"tf": 1}}, "df": 3}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"howard.objects.transcript.Transcript.is_coding": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.transcript.CDNA_Match.length": {"tf": 1}}, "df": 1}}}}}, "default_value": {"root": {"0": {"0": {"0": {"0": {"0": {"1": {"4": {"0": {"5": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "1": {"1": {"5": {"6": {"docs": {}, "df": 0, "+": {"0": {"0": {"0": {"1": {"3": {"6": {"3": {"docs": {}, "df": 0, "+": {"0": {"0": {"1": {"1": {"3": {"0": {"4": {"docs": {}, "df": 0, "+": {"0": {"0": {"1": {"0": {"0": {"5": {"5": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}}}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}, "docs": {}, "df": 0}, "docs": {"howard.functions.commons.code_type_map": {"tf": 1}, "howard.functions.commons.CODE_TYPE_MAP": {"tf": 1}}, "df": 2}, "1": {"0": {"0": {"0": {"0": {"0": {"0": {"0": {"0": {"0": {"0": {"0": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}, "docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 3}, "docs": {"howard.functions.commons.DTYPE_LIMIT_AUTO": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 3}, "docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}, "docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}, "2": {"4": {"docs": {}, "df": 0, "m": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}, "docs": {}, "df": 0}, "4": {"8": {"5": {"7": {"6": {"docs": {"howard.functions.commons.DEFAULT_CHUNK_SIZE": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 3}, "2": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}, "5": {"2": {"2": {"3": {"2": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2, ":": {"docs": {}, "df": 0, "c": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}, "n": {"docs": {}, "df": 0, "p": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "6": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "b": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "docs": {"howard.functions.commons.code_type_map": {"tf": 1}, "howard.functions.commons.DEFAULT_TOOLS_BIN": {"tf": 1}, "howard.functions.commons.CODE_TYPE_MAP": {"tf": 1}, "howard.functions.commons.GENOTYPE_MAP": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 4.358898943540674}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 4.47213595499958}}, "df": 7, ":": {"docs": {}, "df": 0, "c": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "2": {"0": {"2": {"1": {"0": {"1": {"2": {"3": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "1": {"0": {"9": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "3": {"1": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 2.449489742783178}, "howard.tools.tools.arguments_dict": {"tf": 2.449489742783178}}, "df": 2}}, "docs": {}, "df": 0}, "4": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}, "5": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}, "9": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "docs": {"howard.functions.commons.code_type_map": {"tf": 1}, "howard.functions.commons.vcf_required_release": {"tf": 1}, "howard.functions.commons.vcf_required": {"tf": 1}, "howard.functions.commons.DEFAULT_TOOLS_BIN": {"tf": 1}, "howard.functions.commons.CODE_TYPE_MAP": {"tf": 1}, "howard.functions.commons.GENOTYPE_MAP": {"tf": 1}, "howard.objects.database.DEFAULT_HEADER_LIST": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 9}, "3": {"2": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "b": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "docs": {"howard.functions.commons.code_type_map": {"tf": 1}, "howard.functions.commons.CODE_TYPE_MAP": {"tf": 1}, "howard.functions.commons.GENOTYPE_MAP": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 3}, "howard.tools.tools.arguments_dict": {"tf": 3}}, "df": 5}, "4": {"0": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}, "2": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}, "docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 3, "a": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 3}}, "5": {"0": {"0": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 3}}}}}}}}}}, "docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3}, "docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}, "6": {"8": {"9": {"4": {"1": {"8": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "p": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}, "c": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"2": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "c": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "docs": {}, "df": 0}}}}}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "8": {"0": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}, "docs": {"howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 2.6457513110645907}}, "df": 3, "g": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "9": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "m": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 3}}}}, "docs": {"howard.functions.commons.file_folder": {"tf": 1.4142135623730951}, "howard.functions.commons.subfolder_plugins": {"tf": 1.4142135623730951}, "howard.functions.commons.folder_main": {"tf": 1.4142135623730951}, "howard.functions.commons.folder_config": {"tf": 1.4142135623730951}, "howard.functions.commons.folder_user_home": {"tf": 1.4142135623730951}, "howard.functions.commons.folder_howard_home": {"tf": 1.4142135623730951}, "howard.functions.commons.folder_plugins": {"tf": 1.4142135623730951}, "howard.functions.commons.comparison_map": {"tf": 2.8284271247461903}, "howard.functions.commons.code_type_map": {"tf": 2.23606797749979}, "howard.functions.commons.code_type_map_to_sql": {"tf": 2.449489742783178}, "howard.functions.commons.file_format_delimiters": {"tf": 2.8284271247461903}, "howard.functions.commons.file_format_allowed": {"tf": 1.4142135623730951}, "howard.functions.commons.file_compressed_format": {"tf": 1.4142135623730951}, "howard.functions.commons.vcf_required_release": {"tf": 1.4142135623730951}, "howard.functions.commons.vcf_required_columns": {"tf": 1.4142135623730951}, "howard.functions.commons.vcf_required": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_TOOLS_FOLDER": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_TOOLS_BIN": {"tf": 6.082762530298219}, "howard.functions.commons.DEFAULT_ANNOVAR_URL": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_REFSEQ_URL": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_DBNSFP_URL": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_EXOMISER_URL": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_EXOMISER_REMM_URL": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_EXOMISER_CADD_URL": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_ALPHAMISSENSE_URL": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_DBSNP_URL": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_DATABASE_FOLDER": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_ANNOTATIONS_FOLDER": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_GENOME_FOLDER": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_SNPEFF_FOLDER": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_ANNOVAR_FOLDER": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_REFSEQ_FOLDER": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_DBNSFP_FOLDER": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_EXOMISER_FOLDER": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_DBSNP_FOLDER": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_SPLICE_FOLDER": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_SPLICEAI_FOLDER": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_SPIP_FOLDER": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_DATA_FOLDER": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_ASSEMBLY": {"tf": 1.4142135623730951}, "howard.functions.commons.DUCKDB_EXTENSION": {"tf": 1.4142135623730951}, "howard.functions.commons.MACHIN_LIST": {"tf": 2}, "howard.functions.commons.BCFTOOLS_FORMAT": {"tf": 1.4142135623730951}, "howard.functions.commons.LOG_FORMAT": {"tf": 2.23606797749979}, "howard.functions.commons.CODE_TYPE_MAP": {"tf": 2.23606797749979}, "howard.functions.commons.GENOTYPE_MAP": {"tf": 1}, "howard.functions.from_annovar.TYPES": {"tf": 2.6457513110645907}, "howard.main.msg_gui_disable": {"tf": 1.4142135623730951}, "howard.main.main_folder": {"tf": 1.4142135623730951}, "howard.objects.cdna.CDNA_START_CODON": {"tf": 1.4142135623730951}, "howard.objects.cdna.CDNA_STOP_CODON": {"tf": 1.4142135623730951}, "howard.objects.database.SEP_TYPE": {"tf": 2.8284271247461903}, "howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"tf": 7.937253933193772}, "howard.objects.database.DEFAULT_VCF_HEADER": {"tf": 1.4142135623730951}, "howard.objects.database.DEFAULT_VCF_HEADER_DUCKDB_TYPES": {"tf": 3.3166247903554}, "howard.objects.database.DEFAULT_HEADER_LIST": {"tf": 1.4142135623730951}, "howard.objects.database.FILE_FORMAT_DELIMITERS": {"tf": 2.8284271247461903}, "howard.objects.database.DUCKDB_EXTENSION_TO_LOAD": {"tf": 1.4142135623730951}, "howard.objects.hgvs.CHROM_PREFIX": {"tf": 1.4142135623730951}, "howard.objects.hgvs.CODON_1": {"tf": 8.306623862918075}, "howard.objects.hgvs.CODON_3": {"tf": 8.306623862918075}, "howard.objects.hgvs.CODON_FULL": {"tf": 8.12403840463596}, "howard.objects.hgvs.NUCLEOTIDE_TRANSLATE": {"tf": 2.449489742783178}, "howard.objects.hgvs.HGVSRegex.BASE": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.BASES": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.DNA_REF": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.DNA_ALT": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.EQUAL": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.SUB": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.INS": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.DEL": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.DUP": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.COORD_START": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.COORD_END": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.COORD_RANGE": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.CDNA_COORD": {"tf": 2.449489742783178}, "howard.objects.hgvs.HGVSRegex.CDNA_START": {"tf": 2.449489742783178}, "howard.objects.hgvs.HGVSRegex.CDNA_END": {"tf": 2.449489742783178}, "howard.objects.hgvs.HGVSRegex.CDNA_RANGE": {"tf": 3.1622776601683795}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE": {"tf": 9.899494936611665}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"tf": 10.723805294763608}, "howard.objects.hgvs.HGVSRegex.PEP": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSRegex.PEP_REF": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSRegex.PEP_REF2": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSRegex.PEP_ALT": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSRegex.PEP_EXTRA": {"tf": 2}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE": {"tf": 4.242640687119285}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE_REGEXES": {"tf": 5}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE_REGEXES": {"tf": 6.082762530298219}, "howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1.4142135623730951}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 4.242640687119285}, "howard.tools.gui.main_folder": {"tf": 1.4142135623730951}, "howard.tools.gui.image_dir": {"tf": 1.7320508075688772}, "howard.tools.help.main_folder": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments": {"tf": 43.18564576337837}, "howard.tools.tools.shared_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 21.702534414210707}, "howard.tools.tools.arguments_dict": {"tf": 48.394214530251446}}, "df": 99, "x": {"2": {"7": {"docs": {"howard.functions.commons.file_folder": {"tf": 1.4142135623730951}, "howard.functions.commons.subfolder_plugins": {"tf": 1.4142135623730951}, "howard.functions.commons.folder_main": {"tf": 1.4142135623730951}, "howard.functions.commons.folder_config": {"tf": 1.4142135623730951}, "howard.functions.commons.folder_user_home": {"tf": 1.4142135623730951}, "howard.functions.commons.folder_howard_home": {"tf": 1.4142135623730951}, "howard.functions.commons.folder_plugins": {"tf": 1.4142135623730951}, "howard.functions.commons.comparison_map": {"tf": 4.898979485566356}, "howard.functions.commons.code_type_map": {"tf": 2.8284271247461903}, "howard.functions.commons.code_type_map_to_sql": {"tf": 4}, "howard.functions.commons.file_format_delimiters": {"tf": 4.47213595499958}, "howard.functions.commons.file_format_allowed": {"tf": 4}, "howard.functions.commons.file_compressed_format": {"tf": 2}, "howard.functions.commons.vcf_required_release": {"tf": 1.4142135623730951}, "howard.functions.commons.vcf_required_columns": {"tf": 4}, "howard.functions.commons.vcf_required": {"tf": 2}, "howard.functions.commons.DEFAULT_TOOLS_FOLDER": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_TOOLS_BIN": {"tf": 7.615773105863909}, "howard.functions.commons.DEFAULT_ANNOVAR_URL": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_REFSEQ_URL": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_DBNSFP_URL": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_EXOMISER_URL": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_EXOMISER_REMM_URL": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_EXOMISER_CADD_URL": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_ALPHAMISSENSE_URL": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_DBSNP_URL": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_DATABASE_FOLDER": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_ANNOTATIONS_FOLDER": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_GENOME_FOLDER": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_SNPEFF_FOLDER": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_ANNOVAR_FOLDER": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_REFSEQ_FOLDER": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_DBNSFP_FOLDER": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_EXOMISER_FOLDER": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_DBSNP_FOLDER": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_SPLICE_FOLDER": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_SPLICEAI_FOLDER": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_SPIP_FOLDER": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_DATA_FOLDER": {"tf": 1.4142135623730951}, "howard.functions.commons.DEFAULT_ASSEMBLY": {"tf": 1.4142135623730951}, "howard.functions.commons.DUCKDB_EXTENSION": {"tf": 1.4142135623730951}, "howard.functions.commons.MACHIN_LIST": {"tf": 2.8284271247461903}, "howard.functions.commons.BCFTOOLS_FORMAT": {"tf": 2}, "howard.functions.commons.LOG_FORMAT": {"tf": 1.4142135623730951}, "howard.functions.commons.CODE_TYPE_MAP": {"tf": 2.8284271247461903}, "howard.functions.commons.GENOTYPE_MAP": {"tf": 2.8284271247461903}, "howard.functions.from_annovar.TYPES": {"tf": 4.47213595499958}, "howard.main.msg_gui_disable": {"tf": 1.4142135623730951}, "howard.main.main_folder": {"tf": 1.4142135623730951}, "howard.objects.cdna.CDNA_START_CODON": {"tf": 1.4142135623730951}, "howard.objects.cdna.CDNA_STOP_CODON": {"tf": 1.4142135623730951}, "howard.objects.database.SEP_TYPE": {"tf": 4.47213595499958}, "howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"tf": 11.40175425099138}, "howard.objects.database.DEFAULT_VCF_HEADER": {"tf": 4}, "howard.objects.database.DEFAULT_VCF_HEADER_DUCKDB_TYPES": {"tf": 6}, "howard.objects.database.DEFAULT_HEADER_LIST": {"tf": 2}, "howard.objects.database.FILE_FORMAT_DELIMITERS": {"tf": 4.47213595499958}, "howard.objects.database.DUCKDB_EXTENSION_TO_LOAD": {"tf": 1.4142135623730951}, "howard.objects.hgvs.CHROM_PREFIX": {"tf": 1.4142135623730951}, "howard.objects.hgvs.CODON_1": {"tf": 16}, "howard.objects.hgvs.CODON_3": {"tf": 16}, "howard.objects.hgvs.CODON_FULL": {"tf": 16}, "howard.objects.hgvs.NUCLEOTIDE_TRANSLATE": {"tf": 4}, "howard.objects.hgvs.HGVSRegex.BASE": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.BASES": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.DNA_REF": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.DNA_ALT": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.EQUAL": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.SUB": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.INS": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.DEL": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.DUP": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.COORD_START": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.COORD_END": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.COORD_RANGE": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.CDNA_COORD": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.CDNA_START": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.CDNA_END": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.CDNA_RANGE": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE": {"tf": 6}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"tf": 5.196152422706632}, "howard.objects.hgvs.HGVSRegex.PEP": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.PEP_REF": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.PEP_REF2": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.PEP_ALT": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.PEP_EXTRA": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE": {"tf": 2.8284271247461903}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE_REGEXES": {"tf": 2.8284271247461903}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE": {"tf": 6}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE_REGEXES": {"tf": 6}, "howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 9.797958971132712}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 9.797958971132712}, "howard.tools.gui.main_folder": {"tf": 1.4142135623730951}, "howard.tools.gui.image_dir": {"tf": 1.4142135623730951}, "howard.tools.help.main_folder": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments": {"tf": 62.23343153000644}, "howard.tools.tools.shared_arguments": {"tf": 4.69041575982343}, "howard.tools.tools.commands_arguments": {"tf": 30.56141357987225}, "howard.tools.tools.arguments_dict": {"tf": 69.53416426476987}}, "df": 99}, "docs": {}, "df": 0}, "docs": {}, "df": 0, "m": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1.4142135623730951}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1.4142135623730951}}, "df": 2}, "r": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1}}, "df": 2}, "p": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1}}, "df": 2}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 5.385164807134504}, "howard.tools.tools.commands_arguments": {"tf": 3.7416573867739413}, "howard.tools.tools.arguments_dict": {"tf": 6.557438524302}}, "df": 3, "r": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2, "s": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {"howard.functions.commons.folder_user_home": {"tf": 1}}, "df": 1, "/": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.folder_main": {"tf": 1}}, "df": 1, "/": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"howard.main.main_folder": {"tf": 1}}, "df": 1, "/": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.file_folder": {"tf": 1}}, "df": 1, "/": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "b": {"docs": {"howard.functions.commons.DUCKDB_EXTENSION": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.gui.main_folder": {"tf": 1}, "howard.tools.gui.image_dir": {"tf": 1}, "howard.tools.help.main_folder": {"tf": 1}}, "df": 3}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.folder_config": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.folder_plugins": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.folder_howard_home": {"tf": 1}}, "df": 1, "/": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.DEFAULT_TOOLS_FOLDER": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"howard.functions.commons.DEFAULT_DATA_FOLDER": {"tf": 1}}, "df": 1, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.DEFAULT_DATABASE_FOLDER": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 3.1622776601683795}, "howard.tools.tools.arguments_dict": {"tf": 3.1622776601683795}}, "df": 3, "/": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.DEFAULT_ANNOTATIONS_FOLDER": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 3}}}}}}}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.DEFAULT_ANNOVAR_FOLDER": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.DEFAULT_GENOME_FOLDER": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 3, "/": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "g": {"1": {"9": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "g": {"1": {"9": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.DEFAULT_SNPEFF_FOLDER": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.DEFAULT_SPLICE_FOLDER": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "i": {"docs": {"howard.functions.commons.DEFAULT_SPLICEAI_FOLDER": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.commons.DEFAULT_SPIP_FOLDER": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.DEFAULT_REFSEQ_FOLDER": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 3}}}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.DEFAULT_DBNSFP_FOLDER": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.DEFAULT_EXOMISER_FOLDER": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}, "d": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.commons.DEFAULT_DBSNP_FOLDER": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 2.449489742783178}}, "df": 3}, "s": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1.4142135623730951}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 4}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.commands_arguments": {"tf": 2.8284271247461903}, "howard.tools.tools.arguments_dict": {"tf": 3.3166247903554}}, "df": 3}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 3.872983346207417}, "howard.tools.tools.arguments_dict": {"tf": 4.123105625617661}}, "df": 3}}}}, "c": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {"howard.functions.commons.DEFAULT_REFSEQ_URL": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 2.6457513110645907}}, "df": 4}}}, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1}}, "df": 2}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}, "i": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 3}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}, "p": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 2, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.commands_arguments": {"tf": 3.3166247903554}, "howard.tools.tools.arguments_dict": {"tf": 4}}, "df": 3}}}}}, "r": {"docs": {}, "df": 0, "l": {"docs": {"howard.tools.tools.arguments": {"tf": 5.916079783099616}, "howard.tools.tools.commands_arguments": {"tf": 3.4641016151377544}, "howard.tools.tools.arguments_dict": {"tf": 6.855654600401044}}, "df": 3}}, "t": {"docs": {}, "df": 0, "r": {"3": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3}, "5": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3}, "docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}, "p": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 2}, "howard.objects.hgvs.HGVSRegex.DNA_REF": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DNA_ALT": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.EQUAL": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.SUB": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.INS": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DEL": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DUP": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_START": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_END": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_RANGE": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.CDNA_COORD": {"tf": 2}, "howard.objects.hgvs.HGVSRegex.CDNA_START": {"tf": 2.23606797749979}, "howard.objects.hgvs.HGVSRegex.CDNA_END": {"tf": 2.23606797749979}, "howard.objects.hgvs.HGVSRegex.CDNA_RANGE": {"tf": 3.1622776601683795}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE": {"tf": 12.449899597988733}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"tf": 11.704699910719626}, "howard.objects.hgvs.HGVSRegex.PEP_REF": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_REF2": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALT": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_EXTRA": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE": {"tf": 4.47213595499958}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE_REGEXES": {"tf": 4.47213595499958}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE": {"tf": 7.681145747868608}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE_REGEXES": {"tf": 7.681145747868608}}, "df": 25, "l": {"docs": {"howard.functions.commons.DEFAULT_TOOLS_BIN": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.subfolder_plugins": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "v": {"docs": {"howard.functions.commons.file_format_delimiters": {"tf": 1}, "howard.functions.commons.file_format_allowed": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 5}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.file_format_allowed": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 8.48528137423857}, "howard.tools.tools.commands_arguments": {"tf": 5.5677643628300215}, "howard.tools.tools.arguments_dict": {"tf": 10.14889156509222}}, "df": 4, "|": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}, "v": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "f": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "/": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "f": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "/": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "b": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {"howard.tools.tools.arguments": {"tf": 4.795831523312719}, "howard.tools.tools.commands_arguments": {"tf": 5.477225575051661}, "howard.tools.tools.arguments_dict": {"tf": 7.280109889280518}}, "df": 3, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 2.449489742783178}}, "df": 3}, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 2.8284271247461903}, "howard.tools.tools.arguments_dict": {"tf": 2.8284271247461903}}, "df": 2}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "m": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 2.23606797749979}, "howard.tools.tools.arguments_dict": {"tf": 2.6457513110645907}}, "df": 3}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"howard.tools.tools.arguments": {"tf": 5.830951894845301}, "howard.tools.tools.arguments_dict": {"tf": 5.830951894845301}}, "df": 2, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 6.4031242374328485}, "howard.tools.tools.arguments_dict": {"tf": 6.4031242374328485}}, "df": 2}}}}, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}}}, "/": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"1": {"docs": {"howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 2}, "2": {"docs": {"howard.tools.tools.arguments": {"tf": 3.1622776601683795}, "howard.tools.tools.arguments_dict": {"tf": 3.1622776601683795}}, "df": 2}, "docs": {}, "df": 0}}}}}}}, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "b": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.vcf_required_columns": {"tf": 1}, "howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"tf": 2.8284271247461903}, "howard.objects.database.DEFAULT_VCF_HEADER": {"tf": 1}, "howard.objects.database.DEFAULT_VCF_HEADER_DUCKDB_TYPES": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 2.6457513110645907}, "howard.tools.tools.arguments_dict": {"tf": 2.6457513110645907}}, "df": 6, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "m": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.DEFAULT_TOOLS_BIN": {"tf": 1}}, "df": 1}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 2.449489742783178}, "howard.tools.tools.commands_arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 3.1622776601683795}}, "df": 3}}}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.CODON_3": {"tf": 1.4142135623730951}}, "df": 1, "n": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.CODON_FULL": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 3}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {"howard.objects.hgvs.CODON_3": {"tf": 2}, "howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.CODON_FULL": {"tf": 2}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 2.23606797749979}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 2.23606797749979}, "howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.commands_arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 3}}, "df": 5}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.commands_arguments": {"tf": 2.8284271247461903}, "howard.tools.tools.arguments_dict": {"tf": 3.3166247903554}}, "df": 3, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}, "s": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "/": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 2}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 2.449489742783178}, "howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 3}}, "df": 3, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 2.8284271247461903}, "howard.tools.tools.commands_arguments": {"tf": 2.449489742783178}, "howard.tools.tools.arguments_dict": {"tf": 3.7416573867739413}}, "df": 3}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2, "r": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 2.449489742783178}}, "df": 3}, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 3}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 3.1622776601683795}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 3.3166247903554}}, "df": 3}}}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "x": {"docs": {}, "df": 0, "y": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"howard.objects.hgvs.HGVSRegex.CDNA_COORD": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.CDNA_START": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.CDNA_END": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.CDNA_RANGE": {"tf": 2}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE": {"tf": 6.928203230275509}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"tf": 6.782329983125268}, "howard.tools.tools.arguments": {"tf": 2.8284271247461903}, "howard.tools.tools.commands_arguments": {"tf": 3}, "howard.tools.tools.arguments_dict": {"tf": 4.123105625617661}}, "df": 9, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "d": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 2}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 2}}, "df": 2}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 3}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1}}, "df": 2}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 4.58257569495584}, "howard.tools.tools.commands_arguments": {"tf": 4.242640687119285}, "howard.tools.tools.arguments_dict": {"tf": 6.244997998398398}}, "df": 3, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 2.23606797749979}, "howard.tools.tools.arguments_dict": {"tf": 2.6457513110645907}}, "df": 3}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}, "s": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}, "y": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 2.6457513110645907}}, "df": 3}}}}, "z": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 3}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 2}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "y": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "d": {"docs": {}, "df": 0, "f": {"docs": {"howard.tools.tools.arguments": {"tf": 2.449489742783178}, "howard.tools.tools.commands_arguments": {"tf": 2.8284271247461903}, "howard.tools.tools.arguments_dict": {"tf": 3.7416573867739413}}, "df": 3, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "g": {"docs": {"howard.functions.commons.GENOTYPE_MAP": {"tf": 1}, "howard.objects.hgvs.CODON_1": {"tf": 2}, "howard.objects.hgvs.NUCLEOTIDE_TRANSLATE": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments": {"tf": 8.48528137423857}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 8.602325267042627}}, "df": 6, "t": {"docs": {"howard.functions.commons.comparison_map": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSRegex.DNA_REF": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DNA_ALT": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.EQUAL": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.SUB": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.INS": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DEL": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DUP": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_START": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_END": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_RANGE": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.CDNA_COORD": {"tf": 2}, "howard.objects.hgvs.HGVSRegex.CDNA_START": {"tf": 2.23606797749979}, "howard.objects.hgvs.HGVSRegex.CDNA_END": {"tf": 2.23606797749979}, "howard.objects.hgvs.HGVSRegex.CDNA_RANGE": {"tf": 3.1622776601683795}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE": {"tf": 12.489995996796797}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"tf": 11.661903789690601}, "howard.objects.hgvs.HGVSRegex.PEP_REF": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_REF2": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALT": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_EXTRA": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE": {"tf": 4.47213595499958}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE_REGEXES": {"tf": 4.47213595499958}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE": {"tf": 7.745966692414834}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE_REGEXES": {"tf": 7.745966692414834}, "howard.tools.tools.arguments": {"tf": 11.135528725660043}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 11.224972160321824}}, "df": 28, "e": {"docs": {"howard.functions.commons.comparison_map": {"tf": 1}}, "df": 1}, "t": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "c": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "a": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "g": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}}, "z": {"docs": {"howard.functions.commons.file_compressed_format": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 5.5677643628300215}, "howard.tools.tools.commands_arguments": {"tf": 7}, "howard.tools.tools.arguments_dict": {"tf": 8.94427190999916}}, "df": 4, ":": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}, "/": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"2": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}, "docs": {}, "df": 0}}}}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.DEFAULT_ALPHAMISSENSE_URL": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}, "e": {"docs": {}, "df": 0, "y": {"docs": {"howard.tools.tools.arguments": {"tf": 8}, "howard.tools.tools.arguments_dict": {"tf": 8}}, "df": 2}}}, "v": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.DEFAULT_DBSNP_URL": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "i": {"docs": {"howard.main.msg_gui_disable": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 3}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "c": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "a": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "g": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "f": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "c": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "a": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "g": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}}, "g": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "c": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "a": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "g": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}}, "l": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.hgvs.CODON_3": {"tf": 1.4142135623730951}}, "df": 1}, "y": {"docs": {"howard.objects.hgvs.CODON_3": {"tf": 2}}, "df": 1, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.CODON_FULL": {"tf": 2}}, "df": 1}}}}}, "u": {"docs": {"howard.objects.hgvs.CODON_3": {"tf": 1.4142135623730951}}, "df": 1, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.CODON_FULL": {"tf": 1.4142135623730951}}, "df": 1}}, "c": {"docs": {"howard.objects.hgvs.CODON_FULL": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 3.3166247903554}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 3.3166247903554}}, "df": 2}}, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 3.1622776601683795}, "howard.tools.tools.commands_arguments": {"tf": 2.449489742783178}, "howard.tools.tools.arguments_dict": {"tf": 4}}, "df": 3, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 3.4641016151377544}, "howard.tools.tools.commands_arguments": {"tf": 3.3166247903554}, "howard.tools.tools.arguments_dict": {"tf": 4.795831523312719}}, "df": 3, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 3, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3}}}}}}, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 2.449489742783178}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 2.8284271247461903}}, "df": 3, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 3.605551275463989}, "howard.tools.tools.arguments_dict": {"tf": 3.7416573867739413}}, "df": 3}}}, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 4}, "howard.tools.tools.commands_arguments": {"tf": 3.4641016151377544}, "howard.tools.tools.arguments_dict": {"tf": 5.291502622129181}}, "df": 3, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 3}, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 2}}}}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 3.1622776601683795}, "howard.tools.tools.arguments_dict": {"tf": 3.4641016151377544}}, "df": 3}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 3}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 3, "s": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 3.7416573867739413}, "howard.tools.tools.arguments_dict": {"tf": 3.7416573867739413}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}, "m": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}, "l": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 2.449489742783178}}, "df": 1, "t": {"docs": {"howard.functions.commons.comparison_map": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSRegex.DNA_REF": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DNA_ALT": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.EQUAL": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.SUB": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.INS": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DEL": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DUP": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_START": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_END": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_RANGE": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.CDNA_COORD": {"tf": 2}, "howard.objects.hgvs.HGVSRegex.CDNA_START": {"tf": 2.23606797749979}, "howard.objects.hgvs.HGVSRegex.CDNA_END": {"tf": 2.23606797749979}, "howard.objects.hgvs.HGVSRegex.CDNA_RANGE": {"tf": 3.1622776601683795}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE": {"tf": 12.449899597988733}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"tf": 11.704699910719626}, "howard.objects.hgvs.HGVSRegex.PEP_REF": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_REF2": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALT": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_EXTRA": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE": {"tf": 4.47213595499958}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE_REGEXES": {"tf": 4.47213595499958}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE": {"tf": 7.681145747868608}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE_REGEXES": {"tf": 7.681145747868608}, "howard.tools.tools.arguments": {"tf": 10.816653826391969}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 10.862780491200215}}, "df": 28, "e": {"docs": {"howard.functions.commons.comparison_map": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 2, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.LOG_FORMAT": {"tf": 1}}, "df": 1}}}}, "\\": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}, "s": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "u": {"docs": {"howard.objects.hgvs.CODON_3": {"tf": 2.449489742783178}}, "df": 1, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.CODON_FULL": {"tf": 2.449489742783178}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "y": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.hgvs.CODON_3": {"tf": 1.4142135623730951}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.CODON_FULL": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.commands_arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2.8284271247461903}}, "df": 3}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 4.898979485566356}, "howard.tools.tools.commands_arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 5.291502622129181}}, "df": 3}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 3, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "\\": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}, "g": {"docs": {"howard.tools.tools.arguments": {"tf": 3.1622776601683795}, "howard.tools.tools.shared_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 3.3166247903554}}, "df": 3, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments": {"tf": 8.602325267042627}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 8.717797887081348}}, "df": 4, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "s": {"docs": {"howard.functions.commons.comparison_map": {"tf": 1}}, "df": 1}}}}}, "x": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.DEFAULT_TOOLS_BIN": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 6.6332495807108}, "howard.tools.tools.commands_arguments": {"tf": 4}, "howard.tools.tools.arguments_dict": {"tf": 7.745966692414834}}, "df": 4, ":": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}}}}}}}, "[": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 3}}}}}}}}}}, "h": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "n": {"2": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}, "docs": {"howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.commands_arguments": {"tf": 2.23606797749979}, "howard.tools.tools.arguments_dict": {"tf": 3.1622776601683795}}, "df": 3}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.DUCKDB_EXTENSION": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 2.449489742783178}}, "df": 3}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {"howard.objects.hgvs.HGVSRegex.PEP_EXTRA": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE": {"tf": 2}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE_REGEXES": {"tf": 2}, "howard.tools.tools.arguments": {"tf": 5.477225575051661}, "howard.tools.tools.arguments_dict": {"tf": 5.477225575051661}}, "df": 5, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 4}, "howard.tools.tools.commands_arguments": {"tf": 2.23606797749979}, "howard.tools.tools.arguments_dict": {"tf": 4.58257569495584}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 3, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 4.795831523312719}, "howard.tools.tools.arguments_dict": {"tf": 4.795831523312719}}, "df": 2, ":": {"docs": {}, "df": 0, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 3.7416573867739413}, "howard.tools.tools.arguments_dict": {"tf": 3.7416573867739413}}, "df": 2}}}}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 2.8284271247461903}, "howard.tools.tools.commands_arguments": {"tf": 5.744562646538029}, "howard.tools.tools.arguments_dict": {"tf": 6.4031242374328485}}, "df": 3, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.commands_arguments": {"tf": 2.449489742783178}, "howard.tools.tools.arguments_dict": {"tf": 3}}, "df": 3}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.DEFAULT_TOOLS_BIN": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "d": {"docs": {"howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"tf": 2}, "howard.objects.database.DEFAULT_VCF_HEADER_DUCKDB_TYPES": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_END": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_RANGE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_END": {"tf": 2.23606797749979}, "howard.objects.hgvs.HGVSRegex.CDNA_RANGE": {"tf": 2.23606797749979}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE": {"tf": 6}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"tf": 5.385164807134504}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE_REGEXES": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE": {"tf": 2.8284271247461903}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE_REGEXES": {"tf": 2.8284271247461903}, "howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 14}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1}}, "df": 2}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 2, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 3}}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"howard.functions.commons.DEFAULT_REFSEQ_URL": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 3}}}, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.arguments": {"tf": 2.449489742783178}, "howard.tools.tools.arguments_dict": {"tf": 2.449489742783178}}, "df": 2}}}}, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 3.7416573867739413}, "howard.tools.tools.arguments_dict": {"tf": 3.7416573867739413}}, "df": 2}}}}}}, "c": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1.4142135623730951}, "howard.objects.hgvs.NUCLEOTIDE_TRANSLATE": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments": {"tf": 2.6457513110645907}, "howard.tools.tools.arguments_dict": {"tf": 2.6457513110645907}}, "df": 4, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "s": {"docs": {"howard.functions.commons.comparison_map": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 4}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.arguments": {"tf": 2.449489742783178}, "howard.tools.tools.arguments_dict": {"tf": 2.449489742783178}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1.4142135623730951}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 5, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 2.449489742783178}, "howard.tools.tools.commands_arguments": {"tf": 3.605551275463989}, "howard.tools.tools.arguments_dict": {"tf": 4.358898943540674}}, "df": 3, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}, "f": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.arguments": {"tf": 4}, "howard.tools.tools.shared_arguments": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 2.6457513110645907}, "howard.tools.tools.arguments_dict": {"tf": 4.898979485566356}}, "df": 4, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 3.4641016151377544}, "howard.tools.tools.commands_arguments": {"tf": 2.449489742783178}, "howard.tools.tools.arguments_dict": {"tf": 4.242640687119285}}, "df": 3, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}, "/": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 3}, "howard.tools.tools.arguments_dict": {"tf": 3}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}}}}, "m": {"docs": {"howard.functions.commons.DEFAULT_DBNSFP_URL": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.DEFAULT_TOOLS_BIN": {"tf": 1}}, "df": 1, "s": {"docs": {"howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "/": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.commons.DEFAULT_ALPHAMISSENSE_URL": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3}}}, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"tf": 4.242640687119285}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE_REGEXES": {"tf": 2}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE_REGEXES": {"tf": 4.242640687119285}}, "df": 3}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1.4142135623730951}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1.4142135623730951}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 2}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.hgvs.HGVSRegex.CDNA_COORD": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.CDNA_START": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.CDNA_END": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.CDNA_RANGE": {"tf": 2}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE": {"tf": 6.928203230275509}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"tf": 6.928203230275509}}, "df": 6}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 2.8284271247461903}, "howard.tools.tools.commands_arguments": {"tf": 2.449489742783178}, "howard.tools.tools.arguments_dict": {"tf": 3.7416573867739413}}, "df": 3, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 2.449489742783178}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 2.8284271247461903}}, "df": 3}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 3}}}}, "s": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"7": {"0": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 3}, "docs": {}, "df": 0}, "docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 3}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 2.449489742783178}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 2.6457513110645907}}, "df": 3, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 2.8284271247461903}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 3}}, "df": 3}, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "v": {"docs": {"howard.functions.commons.file_format_delimiters": {"tf": 1}, "howard.functions.commons.file_format_allowed": {"tf": 1}, "howard.objects.database.SEP_TYPE": {"tf": 1}, "howard.objects.database.FILE_FORMAT_DELIMITERS": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 2.449489742783178}}, "df": 7}}, "h": {"docs": {}, "df": 0, "r": {"docs": {"howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"tf": 2}, "howard.objects.hgvs.CHROM_PREFIX": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 5, "o": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.commons.vcf_required_columns": {"tf": 1}, "howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"tf": 3.4641016151377544}, "howard.objects.database.DEFAULT_VCF_HEADER": {"tf": 1}, "howard.objects.database.DEFAULT_VCF_HEADER_DUCKDB_TYPES": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 2.449489742783178}, "howard.tools.tools.arguments_dict": {"tf": 2.8284271247461903}}, "df": 7, "\\": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "\\": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "\\": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "\\": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "\\": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "\\": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "\\": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {"howard.functions.commons.vcf_required": {"tf": 1}, "howard.objects.database.DEFAULT_HEADER_LIST": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"tf": 2}, "howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 4, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}, "[": {"0": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 3}, "docs": {}, "df": 0}, "m": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 3, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 2, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "x": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 3.1622776601683795}, "howard.tools.tools.arguments_dict": {"tf": 3.1622776601683795}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"1": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}, "2": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}, "docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {"howard.tools.tools.arguments": {"tf": 2.8284271247461903}, "howard.tools.tools.shared_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 3}}, "df": 3}}}}, "d": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "n": {"docs": {}, "df": 0, "a": {"docs": {"howard.objects.cdna.CDNA_START_CODON": {"tf": 1}, "howard.objects.cdna.CDNA_STOP_CODON": {"tf": 1}}, "df": 2}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "c": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "a": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "g": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "c": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "a": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "g": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "c": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "a": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "g": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 3.1622776601683795}, "howard.tools.tools.commands_arguments": {"tf": 2.449489742783178}, "howard.tools.tools.arguments_dict": {"tf": 4}}, "df": 3, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 3}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 3.1622776601683795}, "howard.tools.tools.commands_arguments": {"tf": 4.242640687119285}, "howard.tools.tools.arguments_dict": {"tf": 5.291502622129181}}, "df": 3, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.commands_arguments": {"tf": 3.3166247903554}, "howard.tools.tools.arguments_dict": {"tf": 4}}, "df": 3}, ":": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "e": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2, "d": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}, "s": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}, "d": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 3.3166247903554}, "howard.tools.tools.commands_arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 3.872983346207417}}, "df": 3}}}, "g": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "c": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "a": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "g": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}}, "y": {"docs": {}, "df": 0, "s": {"7": {"7": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 2}}}}, "docs": {}, "df": 0}, "docs": {"howard.objects.hgvs.CODON_3": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 3, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.CODON_FULL": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 3}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 8.426149773176359}, "howard.tools.tools.arguments_dict": {"tf": 8.426149773176359}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.arguments": {"tf": 2.449489742783178}, "howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 3}}, "df": 3}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 2.23606797749979}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 2.6457513110645907}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 2.8284271247461903}}, "df": 3}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, ":": {"docs": {}, "df": 0, "p": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 2}}}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}, "s": {"3": {"docs": {"howard.functions.commons.DEFAULT_DBNSFP_URL": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3}, "docs": {"howard.functions.commons.LOG_FORMAT": {"tf": 1.7320508075688772}, "howard.objects.hgvs.CODON_1": {"tf": 2.449489742783178}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.comparison_map": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "f": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 3}}, "z": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 4}, "howard.tools.tools.shared_arguments": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 4.358898943540674}}, "df": 4}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.arguments": {"tf": 8.12403840463596}, "howard.tools.tools.arguments_dict": {"tf": 8.12403840463596}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.code_type_map": {"tf": 1}, "howard.functions.commons.code_type_map_to_sql": {"tf": 1}, "howard.functions.commons.CODE_TYPE_MAP": {"tf": 1}, "howard.functions.from_annovar.TYPES": {"tf": 1}, "howard.objects.database.DEFAULT_VCF_HEADER_DUCKDB_TYPES": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 2.6457513110645907}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 2.8284271247461903}}, "df": 8, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.cdna.CDNA_START_CODON": {"tf": 1}, "howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"tf": 2}, "howard.objects.database.DEFAULT_VCF_HEADER_DUCKDB_TYPES": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_START": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_RANGE": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_START": {"tf": 2.23606797749979}, "howard.objects.hgvs.HGVSRegex.CDNA_RANGE": {"tf": 2.23606797749979}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE": {"tf": 9.273618495495704}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"tf": 9.273618495495704}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE": {"tf": 2}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE_REGEXES": {"tf": 2}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE": {"tf": 4.242640687119285}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE_REGEXES": {"tf": 4.242640687119285}}, "df": 13}}, "t": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 3.1622776601683795}, "howard.tools.tools.commands_arguments": {"tf": 3.1622776601683795}, "howard.tools.tools.arguments_dict": {"tf": 4.47213595499958}}, "df": 3}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2.449489742783178}}, "df": 3}}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3}}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {"howard.objects.cdna.CDNA_STOP_CODON": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1.7320508075688772}}, "df": 2}, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 6.244997998398398}, "howard.tools.tools.arguments_dict": {"tf": 6.244997998398398}}, "df": 2, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}, "n": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {"howard.functions.commons.DEFAULT_TOOLS_BIN": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 5}, "howard.tools.tools.commands_arguments": {"tf": 4.123105625617661}, "howard.tools.tools.arguments_dict": {"tf": 6.48074069840786}}, "df": 4, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 2.8284271247461903}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 3.1622776601683795}}, "df": 3, ":": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "/": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"2": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}}}}}}}}}}}}}}}}}}}}}}}, "v": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 3, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.DEFAULT_TOOLS_BIN": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 2.6457513110645907}}, "df": 4, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 2}}}}}}}}}}, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 3, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"howard.tools.tools.arguments": {"tf": 2.449489742783178}, "howard.tools.tools.arguments_dict": {"tf": 2.449489742783178}}, "df": 2}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "y": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}}}, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.DEFAULT_REFSEQ_URL": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 2.449489742783178}}, "df": 3}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}, "q": {"docs": {}, "df": 0, "l": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 3, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.database.DUCKDB_EXTENSION_TO_LOAD": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.objects.database.DUCKDB_EXTENSION_TO_LOAD": {"tf": 1}}, "df": 1}, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1.4142135623730951}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 3.605551275463989}, "howard.tools.tools.commands_arguments": {"tf": 2.449489742783178}, "howard.tools.tools.arguments_dict": {"tf": 4.358898943540674}}, "df": 3, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 3}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.objects.hgvs.CODON_3": {"tf": 2.449489742783178}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.CODON_FULL": {"tf": 2.449489742783178}}, "df": 1}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 4}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.commands_arguments": {"tf": 2.6457513110645907}, "howard.tools.tools.arguments_dict": {"tf": 3.1622776601683795}}, "df": 3, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 3}, "howard.tools.tools.arguments_dict": {"tf": 3}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 4.47213595499958}, "howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 4.795831523312719}}, "df": 3}, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 2.8284271247461903}, "howard.tools.tools.shared_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 3}}, "df": 3}}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 3}, "howard.tools.tools.arguments_dict": {"tf": 3.1622776601683795}}, "df": 3}}, "b": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 2, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 3}}}}}}}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}}}}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "w": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 3}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"1": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 2.449489742783178}}, "df": 3}, "2": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 2.6457513110645907}}, "df": 3}, "3": {"docs": {"howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 2.449489742783178}}, "df": 3}, "4": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 3}, "docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.commands_arguments": {"tf": 2.8284271247461903}, "howard.tools.tools.arguments_dict": {"tf": 3.4641016151377544}}, "df": 3, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 3}}}}}}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "y": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}, "t": {"docs": {"howard.functions.commons.file_format_delimiters": {"tf": 1.7320508075688772}, "howard.objects.database.SEP_TYPE": {"tf": 1.7320508075688772}, "howard.objects.database.FILE_FORMAT_DELIMITERS": {"tf": 1.7320508075688772}, "howard.objects.hgvs.CODON_1": {"tf": 2}, "howard.objects.hgvs.NUCLEOTIDE_TRANSLATE": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 7, "o": {"docs": {"howard.functions.commons.comparison_map": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 9.1104335791443}, "howard.tools.tools.commands_arguments": {"tf": 3.7416573867739413}, "howard.tools.tools.arguments_dict": {"tf": 9.848857801796104}}, "df": 4, "o": {"docs": {}, "df": 0, "l": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 3, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 9.38083151964686}, "howard.tools.tools.commands_arguments": {"tf": 3}, "howard.tools.tools.arguments_dict": {"tf": 9.848857801796104}}, "df": 3, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3}}}}}, ":": {"docs": {}, "df": 0, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "v": {"docs": {"howard.functions.commons.file_format_delimiters": {"tf": 1}, "howard.functions.commons.file_format_allowed": {"tf": 1}, "howard.objects.database.SEP_TYPE": {"tf": 1}, "howard.objects.database.FILE_FORMAT_DELIMITERS": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 4.242640687119285}, "howard.tools.tools.commands_arguments": {"tf": 5.5677643628300215}, "howard.tools.tools.arguments_dict": {"tf": 7}}, "df": 7, "|": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}, "b": {"docs": {}, "df": 0, "l": {"docs": {"howard.objects.database.SEP_TYPE": {"tf": 1}, "howard.objects.database.FILE_FORMAT_DELIMITERS": {"tf": 1}}, "df": 2}}, "t": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "c": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "a": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "g": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "c": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "a": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "g": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "c": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "a": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "g": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3, "s": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}, "b": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3}}}, "s": {"1": {"docs": {}, "df": 0, "r": {"2": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, ":": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "m": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}, "docs": {}, "df": 0}}, "docs": {}, "df": 0}, "k": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}, "g": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "c": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "a": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "g": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}}, "y": {"docs": {}, "df": 0, "r": {"docs": {"howard.objects.hgvs.CODON_3": {"tf": 1.4142135623730951}}, "df": 1, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.CODON_FULL": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.HGVSRegex.EQUAL": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.SUB": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.INS": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DEL": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DUP": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE": {"tf": 3.7416573867739413}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"tf": 3}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE": {"tf": 3.7416573867739413}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE_REGEXES": {"tf": 3.7416573867739413}, "howard.tools.tools.arguments": {"tf": 11}, "howard.tools.tools.commands_arguments": {"tf": 2.6457513110645907}, "howard.tools.tools.arguments_dict": {"tf": 11.313708498984761}}, "df": 12}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}, "r": {"docs": {}, "df": 0, "p": {"docs": {"howard.objects.hgvs.CODON_3": {"tf": 1}}, "df": 1}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 1}}}}}}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 6.4031242374328485}, "howard.tools.tools.commands_arguments": {"tf": 3.872983346207417}, "howard.tools.tools.arguments_dict": {"tf": 7.483314773547883}}, "df": 3, ":": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {"howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.commands_arguments": {"tf": 2.23606797749979}, "howard.tools.tools.arguments_dict": {"tf": 3.1622776601683795}}, "df": 3}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 2.449489742783178}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 2.8284271247461903}}, "df": 3, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 2.449489742783178}, "howard.tools.tools.commands_arguments": {"tf": 3.605551275463989}, "howard.tools.tools.arguments_dict": {"tf": 4.358898943540674}}, "df": 3}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}, "h": {"docs": {}, "df": 0, "r": {"docs": {"howard.objects.hgvs.CODON_3": {"tf": 2}}, "df": 1, "e": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.CODON_FULL": {"tf": 2}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 3.4641016151377544}, "howard.tools.tools.shared_arguments": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 2.23606797749979}, "howard.tools.tools.arguments_dict": {"tf": 4.242640687119285}}, "df": 4}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 6.164414002968976}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 6.324555320336759}}, "df": 3, "i": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 2.6457513110645907}, "howard.tools.tools.arguments_dict": {"tf": 2.6457513110645907}}, "df": 2}, "n": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}, "i": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 3}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 2}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 6.4031242374328485}, "howard.tools.tools.arguments_dict": {"tf": 6.4031242374328485}}, "df": 2}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "g": {"1": {"9": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "/": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "p": {"4": {"2": {"docs": {}, "df": 0, "a": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 2.449489742783178}, "howard.tools.tools.arguments_dict": {"tf": 2.449489742783178}}, "df": 2}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}}}}, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "p": {"1": {"5": {"0": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}}}, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"2": {"1": {"1": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"6": {"0": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}}}}}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "g": {"1": {"9": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}}}}}}}}}}}}}}}}}}}}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 2.6457513110645907}, "howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 3.1622776601683795}}, "df": 3}}, "m": {"docs": {}, "df": 0, "p": {"docs": {"howard.tools.tools.arguments": {"tf": 3}, "howard.tools.tools.shared_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 3.1622776601683795}}, "df": 3, "/": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 3}}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "b": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "m": {"docs": {}, "df": 0, "y": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 5.916079783099616}, "howard.tools.tools.arguments_dict": {"tf": 5.916079783099616}}, "df": 2}}}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"6": {"0": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2, "z": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.commands_arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2.6457513110645907}}, "df": 3}}}}}, "i": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 6.48074069840786}, "howard.tools.tools.commands_arguments": {"tf": 2.8284271247461903}, "howard.tools.tools.arguments_dict": {"tf": 7.0710678118654755}}, "df": 3, "t": {"6": {"4": {"docs": {"howard.functions.from_annovar.TYPES": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {"howard.functions.from_annovar.TYPES": {"tf": 1}, "howard.objects.database.DEFAULT_VCF_HEADER_DUCKDB_TYPES": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 4, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.code_type_map": {"tf": 1}, "howard.functions.commons.code_type_map_to_sql": {"tf": 1.4142135623730951}, "howard.functions.commons.CODE_TYPE_MAP": {"tf": 1}, "howard.functions.from_annovar.TYPES": {"tf": 1.4142135623730951}}, "df": 4, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 2}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "o": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2.449489742783178}}, "df": 3}}, "f": {"docs": {}, "df": 0, "o": {"docs": {"howard.functions.commons.vcf_required_columns": {"tf": 1}, "howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"tf": 1.4142135623730951}, "howard.objects.database.DEFAULT_VCF_HEADER": {"tf": 1}, "howard.objects.database.DEFAULT_VCF_HEADER_DUCKDB_TYPES": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 3.3166247903554}, "howard.tools.tools.commands_arguments": {"tf": 3}, "howard.tools.tools.arguments_dict": {"tf": 4.47213595499958}}, "df": 7, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 3}, "howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 3.4641016151377544}}, "df": 3, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.commands_arguments": {"tf": 5.291502622129181}, "howard.tools.tools.arguments_dict": {"tf": 5.744562646538029}}, "df": 3}, "/": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 2.449489742783178}}, "df": 3, "s": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "y": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}, "d": {"docs": {}, "df": 0, "p": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {"howard.objects.hgvs.HGVSRegex.INS": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE": {"tf": 2}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE": {"tf": 2}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE_REGEXES": {"tf": 2}}, "df": 5, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1}}, "df": 2}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 2.449489742783178}, "howard.tools.tools.arguments_dict": {"tf": 2.449489742783178}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 2.8284271247461903}, "howard.tools.tools.commands_arguments": {"tf": 3.4641016151377544}, "howard.tools.tools.arguments_dict": {"tf": 4.47213595499958}}, "df": 3}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.arguments": {"tf": 2.449489742783178}, "howard.tools.tools.arguments_dict": {"tf": 2.449489742783178}}, "df": 2}}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 4.47213595499958}, "howard.tools.tools.commands_arguments": {"tf": 7.937253933193772}, "howard.tools.tools.arguments_dict": {"tf": 9.1104335791443}}, "df": 3}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 2}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "l": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 3, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}, "d": {"docs": {"howard.functions.commons.vcf_required_columns": {"tf": 1}, "howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"tf": 1.4142135623730951}, "howard.objects.database.DEFAULT_VCF_HEADER": {"tf": 1}, "howard.objects.database.DEFAULT_VCF_HEADER_DUCKDB_TYPES": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 2.449489742783178}}, "df": 7, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"tf": 1}}, "df": 1}, "d": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "y": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "x": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.DEFAULT_TOOLS_BIN": {"tf": 1}}, "df": 1, "s": {"docs": {"howard.tools.gui.image_dir": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.CODON_3": {"tf": 1.7320508075688772}}, "df": 1}}, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 3.1622776601683795}, "howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 3.605551275463989}}, "df": 3, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.CODON_FULL": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}}}, "f": {"docs": {"howard.tools.tools.arguments": {"tf": 2.449489742783178}, "howard.tools.tools.arguments_dict": {"tf": 2.449489742783178}}, "df": 2}, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 3, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}, "f": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1.4142135623730951}}, "df": 1, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"6": {"4": {"docs": {"howard.functions.from_annovar.TYPES": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {"howard.functions.commons.code_type_map": {"tf": 1}, "howard.functions.commons.code_type_map_to_sql": {"tf": 1.4142135623730951}, "howard.functions.commons.CODE_TYPE_MAP": {"tf": 1}, "howard.functions.from_annovar.TYPES": {"tf": 1.7320508075688772}}, "df": 4, "[": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "]": {"docs": {}, "df": 0, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.code_type_map": {"tf": 1}, "howard.functions.commons.code_type_map_to_sql": {"tf": 1}, "howard.functions.commons.CODE_TYPE_MAP": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 5, "s": {"docs": {}, "df": 0, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3}}}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"1": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}, "2": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}, "docs": {"howard.tools.tools.arguments": {"tf": 11.489125293076057}, "howard.tools.tools.commands_arguments": {"tf": 4.358898943540674}, "howard.tools.tools.arguments_dict": {"tf": 12.288205727444508}}, "df": 3, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.vcf_required_release": {"tf": 1}, "howard.functions.commons.vcf_required": {"tf": 1}, "howard.objects.database.DEFAULT_HEADER_LIST": {"tf": 1}}, "df": 3}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.arguments": {"tf": 4.358898943540674}, "howard.tools.tools.arguments_dict": {"tf": 4.358898943540674}}, "df": 2}}}}}}}, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 7.810249675906654}, "howard.tools.tools.commands_arguments": {"tf": 3}, "howard.tools.tools.arguments_dict": {"tf": 8.366600265340756}}, "df": 3, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.arguments": {"tf": 3.605551275463989}, "howard.tools.tools.arguments_dict": {"tf": 3.605551275463989}}, "df": 2}}}}}, ":": {"docs": {}, "df": 0, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.vcf_required_columns": {"tf": 1}, "howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"tf": 1.4142135623730951}, "howard.objects.database.DEFAULT_VCF_HEADER": {"tf": 1}, "howard.objects.database.DEFAULT_VCF_HEADER_DUCKDB_TYPES": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.commands_arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2.6457513110645907}}, "df": 7, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 2.8284271247461903}, "howard.tools.tools.commands_arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 3.4641016151377544}}, "df": 3, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 3.605551275463989}, "howard.tools.tools.commands_arguments": {"tf": 3.1622776601683795}, "howard.tools.tools.arguments_dict": {"tf": 4.795831523312719}}, "df": 3, "/": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}}}}, "s": {"docs": {"howard.objects.hgvs.HGVSRegex.PEP_EXTRA": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE": {"tf": 2}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE_REGEXES": {"tf": 2}}, "df": 3}, "a": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 3, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 10.862780491200215}, "howard.tools.tools.commands_arguments": {"tf": 14.2828568570857}, "howard.tools.tools.arguments_dict": {"tf": 17.944358444926362}}, "df": 3}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}, "a": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 3}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}, "o": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "r": {"docs": {"howard.tools.tools.arguments": {"tf": 7.280109889280518}, "howard.tools.tools.commands_arguments": {"tf": 2.23606797749979}, "howard.tools.tools.arguments_dict": {"tf": 7.615773105863909}}, "df": 3, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 6}, "howard.tools.tools.commands_arguments": {"tf": 4.358898943540674}, "howard.tools.tools.arguments_dict": {"tf": 7.416198487095663}}, "df": 3, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2, "b": {"docs": {}, "df": 0, "y": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 2.449489742783178}, "howard.tools.tools.commands_arguments": {"tf": 2.23606797749979}, "howard.tools.tools.arguments_dict": {"tf": 3.3166247903554}}, "df": 3, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.arguments": {"tf": 2.449489742783178}, "howard.tools.tools.arguments_dict": {"tf": 2.449489742783178}}, "df": 2}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.arguments": {"tf": 5.830951894845301}, "howard.tools.tools.commands_arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 6.164414002968976}}, "df": 3, "\\": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 3}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"howard.tools.tools.arguments": {"tf": 3.7416573867739413}, "howard.tools.tools.commands_arguments": {"tf": 3.7416573867739413}, "howard.tools.tools.arguments_dict": {"tf": 5.291502622129181}}, "df": 3, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "y": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 3}}}}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"howard.tools.tools.arguments": {"tf": 3.4641016151377544}, "howard.tools.tools.commands_arguments": {"tf": 3.1622776601683795}, "howard.tools.tools.arguments_dict": {"tf": 4.69041575982343}}, "df": 3}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 3.7416573867739413}, "howard.tools.tools.arguments_dict": {"tf": 3.872983346207417}}, "df": 3}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}, "v": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 2}}, "df": 1, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.code_type_map_to_sql": {"tf": 1.4142135623730951}, "howard.objects.database.DEFAULT_VCF_HEADER_DUCKDB_TYPES": {"tf": 2.23606797749979}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 2.449489742783178}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 2.8284271247461903}}, "df": 3, "s": {"docs": {"howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 2.8284271247461903}, "howard.tools.tools.commands_arguments": {"tf": 3.872983346207417}, "howard.tools.tools.arguments_dict": {"tf": 4.795831523312719}}, "df": 4}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "s": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 3.3166247903554}, "howard.tools.tools.arguments_dict": {"tf": 3.3166247903554}}, "df": 2}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 3}}}}, "l": {"docs": {"howard.objects.hgvs.CODON_3": {"tf": 2}, "howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.CODON_FULL": {"tf": 2}}, "df": 1}}, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 3.3166247903554}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 3.4641016151377544}}, "df": 3, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}, "[": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3}}}}, "f": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 3}}, "c": {"docs": {}, "df": 0, "f": {"docs": {"howard.functions.commons.file_format_delimiters": {"tf": 1}, "howard.functions.commons.file_format_allowed": {"tf": 1}, "howard.functions.commons.BCFTOOLS_FORMAT": {"tf": 1}, "howard.objects.database.SEP_TYPE": {"tf": 1}, "howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"tf": 1}, "howard.objects.database.FILE_FORMAT_DELIMITERS": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 6.48074069840786}, "howard.tools.tools.commands_arguments": {"tf": 8.12403840463596}, "howard.tools.tools.arguments_dict": {"tf": 10.392304845413264}}, "df": 9, "v": {"4": {"docs": {"howard.functions.commons.vcf_required_release": {"tf": 1}, "howard.functions.commons.vcf_required": {"tf": 1}, "howard.objects.database.DEFAULT_HEADER_LIST": {"tf": 1}}, "df": 3}, "docs": {}, "df": 0}, ":": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 2.449489742783178}}, "df": 3, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"howard.tools.tools.arguments": {"tf": 2.8284271247461903}, "howard.tools.tools.shared_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 3}}, "df": 3}}}, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.shared_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}, "b": {"1": {"5": {"2": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}, "6": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 5.744562646538029}, "howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 6}}, "df": 3, "d": {"docs": {"howard.functions.commons.file_format_delimiters": {"tf": 1}, "howard.functions.commons.file_format_allowed": {"tf": 1}, "howard.functions.commons.BCFTOOLS_FORMAT": {"tf": 1}, "howard.objects.database.SEP_TYPE": {"tf": 1}, "howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"tf": 1}, "howard.objects.database.FILE_FORMAT_DELIMITERS": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 4.795831523312719}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 4.898979485566356}}, "df": 9, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 3}}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "g": {"docs": {}, "df": 0, "z": {"docs": {"howard.functions.commons.file_compressed_format": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.commons.DEFAULT_TOOLS_BIN": {"tf": 1.4142135623730951}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "f": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.DEFAULT_TOOLS_BIN": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments": {"tf": 3.3166247903554}, "howard.tools.tools.commands_arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 3.872983346207417}}, "df": 4, ":": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"2": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}, "docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "d": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "b": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}, "/": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"2": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}, "docs": {}, "df": 0}}}}}}}}}}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.DEFAULT_TOOLS_BIN": {"tf": 2}}, "df": 1, "/": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {"howard.functions.commons.DEFAULT_TOOLS_BIN": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, ":": {"0": {"docs": {"howard.functions.commons.DEFAULT_TOOLS_BIN": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}}}}}}}}}}}}}}}}}}}}}}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"howard.functions.commons.DEFAULT_EXOMISER_REMM_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_EXOMISER_CADD_URL": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 4}}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 2.6457513110645907}}, "df": 5}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 3, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}, "h": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 3, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "x": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}}}}, "y": {"docs": {"howard.tools.tools.arguments": {"tf": 3.872983346207417}, "howard.tools.tools.commands_arguments": {"tf": 3.605551275463989}, "howard.tools.tools.arguments_dict": {"tf": 5.291502622129181}}, "df": 3}, "u": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 3}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "j": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.file_format_allowed": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 7.937253933193772}, "howard.tools.tools.commands_arguments": {"tf": 5.385164807134504}, "howard.tools.tools.arguments_dict": {"tf": 9.591663046625438}}, "df": 4, "|": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"howard.tools.tools.arguments": {"tf": 2.6457513110645907}, "howard.tools.tools.arguments_dict": {"tf": 2.6457513110645907}}, "df": 2}}}}}}}, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {"howard.functions.commons.DEFAULT_TOOLS_BIN": {"tf": 1.4142135623730951}}, "df": 1}}, "r": {"docs": {"howard.functions.commons.DEFAULT_TOOLS_BIN": {"tf": 2}, "howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 3}}}, "d": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.COORD_START": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_END": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.COORD_RANGE": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.CDNA_COORD": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.CDNA_START": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.CDNA_END": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.CDNA_RANGE": {"tf": 2}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE": {"tf": 7.0710678118654755}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"tf": 6.557438524302}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE": {"tf": 2.449489742783178}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE_REGEXES": {"tf": 2.449489742783178}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE": {"tf": 5.0990195135927845}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE_REGEXES": {"tf": 5.0990195135927845}, "howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 16, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "b": {"docs": {"howard.functions.commons.file_format_allowed": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 4.123105625617661}, "howard.tools.tools.shared_arguments": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 4.358898943540674}}, "df": 5}}}}, "p": {"docs": {"howard.objects.hgvs.HGVSRegex.DUP": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE": {"tf": 2}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE": {"tf": 2}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE_REGEXES": {"tf": 2}}, "df": 5}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 2}}}}, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}, "o": {"docs": {}, "df": 0, "c": {"docs": {"howard.tools.tools.arguments": {"tf": 3.3166247903554}, "howard.tools.tools.arguments_dict": {"tf": 3.3166247903554}}, "df": 2, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.DEFAULT_TOOLS_BIN": {"tf": 1.7320508075688772}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 2}}}, "t": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 2}}}}}}}}}, "p": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 2}}}}}}}}, "j": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}}}}}}}}}}}}, "w": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 8.366600265340756}, "howard.tools.tools.commands_arguments": {"tf": 9.219544457292887}, "howard.tools.tools.arguments_dict": {"tf": 12.449899597988733}}, "df": 3, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 3}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 3.1622776601683795}}, "df": 3}}, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}, "n": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 2, "d": {"docs": {"howard.main.msg_gui_disable": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 3}}}}}}, "r": {"docs": {"howard.tools.tools.arguments": {"tf": 4}, "howard.tools.tools.arguments_dict": {"tf": 4}}, "df": 2, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.arguments": {"tf": 3.4641016151377544}, "howard.tools.tools.arguments_dict": {"tf": 3.4641016151377544}}, "df": 2}}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"howard.tools.tools.arguments": {"tf": 2.449489742783178}, "howard.tools.tools.arguments_dict": {"tf": 2.449489742783178}}, "df": 2}}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {"howard.objects.hgvs.HGVSRegex.DEL": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE": {"tf": 2.449489742783178}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE": {"tf": 2.449489742783178}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE_REGEXES": {"tf": 2.449489742783178}}, "df": 5, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.hgvs.HGVSRegex.CDNA_ALLELE": {"tf": 2.449489742783178}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"tf": 2.23606797749979}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE_REGEXES": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE": {"tf": 2.449489742783178}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE_REGEXES": {"tf": 2.449489742783178}}, "df": 6}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 14.247806848775006}, "howard.tools.tools.commands_arguments": {"tf": 2.449489742783178}, "howard.tools.tools.arguments_dict": {"tf": 14.45683229480096}}, "df": 3, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 3, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 3}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {"howard.tools.tools.arguments": {"tf": 2.6457513110645907}, "howard.tools.tools.commands_arguments": {"tf": 2.449489742783178}, "howard.tools.tools.arguments_dict": {"tf": 3.605551275463989}}, "df": 3, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 2}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.commands_arguments": {"tf": 4.123105625617661}, "howard.tools.tools.arguments_dict": {"tf": 4.69041575982343}}, "df": 3}}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 2}}}}}}}, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.arguments": {"tf": 2.449489742783178}, "howard.tools.tools.shared_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 2.6457513110645907}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 2.6457513110645907}}, "df": 3, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 4.898979485566356}, "howard.tools.tools.commands_arguments": {"tf": 3}, "howard.tools.tools.arguments_dict": {"tf": 5.744562646538029}}, "df": 3, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 6.4031242374328485}, "howard.tools.tools.commands_arguments": {"tf": 5.385164807134504}, "howard.tools.tools.arguments_dict": {"tf": 8.366600265340756}}, "df": 3, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 2}}, "/": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}, "\\": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}, "b": {"docs": {"howard.tools.tools.arguments": {"tf": 2.8284271247461903}, "howard.tools.tools.arguments_dict": {"tf": 2.8284271247461903}}, "df": 2, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "p": {"docs": {"howard.tools.tools.arguments": {"tf": 4.898979485566356}, "howard.tools.tools.commands_arguments": {"tf": 4.47213595499958}, "howard.tools.tools.arguments_dict": {"tf": 6.6332495807108}}, "df": 3, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "p": {"docs": {"howard.tools.tools.arguments": {"tf": 4.898979485566356}, "howard.tools.tools.commands_arguments": {"tf": 3.872983346207417}, "howard.tools.tools.arguments_dict": {"tf": 6.244997998398398}}, "df": 3, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "p": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 2.6457513110645907}, "howard.tools.tools.arguments_dict": {"tf": 2.8284271247461903}}, "df": 3}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 2.8284271247461903}, "howard.tools.tools.arguments_dict": {"tf": 2.8284271247461903}}, "df": 2}}}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "p": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "p": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}}}}}, "r": {"docs": {"howard.functions.commons.GENOTYPE_MAP": {"tf": 1}, "howard.objects.hgvs.CODON_1": {"tf": 2.449489742783178}, "howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 4, "e": {"docs": {"howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"tf": 4.242640687119285}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE_REGEXES": {"tf": 2}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE_REGEXES": {"tf": 4.242640687119285}, "howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 5, "f": {"2": {"docs": {"howard.objects.hgvs.HGVSRegex.PEP_REF2": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE_REGEXES": {"tf": 1.4142135623730951}}, "df": 3}, "docs": {"howard.functions.commons.vcf_required_columns": {"tf": 1}, "howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"tf": 2}, "howard.objects.database.DEFAULT_VCF_HEADER": {"tf": 1}, "howard.objects.database.DEFAULT_VCF_HEADER_DUCKDB_TYPES": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DNA_REF": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE": {"tf": 2.8284271247461903}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"tf": 2.23606797749979}, "howard.objects.hgvs.HGVSRegex.PEP_REF": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE": {"tf": 2}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE_REGEXES": {"tf": 2}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE": {"tf": 2.8284271247461903}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE_REGEXES": {"tf": 2.8284271247461903}, "howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 2.6457513110645907}, "howard.tools.tools.arguments_dict": {"tf": 2.8284271247461903}}, "df": 15, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"tf": 1}, "howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1}}, "df": 3}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {"howard.tools.tools.arguments": {"tf": 6.082762530298219}, "howard.tools.tools.commands_arguments": {"tf": 4.242640687119285}, "howard.tools.tools.arguments_dict": {"tf": 7.416198487095663}}, "df": 3, ":": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 3}}}}, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 3.1622776601683795}, "howard.tools.tools.commands_arguments": {"tf": 2.6457513110645907}, "howard.tools.tools.arguments_dict": {"tf": 4.123105625617661}}, "df": 3, ":": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"7": {"0": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1}}, "df": 2, "s": {"docs": {"howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 2.449489742783178}}, "df": 3}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 4}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 8.888194417315589}, "howard.tools.tools.arguments_dict": {"tf": 8.888194417315589}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 5.385164807134504}, "howard.tools.tools.commands_arguments": {"tf": 2.8284271247461903}, "howard.tools.tools.arguments_dict": {"tf": 6.082762530298219}}, "df": 3, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 2.6457513110645907}}, "df": 3}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 3, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "m": {"docs": {"howard.tools.tools.arguments": {"tf": 2.6457513110645907}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 3}}, "df": 3}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 2}}}, "t": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 2.449489742783178}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 2.6457513110645907}}, "df": 3}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 2}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1.4142135623730951}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1.4142135623730951}}, "df": 2}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 3}}, "m": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}, "n": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}, "o": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2, "w": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 3, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "w": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 2}}, "a": {"docs": {"howard.functions.commons.GENOTYPE_MAP": {"tf": 1}, "howard.objects.hgvs.CODON_1": {"tf": 2}, "howard.objects.hgvs.NUCLEOTIDE_TRANSLATE": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.PEP": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.PEP_REF": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.PEP_REF2": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.PEP_ALT": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE": {"tf": 4}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE_REGEXES": {"tf": 4}, "howard.tools.tools.arguments": {"tf": 5.291502622129181}, "howard.tools.tools.commands_arguments": {"tf": 3.7416573867739413}, "howard.tools.tools.arguments_dict": {"tf": 6.48074069840786}}, "df": 12, "l": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.vcf_required_columns": {"tf": 1}, "howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"tf": 2}, "howard.objects.database.DEFAULT_VCF_HEADER": {"tf": 1}, "howard.objects.database.DEFAULT_VCF_HEADER_DUCKDB_TYPES": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DNA_ALT": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE": {"tf": 2.6457513110645907}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"tf": 2}, "howard.objects.hgvs.HGVSRegex.PEP_ALT": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE_REGEXES": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE": {"tf": 2.6457513110645907}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE_REGEXES": {"tf": 2.6457513110645907}, "howard.tools.tools.commands_arguments": {"tf": 2.449489742783178}, "howard.tools.tools.arguments_dict": {"tf": 2.449489742783178}}, "df": 14, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1.4142135623730951}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.DEFAULT_ALPHAMISSENSE_URL": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 3.1622776601683795}, "howard.tools.tools.commands_arguments": {"tf": 2.23606797749979}, "howard.tools.tools.arguments_dict": {"tf": 3.872983346207417}}, "df": 4, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}, "a": {"docs": {"howard.objects.hgvs.CODON_3": {"tf": 2}}, "df": 1, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.CODON_FULL": {"tf": 2}}, "df": 1}}}}}, "l": {"docs": {"howard.tools.tools.arguments": {"tf": 6.4031242374328485}, "howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 6.6332495807108}}, "df": 3, ":": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 3, ":": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 2}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 3}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "y": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}}, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "m": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}, "n": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1.4142135623730951}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 2.6457513110645907}}, "df": 5, "n": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 2, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.DEFAULT_TOOLS_BIN": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments": {"tf": 6.324555320336759}, "howard.tools.tools.commands_arguments": {"tf": 5.291502622129181}, "howard.tools.tools.arguments_dict": {"tf": 8.246211251235321}}, "df": 4, ":": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 3, ":": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"7": {"0": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}}}}}}}}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"7": {"0": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}}}}}, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2, "d": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1.4142135623730951}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 5}, "s": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 9.38083151964686}, "howard.tools.tools.commands_arguments": {"tf": 6.48074069840786}, "howard.tools.tools.arguments_dict": {"tf": 11.40175425099138}}, "df": 3, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 4.123105625617661}, "howard.tools.tools.commands_arguments": {"tf": 4.123105625617661}, "howard.tools.tools.arguments_dict": {"tf": 5.830951894845301}}, "df": 3, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}, ":": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 2}}, "/": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 5.477225575051661}, "howard.tools.tools.commands_arguments": {"tf": 5.291502622129181}, "howard.tools.tools.arguments_dict": {"tf": 7.615773105863909}}, "df": 3, "\\": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}, "y": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.DEFAULT_DBNSFP_URL": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}, "d": {"6": {"4": {"docs": {"howard.functions.commons.MACHIN_LIST": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "p": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 2}}, "r": {"docs": {}, "df": 0, "m": {"6": {"4": {"docs": {"howard.functions.commons.MACHIN_LIST": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "g": {"docs": {"howard.objects.hgvs.CODON_3": {"tf": 2.449489742783178}, "howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.CODON_FULL": {"tf": 2.449489742783178}, "howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 3}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.commands_arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 3}}, "df": 3}}, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 4}, "howard.tools.tools.commands_arguments": {"tf": 3.605551275463989}, "howard.tools.tools.arguments_dict": {"tf": 5.385164807134504}}, "df": 3, "c": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.LOG_FORMAT": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "n": {"docs": {"howard.objects.hgvs.CODON_3": {"tf": 1.4142135623730951}}, "df": 1}, "p": {"docs": {"howard.objects.hgvs.CODON_3": {"tf": 1.4142135623730951}}, "df": 1, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.CODON_FULL": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"howard.objects.hgvs.CODON_FULL": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1.7320508075688772}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments": {"tf": 3.605551275463989}, "howard.tools.tools.commands_arguments": {"tf": 4.795831523312719}, "howard.tools.tools.arguments_dict": {"tf": 6}}, "df": 5, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 3, "\\": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1.4142135623730951}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 5}}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 2, "t": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "c": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "a": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "g": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}}, "c": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1.4142135623730951}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1.4142135623730951}}, "df": 2, "t": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 6.244997998398398}, "howard.tools.tools.arguments_dict": {"tf": 6.244997998398398}}, "df": 2}}}}, "c": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 2, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1.4142135623730951}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "a": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "g": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3, "t": {"docs": {}, "df": 0, "b": {"docs": {"howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"tf": 1}}, "df": 1, "d": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "k": {"docs": {"howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"tf": 1}}, "df": 1, "m": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "]": {"docs": {}, "df": 0, "|": {"docs": {}, "df": 0, "\\": {"docs": {}, "df": 0, "\\": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.hgvs.HGVSRegex.BASE": {"tf": 1}}, "df": 1}}}}, "+": {"docs": {}, "df": 0, "|": {"docs": {}, "df": 0, "\\": {"docs": {}, "df": 0, "\\": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.hgvs.HGVSRegex.BASES": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DNA_REF": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DNA_ALT": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE": {"tf": 3.872983346207417}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"tf": 2.6457513110645907}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE": {"tf": 3.872983346207417}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE_REGEXES": {"tf": 3.872983346207417}}, "df": 7}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.hgvs.CODON_FULL": {"tf": 2}}, "df": 1, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "m": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "c": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "a": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "g": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}}, "g": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "c": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "a": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 3}, "g": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}, "howard.objects.hgvs.CODON_3": {"tf": 1}, "howard.objects.hgvs.CODON_FULL": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 5, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}, "p": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1}}, "df": 2, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 3.1622776601683795}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 3.3166247903554}}, "df": 3}}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 3}}}}, "i": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}, "d": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 3}, "howard.tools.tools.commands_arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 3.605551275463989}}, "df": 3}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 4.242640687119285}, "howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 4.58257569495584}}, "df": 3}}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {"howard.tools.tools.arguments": {"tf": 3.3166247903554}, "howard.tools.tools.arguments_dict": {"tf": 3.3166247903554}}, "df": 2, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 2.449489742783178}}, "df": 3}}}}}}}}}}}}, "f": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}, "q": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1.4142135623730951}}, "df": 1, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.vcf_required_columns": {"tf": 1}, "howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"tf": 1.4142135623730951}, "howard.objects.database.DEFAULT_VCF_HEADER": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 6, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 3}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}}}, "y": {"docs": {"howard.tools.tools.arguments": {"tf": 3.3166247903554}, "howard.tools.tools.commands_arguments": {"tf": 5.291502622129181}, "howard.tools.tools.arguments_dict": {"tf": 6.244997998398398}}, "df": 3}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 20.322401432901575}, "howard.tools.tools.commands_arguments": {"tf": 6.928203230275509}, "howard.tools.tools.arguments_dict": {"tf": 21.470910553583888}}, "df": 3}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.shared_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 3}}}}}, "h": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1.4142135623730951}}, "df": 1, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"howard.main.msg_gui_disable": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 6.928203230275509}, "howard.tools.tools.commands_arguments": {"tf": 9.219544457292887}, "howard.tools.tools.arguments_dict": {"tf": 11.532562594670797}}, "df": 4, "/": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {"howard.functions.commons.DEFAULT_TOOLS_BIN": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.DEFAULT_TOOLS_BIN": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.DEFAULT_TOOLS_BIN": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "/": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "/": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "g": {"1": {"9": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "e": {"1": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}, "docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "w": {"docs": {"howard.functions.commons.DEFAULT_ANNOVAR_URL": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 3}}}, "h": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.DEFAULT_REFSEQ_URL": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"howard.functions.commons.DEFAULT_EXOMISER_URL": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}, "s": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.commons.DEFAULT_DBNSFP_URL": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3}}}}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {"howard.functions.commons.DEFAULT_EXOMISER_REMM_URL": {"tf": 1}, "howard.functions.commons.DEFAULT_EXOMISER_CADD_URL": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 4}}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.DEFAULT_ALPHAMISSENSE_URL": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}, "f": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.commons.DEFAULT_DBSNP_URL": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "l": {"docs": {"howard.tools.tools.arguments": {"tf": 2.8284271247461903}, "howard.tools.tools.commands_arguments": {"tf": 3}, "howard.tools.tools.arguments_dict": {"tf": 4.123105625617661}}, "df": 3}}}, "g": {"1": {"9": {"docs": {"howard.functions.commons.DEFAULT_ASSEMBLY": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 2.6457513110645907}, "howard.tools.tools.commands_arguments": {"tf": 4.242640687119285}, "howard.tools.tools.arguments_dict": {"tf": 5}}, "df": 4}, "docs": {}, "df": 0}, "3": {"8": {"docs": {"howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 5.385164807134504}, "howard.tools.tools.commands_arguments": {"tf": 5.385164807134504}, "howard.tools.tools.arguments_dict": {"tf": 7.615773105863909}}, "df": 3}}, "m": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 3.3166247903554}, "howard.tools.tools.commands_arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 3.872983346207417}}, "df": 3}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.hgvs.CODON_3": {"tf": 1.4142135623730951}}, "df": 1, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.CODON_FULL": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {"howard.tools.tools.arguments": {"tf": 13.2664991614216}, "howard.tools.tools.commands_arguments": {"tf": 6.782329983125268}, "howard.tools.tools.arguments_dict": {"tf": 14.89966442575134}}, "df": 3}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.commands_arguments": {"tf": 2.8284271247461903}, "howard.tools.tools.arguments_dict": {"tf": 3.3166247903554}}, "df": 3}}}}}, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}, "d": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}, "o": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 3.1622776601683795}, "howard.tools.tools.arguments_dict": {"tf": 3.1622776601683795}}, "df": 2, "s": {"docs": {"howard.functions.commons.DEFAULT_TOOLS_BIN": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 8.717797887081348}, "howard.tools.tools.commands_arguments": {"tf": 2.449489742783178}, "howard.tools.tools.arguments_dict": {"tf": 9.055385138137417}}, "df": 4, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.DEFAULT_ANNOVAR_URL": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 3}}}}}}}}}, "r": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 2}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 2}, "howard.tools.tools.arguments": {"tf": 5.656854249492381}, "howard.tools.tools.commands_arguments": {"tf": 2.6457513110645907}, "howard.tools.tools.arguments_dict": {"tf": 6.244997998398398}}, "df": 5, "g": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "/": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.DEFAULT_ANNOVAR_URL": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.DEFAULT_EXOMISER_URL": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}}, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.commons.DEFAULT_EXOMISER_REMM_URL": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.DEFAULT_EXOMISER_CADD_URL": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.arguments": {"tf": 3.1622776601683795}, "howard.tools.tools.commands_arguments": {"tf": 2.8284271247461903}, "howard.tools.tools.arguments_dict": {"tf": 4.242640687119285}}, "df": 3}}}}, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.from_annovar.TYPES": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 6.4031242374328485}, "howard.tools.tools.arguments_dict": {"tf": 6.4031242374328485}}, "df": 3}}}}}, "f": {"docs": {"howard.tools.tools.arguments": {"tf": 7.615773105863909}, "howard.tools.tools.commands_arguments": {"tf": 3.4641016151377544}, "howard.tools.tools.arguments_dict": {"tf": 8.366600265340756}}, "df": 3, "f": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"tf": 1.4142135623730951}}, "df": 1, "t": {"docs": {"howard.objects.hgvs.HGVSRegex.CDNA_COORD": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.CDNA_START": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.CDNA_END": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex.CDNA_RANGE": {"tf": 2}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE": {"tf": 6.928203230275509}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"tf": 6.244997998398398}}, "df": 6}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}, "n": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1.4142135623730951}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments": {"tf": 3.4641016151377544}, "howard.tools.tools.commands_arguments": {"tf": 2.8284271247461903}, "howard.tools.tools.arguments_dict": {"tf": 4.47213595499958}}, "df": 5, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, ":": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 3}}}}}}}}}}, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.tools.tools.arguments": {"tf": 4}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 4.242640687119285}}, "df": 3}}, "t": {"docs": {}, "df": 0, "o": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 4.69041575982343}, "howard.tools.tools.commands_arguments": {"tf": 6.928203230275509}, "howard.tools.tools.arguments_dict": {"tf": 8.366600265340756}}, "df": 3}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 2.6457513110645907}}, "df": 3}}}}}, "n": {"2": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}, "docs": {"howard.objects.hgvs.CODON_1": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments": {"tf": 13.638181696985855}, "howard.tools.tools.commands_arguments": {"tf": 8.602325267042627}, "howard.tools.tools.arguments_dict": {"tf": 16.1245154965971}}, "df": 4, "o": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 3, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 2.449489742783178}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 2.8284271247461903}}, "df": 3, "e": {"docs": {"howard.functions.commons.DEFAULT_TOOLS_BIN": {"tf": 1.4142135623730951}, "howard.functions.commons.GENOTYPE_MAP": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 8.831760866327848}, "howard.tools.tools.arguments_dict": {"tf": 8.831760866327848}}, "df": 4}, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 2}}}}}}}}}, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 3.872983346207417}, "howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 4.242640687119285}}, "df": 3, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}, "r": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "s": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 2.23606797749979}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 2, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}}}}}}}}}}}, "c": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1.4142135623730951}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1.4142135623730951}}, "df": 2, "b": {"docs": {}, "df": 0, "i": {"docs": {"howard.functions.commons.DEFAULT_DBSNP_URL": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 3, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {"howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 2.6457513110645907}}, "df": 3, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}, "d": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}, "i": {"6": {"0": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 2, ":": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"7": {"0": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}}}}}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "i": {"docs": {}, "df": 0, "h": {"docs": {"howard.functions.commons.DEFAULT_DBSNP_URL": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3}, "f": {"docs": {"howard.tools.tools.arguments": {"tf": 3.3166247903554}, "howard.tools.tools.arguments_dict": {"tf": 3.3166247903554}}, "df": 2}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}}}}}}}, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 2.6457513110645907}, "howard.tools.tools.arguments_dict": {"tf": 2.6457513110645907}}, "df": 2}}, "g": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}, "t": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1}}, "df": 2, "h": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 2}}}}, "w": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1}}, "df": 2, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}, "z": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1.4142135623730951}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1.4142135623730951}}, "df": 2}, "m": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1.4142135623730951}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 4}, "r": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}, "p": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 4, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 2.449489742783178}, "howard.tools.tools.arguments_dict": {"tf": 2.449489742783178}}, "df": 2}}}}, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}}, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2, ":": {"docs": {}, "df": 0, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 3.1622776601683795}, "howard.tools.tools.arguments_dict": {"tf": 3.1622776601683795}}, "df": 2, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "b": {"docs": {}, "df": 0, "y": {"docs": {"howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 2}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}, "b": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "p": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 2.449489742783178}}, "df": 3}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 2, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2, "l": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.arguments": {"tf": 2.8284271247461903}, "howard.tools.tools.arguments_dict": {"tf": 2.8284271247461903}}, "df": 2}}}}}, "x": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2, ":": {"docs": {}, "df": 0, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 3, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}, "w": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}, "t": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "\\": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}, "m": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}}, "df": 1, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.DEFAULT_EXOMISER_URL": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1.4142135623730951}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 4}, "howard.tools.tools.commands_arguments": {"tf": 2.449489742783178}, "howard.tools.tools.arguments_dict": {"tf": 4.69041575982343}}, "df": 3, "l": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 2}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 2}}, "df": 2}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 3}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.LOG_FORMAT": {"tf": 1}, "howard.tools.tools.arguments": {"tf": 4}, "howard.tools.tools.arguments_dict": {"tf": 4}}, "df": 3, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}, "t": {"docs": {"howard.objects.hgvs.CODON_3": {"tf": 1}}, "df": 1, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.CODON_FULL": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 3.4641016151377544}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 3.605551275463989}}, "df": 3}}}, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.arguments": {"tf": 10.535653752852738}, "howard.tools.tools.arguments_dict": {"tf": 10.535653752852738}}, "df": 2}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"howard.tools.tools.arguments": {"tf": 4}, "howard.tools.tools.shared_arguments": {"tf": 1}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 4.358898943540674}}, "df": 4, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.hgvs.HGVSRegex.EQUAL": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.SUB": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.INS": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DEL": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.DUP": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE": {"tf": 3.7416573867739413}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"tf": 3}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE": {"tf": 3.7416573867739413}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE_REGEXES": {"tf": 3.7416573867739413}, "howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 11}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 2.449489742783178}, "howard.tools.tools.arguments_dict": {"tf": 2.449489742783178}}, "df": 2}}, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 3, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 2.449489742783178}, "howard.tools.tools.commands_arguments": {"tf": 2}, "howard.tools.tools.arguments_dict": {"tf": 3.1622776601683795}}, "df": 3}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1.4142135623730951}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1.4142135623730951}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "k": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 3}}, "x": {"docs": {"howard.tools.tools.arguments": {"tf": 2.449489742783178}, "howard.tools.tools.arguments_dict": {"tf": 2.449489742783178}}, "df": 2, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 3.3166247903554}, "howard.tools.tools.arguments_dict": {"tf": 3.3166247903554}}, "df": 2}}}}}}, "p": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 3, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 3.605551275463989}, "howard.tools.tools.arguments_dict": {"tf": 3.605551275463989}}, "df": 2, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "y": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 2, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 3.1622776601683795}, "howard.tools.tools.commands_arguments": {"tf": 4.47213595499958}, "howard.tools.tools.arguments_dict": {"tf": 5.477225575051661}}, "df": 3}}}}}}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 3.1622776601683795}, "howard.tools.tools.commands_arguments": {"tf": 3.605551275463989}, "howard.tools.tools.arguments_dict": {"tf": 4.795831523312719}}, "df": 3, "|": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "b": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}, "y": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}}, "y": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1.4142135623730951}}, "df": 1, "p": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1}}, "df": 2}, "o": {"docs": {}, "df": 0, "u": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "w": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1}}, "df": 1, "g": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1.7320508075688772}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1.7320508075688772}}, "df": 2}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1.4142135623730951}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments": {"tf": 7.54983443527075}, "howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 7.745966692414834}}, "df": 5, "i": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 2}}, "df": 3}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}, "d": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.arguments": {"tf": 7.937253933193772}, "howard.tools.tools.arguments_dict": {"tf": 7.937253933193772}}, "df": 2}}}}, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 5.0990195135927845}, "howard.tools.tools.arguments_dict": {"tf": 5.0990195135927845}}, "df": 2, "s": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}, "l": {"docs": {"howard.tools.tools.arguments": {"tf": 4.47213595499958}, "howard.tools.tools.arguments_dict": {"tf": 4.47213595499958}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.arguments_dict": {"tf": 2.23606797749979}}, "df": 2}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 3}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.commands_arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 2.23606797749979}, "howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 2.8284271247461903}}, "df": 3}}, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 2}}}}}}}, "k": {"docs": {"howard.objects.hgvs.CODON_1": {"tf": 1.4142135623730951}}, "df": 1, "e": {"docs": {}, "df": 0, "y": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 2.8284271247461903}, "howard.tools.tools.arguments_dict": {"tf": 2.8284271247461903}}, "df": 2, "s": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2, "\\": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.tools.arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 1.4142135623730951}}, "df": 2}}}, "[": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"howard.tools.tools.arguments": {"tf": 2}, "howard.tools.tools.commands_arguments": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments_dict": {"tf": 2.449489742783178}}, "df": 3}}}}, "z": {"docs": {"howard.objects.hgvs.HGVSRegex.PEP": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_REF": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_REF2": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALT": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE": {"tf": 2.8284271247461903}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE_REGEXES": {"tf": 2.8284271247461903}}, "df": 6, "]": {"docs": {}, "df": 0, "{": {"2": {"docs": {"howard.objects.hgvs.HGVSRegex.PEP": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_REF": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_REF2": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALT": {"tf": 1}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE": {"tf": 2.8284271247461903}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE_REGEXES": {"tf": 2.8284271247461903}}, "df": 6}, "docs": {}, "df": 0}}, "p": {"docs": {"howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1}}, "df": 2}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.arguments": {"tf": 1}, "howard.tools.tools.arguments_dict": {"tf": 1}}, "df": 2}}}}}}, "signature": {"root": {"0": {"0": {"0": {"0": {"0": {"1": {"4": {"0": {"5": {"docs": {"howard.functions.databases.databases_download_dbsnp": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"howard.objects.cdna.CDNACoord.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}}, "df": 3}, "1": {"0": {"0": {"0": {"0": {"0": {"0": {"docs": {"howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}}, "df": 4}, "docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {"howard.objects.database.Database.is_genotype_column": {"tf": 1}}, "df": 1}, "docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 1}}, "df": 1}, "4": {"8": {"5": {"7": {"6": {"docs": {"howard.functions.commons.download_file": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"howard.functions.commons.get_random": {"tf": 1}}, "df": 1, "/": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.from_annovar.from_annovar": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.tools.annotation.annotation": {"tf": 1}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}, "howard.tools.help.help": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}, "howard.tools.process.process": {"tf": 1}, "howard.tools.query.query": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}}, "df": 15}}}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1}}, "df": 4}}}}}}, "docs": {"howard.functions.commons.run_parallel_commands": {"tf": 1}, "howard.functions.commons.run_parallel_functions": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.extract_memory_in_go": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1.4142135623730951}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.run_commands": {"tf": 1}, "howard.objects.variants.Variants.get_threads": {"tf": 1}}, "df": 20}, "2": {"0": {"4": {"8": {"0": {"docs": {"howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.variants.Variants.load_data": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"howard.objects.variant.justify_genomic_indel": {"tf": 1}}, "df": 1}, "5": {"docs": {"howard.functions.databases.databases_download_dbsnp": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "3": {"0": {"docs": {"howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.objects.variant.normalize_variant": {"tf": 1}}, "df": 2}, "9": {"docs": {"howard.functions.commons.create_where_clause": {"tf": 1.4142135623730951}, "howard.functions.commons.find_nomen": {"tf": 2}, "howard.functions.commons.explode_annotation_format": {"tf": 6.164414002968976}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 5.830951894845301}, "howard.functions.commons.explode_snpeff_ann": {"tf": 6.164414002968976}, "howard.functions.commons.genotype_compression": {"tf": 1.4142135623730951}, "howard.functions.commons.genotype_barcode": {"tf": 1.4142135623730951}, "howard.functions.commons.genotype_stats": {"tf": 1.4142135623730951}, "howard.functions.commons.get_bin": {"tf": 2.449489742783178}, "howard.functions.commons.get_bin_command": {"tf": 2}, "howard.functions.commons.get_tmp": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_float_from_str": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_memory_in_go": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_into_infile": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_and_compress_files": {"tf": 1.4142135623730951}, "howard.functions.commons.get_argument": {"tf": 2.449489742783178}, "howard.functions.commons.get_argument_gooey": {"tf": 1.4142135623730951}, "howard.functions.commons.get_argument_to_mk": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation_from_dict": {"tf": 2.8284271247461903}, "howard.functions.commons.help_generation_from_json": {"tf": 2.449489742783178}, "howard.functions.commons.help_generation": {"tf": 1.4142135623730951}, "howard.functions.commons.set_param": {"tf": 2}, "howard.functions.commons.load_param": {"tf": 2}, "howard.functions.commons.load_args": {"tf": 2}, "howard.functions.commons.transcripts_file_to_df": {"tf": 2}, "howard.functions.commons.identical": {"tf": 1.4142135623730951}, "howard.functions.commons.params_string_to_dict": {"tf": 3.4641016151377544}, "howard.functions.commons.determine_value_type": {"tf": 2.449489742783178}, "howard.functions.commons.clean_annotation_field": {"tf": 1.4142135623730951}, "howard.functions.databases.generate_databases_param": {"tf": 2}, "howard.functions.databases.databases_infos": {"tf": 2}, "howard.functions.databases.databases_download_annovar": {"tf": 2}, "howard.functions.databases.databases_download_snpeff": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_genomes": {"tf": 2}, "howard.functions.databases.databases_download_refseq": {"tf": 2.8284271247461903}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_alphamissense": {"tf": 2}, "howard.functions.databases.databases_download_exomiser": {"tf": 3.4641016151377544}, "howard.functions.databases.databases_download_dbsnp": {"tf": 4.242640687119285}, "howard.functions.databases.databases_download_hgmd": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.from_annovar": {"tf": 2}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 2}, "howard.functions.from_extann.from_extann": {"tf": 2}, "howard.functions.plugins.plugins_infos": {"tf": 1.4142135623730951}, "howard.functions.plugins.plugins_list": {"tf": 1.4142135623730951}, "howard.functions.utils.cdna_to_protein": {"tf": 1.4142135623730951}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.format_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.create_refseq_table": {"tf": 1.4142135623730951}, "howard.functions.utils.get_refseq_table": {"tf": 1.4142135623730951}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 2}, "howard.objects.database.Database.get_header_from_list": {"tf": 2}, "howard.objects.database.Database.get_header_from_file": {"tf": 2}, "howard.objects.database.Database.get_header": {"tf": 2}, "howard.objects.database.Database.set_header": {"tf": 2}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1.4142135623730951}, "howard.objects.database.Database.create_view": {"tf": 1.4142135623730951}, "howard.objects.database.Database.find_column": {"tf": 2}, "howard.objects.database.Database.map_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.export": {"tf": 2.449489742783178}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 2.449489742783178}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 4.47213595499958}, "howard.objects.variant.normalize_variant": {"tf": 1.4142135623730951}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_table_variants": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_header": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.scan_databases": {"tf": 2}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 2}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 2.449489742783178}, "howard.tools.annotation.annotation": {"tf": 2}, "howard.tools.calculation.calculation": {"tf": 2}, "howard.tools.databases.databases": {"tf": 2}, "howard.tools.help.help": {"tf": 2}, "howard.tools.hgvs.hgvs": {"tf": 2}, "howard.tools.prioritization.prioritization": {"tf": 2}, "howard.tools.process.process": {"tf": 2}, "howard.tools.query.query": {"tf": 2}, "howard.tools.stats.stats": {"tf": 2}, "howard.tools.tools.PathType.__init__": {"tf": 1.4142135623730951}}, "df": 94}, "docs": {"howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}}, "df": 5, "p": {"docs": {"howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}}, "df": 1}}, "4": {"0": {"docs": {"howard.functions.databases.databases_download_dbsnp": {"tf": 1}}, "df": 1}, "docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}}, "df": 3, "a": {"docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 1}}, "df": 1}}, "5": {"docs": {"howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}}, "df": 2, "p": {"docs": {"howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}}, "df": 1}}, "6": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}}, "df": 2}, "docs": {"howard.functions.commons.remove_if_exists": {"tf": 4}, "howard.functions.commons.set_log_level": {"tf": 5.477225575051661}, "howard.functions.commons.split_interval": {"tf": 7.0710678118654755}, "howard.functions.commons.merge_regions": {"tf": 4}, "howard.functions.commons.create_where_clause": {"tf": 5.656854249492381}, "howard.functions.commons.command": {"tf": 4}, "howard.functions.commons.run_parallel_commands": {"tf": 5.477225575051661}, "howard.functions.commons.run_parallel_functions": {"tf": 5.477225575051661}, "howard.functions.commons.example_function": {"tf": 3.7416573867739413}, "howard.functions.commons.find": {"tf": 4.898979485566356}, "howard.functions.commons.find_all": {"tf": 4.898979485566356}, "howard.functions.commons.find_genome": {"tf": 6.6332495807108}, "howard.functions.commons.find_file_prefix": {"tf": 8.246211251235321}, "howard.functions.commons.find_nomen": {"tf": 7.211102550927978}, "howard.functions.commons.explode_annotation_format": {"tf": 14.317821063276353}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 12.489995996796797}, "howard.functions.commons.explode_snpeff_ann": {"tf": 14.317821063276353}, "howard.functions.commons.get_index": {"tf": 5.196152422706632}, "howard.functions.commons.get_file_format": {"tf": 4.69041575982343}, "howard.functions.commons.findbypipeline": {"tf": 5}, "howard.functions.commons.genotypeconcordance": {"tf": 5}, "howard.functions.commons.genotype_compression": {"tf": 4.898979485566356}, "howard.functions.commons.genotype_barcode": {"tf": 4.898979485566356}, "howard.functions.commons.barcode": {"tf": 5}, "howard.functions.commons.trio": {"tf": 5}, "howard.functions.commons.vaf_normalization": {"tf": 4.47213595499958}, "howard.functions.commons.genotype_stats": {"tf": 6.4031242374328485}, "howard.functions.commons.extract_file": {"tf": 6.48074069840786}, "howard.functions.commons.download_file": {"tf": 9.9498743710662}, "howard.functions.commons.whereis_bin": {"tf": 4}, "howard.functions.commons.get_bin": {"tf": 10.246950765959598}, "howard.functions.commons.get_bin_command": {"tf": 10.908712114635714}, "howard.functions.commons.get_tmp": {"tf": 7.280109889280518}, "howard.functions.commons.get_threads": {"tf": 6.164414002968976}, "howard.functions.commons.get_memory": {"tf": 6.082762530298219}, "howard.functions.commons.extract_float_from_str": {"tf": 4.898979485566356}, "howard.functions.commons.extract_memory_in_go": {"tf": 6.48074069840786}, "howard.functions.commons.concat_file": {"tf": 4.898979485566356}, "howard.functions.commons.compress_file": {"tf": 4.898979485566356}, "howard.functions.commons.get_compression_type": {"tf": 4}, "howard.functions.commons.get_file_compressed": {"tf": 4.69041575982343}, "howard.functions.commons.concat_into_infile": {"tf": 8.54400374531753}, "howard.functions.commons.concat_and_compress_files": {"tf": 11.532562594670797}, "howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 4.898979485566356}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 7}, "howard.functions.commons.load_duckdb_extension": {"tf": 5.656854249492381}, "howard.functions.commons.time_limit": {"tf": 3.1622776601683795}, "howard.functions.commons.duckdb_execute": {"tf": 5.477225575051661}, "howard.functions.commons.genome_build_switch": {"tf": 4}, "howard.functions.commons.get_argument": {"tf": 9.9498743710662}, "howard.functions.commons.get_argument_gooey": {"tf": 6.082762530298219}, "howard.functions.commons.get_argument_to_mk": {"tf": 6.855654600401044}, "howard.functions.commons.help_generation_from_dict": {"tf": 12.328828005937952}, "howard.functions.commons.help_generation_from_json": {"tf": 8.660254037844387}, "howard.functions.commons.help_generation": {"tf": 7.937253933193772}, "howard.functions.commons.format_arg_help": {"tf": 5.477225575051661}, "howard.functions.commons.bed_sort": {"tf": 4.898979485566356}, "howard.functions.commons.full_path": {"tf": 4}, "howard.functions.commons.get_default_argument": {"tf": 4.69041575982343}, "howard.functions.commons.set_param": {"tf": 8.660254037844387}, "howard.functions.commons.add_value_into_dict": {"tf": 6.082762530298219}, "howard.functions.commons.load_param": {"tf": 5.744562646538029}, "howard.functions.commons.load_config_args": {"tf": 3.1622776601683795}, "howard.functions.commons.load_args": {"tf": 10.63014581273465}, "howard.functions.commons.get_random": {"tf": 4.69041575982343}, "howard.functions.commons.transcripts_file_to_df": {"tf": 7.54983443527075}, "howard.functions.commons.identical": {"tf": 7.211102550927978}, "howard.functions.commons.check_docker_image_exists": {"tf": 4}, "howard.functions.commons.params_string_to_dict": {"tf": 10.392304845413264}, "howard.functions.commons.determine_value_type": {"tf": 7.681145747868608}, "howard.functions.commons.determine_column_types": {"tf": 4}, "howard.functions.commons.detect_column_type": {"tf": 3.4641016151377544}, "howard.functions.commons.determine_column_number": {"tf": 4}, "howard.functions.commons.clean_annotation_field": {"tf": 6.164414002968976}, "howard.functions.databases.generate_databases_param": {"tf": 6.855654600401044}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 5.477225575051661}, "howard.functions.databases.databases_infos": {"tf": 9.643650760992955}, "howard.functions.databases.databases_param": {"tf": 7.874007874011811}, "howard.functions.databases.databases_download_annovar": {"tf": 9.539392014169456}, "howard.functions.databases.databases_download_snpeff": {"tf": 8.660254037844387}, "howard.functions.databases.databases_download_genomes": {"tf": 9}, "howard.functions.databases.databases_download_refseq": {"tf": 15.620499351813308}, "howard.functions.databases.databases_format_refseq": {"tf": 12.68857754044952}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 15.620499351813308}, "howard.functions.databases.databases_download_alphamissense": {"tf": 8.12403840463596}, "howard.functions.databases.databases_download_exomiser": {"tf": 14.45683229480096}, "howard.functions.databases.databases_download_dbsnp": {"tf": 15.84297951775486}, "howard.functions.databases.databases_download_hgmd": {"tf": 11.532562594670797}, "howard.functions.from_annovar.from_annovar": {"tf": 5.744562646538029}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 14}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 8.426149773176359}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 10.04987562112089}, "howard.functions.from_extann.create_metaheader": {"tf": 7.483314773547883}, "howard.functions.from_extann.add_default_metaheader": {"tf": 3.7416573867739413}, "howard.functions.from_extann.read_json": {"tf": 4}, "howard.functions.from_extann.read_refgene": {"tf": 5.291502622129181}, "howard.functions.from_extann.metaheader_rows": {"tf": 6.928203230275509}, "howard.functions.from_extann.replace_values": {"tf": 4.898979485566356}, "howard.functions.from_extann.write_extann": {"tf": 7.615773105863909}, "howard.functions.from_extann.extann_to_info": {"tf": 5.291502622129181}, "howard.functions.from_extann.get_longest_transcript": {"tf": 7.211102550927978}, "howard.functions.from_extann.get_all_transcript": {"tf": 7.211102550927978}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 7.54983443527075}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 9.539392014169456}, "howard.functions.from_extann.from_extann": {"tf": 5.744562646538029}, "howard.functions.plugins.plugins_infos": {"tf": 5.656854249492381}, "howard.functions.plugins.plugins_list": {"tf": 6.557438524302}, "howard.functions.plugins.plugins_to_load": {"tf": 4}, "howard.functions.utils.read_refgene": {"tf": 3.1622776601683795}, "howard.functions.utils.read_genepred": {"tf": 4.242640687119285}, "howard.functions.utils.make_transcript": {"tf": 3.1622776601683795}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 4.242640687119285}, "howard.functions.utils.read_transcripts": {"tf": 3.1622776601683795}, "howard.functions.utils.get_genomic_sequence": {"tf": 4.69041575982343}, "howard.functions.utils.get_vcf_allele": {"tf": 4.69041575982343}, "howard.functions.utils.get_alt_from_sequence": {"tf": 4.242640687119285}, "howard.functions.utils.matches_ref_allele": {"tf": 4.69041575982343}, "howard.functions.utils.hgvs_justify_dup": {"tf": 5.0990195135927845}, "howard.functions.utils.hgvs_justify_indel": {"tf": 5.477225575051661}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 5.830951894845301}, "howard.functions.utils.parse_hgvs_name": {"tf": 8.831760866327848}, "howard.functions.utils.cdna_to_protein": {"tf": 7.937253933193772}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 9.433981132056603}, "howard.functions.utils.format_hgvs_name": {"tf": 11.575836902790225}, "howard.functions.utils.create_refseq_table": {"tf": 6.48074069840786}, "howard.functions.utils.get_refseq_table": {"tf": 6.48074069840786}, "howard.functions.utils.get_transcript": {"tf": 6.164414002968976}, "howard.main.main": {"tf": 3}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 6.324555320336759}, "howard.objects.cdna.CDNACoord.parse": {"tf": 3.7416573867739413}, "howard.objects.database.Database.__init__": {"tf": 11.575836902790225}, "howard.objects.database.Database.set_database": {"tf": 8.18535277187245}, "howard.objects.database.Database.set_databases_folders": {"tf": 5.0990195135927845}, "howard.objects.database.Database.get_database_folders": {"tf": 3.4641016151377544}, "howard.objects.database.Database.read_header_file": {"tf": 5.0990195135927845}, "howard.objects.database.Database.get_header_length": {"tf": 5.0990195135927845}, "howard.objects.database.Database.get_header_file_columns": {"tf": 5.0990195135927845}, "howard.objects.database.Database.get_header_from_list": {"tf": 6.6332495807108}, "howard.objects.database.Database.get_header_from_file": {"tf": 6.164414002968976}, "howard.objects.database.Database.find_header_file": {"tf": 5.5677643628300215}, "howard.objects.database.Database.get_header": {"tf": 9.433981132056603}, "howard.objects.database.Database.get_header_from_columns": {"tf": 7.681145747868608}, "howard.objects.database.Database.query": {"tf": 5.0990195135927845}, "howard.objects.database.Database.set_header": {"tf": 8.602325267042627}, "howard.objects.database.Database.set_header_file": {"tf": 5.0990195135927845}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 5.5677643628300215}, "howard.objects.database.Database.get_header_file": {"tf": 9.38083151964686}, "howard.objects.database.Database.set_assembly": {"tf": 5.0990195135927845}, "howard.objects.database.Database.get_assembly": {"tf": 3.4641016151377544}, "howard.objects.database.Database.find_database": {"tf": 8.831760866327848}, "howard.objects.database.Database.get_database": {"tf": 3.4641016151377544}, "howard.objects.database.Database.get_database_basename": {"tf": 5.5677643628300215}, "howard.objects.database.Database.get_database_dirname": {"tf": 5.5677643628300215}, "howard.objects.database.Database.exists": {"tf": 5.0990195135927845}, "howard.objects.database.Database.set_format": {"tf": 5.0990195135927845}, "howard.objects.database.Database.get_format": {"tf": 5.0990195135927845}, "howard.objects.database.Database.get_type": {"tf": 6.708203932499369}, "howard.objects.database.Database.get_database_tables": {"tf": 6.4031242374328485}, "howard.objects.database.Database.get_database_table": {"tf": 5.5677643628300215}, "howard.objects.database.Database.get_type_from_columns": {"tf": 7}, "howard.objects.database.Database.get_needed_columns": {"tf": 6.4031242374328485}, "howard.objects.database.Database.get_sql_from": {"tf": 7.615773105863909}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 6.855654600401044}, "howard.objects.database.Database.get_sql_database_link": {"tf": 5.0990195135927845}, "howard.objects.database.Database.create_view": {"tf": 6.855654600401044}, "howard.objects.database.Database.get_view": {"tf": 6.708203932499369}, "howard.objects.database.Database.is_compressed": {"tf": 5.0990195135927845}, "howard.objects.database.Database.get_header_infos_list": {"tf": 5.0990195135927845}, "howard.objects.database.Database.find_column": {"tf": 9.797958971132712}, "howard.objects.database.Database.map_columns": {"tf": 8.94427190999916}, "howard.objects.database.Database.get_columns": {"tf": 8.54400374531753}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 5.0990195135927845}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 7.615773105863909}, "howard.objects.database.Database.get_annotations": {"tf": 5.0990195135927845}, "howard.objects.database.Database.get_extra_columns": {"tf": 7.615773105863909}, "howard.objects.database.Database.is_vcf": {"tf": 6.324555320336759}, "howard.objects.database.Database.get_conn": {"tf": 3.1622776601683795}, "howard.objects.database.Database.is_genotype_column": {"tf": 8.18535277187245}, "howard.objects.database.Database.export": {"tf": 16.852299546352718}, "howard.objects.genome.ChromosomeSubset.__init__": {"tf": 4}, "howard.objects.genome.GenomeSubset.__init__": {"tf": 4.898979485566356}, "howard.objects.genome.MockSequence.__init__": {"tf": 2.8284271247461903}, "howard.objects.genome.MockChromosome.__init__": {"tf": 4}, "howard.objects.genome.MockGenome.__init__": {"tf": 6}, "howard.objects.genome.MockGenome.get_seq": {"tf": 4.69041575982343}, "howard.objects.genome.MockGenome.read": {"tf": 3.7416573867739413}, "howard.objects.genome.MockGenome.write": {"tf": 3.7416573867739413}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 7}, "howard.objects.genome.MockGenomeTestFile.get_seq": {"tf": 4.69041575982343}, "howard.objects.hgvs.get_refseq_type": {"tf": 4}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 7.211102550927978}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 16.703293088490067}, "howard.objects.hgvs.HGVSName.parse": {"tf": 4.47213595499958}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 4.242640687119285}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 4.47213595499958}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 4.47213595499958}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 4.47213595499958}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 4.47213595499958}, "howard.objects.hgvs.HGVSName.format": {"tf": 9.848857801796104}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 9.38083151964686}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 3.4641016151377544}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 3.4641016151377544}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 3.4641016151377544}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 3.4641016151377544}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 3.4641016151377544}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 3.4641016151377544}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 5.0990195135927845}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 5.0990195135927845}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 5.0990195135927845}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 6.557438524302}, "howard.objects.transcript.Gene.__init__": {"tf": 2.8284271247461903}, "howard.objects.transcript.Transcript.__init__": {"tf": 10.44030650891055}, "howard.objects.transcript.Transcript.ordered_cdna_match": {"tf": 3.4641016151377544}, "howard.objects.transcript.Transcript.get_cds_start_stop": {"tf": 3.4641016151377544}, "howard.objects.transcript.Transcript.start_codon": {"tf": 3.4641016151377544}, "howard.objects.transcript.Transcript.stop_codon": {"tf": 3.4641016151377544}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 4.47213595499958}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 4.47213595499958}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 4.47213595499958}, "howard.objects.transcript.BED6Interval_base.__init__": {"tf": 5.291502622129181}, "howard.objects.transcript.BED6Interval.__init__": {"tf": 5.291502622129181}, "howard.objects.transcript.BED6Interval.distance": {"tf": 4.47213595499958}, "howard.objects.transcript.Exon.__init__": {"tf": 6.557438524302}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 5.0990195135927845}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 8.366600265340756}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 5.830951894845301}, "howard.objects.variant.Position.__init__": {"tf": 4.47213595499958}, "howard.objects.variant.revcomp": {"tf": 3.1622776601683795}, "howard.objects.variant.get_sequence": {"tf": 5.477225575051661}, "howard.objects.variant.get_sequence_from_position": {"tf": 3.7416573867739413}, "howard.objects.variant.justify_indel": {"tf": 5.0990195135927845}, "howard.objects.variant.justify_genomic_indel": {"tf": 6.164414002968976}, "howard.objects.variant.normalize_variant": {"tf": 7.745966692414834}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 8.366600265340756}, "howard.objects.variants.Variants.__init__": {"tf": 9.486832980505138}, "howard.objects.variants.Variants.set_samples": {"tf": 5.0990195135927845}, "howard.objects.variants.Variants.get_samples": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.get_samples_check": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.set_input": {"tf": 5.0990195135927845}, "howard.objects.variants.Variants.set_config": {"tf": 4.47213595499958}, "howard.objects.variants.Variants.set_param": {"tf": 4.47213595499958}, "howard.objects.variants.Variants.init_variables": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.get_indexing": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.get_connexion_config": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.get_duckdb_settings": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.set_connexion_db": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.set_connexion": {"tf": 4}, "howard.objects.variants.Variants.set_output": {"tf": 5.0990195135927845}, "howard.objects.variants.Variants.set_header": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 7.3484692283495345}, "howard.objects.variants.Variants.get_overview": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.get_stats": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.stats_to_file": {"tf": 5.0990195135927845}, "howard.objects.variants.Variants.print_stats": {"tf": 6.324555320336759}, "howard.objects.variants.Variants.get_input": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.get_input_format": {"tf": 5.0990195135927845}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 5.0990195135927845}, "howard.objects.variants.Variants.get_output": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.get_output_format": {"tf": 5.0990195135927845}, "howard.objects.variants.Variants.get_config": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.get_param": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.get_connexion_db": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.get_prefix": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.get_table_variants": {"tf": 5.291502622129181}, "howard.objects.variants.Variants.get_tmp_dir": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.get_connexion_type": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.get_connexion": {"tf": 3.1622776601683795}, "howard.objects.variants.Variants.close_connexion": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.get_header": {"tf": 5.0990195135927845}, "howard.objects.variants.Variants.get_header_infos_list": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.get_header_length": {"tf": 5.0990195135927845}, "howard.objects.variants.Variants.get_header_columns": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.get_header_columns_as_list": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.get_header_columns_as_sql": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 7.615773105863909}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 5.0990195135927845}, "howard.objects.variants.Variants.get_verbose": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.get_connexion_format": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 8.831760866327848}, "howard.objects.variants.Variants.load_data": {"tf": 7.615773105863909}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 6.557438524302}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 5.0990195135927845}, "howard.objects.variants.Variants.add_column": {"tf": 7.211102550927978}, "howard.objects.variants.Variants.drop_column": {"tf": 7.615773105863909}, "howard.objects.variants.Variants.explode_infos": {"tf": 10.14889156509222}, "howard.objects.variants.Variants.create_indexes": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.drop_indexes": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.read_vcf_header": {"tf": 4}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 5.0990195135927845}, "howard.objects.variants.Variants.execute_query": {"tf": 4.242640687119285}, "howard.objects.variants.Variants.export_output": {"tf": 14.071247279470288}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 5.0990195135927845}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 5.0990195135927845}, "howard.objects.variants.Variants.export_header": {"tf": 9.486832980505138}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 11}, "howard.objects.variants.Variants.run_commands": {"tf": 6.4031242374328485}, "howard.objects.variants.Variants.get_threads": {"tf": 5.0990195135927845}, "howard.objects.variants.Variants.get_memory": {"tf": 5.0990195135927845}, "howard.objects.variants.Variants.update_from_vcf": {"tf": 4.47213595499958}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 4.47213595499958}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 4.47213595499958}, "howard.objects.variants.Variants.drop_variants_table": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.set_variant_id": {"tf": 6.48074069840786}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 6.48074069840786}, "howard.objects.variants.Variants.scan_databases": {"tf": 7.416198487095663}, "howard.objects.variants.Variants.annotation": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.annotation_snpsift": {"tf": 5.0990195135927845}, "howard.objects.variants.Variants.annotation_bcftools": {"tf": 5.0990195135927845}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 5.0990195135927845}, "howard.objects.variants.Variants.annotation_snpeff": {"tf": 5.0990195135927845}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 5.0990195135927845}, "howard.objects.variants.Variants.annotation_parquet": {"tf": 5.0990195135927845}, "howard.objects.variants.Variants.annotation_splice": {"tf": 5.0990195135927845}, "howard.objects.variants.Variants.get_config_default": {"tf": 4.47213595499958}, "howard.objects.variants.Variants.get_config_json": {"tf": 7}, "howard.objects.variants.Variants.prioritization": {"tf": 7.615773105863909}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 5.0990195135927845}, "howard.objects.variants.Variants.get_operations_help": {"tf": 6.6332495807108}, "howard.objects.variants.Variants.calculation": {"tf": 7.745966692414834}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 6}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 6}, "howard.objects.variants.Variants.calculation_variant_id": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 6.855654600401044}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 8.888194417315589}, "howard.objects.variants.Variants.calculation_extract_nomen": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 5.291502622129181}, "howard.objects.variants.Variants.calculation_genotype_concordance": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 5.291502622129181}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 5.291502622129181}, "howard.objects.variants.Variants.calculation_trio": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 5.291502622129181}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 6.324555320336759}, "howard.objects.variants.Variants.calculation_transcripts_prioritization": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.calculation_transcripts_export": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.transcripts_export": {"tf": 6.4031242374328485}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 6.4031242374328485}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 12.36931687685298}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 11.704699910719626}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 7.681145747868608}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 11.180339887498949}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 10.908712114635714}, "howard.tools.annotation.annotation": {"tf": 5.744562646538029}, "howard.tools.calculation.calculation": {"tf": 5.744562646538029}, "howard.tools.databases.databases": {"tf": 5.744562646538029}, "howard.tools.gui.gui": {"tf": 4.242640687119285}, "howard.tools.help.help": {"tf": 5.744562646538029}, "howard.tools.hgvs.hgvs": {"tf": 5.744562646538029}, "howard.tools.prioritization.prioritization": {"tf": 5.744562646538029}, "howard.tools.process.process": {"tf": 5.744562646538029}, "howard.tools.query.query": {"tf": 5.744562646538029}, "howard.tools.stats.stats": {"tf": 5.744562646538029}, "howard.tools.tools.PathType.__init__": {"tf": 5.477225575051661}}, "df": 354, "f": {"docs": {"howard.objects.variants.Variants.read_vcf_header": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.set_log_level": {"tf": 1}, "howard.functions.commons.find_genome": {"tf": 1}, "howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.whereis_bin": {"tf": 1}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.compress_file": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_refseq": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_format_refseq": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_exomiser": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 2}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1.4142135623730951}, "howard.functions.from_extann.read_json": {"tf": 1}, "howard.functions.utils.read_transcripts": {"tf": 1}, "howard.functions.utils.create_refseq_table": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.database.Database.read_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_length": {"tf": 1}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.objects.database.Database.set_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1}, "howard.objects.variants.Variants.get_output_format": {"tf": 1}, "howard.objects.variants.Variants.get_header_length": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.load_data": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.objects.variants.Variants.get_operations_help": {"tf": 1}, "howard.objects.variants.Variants.calculation": {"tf": 1}, "howard.tools.tools.PathType.__init__": {"tf": 1}}, "df": 55, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"howard.functions.commons.get_compression_type": {"tf": 1}}, "df": 1, "s": {"docs": {"howard.functions.commons.remove_if_exists": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.get_file_format": {"tf": 1}, "howard.functions.commons.get_file_compressed": {"tf": 1}, "howard.objects.genome.MockGenome.__init__": {"tf": 1.4142135623730951}, "howard.objects.genome.MockGenome.read": {"tf": 1}, "howard.objects.genome.MockGenome.write": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1.4142135623730951}}, "df": 6}}}}, "s": {"docs": {"howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.4142135623730951}}, "df": 7}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1.4142135623730951}}, "df": 4, "s": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.from_extann.add_default_metaheader": {"tf": 1}, "howard.functions.from_extann.metaheader_rows": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.explode_infos": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}}, "df": 9}}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}}, "df": 2}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.database.Database.get_table_columns_from_file": {"tf": 1}}, "df": 1, "b": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.from_extann.get_longest_transcript": {"tf": 1}, "howard.functions.from_extann.get_all_transcript": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}}, "df": 4, "s": {"docs": {"howard.functions.commons.run_parallel_functions": {"tf": 1}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}}, "df": 3}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_hgmd": {"tf": 1.4142135623730951}}, "df": 13, "s": {"docs": {"howard.functions.databases.databases_infos": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.database.Database.set_database": {"tf": 1}, "howard.objects.database.Database.set_databases_folders": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 1}}, "df": 5}}}}}, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1.4142135623730951}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.database.Database.set_database": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 1}, "howard.objects.database.Database.set_format": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1.4142135623730951}}, "df": 14, "s": {"docs": {"howard.functions.databases.databases_infos": {"tf": 1}, "howard.objects.variants.Variants.scan_databases": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}}, "df": 3}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1}}, "df": 5}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.variant.Position.__init__": {"tf": 1}, "howard.objects.variant.get_sequence": {"tf": 1}}, "df": 3}}}}}}, "a": {"docs": {"howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}}, "df": 1, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1.4142135623730951}, "howard.functions.commons.get_argument": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 2.6457513110645907}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 2}, "howard.objects.database.Database.get_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.export": {"tf": 1.4142135623730951}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 2}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 2}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.variants.Variants.__init__": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.load_data": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.export_output": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 38}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 4}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.extract_float_from_str": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {"howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.objects.variant.justify_genomic_indel": {"tf": 1}, "howard.objects.variant.normalize_variant": {"tf": 1}}, "df": 3}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.from_annovar.from_annovar": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.tools.annotation.annotation": {"tf": 1}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}, "howard.tools.help.help": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}, "howard.tools.process.process": {"tf": 1}, "howard.tools.query.query": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}}, "df": 19}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.from_extann.create_metaheader": {"tf": 1}, "howard.functions.from_extann.read_refgene": {"tf": 1}, "howard.functions.from_extann.get_longest_transcript": {"tf": 1}, "howard.functions.from_extann.get_all_transcript": {"tf": 1}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1.4142135623730951}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}}, "df": 8}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.remove_if_exists": {"tf": 1}, "howard.functions.commons.merge_regions": {"tf": 1.4142135623730951}, "howard.functions.commons.create_where_clause": {"tf": 1}, "howard.functions.commons.run_parallel_commands": {"tf": 1.4142135623730951}, "howard.functions.commons.run_parallel_functions": {"tf": 1.4142135623730951}, "howard.functions.commons.find_all": {"tf": 1}, "howard.functions.commons.find_nomen": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.get_index": {"tf": 1}, "howard.functions.commons.findbypipeline": {"tf": 1}, "howard.functions.commons.genotypeconcordance": {"tf": 1}, "howard.functions.commons.barcode": {"tf": 1}, "howard.functions.commons.trio": {"tf": 1}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.load_duckdb_extension": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1.4142135623730951}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1.4142135623730951}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.commons.determine_column_types": {"tf": 1.4142135623730951}, "howard.functions.commons.determine_column_number": {"tf": 1.4142135623730951}, "howard.functions.commons.clean_annotation_field": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_annovar": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.plugins.plugins_to_load": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.database.Database.set_database": {"tf": 1}, "howard.objects.database.Database.set_databases_folders": {"tf": 1}, "howard.objects.database.Database.get_database_folders": {"tf": 1}, "howard.objects.database.Database.read_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 1}, "howard.objects.database.Database.get_database_tables": {"tf": 1}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1.4142135623730951}, "howard.objects.database.Database.map_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 2}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_samples": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_samples": {"tf": 1}, "howard.objects.variants.Variants.get_header_infos_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.read_vcf_header": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.run_commands": {"tf": 1}, "howard.objects.variants.Variants.scan_databases": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_operations_help": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 2.23606797749979}}, "df": 85}}, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.identical": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_header": {"tf": 1}}, "df": 4}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.variants.Variants.get_query_to_df": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.set_log_level": {"tf": 1}}, "df": 1}, "o": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.variants.Variants.__init__": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}}, "df": 1, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1.7320508075688772}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1.7320508075688772}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1.7320508075688772}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.variant.justify_genomic_indel": {"tf": 1}, "howard.objects.variant.normalize_variant": {"tf": 1}}, "df": 8}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}}, "df": 2}}}, "f": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.variant.normalize_variant": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}}, "df": 2}}}, "t": {"docs": {"howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.from_annovar.from_annovar": {"tf": 1}, "howard.functions.from_extann.get_longest_transcript": {"tf": 1}, "howard.functions.from_extann.get_all_transcript": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.tools.annotation.annotation": {"tf": 1}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}, "howard.tools.help.help": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}, "howard.tools.process.process": {"tf": 1}, "howard.tools.query.query": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}}, "df": 23}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {"howard.functions.utils.parse_hgvs_name": {"tf": 1}}, "df": 1}}}}, "z": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.utils.parse_hgvs_name": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {"howard.objects.cdna.CDNACoord.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "n": {"docs": {"howard.functions.commons.get_random": {"tf": 1}}, "df": 1, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.databases.databases_download_refseq": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_format_refseq": {"tf": 1.4142135623730951}}, "df": 2, "e": {"docs": {"howard.functions.commons.remove_if_exists": {"tf": 1}, "howard.functions.commons.set_log_level": {"tf": 1}, "howard.functions.commons.split_interval": {"tf": 1.4142135623730951}, "howard.functions.commons.find_genome": {"tf": 1.4142135623730951}, "howard.functions.commons.find_file_prefix": {"tf": 2}, "howard.functions.commons.get_file_format": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.get_bin": {"tf": 1.4142135623730951}, "howard.functions.commons.get_bin_command": {"tf": 1.7320508075688772}, "howard.functions.commons.get_tmp": {"tf": 1}, "howard.functions.commons.get_memory": {"tf": 1}, "howard.functions.commons.get_file_compressed": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1.4142135623730951}, "howard.functions.commons.format_arg_help": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.clean_annotation_field": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_annovar": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_snpeff": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_genomes": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_refseq": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 2}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_hgmd": {"tf": 1.7320508075688772}, "howard.functions.from_annovar.from_annovar": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 3}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1.7320508075688772}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 2.449489742783178}, "howard.functions.from_extann.create_metaheader": {"tf": 1}, "howard.functions.from_extann.write_extann": {"tf": 1.7320508075688772}, "howard.functions.from_extann.get_longest_transcript": {"tf": 1}, "howard.functions.from_extann.get_all_transcript": {"tf": 1}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1.7320508075688772}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.format_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.create_refseq_table": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.main.main": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 2.8284271247461903}, "howard.objects.database.Database.set_database": {"tf": 1.7320508075688772}, "howard.objects.database.Database.set_databases_folders": {"tf": 1.4142135623730951}, "howard.objects.database.Database.read_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_length": {"tf": 1}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.find_header_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 2}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.query": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 2}, "howard.objects.database.Database.set_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1.7320508075688772}, "howard.objects.database.Database.set_assembly": {"tf": 1.4142135623730951}, "howard.objects.database.Database.find_database": {"tf": 2}, "howard.objects.database.Database.get_database_basename": {"tf": 1}, "howard.objects.database.Database.get_database_dirname": {"tf": 1}, "howard.objects.database.Database.exists": {"tf": 1}, "howard.objects.database.Database.set_format": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_tables": {"tf": 1}, "howard.objects.database.Database.get_database_table": {"tf": 1}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1}, "howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.database.Database.get_view": {"tf": 1.4142135623730951}, "howard.objects.database.Database.is_compressed": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1.7320508075688772}, "howard.objects.database.Database.map_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_columns": {"tf": 2}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_annotations": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1.7320508075688772}, "howard.objects.database.Database.is_vcf": {"tf": 1.4142135623730951}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 2.449489742783178}, "howard.objects.genome.ChromosomeSubset.__init__": {"tf": 1}, "howard.objects.genome.MockChromosome.__init__": {"tf": 1}, "howard.objects.genome.MockGenome.__init__": {"tf": 2}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 2}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 2.23606797749979}, "howard.objects.hgvs.HGVSName.parse": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1.7320508075688772}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}, "howard.objects.variants.Variants.__init__": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.set_samples": {"tf": 1}, "howard.objects.variants.Variants.set_input": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_config": {"tf": 1}, "howard.objects.variants.Variants.set_param": {"tf": 1}, "howard.objects.variants.Variants.init_variables": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.set_output": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_header": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.get_overview": {"tf": 1}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1}, "howard.objects.variants.Variants.get_output_format": {"tf": 1}, "howard.objects.variants.Variants.close_connexion": {"tf": 1}, "howard.objects.variants.Variants.get_header_length": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.load_data": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.drop_column": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.explode_infos": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.create_indexes": {"tf": 1}, "howard.objects.variants.Variants.drop_indexes": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 3.7416573867739413}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.run_commands": {"tf": 1}, "howard.objects.variants.Variants.get_memory": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1}, "howard.objects.variants.Variants.drop_variants_table": {"tf": 1}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1}, "howard.objects.variants.Variants.annotation": {"tf": 1}, "howard.objects.variants.Variants.annotation_snpsift": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_bcftools": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_snpeff": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_parquet": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_splice": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_operations_help": {"tf": 1}, "howard.objects.variants.Variants.calculation": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}, "howard.objects.variants.Variants.calculation_variant_id": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_nomen": {"tf": 1}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_concordance": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1}, "howard.objects.variants.Variants.calculation_trio": {"tf": 1}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_export": {"tf": 1}, "howard.objects.variants.Variants.transcripts_export": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 2.449489742783178}, "howard.tools.annotation.annotation": {"tf": 1}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}, "howard.tools.help.help": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}, "howard.tools.process.process": {"tf": 1}, "howard.tools.query.query": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}}, "df": 197, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.database.Database.get_database_tables": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}}, "df": 2}, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.utils.parse_hgvs_name": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.split_interval": {"tf": 1}}, "df": 1}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {"howard.functions.databases.databases_download_dbsnp": {"tf": 1}}, "df": 1, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {"howard.functions.databases.databases_download_refseq": {"tf": 1.7320508075688772}}, "df": 1, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {"howard.functions.databases.databases_download_refseq": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.commons.example_function": {"tf": 1}}, "df": 1, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.from_extann.metaheader_rows": {"tf": 1}, "howard.objects.transcript.Exon.__init__": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}}, "df": 3}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.determine_value_type": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.find": {"tf": 1}, "howard.functions.commons.find_all": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1}, "howard.functions.commons.clean_annotation_field": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.get_transcript": {"tf": 1}, "howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.genome.ChromosomeSubset.__init__": {"tf": 1}, "howard.objects.genome.MockChromosome.__init__": {"tf": 1}, "howard.objects.hgvs.get_refseq_type": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse": {"tf": 1}, "howard.objects.transcript.Gene.__init__": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval.__init__": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.drop_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 29, "s": {"docs": {"howard.functions.commons.transcripts_file_to_df": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "h": {"docs": {"howard.functions.databases.databases_download_dbsnp": {"tf": 1}}, "df": 1}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}}, "df": 2, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.set_log_level": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}}, "df": 4}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.params_string_to_dict": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1.4142135623730951}}, "df": 3, "s": {"docs": {"howard.functions.commons.create_where_clause": {"tf": 1}, "howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.load_data": {"tf": 1}}, "df": 4}}}}}}, "l": {"docs": {"howard.functions.commons.params_string_to_dict": {"tf": 1.4142135623730951}}, "df": 1, "u": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.get_index": {"tf": 1}, "howard.functions.commons.extract_memory_in_go": {"tf": 1}, "howard.functions.commons.format_arg_help": {"tf": 1}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}}, "df": 6, "s": {"docs": {"howard.functions.commons.get_index": {"tf": 1}, "howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.commons.determine_column_number": {"tf": 1}}, "df": 3}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}}, "df": 1}}}}}}, "f": {"docs": {"howard.functions.commons.genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}}, "df": 2}}, "c": {"docs": {}, "df": 0, "f": {"docs": {"howard.functions.commons.identical": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.objects.variants.Variants.get_header": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1}}, "df": 12}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.database.Database.get_view": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 3}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.set_log_level": {"tf": 1.7320508075688772}, "howard.functions.commons.create_where_clause": {"tf": 1.4142135623730951}, "howard.functions.commons.command": {"tf": 1.4142135623730951}, "howard.functions.commons.find": {"tf": 1.7320508075688772}, "howard.functions.commons.find_all": {"tf": 1.4142135623730951}, "howard.functions.commons.find_genome": {"tf": 2}, "howard.functions.commons.find_file_prefix": {"tf": 2.23606797749979}, "howard.functions.commons.find_nomen": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 2}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_snpeff_ann": {"tf": 2}, "howard.functions.commons.get_file_format": {"tf": 1.4142135623730951}, "howard.functions.commons.genotype_compression": {"tf": 1.4142135623730951}, "howard.functions.commons.genotype_barcode": {"tf": 1.4142135623730951}, "howard.functions.commons.vaf_normalization": {"tf": 1.4142135623730951}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1.4142135623730951}, "howard.functions.commons.download_file": {"tf": 1.4142135623730951}, "howard.functions.commons.whereis_bin": {"tf": 1.4142135623730951}, "howard.functions.commons.get_bin": {"tf": 2.449489742783178}, "howard.functions.commons.get_bin_command": {"tf": 2.449489742783178}, "howard.functions.commons.get_tmp": {"tf": 1.4142135623730951}, "howard.functions.commons.get_memory": {"tf": 1}, "howard.functions.commons.extract_float_from_str": {"tf": 1}, "howard.functions.commons.extract_memory_in_go": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.compress_file": {"tf": 1.4142135623730951}, "howard.functions.commons.get_compression_type": {"tf": 1.4142135623730951}, "howard.functions.commons.get_file_compressed": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1.4142135623730951}, "howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1.4142135623730951}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.commons.genome_build_switch": {"tf": 1.4142135623730951}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.get_argument_gooey": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1.7320508075688772}, "howard.functions.commons.help_generation_from_dict": {"tf": 2.23606797749979}, "howard.functions.commons.help_generation_from_json": {"tf": 1.7320508075688772}, "howard.functions.commons.help_generation": {"tf": 1.4142135623730951}, "howard.functions.commons.format_arg_help": {"tf": 1.4142135623730951}, "howard.functions.commons.bed_sort": {"tf": 1.7320508075688772}, "howard.functions.commons.full_path": {"tf": 1.4142135623730951}, "howard.functions.commons.get_default_argument": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.get_random": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1.4142135623730951}, "howard.functions.commons.check_docker_image_exists": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1.7320508075688772}, "howard.functions.commons.determine_value_type": {"tf": 1.7320508075688772}, "howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.commons.detect_column_type": {"tf": 1}, "howard.functions.commons.determine_column_number": {"tf": 1}, "howard.functions.commons.clean_annotation_field": {"tf": 1.4142135623730951}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_annovar": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_refseq": {"tf": 2.23606797749979}, "howard.functions.databases.databases_format_refseq": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 2}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_exomiser": {"tf": 3.3166247903554}, "howard.functions.databases.databases_download_dbsnp": {"tf": 2.449489742783178}, "howard.functions.databases.databases_download_hgmd": {"tf": 2}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 3}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1.7320508075688772}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 2.23606797749979}, "howard.functions.from_extann.create_metaheader": {"tf": 1.4142135623730951}, "howard.functions.from_extann.read_json": {"tf": 1}, "howard.functions.from_extann.read_refgene": {"tf": 1}, "howard.functions.from_extann.metaheader_rows": {"tf": 2.449489742783178}, "howard.functions.from_extann.replace_values": {"tf": 1.4142135623730951}, "howard.functions.from_extann.extann_to_info": {"tf": 1}, "howard.functions.plugins.plugins_infos": {"tf": 1.4142135623730951}, "howard.functions.plugins.plugins_list": {"tf": 1.4142135623730951}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.functions.utils.create_refseq_table": {"tf": 1.7320508075688772}, "howard.functions.utils.get_refseq_table": {"tf": 1.7320508075688772}, "howard.functions.utils.get_transcript": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 2.449489742783178}, "howard.objects.database.Database.set_database": {"tf": 2}, "howard.objects.database.Database.read_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_length": {"tf": 1}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.find_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.query": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1.7320508075688772}, "howard.objects.database.Database.set_assembly": {"tf": 1}, "howard.objects.database.Database.get_assembly": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 2}, "howard.objects.database.Database.get_database": {"tf": 1}, "howard.objects.database.Database.get_database_basename": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_dirname": {"tf": 1.4142135623730951}, "howard.objects.database.Database.exists": {"tf": 1}, "howard.objects.database.Database.set_format": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_format": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_type": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_database_tables": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_table": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_needed_columns": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1.4142135623730951}, "howard.objects.database.Database.create_view": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_view": {"tf": 1.7320508075688772}, "howard.objects.database.Database.is_compressed": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 2}, "howard.objects.database.Database.map_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_columns": {"tf": 2}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_annotations": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1.7320508075688772}, "howard.objects.database.Database.is_vcf": {"tf": 1.4142135623730951}, "howard.objects.database.Database.is_genotype_column": {"tf": 1.4142135623730951}, "howard.objects.database.Database.export": {"tf": 2.8284271247461903}, "howard.objects.hgvs.get_refseq_type": {"tf": 1.4142135623730951}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 3.605551275463989}, "howard.objects.hgvs.HGVSName.parse": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.ordered_cdna_match": {"tf": 1}, "howard.objects.variants.Variants.__init__": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_input": {"tf": 1}, "howard.objects.variants.Variants.set_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.set_output": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.print_stats": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_input": {"tf": 1}, "howard.objects.variants.Variants.get_input_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_output": {"tf": 1}, "howard.objects.variants.Variants.get_output_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.get_prefix": {"tf": 1}, "howard.objects.variants.Variants.get_table_variants": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_tmp_dir": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_type": {"tf": 1}, "howard.objects.variants.Variants.get_header": {"tf": 1}, "howard.objects.variants.Variants.get_header_length": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_sql": {"tf": 1}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_format": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.load_data": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.drop_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.explode_infos": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}, "howard.objects.variants.Variants.execute_query": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 2}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_header": {"tf": 2}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.get_memory": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.update_from_vcf": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_config_default": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.prioritization": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_operations_help": {"tf": 1}, "howard.objects.variants.Variants.calculation": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.transcripts_export": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 2.449489742783178}}, "df": 214, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.load_args": {"tf": 1}}, "df": 1}}, "p": {"docs": {"howard.functions.commons.identical": {"tf": 1}}, "df": 1}, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.from_extann.replace_values": {"tf": 1}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval.__init__": {"tf": 1}, "howard.objects.variant.Position.__init__": {"tf": 1}, "howard.objects.variant.get_sequence": {"tf": 1}}, "df": 6}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.split_interval": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.genome.GenomeSubset.__init__": {"tf": 1}, "howard.objects.genome.MockGenome.get_seq": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.get_seq": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval.__init__": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}, "howard.objects.variant.Position.__init__": {"tf": 1}, "howard.objects.variant.get_sequence": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 1}, "howard.objects.variant.justify_genomic_indel": {"tf": 1}, "howard.objects.variant.normalize_variant": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}}, "df": 18}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.commons.split_interval": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "p": {"docs": {"howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.variant.Position.__init__": {"tf": 1}}, "df": 2}}}, "n": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {"howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1.4142135623730951}}, "df": 4}}}}, "v": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1}}, "df": 1, "s": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.load_data": {"tf": 1}}, "df": 4, "s": {"docs": {"howard.functions.commons.findbypipeline": {"tf": 1}, "howard.functions.commons.genotypeconcordance": {"tf": 1}, "howard.functions.commons.barcode": {"tf": 1}, "howard.functions.commons.trio": {"tf": 1}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.set_samples": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1.4142135623730951}}, "df": 8}}}}, "e": {"docs": {"howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.objects.variant.normalize_variant": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}}, "df": 3}}}, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.download_file": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.load_data": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}}, "df": 6}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}}, "df": 4}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.time_limit": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}}, "df": 2, "s": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.add_value_into_dict": {"tf": 1}}, "df": 2}}}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.commons.help_generation": {"tf": 1}}, "df": 1}}}, "p": {"docs": {"howard.functions.commons.params_string_to_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}}, "df": 3}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.from_extann.extann_to_info": {"tf": 1.4142135623730951}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1.4142135623730951}}, "df": 2}}}}, "l": {"docs": {}, "df": 0, "f": {"docs": {"howard.objects.cdna.CDNACoord.parse": {"tf": 1}, "howard.objects.database.Database.set_database": {"tf": 1}, "howard.objects.database.Database.set_databases_folders": {"tf": 1}, "howard.objects.database.Database.get_database_folders": {"tf": 1}, "howard.objects.database.Database.read_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_length": {"tf": 1}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.find_header_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.query": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.objects.database.Database.set_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.set_assembly": {"tf": 1}, "howard.objects.database.Database.get_assembly": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 1}, "howard.objects.database.Database.get_database": {"tf": 1}, "howard.objects.database.Database.get_database_basename": {"tf": 1}, "howard.objects.database.Database.get_database_dirname": {"tf": 1}, "howard.objects.database.Database.exists": {"tf": 1}, "howard.objects.database.Database.set_format": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.get_database_tables": {"tf": 1}, "howard.objects.database.Database.get_database_table": {"tf": 1}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1}, "howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.database.Database.get_view": {"tf": 1}, "howard.objects.database.Database.is_compressed": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.database.Database.map_columns": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1}, "howard.objects.database.Database.get_annotations": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.database.Database.get_conn": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.genome.MockGenome.get_seq": {"tf": 1}, "howard.objects.genome.MockGenome.read": {"tf": 1}, "howard.objects.genome.MockGenome.write": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.get_seq": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.transcript.Transcript.ordered_cdna_match": {"tf": 1}, "howard.objects.transcript.Transcript.get_cds_start_stop": {"tf": 1}, "howard.objects.transcript.Transcript.start_codon": {"tf": 1}, "howard.objects.transcript.Transcript.stop_codon": {"tf": 1}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 1}, "howard.objects.transcript.BED6Interval.distance": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variants.Variants.set_samples": {"tf": 1}, "howard.objects.variants.Variants.get_samples": {"tf": 1}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1}, "howard.objects.variants.Variants.set_input": {"tf": 1}, "howard.objects.variants.Variants.set_config": {"tf": 1}, "howard.objects.variants.Variants.set_param": {"tf": 1}, "howard.objects.variants.Variants.init_variables": {"tf": 1}, "howard.objects.variants.Variants.get_indexing": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_config": {"tf": 1}, "howard.objects.variants.Variants.get_duckdb_settings": {"tf": 1}, "howard.objects.variants.Variants.set_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.set_output": {"tf": 1}, "howard.objects.variants.Variants.set_header": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.get_overview": {"tf": 1}, "howard.objects.variants.Variants.get_stats": {"tf": 1}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1}, "howard.objects.variants.Variants.get_input": {"tf": 1}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1}, "howard.objects.variants.Variants.get_output": {"tf": 1}, "howard.objects.variants.Variants.get_output_format": {"tf": 1}, "howard.objects.variants.Variants.get_config": {"tf": 1}, "howard.objects.variants.Variants.get_param": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.get_prefix": {"tf": 1}, "howard.objects.variants.Variants.get_table_variants": {"tf": 1}, "howard.objects.variants.Variants.get_tmp_dir": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_type": {"tf": 1}, "howard.objects.variants.Variants.get_connexion": {"tf": 1}, "howard.objects.variants.Variants.close_connexion": {"tf": 1}, "howard.objects.variants.Variants.get_header": {"tf": 1}, "howard.objects.variants.Variants.get_header_infos_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_length": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_sql": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.get_verbose": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_format": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.load_data": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.drop_column": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}, "howard.objects.variants.Variants.create_indexes": {"tf": 1}, "howard.objects.variants.Variants.drop_indexes": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}, "howard.objects.variants.Variants.execute_query": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.run_commands": {"tf": 1}, "howard.objects.variants.Variants.get_threads": {"tf": 1}, "howard.objects.variants.Variants.get_memory": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1}, "howard.objects.variants.Variants.drop_variants_table": {"tf": 1}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1}, "howard.objects.variants.Variants.scan_databases": {"tf": 1}, "howard.objects.variants.Variants.annotation": {"tf": 1}, "howard.objects.variants.Variants.annotation_snpsift": {"tf": 1}, "howard.objects.variants.Variants.annotation_bcftools": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.annotation_snpeff": {"tf": 1}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 1}, "howard.objects.variants.Variants.annotation_parquet": {"tf": 1}, "howard.objects.variants.Variants.annotation_splice": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}, "howard.objects.variants.Variants.get_operations_help": {"tf": 1}, "howard.objects.variants.Variants.calculation": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}, "howard.objects.variants.Variants.calculation_variant_id": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_nomen": {"tf": 1}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_concordance": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1}, "howard.objects.variants.Variants.calculation_trio": {"tf": 1}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_export": {"tf": 1}, "howard.objects.variants.Variants.transcripts_export": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 189}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.variants.Variants.get_table_variants": {"tf": 1}}, "df": 1}}}}, "q": {"docs": {"howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.variant.revcomp": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1.4142135623730951}}, "df": 5, "i": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.genome.GenomeSubset.__init__": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.genome.MockSequence.__init__": {"tf": 1}, "howard.objects.variant.normalize_variant": {"tf": 1}}, "df": 2, "s": {"docs": {"howard.objects.variant.normalize_variant": {"tf": 1}}, "df": 1}}}}}}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}}, "df": 3}}}, "u": {"docs": {}, "df": 0, "b": {"docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 1}}, "df": 1, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.plugins.plugins_infos": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1}}, "df": 2}}}}}}}}, "q": {"docs": {}, "df": 0, "l": {"docs": {"howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 1}}, "df": 7}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.transcript.BED6Interval_base.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval.__init__": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.from_extann.get_longest_transcript": {"tf": 1}, "howard.functions.from_extann.get_all_transcript": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}}, "df": 5, "t": {"docs": {"howard.functions.commons.split_interval": {"tf": 2}, "howard.functions.commons.run_parallel_commands": {"tf": 1}, "howard.functions.commons.run_parallel_functions": {"tf": 1}, "howard.functions.commons.get_index": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1.4142135623730951}, "howard.functions.commons.get_threads": {"tf": 1}, "howard.functions.commons.extract_memory_in_go": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_into_infile": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_and_compress_files": {"tf": 2}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.get_random": {"tf": 1}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 2}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_hgmd": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.objects.database.Database.get_header_length": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 2}, "howard.objects.transcript.Transcript.__init__": {"tf": 2}, "howard.objects.transcript.Transcript.start_codon": {"tf": 1}, "howard.objects.transcript.Transcript.stop_codon": {"tf": 1}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 1.4142135623730951}, "howard.objects.transcript.BED6Interval.distance": {"tf": 1.4142135623730951}, "howard.objects.transcript.Exon.__init__": {"tf": 1.4142135623730951}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 2.23606797749979}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.get_header_length": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.load_data": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.run_commands": {"tf": 1}, "howard.objects.variants.Variants.get_threads": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_snpsift": {"tf": 1}, "howard.objects.variants.Variants.annotation_bcftools": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.annotation_snpeff": {"tf": 1}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 1}, "howard.objects.variants.Variants.annotation_parquet": {"tf": 1}, "howard.objects.variants.Variants.annotation_splice": {"tf": 1}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}}, "df": 56}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.compress_file": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.bed_sort": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.from_extann.create_metaheader": {"tf": 1}, "howard.functions.from_extann.replace_values": {"tf": 1}, "howard.objects.variants.Variants.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_input": {"tf": 1}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1}, "howard.objects.variants.Variants.load_data": {"tf": 1}}, "df": 15}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.4142135623730951}, "howard.objects.database.Database.find_column": {"tf": 1.4142135623730951}, "howard.objects.database.Database.map_columns": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 2}}, "df": 11, "s": {"docs": {"howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1}}, "df": 5}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.utils.read_refgene": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}}, "df": 2}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}}, "df": 5}, "l": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 1}, "howard.objects.variant.justify_genomic_indel": {"tf": 1}}, "df": 3, "s": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.objects.variant.normalize_variant": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}}, "df": 4}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 2.449489742783178}, "howard.functions.databases.databases_format_refseq": {"tf": 2.449489742783178}}, "df": 3}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1}}, "df": 4}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.check_docker_image_exists": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1.4142135623730951}, "howard.functions.from_extann.add_default_metaheader": {"tf": 1}, "howard.functions.from_extann.metaheader_rows": {"tf": 1}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 9}, "s": {"docs": {"howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.variant.Position.__init__": {"tf": 1}, "howard.objects.variant.get_sequence": {"tf": 1}}, "df": 4}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.split_interval": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.objects.genome.GenomeSubset.__init__": {"tf": 1}, "howard.objects.genome.MockGenome.get_seq": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.get_seq": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.transcript.BED6Interval_base.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval.__init__": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}, "howard.objects.variant.get_sequence": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 1}, "howard.objects.variant.justify_genomic_indel": {"tf": 1}}, "df": 12}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}}, "df": 3}}}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.variants.Variants.export_header": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.get_duckdb_extension_file": {"tf": 1}}, "df": 1, "s": {"docs": {"howard.functions.commons.load_duckdb_extension": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {"howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.from_extann.create_metaheader": {"tf": 1}, "howard.functions.from_extann.write_extann": {"tf": 1}, "howard.functions.from_extann.get_longest_transcript": {"tf": 1}, "howard.functions.from_extann.get_all_transcript": {"tf": 1}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}}, "df": 8}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.from_extann.create_metaheader": {"tf": 1}, "howard.functions.from_extann.write_extann": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 3.3166247903554}}, "df": 1}}}}}, "n": {"docs": {"howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}}, "df": 5, "s": {"docs": {"howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1}}, "df": 3}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.database.Database.export": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_output": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.database.Database.export": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"howard.tools.tools.PathType.__init__": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.merge_regions": {"tf": 1}, "howard.functions.commons.create_where_clause": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {"howard.functions.databases.databases_download_genomes": {"tf": 1}}, "df": 1}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.get_argument": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}}, "df": 6}}}, "m": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1.4142135623730951}}, "df": 1}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 2}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}}, "df": 3, "s": {"docs": {"howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.objects.variants.Variants.scan_databases": {"tf": 1}}, "df": 3}}}}}}, "f": {"2": {"docs": {"howard.objects.hgvs.HGVSName.__init__": {"tf": 1}}, "df": 1}, "docs": {"howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.variant.normalize_variant": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}}, "df": 9, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {"howard.functions.databases.databases_download_refseq": {"tf": 2.449489742783178}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.utils.create_refseq_table": {"tf": 1.7320508075688772}, "howard.functions.utils.get_refseq_table": {"tf": 1.7320508075688772}}, "df": 4}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.from_extann.read_refgene": {"tf": 1}, "howard.functions.from_extann.write_extann": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}, "howard.functions.utils.read_transcripts": {"tf": 1}}, "df": 4}}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}}, "df": 2}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.from_extann.extann_to_info": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.database.Database.get_header_file": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 3}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}}, "df": 3}}, "w": {"docs": {"howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "w": {"docs": {"howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}}, "df": 3}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.create_where_clause": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.extract_memory_in_go": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1.4142135623730951}}, "df": 8}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.get_argument": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.format_arg_help": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.from_extann.write_extann": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}}, "df": 4}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.from_annovar.from_annovar": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.tools.annotation.annotation": {"tf": 1}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}, "howard.tools.help.help": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}, "howard.tools.process.process": {"tf": 1}, "howard.tools.query.query": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}}, "df": 19}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}, "k": {"docs": {"howard.functions.commons.get_argument_to_mk": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.help_generation_from_json": {"tf": 1}}, "df": 2}}}}}}, "p": {"docs": {"howard.functions.databases.databases_download_dbsnp": {"tf": 1}}, "df": 1, "s": {"docs": {"howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}}, "df": 1}}, "x": {"docs": {"howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}}, "df": 2, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"howard.functions.from_extann.get_all_transcript": {"tf": 1}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}}, "df": 3}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {"howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}}, "df": 2}}}}}}}}, "t": {"docs": {"howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.create_where_clause": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.4142135623730951}, "howard.functions.utils.create_refseq_table": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.database.Database.map_columns": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.load_data": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.drop_column": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.transcripts_export": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 22, "s": {"docs": {"howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}}, "df": 2}}}}, "g": {"docs": {"howard.functions.commons.check_docker_image_exists": {"tf": 1}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1}}, "df": 4}}, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.run_parallel_commands": {"tf": 1}, "howard.functions.commons.run_parallel_functions": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.run_commands": {"tf": 1}, "howard.objects.variants.Variants.annotation_snpsift": {"tf": 1}, "howard.objects.variants.Variants.annotation_bcftools": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.annotation_snpeff": {"tf": 1}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 1}, "howard.objects.variants.Variants.annotation_parquet": {"tf": 1}, "howard.objects.variants.Variants.annotation_splice": {"tf": 1}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}}, "df": 30}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.from_extann.write_extann": {"tf": 1}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}, "howard.functions.utils.make_transcript": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.format_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.get_transcript": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1.4142135623730951}, "howard.objects.transcript.Exon.__init__": {"tf": 1.7320508075688772}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1.7320508075688772}}, "df": 26, "s": {"docs": {"howard.functions.commons.find_nomen": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.utils.get_transcript": {"tf": 1}, "howard.objects.variants.Variants.transcripts_export": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 2.449489742783178}}, "df": 12}}}}}}}}}, "y": {"docs": {"howard.functions.commons.download_file": {"tf": 1}}, "df": 1}, "u": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.download_file": {"tf": 1.4142135623730951}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 2.449489742783178}, "howard.functions.databases.databases_format_refseq": {"tf": 2.6457513110645907}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1.4142135623730951}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.format_hgvs_name": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variant.get_sequence": {"tf": 1}, "howard.objects.variant.normalize_variant": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}, "howard.tools.tools.PathType.__init__": {"tf": 1.4142135623730951}}, "df": 28}}, "e": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.add_value_into_dict": {"tf": 1}}, "df": 1}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.get_bin": {"tf": 1.4142135623730951}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation_from_json": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.from_extann.metaheader_rows": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1.4142135623730951}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.variants.Variants.get_header": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.tools.tools.PathType.__init__": {"tf": 1}}, "df": 22}}}, "o": {"docs": {"howard.functions.databases.databases_download_hgmd": {"tf": 1.4142135623730951}}, "df": 1, "o": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1}}, "df": 2}}, "c": {"docs": {"howard.functions.commons.help_generation_from_json": {"tf": 1}}, "df": 1}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.objects.variants.Variants.explode_infos": {"tf": 1}}, "df": 1}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.commons.get_tmp": {"tf": 1.4142135623730951}}, "df": 1}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.extract_float_from_str": {"tf": 1}, "howard.objects.cdna.CDNACoord.parse": {"tf": 1}}, "df": 2}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}}, "df": 2}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.help_generation_from_json": {"tf": 1}}, "df": 1}}}}, "x": {"docs": {"howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.transcript.Exon.__init__": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}}, "df": 3, "t": {"docs": {"howard.functions.databases.databases_download_refseq": {"tf": 1.7320508075688772}}, "df": 1}}, "s": {"docs": {}, "df": 0, "v": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}}, "df": 3}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.transcript.Transcript.get_cds_start_stop": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}}, "df": 7}}}}}, "c": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}}, "df": 3, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.command": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}}, "df": 2, "s": {"docs": {"howard.functions.commons.run_parallel_commands": {"tf": 1}, "howard.objects.variants.Variants.run_commands": {"tf": 1}}, "df": 2}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.concat_into_infile": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1.4142135623730951}, "howard.objects.database.Database.export": {"tf": 1}}, "df": 3}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"howard.objects.database.Database.export": {"tf": 1}}, "df": 1}}}}}}}}}}, "/": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.databases.databases_download_alphamissense": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.get_tmp": {"tf": 1}, "howard.functions.commons.get_threads": {"tf": 1}, "howard.functions.commons.get_memory": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.from_extann.create_metaheader": {"tf": 1}, "howard.functions.from_extann.replace_values": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.variants.Variants.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_config": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_operations_help": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation": {"tf": 1.4142135623730951}}, "df": 15}}}, "n": {"docs": {"howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1}, "howard.functions.commons.load_duckdb_extension": {"tf": 1}, "howard.functions.utils.create_refseq_table": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}}, "df": 8}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.databases.databases_download_genomes": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.help_generation_from_json": {"tf": 1}}, "df": 2}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}}, "df": 3}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1.4142135623730951}}, "df": 4}}}, "l": {"docs": {"howard.functions.from_extann.get_longest_transcript": {"tf": 1}, "howard.functions.from_extann.get_all_transcript": {"tf": 1}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}}, "df": 4, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.commons.detect_column_type": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.drop_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 2}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 14, "s": {"docs": {"howard.functions.databases.query_and_concatenate_columns": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.database.Database.map_columns": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.4142135623730951}}, "df": 10}}}}, "s": {"docs": {"howard.functions.from_extann.create_metaheader": {"tf": 1}, "howard.functions.from_extann.write_extann": {"tf": 1}}, "df": 2}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.from_extann.create_metaheader": {"tf": 1}, "howard.functions.from_extann.read_refgene": {"tf": 1}, "howard.functions.from_extann.extann_to_info": {"tf": 1}, "howard.functions.from_extann.get_longest_transcript": {"tf": 1}, "howard.functions.from_extann.get_all_transcript": {"tf": 1}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1.4142135623730951}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}}, "df": 9}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}}, "df": 2}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.cdna.CDNACoord.parse": {"tf": 1}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1}}, "df": 4}}}}, "d": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1.4142135623730951}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1.4142135623730951}}, "df": 7}}, "s": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}}, "df": 4}}, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {"howard.functions.commons.download_file": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}}, "df": 3, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.clean_annotation_field": {"tf": 1}}, "df": 1}}, "r": {"docs": {"howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}}, "df": 2, "m": {"docs": {"howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}}, "df": 2}, "o": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.genome.GenomeSubset.__init__": {"tf": 1}, "howard.objects.genome.MockGenome.get_seq": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.get_seq": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.__init__": {"tf": 1.7320508075688772}, "howard.objects.transcript.BED6Interval.__init__": {"tf": 1.7320508075688772}, "howard.objects.variant.Position.__init__": {"tf": 1.7320508075688772}, "howard.objects.variant.get_sequence": {"tf": 1}, "howard.objects.variant.justify_genomic_indel": {"tf": 1}, "howard.objects.variant.normalize_variant": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1}}, "df": 18}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"howard.objects.database.Database.get_type_from_columns": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1}}, "df": 3}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.params_string_to_dict": {"tf": 1}}, "df": 1}, "n": {"docs": {"howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 4}}}, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.get_table_variants": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.databases.databases_infos": {"tf": 1}, "howard.objects.variants.Variants.scan_databases": {"tf": 1}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}}, "df": 2}}}}}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 2}}, "df": 1}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 3}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.database.Database.get_view": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}}, "df": 3}}}}}}, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.example_function": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}}, "df": 3}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"howard.functions.commons.check_docker_image_exists": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.objects.variant.normalize_variant": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}}, "df": 4}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}}, "df": 3, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"howard.functions.commons.find": {"tf": 1}, "howard.functions.commons.find_all": {"tf": 1}, "howard.functions.commons.find_genome": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1.4142135623730951}, "howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.full_path": {"tf": 1}}, "df": 6}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.find_nomen": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.get_tmp": {"tf": 1}, "howard.functions.commons.get_threads": {"tf": 1}, "howard.functions.commons.get_memory": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.from_extann.write_extann": {"tf": 1}, "howard.objects.variants.Variants.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_param": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.transcripts_export": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 15, "s": {"docs": {"howard.functions.commons.params_string_to_dict": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.help_generation": {"tf": 1.4142135623730951}}, "df": 1}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.databases.query_and_concatenate_columns": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.scan_databases": {"tf": 1}}, "df": 9}}}}, "t": {"docs": {"howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}}, "df": 2}}}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.from_extann.create_metaheader": {"tf": 1}, "howard.functions.from_extann.read_refgene": {"tf": 1}, "howard.functions.from_extann.extann_to_info": {"tf": 1}, "howard.functions.from_extann.get_longest_transcript": {"tf": 1}, "howard.functions.from_extann.get_all_transcript": {"tf": 1}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1.4142135623730951}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}}, "df": 9}}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "f": {"docs": {"howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1}}, "df": 4}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}}, "df": 14, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.database.Database.map_columns": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.databases.databases_param": {"tf": 1}}, "df": 1}}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.databases.databases_download_genomes": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}}, "df": 5}}}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.variants.Variants.explode_infos": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1.7320508075688772}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1.7320508075688772}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.__init__": {"tf": 1.4142135623730951}}, "df": 4, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.transcript.Transcript.__init__": {"tf": 1.4142135623730951}, "howard.objects.transcript.Exon.__init__": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variant.get_sequence_from_position": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}}, "df": 6}}}}}}}, "y": {"docs": {"howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.from_annovar.from_annovar": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.tools.annotation.annotation": {"tf": 1}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}, "howard.tools.help.help": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}, "howard.tools.process.process": {"tf": 1}, "howard.tools.query.query": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}}, "df": 19, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"howard.objects.database.Database.export": {"tf": 1}}, "df": 1}}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1}}, "df": 1}}}}}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.plugins.plugins_infos": {"tf": 1.7320508075688772}, "howard.functions.plugins.plugins_list": {"tf": 2}, "howard.functions.plugins.plugins_to_load": {"tf": 1}}, "df": 3}}}}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"howard.objects.hgvs.HGVSName.__init__": {"tf": 1}}, "df": 1}}, "z": {"docs": {"howard.objects.variants.Variants.prioritization": {"tf": 1.4142135623730951}}, "df": 1}}, "g": {"docs": {"howard.functions.commons.extract_memory_in_go": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.find_genome": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.genome.ChromosomeSubset.__init__": {"tf": 1}, "howard.objects.genome.GenomeSubset.__init__": {"tf": 1}, "howard.objects.genome.MockChromosome.__init__": {"tf": 1}, "howard.objects.variant.get_sequence": {"tf": 1}, "howard.objects.variant.get_sequence_from_position": {"tf": 1}, "howard.objects.variant.justify_genomic_indel": {"tf": 1}, "howard.objects.variant.normalize_variant": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}}, "df": 22, "s": {"docs": {"howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}}, "df": 4}}, "i": {"docs": {}, "df": 0, "c": {"docs": {"howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.genotype_compression": {"tf": 1}, "howard.functions.commons.genotype_barcode": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1.4142135623730951}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}}, "df": 10, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 2}}, "df": 2}}}}}}, "t": {"docs": {"howard.functions.utils.parse_hgvs_name": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.find_nomen": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.get_argument": {"tf": 1}}, "df": 1}}, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.databases.databases_download_alphamissense": {"tf": 1}}, "df": 1}}}}}}}}, "v": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.databases.databases_download_dbsnp": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "t": {"docs": {"howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.from_annovar.from_annovar": {"tf": 1}, "howard.functions.from_extann.get_longest_transcript": {"tf": 1}, "howard.functions.from_extann.get_all_transcript": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.tools.annotation.annotation": {"tf": 1}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}, "howard.tools.help.help": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}, "howard.tools.process.process": {"tf": 1}, "howard.tools.query.query": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}}, "df": 23}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 1}}, "df": 1}}}}, "z": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1.4142135623730951}}, "df": 1}, "c": {"docs": {}, "df": 0, "f": {"docs": {"howard.functions.databases.databases_download_dbsnp": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "p": {"docs": {"howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.find_genome": {"tf": 1}, "howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.functions.commons.genome_build_switch": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.database.Database.set_database": {"tf": 1}, "howard.objects.database.Database.set_assembly": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 1}}, "df": 8}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}}, "df": 10}}}}}}}}, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"howard.functions.commons.download_file": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 5, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1.7320508075688772}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.4142135623730951}}, "df": 6, "s": {"docs": {"howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.databases.databases_download_annovar": {"tf": 1}}, "df": 1}}}}}, "y": {"docs": {"howard.functions.from_extann.get_longest_transcript": {"tf": 1}, "howard.functions.from_extann.get_all_transcript": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}}, "df": 3}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}}, "df": 8, "s": {"docs": {"howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.clean_annotation_field": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.databases.databases_download_alphamissense": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}}}}}, "t": {"docs": {"howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.variant.normalize_variant": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}}, "df": 9}}, "a": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1.4142135623730951}}, "df": 3}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {"howard.functions.commons.download_file": {"tf": 1.4142135623730951}}, "df": 1}}, "g": {"docs": {"howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.get_argument_gooey": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}}, "df": 3, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.get_default_argument": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1}}, "df": 3, "s": {"docs": {"howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.get_argument_gooey": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.get_default_argument": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1.4142135623730951}}, "df": 6}}}}}}, "s": {"docs": {"howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.load_config_args": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.from_annovar.from_annovar": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.tools.annotation.annotation": {"tf": 1}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}, "howard.tools.gui.gui": {"tf": 1}, "howard.tools.help.help": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}, "howard.tools.process.process": {"tf": 1}, "howard.tools.query.query": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}}, "df": 17}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.from_annovar.from_annovar": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.tools.annotation.annotation": {"tf": 1}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}, "howard.tools.help.help": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}, "howard.tools.process.process": {"tf": 1}, "howard.tools.query.query": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}}, "df": 15}}}}}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1}}, "df": 1}}}}}}}}}}}, "h": {"docs": {}, "df": 0, "g": {"1": {"9": {"docs": {"howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}}, "df": 5}, "docs": {}, "df": 0}, "3": {"8": {"docs": {"howard.functions.databases.databases_download_dbsnp": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.find_nomen": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1.4142135623730951}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1.4142135623730951}}, "df": 10}}, "m": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.databases.databases_download_hgmd": {"tf": 1.4142135623730951}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_extann.write_extann": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1.4142135623730951}, "howard.objects.database.Database.read_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_length": {"tf": 1}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.export": {"tf": 2}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_header": {"tf": 1.4142135623730951}}, "df": 26}}}}, "l": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.help_generation_from_json": {"tf": 1.4142135623730951}, "howard.functions.commons.format_arg_help": {"tf": 1}}, "df": 3}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "w": {"docs": {"howard.functions.databases.databases_download_annovar": {"tf": 1}}, "df": 1}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.databases.databases_download_alphamissense": {"tf": 1}}, "df": 1}}}}}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}, "f": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.databases.databases_download_dbsnp": {"tf": 1}}, "df": 1}}}}}}}}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.utils.get_transcript": {"tf": 1}, "howard.objects.transcript.Exon.__init__": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}}, "df": 3}}}}}, "d": {"docs": {}, "df": 0, "r": {"docs": {"howard.objects.variants.Variants.export_header": {"tf": 1}}, "df": 1}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.find_nomen": {"tf": 1}, "howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1.4142135623730951}, "howard.functions.commons.get_tmp": {"tf": 1.4142135623730951}, "howard.functions.commons.get_threads": {"tf": 1.4142135623730951}, "howard.functions.commons.get_memory": {"tf": 1.4142135623730951}, "howard.functions.commons.get_argument": {"tf": 1.4142135623730951}, "howard.functions.commons.get_argument_gooey": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation": {"tf": 1.4142135623730951}, "howard.functions.commons.get_default_argument": {"tf": 1.4142135623730951}, "howard.functions.commons.set_param": {"tf": 2}, "howard.functions.commons.add_value_into_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 2.23606797749979}, "howard.functions.commons.params_string_to_dict": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_infos": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_param": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.functions.from_extann.create_metaheader": {"tf": 1}, "howard.functions.from_extann.read_json": {"tf": 1}, "howard.functions.from_extann.replace_values": {"tf": 1}, "howard.functions.plugins.plugins_infos": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1.4142135623730951}, "howard.functions.plugins.plugins_to_load": {"tf": 1.7320508075688772}, "howard.functions.utils.get_transcript": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1}, "howard.objects.database.Database.map_columns": {"tf": 1}, "howard.objects.variants.Variants.__init__": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_config": {"tf": 1}, "howard.objects.variants.Variants.set_param": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_config": {"tf": 1}, "howard.objects.variants.Variants.get_duckdb_settings": {"tf": 1}, "howard.objects.variants.Variants.get_stats": {"tf": 1}, "howard.objects.variants.Variants.get_config": {"tf": 1}, "howard.objects.variants.Variants.get_param": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.drop_column": {"tf": 1}, "howard.objects.variants.Variants.scan_databases": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.get_operations_help": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}, "howard.objects.variants.Variants.transcripts_export": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 58}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}}, "df": 3}}}}}}, "r": {"docs": {"howard.functions.plugins.plugins_infos": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1}}, "df": 2}}, "f": {"docs": {"howard.functions.commons.findbypipeline": {"tf": 1}, "howard.functions.commons.genotypeconcordance": {"tf": 1}, "howard.functions.commons.barcode": {"tf": 1}, "howard.functions.commons.trio": {"tf": 1}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.from_extann.create_metaheader": {"tf": 1}, "howard.functions.from_extann.write_extann": {"tf": 1.7320508075688772}, "howard.functions.from_extann.get_longest_transcript": {"tf": 1}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1.4142135623730951}}, "df": 10}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.download_file": {"tf": 1}}, "df": 1}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.databases.databases_param": {"tf": 1}, "howard.functions.from_extann.metaheader_rows": {"tf": 1}}, "df": 2}}}}}}}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.get_tmp": {"tf": 1}, "howard.functions.commons.extract_memory_in_go": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.format_arg_help": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.get_threads": {"tf": 1}, "howard.objects.variants.Variants.get_memory": {"tf": 1}}, "df": 13}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"3": {"docs": {"howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.from_annovar.from_annovar": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.tools.annotation.annotation": {"tf": 1}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}, "howard.tools.help.help": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}, "howard.tools.process.process": {"tf": 1}, "howard.tools.query.query": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}}, "df": 19}, "docs": {}, "df": 0}}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}}, "df": 3}}}}}}, "n": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.download_file": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "b": {"docs": {"howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1.4142135623730951}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1.4142135623730951}, "howard.functions.commons.load_duckdb_extension": {"tf": 1.7320508075688772}}, "df": 3, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1}, "howard.functions.commons.load_duckdb_extension": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}, "p": {"docs": {"howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.get_duckdb_extension_file": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.database.Database.is_genotype_column": {"tf": 1}}, "df": 1}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}}, "df": 1, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.from_extann.create_metaheader": {"tf": 1}, "howard.functions.from_extann.read_refgene": {"tf": 1}, "howard.functions.from_extann.get_longest_transcript": {"tf": 1}, "howard.functions.from_extann.get_all_transcript": {"tf": 1}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1.4142135623730951}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}}, "df": 8}}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.databases.databases_infos": {"tf": 1.7320508075688772}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.database.Database.set_database": {"tf": 1}, "howard.objects.database.Database.find_header_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_basename": {"tf": 1}, "howard.objects.database.Database.get_database_dirname": {"tf": 1}, "howard.objects.database.Database.exists": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.get_database_tables": {"tf": 1}, "howard.objects.database.Database.get_database_table": {"tf": 1}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_needed_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1}, "howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.database.Database.get_view": {"tf": 1}, "howard.objects.database.Database.is_compressed": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1.4142135623730951}, "howard.objects.database.Database.map_columns": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1}, "howard.objects.database.Database.get_annotations": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.scan_databases": {"tf": 1.4142135623730951}}, "df": 37, "s": {"docs": {"howard.functions.databases.databases_param": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.database.Database.set_database": {"tf": 1}, "howard.objects.database.Database.set_databases_folders": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 1}}, "df": 6}}}}}}}, "s": {"docs": {}, "df": 0, "h": {"docs": {"howard.tools.tools.PathType.__init__": {"tf": 1}}, "df": 1}}}, "b": {"docs": {"howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}}, "df": 2, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 1.7320508075688772}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.databases.databases_download_dbsnp": {"tf": 3.1622776601683795}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"howard.objects.variants.Variants.load_data": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}}, "df": 3}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 5}}}}}, "t": {"docs": {"howard.functions.commons.extract_memory_in_go": {"tf": 1}}, "df": 1}, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.database.Database.get_database_tables": {"tf": 1}}, "df": 1}}}, "k": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}}, "df": 2}}}}}}, "r": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.download_file": {"tf": 1}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.7320508075688772}}, "df": 7}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 2.23606797749979}, "howard.objects.hgvs.HGVSName.format": {"tf": 2.23606797749979}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 2}}, "df": 4, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1}}, "df": 2}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1}}, "df": 1}}}}}}}, "d": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.databases.databases_download_dbsnp": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.from_annovar.from_annovar": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.tools.annotation.annotation": {"tf": 1}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}, "howard.tools.help.help": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}, "howard.tools.process.process": {"tf": 1}, "howard.tools.query.query": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}}, "df": 19}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {"howard.functions.databases.databases_download_genomes": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.databases.databases_download_refseq": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_format_refseq": {"tf": 1.4142135623730951}}, "df": 2}}}, "b": {"1": {"5": {"6": {"docs": {"howard.functions.databases.databases_download_dbsnp": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1.7320508075688772}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.compress_file": {"tf": 1}, "howard.functions.commons.get_file_compressed": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1.7320508075688772}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1}, "howard.functions.commons.load_duckdb_extension": {"tf": 1}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.7320508075688772}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1.4142135623730951}, "howard.functions.commons.check_docker_image_exists": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 2.449489742783178}, "howard.functions.databases.databases_format_refseq": {"tf": 3}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 2.8284271247461903}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_hgmd": {"tf": 1.7320508075688772}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.exists": {"tf": 1}, "howard.objects.database.Database.is_compressed": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1.4142135623730951}, "howard.objects.database.Database.export": {"tf": 2.23606797749979}, "howard.objects.hgvs.HGVSName.format": {"tf": 2.23606797749979}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 2.23606797749979}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variants.Variants.__init__": {"tf": 1}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1}, "howard.objects.variants.Variants.get_indexing": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.get_verbose": {"tf": 1}, "howard.objects.variants.Variants.load_data": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.drop_column": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.export_output": {"tf": 2}, "howard.objects.variants.Variants.export_header": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 2}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.transcripts_export": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 67}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}}, "df": 3}}}}}, "n": {"docs": {"howard.functions.commons.whereis_bin": {"tf": 1}, "howard.functions.commons.get_bin": {"tf": 2}, "howard.functions.commons.get_bin_command": {"tf": 1.7320508075688772}}, "df": 3}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}}, "df": 2}}}}, "g": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.identical": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "f": {"docs": {"howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.databases.databases_param": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.objects.variant.normalize_variant": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}}, "df": 3, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.databases.databases_download_hgmd": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.calculation_barcode": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.from_extann.get_longest_transcript": {"tf": 1}, "howard.functions.from_extann.get_all_transcript": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}}, "df": 3}}}}, "y": {"docs": {"howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}}, "df": 2}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.compress_file": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.bed_sort": {"tf": 1}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.from_extann.write_extann": {"tf": 1}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_output": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1}, "howard.objects.variants.Variants.get_output_format": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_header": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1.4142135623730951}}, "df": 27}}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.objects.database.Database.find_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 1}, "howard.objects.database.Database.get_database_basename": {"tf": 1}, "howard.objects.database.Database.get_database_dirname": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.get_database_table": {"tf": 1}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}, "howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.database.Database.get_view": {"tf": 1}}, "df": 11}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.databases.databases_download_annovar": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.variants.Variants.calculation_process_sql": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1.4142135623730951}}, "df": 2, "s": {"docs": {"howard.objects.variants.Variants.get_operations_help": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation": {"tf": 1.7320508075688772}}, "df": 2}}}}}}}}}, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.format_arg_help": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.query": {"tf": 1}, "howard.objects.database.Database.get_annotations": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}}, "df": 11, "s": {"docs": {"howard.functions.utils.get_transcript": {"tf": 1}, "howard.objects.transcript.Exon.__init__": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}}, "df": 3}}}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.databases.databases_download_annovar": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1}}, "df": 1}}}}}}}}, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}}, "df": 2}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 1}, "howard.objects.transcript.BED6Interval.distance": {"tf": 1}, "howard.objects.variant.normalize_variant": {"tf": 1}}, "df": 10}}}}}, "k": {"docs": {"howard.tools.tools.PathType.__init__": {"tf": 1}}, "df": 1}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.download_file": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.query": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.execute_query": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}}, "df": 14}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}}, "df": 1}}}}}, "j": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.utils.make_transcript": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1.4142135623730951}}, "df": 5}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"howard.objects.variant.justify_indel": {"tf": 1}, "howard.objects.variant.justify_genomic_indel": {"tf": 1}, "howard.objects.variant.normalize_variant": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}}, "df": 4}}}}}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.hgvs.HGVSName.__init__": {"tf": 1}}, "df": 1}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.gui.gui": {"tf": 1}}, "df": 1}}}}}}}}, "bases": {"root": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.TimeoutException": {"tf": 1}, "howard.objects.genome.MockGenomeError": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName": {"tf": 1}, "howard.objects.transcript.BED6Interval_base": {"tf": 1}}, "df": 4}}}}}}}, "e": {"docs": {}, "df": 0, "d": {"6": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.objects.transcript.BED6Interval": {"tf": 1}}, "df": 1}}}}}}}}}, "docs": {}, "df": 0}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.transcript.BED6Interval": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.TimeoutException": {"tf": 1}, "howard.objects.genome.MockGenomeError": {"tf": 1}}, "df": 2}}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.transcript.CDNA_Match": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.genome.MockGenomeTestFile": {"tf": 1}}, "df": 1}}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"howard.objects.hgvs.InvalidHGVSName": {"tf": 1}}, "df": 1}}}}}}}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.transcript.BED6Interval_base": {"tf": 1}}, "df": 1}}}}}}}, "doc": {"root": {"0": {"0": {"0": {"0": {"0": {"1": {"4": {"0": {"5": {"docs": {"howard.functions.databases.databases_download_dbsnp": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "1": {"1": {"5": {"6": {"docs": {"howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "3": {"6": {"3": {"docs": {"howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "1": {"0": {"0": {"5": {"5": {"docs": {"howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "1": {"3": {"0": {"4": {"docs": {"howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "7": {"2": {"9": {"4": {"docs": {"howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"howard.functions.commons.genotype_barcode": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1.4142135623730951}, "howard.functions.commons.bed_sort": {"tf": 1}, "howard.functions.from_extann.metaheader_rows": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.genome.MockGenome.get_seq": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.get_seq": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.7320508075688772}, "howard.objects.transcript.BED6Interval_base.chrom": {"tf": 1}, "howard.objects.variant.get_sequence": {"tf": 1}, "howard.objects.variant.get_sequence_from_position": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 1}, "howard.objects.variant.justify_genomic_indel": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 16, "/": {"0": {"docs": {"howard.functions.commons.findbypipeline": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "s": {"docs": {"howard.functions.commons.genotype_compression": {"tf": 1}}, "df": 1}}, "1": {"0": {"0": {"0": {"0": {"0": {"0": {"docs": {"howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1.4142135623730951}}, "df": 2}, "docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "1": {"0": {"0": {"docs": {"howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1}}, "df": 3, "a": {"docs": {}, "df": 0, ">": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1}}, "df": 3}}}}, "2": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1}}, "df": 3}}}}}}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 1.4142135623730951}}, "df": 4}, "1": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 1}}, "df": 3}}}}}}}, "3": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 1}}, "df": 3}}}}}}}, "docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 1}}, "df": 1}, "1": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, ">": {"docs": {}, "df": 0, "c": {"docs": {"howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 1}}, "df": 3}}}}, "docs": {"howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.get_random": {"tf": 1.7320508075688772}}, "df": 2, "^": {"6": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}, "1": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, ">": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.cdna.CDNACoord": {"tf": 1}}, "df": 1}}}}, "docs": {"howard.functions.commons.get_index": {"tf": 1.4142135623730951}, "howard.functions.commons.genotype_barcode": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1.4142135623730951}, "howard.functions.commons.download_file": {"tf": 2}, "howard.functions.commons.extract_memory_in_go": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_and_compress_files": {"tf": 1.7320508075688772}, "howard.functions.commons.duckdb_execute": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.7320508075688772}, "howard.functions.commons.bed_sort": {"tf": 1}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_refseq": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.from_extann.metaheader_rows": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1.4142135623730951}, "howard.objects.transcript.BED6Interval_base.chrom_start": {"tf": 1}, "howard.objects.transcript.CDNA_Match.length": {"tf": 1.4142135623730951}, "howard.objects.variant.normalize_variant": {"tf": 1}, "howard.objects.variants.Variants.get_header_length": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.run_commands": {"tf": 1}, "howard.objects.variants.Variants.get_threads": {"tf": 1.4142135623730951}}, "df": 28, "g": {"docs": {"howard.functions.commons.extract_memory_in_go": {"tf": 1}}, "df": 1}, "b": {"docs": {}, "df": 0, "p": {"docs": {"howard.objects.hgvs": {"tf": 2.8284271247461903}}, "df": 1}}}, "2": {"0": {"4": {"8": {"0": {"docs": {"howard.objects.variants.Variants.load_data": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "1": {"2": {"docs": {"howard.objects.cdna.CDNACoord": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {"howard.functions.commons.genotype_barcode": {"tf": 1}, "howard.functions.commons.bed_sort": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom_end": {"tf": 1}}, "df": 4, "k": {"docs": {"howard.functions.commons.extract_memory_in_go": {"tf": 1}}, "df": 1}, "g": {"docs": {"howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, ">": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.cdna.CDNACoord": {"tf": 1.4142135623730951}}, "df": 1}}}}, "3": {"0": {"1": {"docs": {"howard.objects.cdna.CDNACoord": {"tf": 1}}, "df": 1}, "docs": {"howard.functions.utils.parse_hgvs_name": {"tf": 1}}, "df": 1, "+": {"4": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, ">": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.cdna.CDNACoord": {"tf": 1}}, "df": 1}}}}, "docs": {}, "df": 0}}, "4": {"2": {"8": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 1}}, "df": 3}}}}}}}}}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"howard.functions.commons.find_all": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 2.23606797749979}, "howard.functions.databases.databases_format_refseq": {"tf": 2}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.cdna.CDNACoord": {"tf": 2.23606797749979}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.name": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}}, "df": 11, "p": {"docs": {"howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}}, "df": 1}}, "4": {"5": {"docs": {}, "df": 0, "+": {"4": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, ">": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.cdna.CDNACoord": {"tf": 1}}, "df": 1}}}}, "docs": {}, "df": 0}}, "docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 1.4142135623730951}, "howard.functions.from_extann.metaheader_rows": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.score": {"tf": 1}}, "df": 5, "a": {"docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 1.4142135623730951}}, "df": 1, ">": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.cdna.CDNACoord": {"tf": 1}}, "df": 1}}}}, "5": {"1": {"2": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.commons.extract_memory_in_go": {"tf": 1}}, "df": 1}}, "docs": {}, "df": 0}, "docs": {"howard.functions.databases.databases_download_refseq": {"tf": 2}, "howard.functions.databases.databases_format_refseq": {"tf": 2.23606797749979}, "howard.objects.cdna.CDNACoord": {"tf": 2.23606797749979}, "howard.objects.transcript.BED6Interval_base.strand": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}}, "df": 5, "p": {"docs": {"howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}}, "df": 1}}, "6": {"docs": {"howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1.4142135623730951}}, "df": 3, "a": {"docs": {}, "df": 0, ">": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.cdna.CDNACoord": {"tf": 1}}, "df": 1}}}}, "7": {"6": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, ">": {"docs": {}, "df": 0, "u": {"docs": {"howard.objects.hgvs": {"tf": 1}}, "df": 1}}}}, "docs": {}, "df": 0}, "8": {"0": {"docs": {"howard.functions.commons.get_memory": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "9": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {"howard": {"tf": 1.7320508075688772}, "howard.functions": {"tf": 1.7320508075688772}, "howard.functions.commons": {"tf": 1.7320508075688772}, "howard.functions.commons.file_folder": {"tf": 1.7320508075688772}, "howard.functions.commons.subfolder_plugins": {"tf": 1.7320508075688772}, "howard.functions.commons.folder_main": {"tf": 1.7320508075688772}, "howard.functions.commons.folder_config": {"tf": 1.7320508075688772}, "howard.functions.commons.folder_user_home": {"tf": 1.7320508075688772}, "howard.functions.commons.folder_howard_home": {"tf": 1.7320508075688772}, "howard.functions.commons.folder_plugins": {"tf": 1.7320508075688772}, "howard.functions.commons.comparison_map": {"tf": 1.7320508075688772}, "howard.functions.commons.code_type_map": {"tf": 1.7320508075688772}, "howard.functions.commons.code_type_map_to_sql": {"tf": 1.7320508075688772}, "howard.functions.commons.file_format_delimiters": {"tf": 1.7320508075688772}, "howard.functions.commons.file_format_allowed": {"tf": 1.7320508075688772}, "howard.functions.commons.file_compressed_format": {"tf": 1.7320508075688772}, "howard.functions.commons.vcf_required_release": {"tf": 1.7320508075688772}, "howard.functions.commons.vcf_required_columns": {"tf": 1.7320508075688772}, "howard.functions.commons.vcf_required": {"tf": 1.7320508075688772}, "howard.functions.commons.DEFAULT_TOOLS_FOLDER": {"tf": 1.7320508075688772}, "howard.functions.commons.DEFAULT_TOOLS_BIN": {"tf": 1.7320508075688772}, "howard.functions.commons.DEFAULT_ANNOVAR_URL": {"tf": 1.7320508075688772}, "howard.functions.commons.DEFAULT_REFSEQ_URL": {"tf": 1.7320508075688772}, "howard.functions.commons.DEFAULT_DBNSFP_URL": {"tf": 1.7320508075688772}, "howard.functions.commons.DEFAULT_EXOMISER_URL": {"tf": 1.7320508075688772}, "howard.functions.commons.DEFAULT_EXOMISER_REMM_URL": {"tf": 1.7320508075688772}, "howard.functions.commons.DEFAULT_EXOMISER_CADD_URL": {"tf": 1.7320508075688772}, "howard.functions.commons.DEFAULT_ALPHAMISSENSE_URL": {"tf": 1.7320508075688772}, "howard.functions.commons.DEFAULT_DBSNP_URL": {"tf": 1.7320508075688772}, "howard.functions.commons.DEFAULT_DATABASE_FOLDER": {"tf": 1.7320508075688772}, "howard.functions.commons.DEFAULT_ANNOTATIONS_FOLDER": {"tf": 1.7320508075688772}, "howard.functions.commons.DEFAULT_GENOME_FOLDER": {"tf": 1.7320508075688772}, "howard.functions.commons.DEFAULT_SNPEFF_FOLDER": {"tf": 1.7320508075688772}, "howard.functions.commons.DEFAULT_ANNOVAR_FOLDER": {"tf": 1.7320508075688772}, "howard.functions.commons.DEFAULT_REFSEQ_FOLDER": {"tf": 1.7320508075688772}, "howard.functions.commons.DEFAULT_DBNSFP_FOLDER": {"tf": 1.7320508075688772}, "howard.functions.commons.DEFAULT_EXOMISER_FOLDER": {"tf": 1.7320508075688772}, "howard.functions.commons.DEFAULT_DBSNP_FOLDER": {"tf": 1.7320508075688772}, "howard.functions.commons.DEFAULT_SPLICE_FOLDER": {"tf": 1.7320508075688772}, "howard.functions.commons.DEFAULT_SPLICEAI_FOLDER": {"tf": 1.7320508075688772}, "howard.functions.commons.DEFAULT_SPIP_FOLDER": {"tf": 1.7320508075688772}, "howard.functions.commons.DEFAULT_DATA_FOLDER": {"tf": 1.7320508075688772}, "howard.functions.commons.DEFAULT_ASSEMBLY": {"tf": 1.7320508075688772}, "howard.functions.commons.DUCKDB_EXTENSION": {"tf": 1.7320508075688772}, "howard.functions.commons.MACHIN_LIST": {"tf": 1.7320508075688772}, "howard.functions.commons.BCFTOOLS_FORMAT": {"tf": 1.7320508075688772}, "howard.functions.commons.LOG_FORMAT": {"tf": 1.7320508075688772}, "howard.functions.commons.CODE_TYPE_MAP": {"tf": 1.7320508075688772}, "howard.functions.commons.GENOTYPE_MAP": {"tf": 1.7320508075688772}, "howard.functions.commons.DTYPE_LIMIT_AUTO": {"tf": 1.7320508075688772}, "howard.functions.commons.DEFAULT_CHUNK_SIZE": {"tf": 1.7320508075688772}, "howard.functions.commons.remove_if_exists": {"tf": 3.605551275463989}, "howard.functions.commons.set_log_level": {"tf": 3.4641016151377544}, "howard.functions.commons.split_interval": {"tf": 5.744562646538029}, "howard.functions.commons.merge_regions": {"tf": 4.58257569495584}, "howard.functions.commons.create_where_clause": {"tf": 5.0990195135927845}, "howard.functions.commons.command": {"tf": 4.58257569495584}, "howard.functions.commons.run_parallel_commands": {"tf": 5}, "howard.functions.commons.run_parallel_functions": {"tf": 5}, "howard.functions.commons.example_function": {"tf": 5.0990195135927845}, "howard.functions.commons.find": {"tf": 5}, "howard.functions.commons.find_all": {"tf": 5.385164807134504}, "howard.functions.commons.find_genome": {"tf": 6.164414002968976}, "howard.functions.commons.find_file_prefix": {"tf": 5.830951894845301}, "howard.functions.commons.find_nomen": {"tf": 5.744562646538029}, "howard.functions.commons.explode_annotation_format": {"tf": 8.306623862918075}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 5.291502622129181}, "howard.functions.commons.explode_snpeff_ann": {"tf": 8.426149773176359}, "howard.functions.commons.get_index": {"tf": 6}, "howard.functions.commons.get_file_format": {"tf": 4.58257569495584}, "howard.functions.commons.findbypipeline": {"tf": 5.477225575051661}, "howard.functions.commons.genotypeconcordance": {"tf": 5.0990195135927845}, "howard.functions.commons.genotype_compression": {"tf": 4.898979485566356}, "howard.functions.commons.genotype_barcode": {"tf": 5}, "howard.functions.commons.barcode": {"tf": 5.656854249492381}, "howard.functions.commons.trio": {"tf": 5.385164807134504}, "howard.functions.commons.vaf_normalization": {"tf": 5.0990195135927845}, "howard.functions.commons.genotype_stats": {"tf": 5.477225575051661}, "howard.functions.commons.extract_file": {"tf": 5.385164807134504}, "howard.functions.commons.download_file": {"tf": 8.774964387392123}, "howard.functions.commons.whereis_bin": {"tf": 1.7320508075688772}, "howard.functions.commons.get_bin": {"tf": 7.615773105863909}, "howard.functions.commons.get_bin_command": {"tf": 9.1104335791443}, "howard.functions.commons.get_tmp": {"tf": 8.18535277187245}, "howard.functions.commons.get_threads": {"tf": 6.164414002968976}, "howard.functions.commons.get_memory": {"tf": 6.6332495807108}, "howard.functions.commons.extract_float_from_str": {"tf": 5.477225575051661}, "howard.functions.commons.extract_memory_in_go": {"tf": 6.082762530298219}, "howard.functions.commons.concat_file": {"tf": 5.744562646538029}, "howard.functions.commons.compress_file": {"tf": 4.123105625617661}, "howard.functions.commons.get_compression_type": {"tf": 5.477225575051661}, "howard.functions.commons.get_file_compressed": {"tf": 4.58257569495584}, "howard.functions.commons.concat_into_infile": {"tf": 7.14142842854285}, "howard.functions.commons.concat_and_compress_files": {"tf": 9.273618495495704}, "howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 5.477225575051661}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 5.196152422706632}, "howard.functions.commons.load_duckdb_extension": {"tf": 5.0990195135927845}, "howard.functions.commons.TimeoutException": {"tf": 1.7320508075688772}, "howard.functions.commons.time_limit": {"tf": 1.7320508075688772}, "howard.functions.commons.duckdb_execute": {"tf": 6}, "howard.functions.commons.genome_build_switch": {"tf": 5.291502622129181}, "howard.functions.commons.get_argument": {"tf": 7.14142842854285}, "howard.functions.commons.get_argument_gooey": {"tf": 5.656854249492381}, "howard.functions.commons.get_argument_to_mk": {"tf": 6.708203932499369}, "howard.functions.commons.help_generation_from_dict": {"tf": 10.677078252031311}, "howard.functions.commons.help_generation_from_json": {"tf": 8.06225774829855}, "howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"tf": 2.449489742783178}, "howard.functions.commons.help_generation": {"tf": 7.280109889280518}, "howard.functions.commons.format_arg_help": {"tf": 6}, "howard.functions.commons.bed_sort": {"tf": 4.795831523312719}, "howard.functions.commons.full_path": {"tf": 6.164414002968976}, "howard.functions.commons.get_default_argument": {"tf": 5.744562646538029}, "howard.functions.commons.set_param": {"tf": 8.717797887081348}, "howard.functions.commons.add_value_into_dict": {"tf": 7}, "howard.functions.commons.load_param": {"tf": 5.477225575051661}, "howard.functions.commons.load_config_args": {"tf": 6.324555320336759}, "howard.functions.commons.load_args": {"tf": 9.38083151964686}, "howard.functions.commons.get_random": {"tf": 5.477225575051661}, "howard.functions.commons.transcripts_file_to_df": {"tf": 5.830951894845301}, "howard.functions.commons.identical": {"tf": 7.54983443527075}, "howard.functions.commons.check_docker_image_exists": {"tf": 4.69041575982343}, "howard.functions.commons.params_string_to_dict": {"tf": 9.219544457292887}, "howard.functions.commons.determine_value_type": {"tf": 8}, "howard.functions.commons.determine_column_types": {"tf": 4.898979485566356}, "howard.functions.commons.detect_column_type": {"tf": 5.291502622129181}, "howard.functions.commons.determine_column_number": {"tf": 1.7320508075688772}, "howard.functions.commons.clean_annotation_field": {"tf": 6.6332495807108}, "howard.functions.databases": {"tf": 1.7320508075688772}, "howard.functions.databases.generate_databases_param": {"tf": 6.324555320336759}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 4.58257569495584}, "howard.functions.databases.databases_infos": {"tf": 7.0710678118654755}, "howard.functions.databases.databases_param": {"tf": 7.211102550927978}, "howard.functions.databases.databases_download_annovar": {"tf": 5.916079783099616}, "howard.functions.databases.databases_download_snpeff": {"tf": 5.916079783099616}, "howard.functions.databases.databases_download_genomes": {"tf": 6.164414002968976}, "howard.functions.databases.databases_download_refseq": {"tf": 11.575836902790225}, "howard.functions.databases.databases_format_refseq": {"tf": 10.862780491200215}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 12.206555615733702}, "howard.functions.databases.databases_download_alphamissense": {"tf": 7.0710678118654755}, "howard.functions.databases.databases_download_exomiser": {"tf": 9.899494936611665}, "howard.functions.databases.databases_download_dbsnp": {"tf": 9}, "howard.functions.databases.databases_download_hgmd": {"tf": 9.16515138991168}, "howard.functions.from_annovar": {"tf": 1.7320508075688772}, "howard.functions.from_annovar.TYPES": {"tf": 1.7320508075688772}, "howard.functions.from_annovar.from_annovar": {"tf": 3.872983346207417}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 8}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 6}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 7.0710678118654755}, "howard.functions.from_extann": {"tf": 1.7320508075688772}, "howard.functions.from_extann.create_metaheader": {"tf": 1.4142135623730951}, "howard.functions.from_extann.add_default_metaheader": {"tf": 1.7320508075688772}, "howard.functions.from_extann.read_json": {"tf": 1.4142135623730951}, "howard.functions.from_extann.read_refgene": {"tf": 1.7320508075688772}, "howard.functions.from_extann.metaheader_rows": {"tf": 2.8284271247461903}, "howard.functions.from_extann.replace_values": {"tf": 1.7320508075688772}, "howard.functions.from_extann.write_extann": {"tf": 1.4142135623730951}, "howard.functions.from_extann.extann_to_info": {"tf": 1.4142135623730951}, "howard.functions.from_extann.get_longest_transcript": {"tf": 2.23606797749979}, "howard.functions.from_extann.get_all_transcript": {"tf": 1.4142135623730951}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1.7320508075688772}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1.4142135623730951}, "howard.functions.from_extann.from_extann": {"tf": 4}, "howard.functions.plugins": {"tf": 1.7320508075688772}, "howard.functions.plugins.plugins_infos": {"tf": 6.324555320336759}, "howard.functions.plugins.plugins_list": {"tf": 7.3484692283495345}, "howard.functions.plugins.plugins_to_load": {"tf": 5.477225575051661}, "howard.functions.utils": {"tf": 1.7320508075688772}, "howard.functions.utils.read_refgene": {"tf": 5.744562646538029}, "howard.functions.utils.read_genepred": {"tf": 8.54400374531753}, "howard.functions.utils.make_transcript": {"tf": 5.0990195135927845}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 6.4031242374328485}, "howard.functions.utils.read_transcripts": {"tf": 5.291502622129181}, "howard.functions.utils.get_genomic_sequence": {"tf": 6.324555320336759}, "howard.functions.utils.get_vcf_allele": {"tf": 6.4031242374328485}, "howard.functions.utils.get_alt_from_sequence": {"tf": 5.916079783099616}, "howard.functions.utils.matches_ref_allele": {"tf": 6}, "howard.functions.utils.hgvs_justify_dup": {"tf": 6.6332495807108}, "howard.functions.utils.hgvs_justify_indel": {"tf": 7.745966692414834}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 7.3484692283495345}, "howard.functions.utils.parse_hgvs_name": {"tf": 8.48528137423857}, "howard.functions.utils.cdna_to_protein": {"tf": 8.602325267042627}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 9.695359714832659}, "howard.functions.utils.format_hgvs_name": {"tf": 10.862780491200215}, "howard.functions.utils.create_refseq_table": {"tf": 6.164414002968976}, "howard.functions.utils.get_refseq_table": {"tf": 6.782329983125268}, "howard.functions.utils.get_transcript": {"tf": 5.291502622129181}, "howard.main": {"tf": 1.7320508075688772}, "howard.main.msg_gui_disable": {"tf": 1.7320508075688772}, "howard.main.main_folder": {"tf": 1.7320508075688772}, "howard.main.main": {"tf": 1.4142135623730951}, "howard.objects": {"tf": 1.7320508075688772}, "howard.objects.cdna": {"tf": 1.7320508075688772}, "howard.objects.cdna.CDNA_START_CODON": {"tf": 1.7320508075688772}, "howard.objects.cdna.CDNA_STOP_CODON": {"tf": 1.7320508075688772}, "howard.objects.cdna.CDNACoord": {"tf": 5.477225575051661}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 3.3166247903554}, "howard.objects.cdna.CDNACoord.parse": {"tf": 1.7320508075688772}, "howard.objects.database": {"tf": 1.7320508075688772}, "howard.objects.database.SEP_TYPE": {"tf": 1.7320508075688772}, "howard.objects.database.DATABASE_TYPE_NEEDED_COLUMNS": {"tf": 1.7320508075688772}, "howard.objects.database.DEFAULT_VCF_HEADER": {"tf": 1.7320508075688772}, "howard.objects.database.DEFAULT_VCF_HEADER_DUCKDB_TYPES": {"tf": 1.7320508075688772}, "howard.objects.database.DEFAULT_HEADER_LIST": {"tf": 1.7320508075688772}, "howard.objects.database.FILE_FORMAT_DELIMITERS": {"tf": 1.7320508075688772}, "howard.objects.database.DUCKDB_EXTENSION_TO_LOAD": {"tf": 1.7320508075688772}, "howard.objects.database.Database": {"tf": 1.7320508075688772}, "howard.objects.database.Database.__init__": {"tf": 8.602325267042627}, "howard.objects.database.Database.database": {"tf": 1.7320508075688772}, "howard.objects.database.Database.format": {"tf": 1.7320508075688772}, "howard.objects.database.Database.header": {"tf": 1.7320508075688772}, "howard.objects.database.Database.header_file": {"tf": 1.7320508075688772}, "howard.objects.database.Database.databases_folders": {"tf": 1.7320508075688772}, "howard.objects.database.Database.assembly": {"tf": 1.7320508075688772}, "howard.objects.database.Database.table": {"tf": 1.7320508075688772}, "howard.objects.database.Database.set_database": {"tf": 6.244997998398398}, "howard.objects.database.Database.set_databases_folders": {"tf": 3.7416573867739413}, "howard.objects.database.Database.get_database_folders": {"tf": 4}, "howard.objects.database.Database.read_header_file": {"tf": 4.69041575982343}, "howard.objects.database.Database.get_header_length": {"tf": 5.291502622129181}, "howard.objects.database.Database.get_header_file_columns": {"tf": 5.291502622129181}, "howard.objects.database.Database.get_header_from_list": {"tf": 5.477225575051661}, "howard.objects.database.Database.get_header_from_file": {"tf": 5.477225575051661}, "howard.objects.database.Database.find_header_file": {"tf": 5.196152422706632}, "howard.objects.database.Database.get_header": {"tf": 7.54983443527075}, "howard.objects.database.Database.get_header_from_columns": {"tf": 6.928203230275509}, "howard.objects.database.Database.query": {"tf": 4.69041575982343}, "howard.objects.database.Database.set_header": {"tf": 5.5677643628300215}, "howard.objects.database.Database.set_header_file": {"tf": 4.358898943540674}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 5.385164807134504}, "howard.objects.database.Database.get_header_file": {"tf": 8.246211251235321}, "howard.objects.database.Database.set_assembly": {"tf": 3.605551275463989}, "howard.objects.database.Database.get_assembly": {"tf": 4.47213595499958}, "howard.objects.database.Database.find_database": {"tf": 6.6332495807108}, "howard.objects.database.Database.get_database": {"tf": 4}, "howard.objects.database.Database.get_database_basename": {"tf": 5.916079783099616}, "howard.objects.database.Database.get_database_dirname": {"tf": 5.196152422706632}, "howard.objects.database.Database.exists": {"tf": 5.916079783099616}, "howard.objects.database.Database.set_format": {"tf": 3.605551275463989}, "howard.objects.database.Database.get_format": {"tf": 5.477225575051661}, "howard.objects.database.Database.get_type": {"tf": 6.4031242374328485}, "howard.objects.database.Database.get_database_tables": {"tf": 4.69041575982343}, "howard.objects.database.Database.get_database_table": {"tf": 4.69041575982343}, "howard.objects.database.Database.get_type_from_columns": {"tf": 5.291502622129181}, "howard.objects.database.Database.get_needed_columns": {"tf": 5.196152422706632}, "howard.objects.database.Database.get_sql_from": {"tf": 5.830951894845301}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 5.477225575051661}, "howard.objects.database.Database.get_sql_database_link": {"tf": 5.744562646538029}, "howard.objects.database.Database.create_view": {"tf": 5.916079783099616}, "howard.objects.database.Database.get_view": {"tf": 6.708203932499369}, "howard.objects.database.Database.is_compressed": {"tf": 5.744562646538029}, "howard.objects.database.Database.get_header_infos_list": {"tf": 5.196152422706632}, "howard.objects.database.Database.find_column": {"tf": 6.928203230275509}, "howard.objects.database.Database.map_columns": {"tf": 6.782329983125268}, "howard.objects.database.Database.get_columns": {"tf": 7.416198487095663}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 5.744562646538029}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 6.244997998398398}, "howard.objects.database.Database.get_annotations": {"tf": 6.082762530298219}, "howard.objects.database.Database.get_extra_columns": {"tf": 6.164414002968976}, "howard.objects.database.Database.is_vcf": {"tf": 6.4031242374328485}, "howard.objects.database.Database.get_conn": {"tf": 3.7416573867739413}, "howard.objects.database.Database.is_genotype_column": {"tf": 7.810249675906654}, "howard.objects.database.Database.export": {"tf": 13.30413469565007}, "howard.objects.genome": {"tf": 1.7320508075688772}, "howard.objects.genome.ChromosomeSubset": {"tf": 1.7320508075688772}, "howard.objects.genome.ChromosomeSubset.__init__": {"tf": 1.7320508075688772}, "howard.objects.genome.ChromosomeSubset.name": {"tf": 1.7320508075688772}, "howard.objects.genome.ChromosomeSubset.genome": {"tf": 1.7320508075688772}, "howard.objects.genome.GenomeSubset": {"tf": 1.7320508075688772}, "howard.objects.genome.GenomeSubset.__init__": {"tf": 1.7320508075688772}, "howard.objects.genome.GenomeSubset.genome": {"tf": 1.7320508075688772}, "howard.objects.genome.GenomeSubset.chrom": {"tf": 1.7320508075688772}, "howard.objects.genome.GenomeSubset.start": {"tf": 1.7320508075688772}, "howard.objects.genome.GenomeSubset.end": {"tf": 1.7320508075688772}, "howard.objects.genome.GenomeSubset.seqid": {"tf": 1.7320508075688772}, "howard.objects.genome.MockGenomeError": {"tf": 1.7320508075688772}, "howard.objects.genome.MockSequence": {"tf": 1.7320508075688772}, "howard.objects.genome.MockSequence.__init__": {"tf": 1.7320508075688772}, "howard.objects.genome.MockSequence.sequence": {"tf": 1.7320508075688772}, "howard.objects.genome.MockChromosome": {"tf": 1.7320508075688772}, "howard.objects.genome.MockChromosome.__init__": {"tf": 1.7320508075688772}, "howard.objects.genome.MockChromosome.name": {"tf": 1.7320508075688772}, "howard.objects.genome.MockChromosome.genome": {"tf": 1.7320508075688772}, "howard.objects.genome.MockGenome": {"tf": 1.7320508075688772}, "howard.objects.genome.MockGenome.__init__": {"tf": 2.8284271247461903}, "howard.objects.genome.MockGenome.get_seq": {"tf": 2.449489742783178}, "howard.objects.genome.MockGenome.read": {"tf": 2.449489742783178}, "howard.objects.genome.MockGenome.write": {"tf": 1.7320508075688772}, "howard.objects.genome.MockGenomeTestFile": {"tf": 1.7320508075688772}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 2.8284271247461903}, "howard.objects.genome.MockGenomeTestFile.get_seq": {"tf": 2.449489742783178}, "howard.objects.hgvs": {"tf": 11.661903789690601}, "howard.objects.hgvs.CHROM_PREFIX": {"tf": 1.7320508075688772}, "howard.objects.hgvs.CODON_1": {"tf": 1.7320508075688772}, "howard.objects.hgvs.CODON_3": {"tf": 1.7320508075688772}, "howard.objects.hgvs.CODON_FULL": {"tf": 1.7320508075688772}, "howard.objects.hgvs.NUCLEOTIDE_TRANSLATE": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSRegex": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSRegex.BASE": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSRegex.BASES": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSRegex.DNA_REF": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSRegex.DNA_ALT": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSRegex.EQUAL": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSRegex.SUB": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSRegex.INS": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSRegex.DEL": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSRegex.DUP": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSRegex.COORD_START": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSRegex.COORD_END": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSRegex.COORD_RANGE": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSRegex.CDNA_COORD": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSRegex.CDNA_START": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSRegex.CDNA_END": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSRegex.CDNA_RANGE": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSRegex.CDNA_ALLELE_REGEXES": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSRegex.PEP": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSRegex.PEP_REF": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSRegex.PEP_REF2": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSRegex.PEP_ALT": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSRegex.PEP_EXTRA": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSRegex.PEP_ALLELE_REGEXES": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSRegex.GENOMIC_ALLELE_REGEXES": {"tf": 1.7320508075688772}, "howard.objects.hgvs.REFSEQ_PREFIXES": {"tf": 1.7320508075688772}, "howard.objects.hgvs.REFSEQ_PREFIX_LOOKUP": {"tf": 1.7320508075688772}, "howard.objects.hgvs.get_refseq_type": {"tf": 5.291502622129181}, "howard.objects.hgvs.InvalidHGVSName": {"tf": 1.7320508075688772}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 4.58257569495584}, "howard.objects.hgvs.InvalidHGVSName.name": {"tf": 1.7320508075688772}, "howard.objects.hgvs.InvalidHGVSName.part": {"tf": 1.7320508075688772}, "howard.objects.hgvs.InvalidHGVSName.reason": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 10.677078252031311}, "howard.objects.hgvs.HGVSName.name": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.prefix": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.chrom": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.transcript": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.transcript_protein": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.gene": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.exon": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.kind": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.mutation_type": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.start": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.end": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.ref_allele": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.ref2_allele": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.alt_allele": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.cdna_start": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.cdna_end": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.pep_extra": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.parse": {"tf": 4.358898943540674}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 5.291502622129181}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 4.58257569495584}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 5.291502622129181}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 5.477225575051661}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 5.291502622129181}, "howard.objects.hgvs.HGVSName.format": {"tf": 6.708203932499369}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 6.48074069840786}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 3.7416573867739413}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 4.123105625617661}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 3.7416573867739413}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 4.242640687119285}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 3.7416573867739413}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 3.7416573867739413}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 5.477225575051661}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 4.898979485566356}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 4.898979485566356}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 6.782329983125268}, "howard.objects.transcript": {"tf": 1.7320508075688772}, "howard.objects.transcript.Gene": {"tf": 1.7320508075688772}, "howard.objects.transcript.Gene.__init__": {"tf": 1.7320508075688772}, "howard.objects.transcript.Gene.name": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.__init__": {"tf": 8.06225774829855}, "howard.objects.transcript.Transcript.name": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.version": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.gene": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.tx_position": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.cds_position": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.is_default": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.cdna_match": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.full_name": {"tf": 4.69041575982343}, "howard.objects.transcript.Transcript.is_coding": {"tf": 3.4641016151377544}, "howard.objects.transcript.Transcript.strand": {"tf": 4.47213595499958}, "howard.objects.transcript.Transcript.ordered_cdna_match": {"tf": 3.4641016151377544}, "howard.objects.transcript.Transcript.get_cds_start_stop": {"tf": 3.4641016151377544}, "howard.objects.transcript.Transcript.start_codon": {"tf": 3.4641016151377544}, "howard.objects.transcript.Transcript.stop_codon": {"tf": 3.7416573867739413}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 5.0990195135927845}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 5.291502622129181}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 4.898979485566356}, "howard.objects.transcript.BED6Interval_base": {"tf": 1.7320508075688772}, "howard.objects.transcript.BED6Interval_base.__init__": {"tf": 1.7320508075688772}, "howard.objects.transcript.BED6Interval_base.chrom": {"tf": 1.4142135623730951}, "howard.objects.transcript.BED6Interval_base.chrom_start": {"tf": 1.4142135623730951}, "howard.objects.transcript.BED6Interval_base.chrom_end": {"tf": 1.4142135623730951}, "howard.objects.transcript.BED6Interval_base.name": {"tf": 1.4142135623730951}, "howard.objects.transcript.BED6Interval_base.score": {"tf": 1.4142135623730951}, "howard.objects.transcript.BED6Interval_base.strand": {"tf": 1.4142135623730951}, "howard.objects.transcript.BED6Interval": {"tf": 1.7320508075688772}, "howard.objects.transcript.BED6Interval.__init__": {"tf": 1.7320508075688772}, "howard.objects.transcript.BED6Interval.distance": {"tf": 4.898979485566356}, "howard.objects.transcript.Exon": {"tf": 1.7320508075688772}, "howard.objects.transcript.Exon.__init__": {"tf": 5.196152422706632}, "howard.objects.transcript.Exon.transcript": {"tf": 1.7320508075688772}, "howard.objects.transcript.Exon.tx_position": {"tf": 1.7320508075688772}, "howard.objects.transcript.Exon.number": {"tf": 1.7320508075688772}, "howard.objects.transcript.Exon.name": {"tf": 3.4641016151377544}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 5.477225575051661}, "howard.objects.transcript.Exon.strand": {"tf": 1.7320508075688772}, "howard.objects.transcript.CDNA_Match": {"tf": 1.7320508075688772}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 6.708203932499369}, "howard.objects.transcript.CDNA_Match.cdna_start": {"tf": 1.7320508075688772}, "howard.objects.transcript.CDNA_Match.cdna_end": {"tf": 1.7320508075688772}, "howard.objects.transcript.CDNA_Match.gap": {"tf": 1.7320508075688772}, "howard.objects.transcript.CDNA_Match.length": {"tf": 3.4641016151377544}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 6.4031242374328485}, "howard.objects.variant": {"tf": 1.7320508075688772}, "howard.objects.variant.Position": {"tf": 1.7320508075688772}, "howard.objects.variant.Position.__init__": {"tf": 1.7320508075688772}, "howard.objects.variant.Position.chrom": {"tf": 1.7320508075688772}, "howard.objects.variant.Position.chrom_start": {"tf": 1.7320508075688772}, "howard.objects.variant.Position.chrom_stop": {"tf": 1.7320508075688772}, "howard.objects.variant.Position.is_forward_strand": {"tf": 1.7320508075688772}, "howard.objects.variant.revcomp": {"tf": 1.7320508075688772}, "howard.objects.variant.get_sequence": {"tf": 2.449489742783178}, "howard.objects.variant.get_sequence_from_position": {"tf": 2.23606797749979}, "howard.objects.variant.justify_indel": {"tf": 2.449489742783178}, "howard.objects.variant.justify_genomic_indel": {"tf": 1.7320508075688772}, "howard.objects.variant.normalize_variant": {"tf": 2.449489742783178}, "howard.objects.variant.NormalizedVariant": {"tf": 1.7320508075688772}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 2.23606797749979}, "howard.objects.variant.NormalizedVariant.position": {"tf": 1.7320508075688772}, "howard.objects.variant.NormalizedVariant.alleles": {"tf": 1.7320508075688772}, "howard.objects.variant.NormalizedVariant.seq_5p": {"tf": 1.7320508075688772}, "howard.objects.variant.NormalizedVariant.seq_3p": {"tf": 1.7320508075688772}, "howard.objects.variant.NormalizedVariant.genome": {"tf": 1.7320508075688772}, "howard.objects.variant.NormalizedVariant.log": {"tf": 1.7320508075688772}, "howard.objects.variant.NormalizedVariant.indels_start_with_same_base": {"tf": 1.7320508075688772}, "howard.objects.variant.NormalizedVariant.molecular_class": {"tf": 1.7320508075688772}, "howard.objects.variant.NormalizedVariant.ref_allele": {"tf": 1.7320508075688772}, "howard.objects.variant.NormalizedVariant.alt_alleles": {"tf": 1.7320508075688772}, "howard.objects.variant.NormalizedVariant.variant": {"tf": 1.7320508075688772}, "howard.objects.variants": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.__init__": {"tf": 5.656854249492381}, "howard.objects.variants.Variants.set_samples": {"tf": 5.656854249492381}, "howard.objects.variants.Variants.get_samples": {"tf": 4}, "howard.objects.variants.Variants.get_samples_check": {"tf": 4.358898943540674}, "howard.objects.variants.Variants.set_input": {"tf": 4.123105625617661}, "howard.objects.variants.Variants.set_config": {"tf": 4.358898943540674}, "howard.objects.variants.Variants.set_param": {"tf": 4.123105625617661}, "howard.objects.variants.Variants.init_variables": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_indexing": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.get_connexion_config": {"tf": 3.7416573867739413}, "howard.objects.variants.Variants.get_duckdb_settings": {"tf": 4.242640687119285}, "howard.objects.variants.Variants.set_connexion_db": {"tf": 4}, "howard.objects.variants.Variants.set_connexion": {"tf": 4.358898943540674}, "howard.objects.variants.Variants.set_output": {"tf": 4.58257569495584}, "howard.objects.variants.Variants.set_header": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 6.244997998398398}, "howard.objects.variants.Variants.get_overview": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_stats": {"tf": 3.605551275463989}, "howard.objects.variants.Variants.stats_to_file": {"tf": 5.0990195135927845}, "howard.objects.variants.Variants.print_stats": {"tf": 6.164414002968976}, "howard.objects.variants.Variants.get_input": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.get_input_format": {"tf": 5.477225575051661}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 6.082762530298219}, "howard.objects.variants.Variants.get_output": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.get_output_format": {"tf": 5.656854249492381}, "howard.objects.variants.Variants.get_config": {"tf": 3.3166247903554}, "howard.objects.variants.Variants.get_param": {"tf": 3.3166247903554}, "howard.objects.variants.Variants.get_connexion_db": {"tf": 3.3166247903554}, "howard.objects.variants.Variants.get_prefix": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.get_table_variants": {"tf": 4.69041575982343}, "howard.objects.variants.Variants.get_tmp_dir": {"tf": 4}, "howard.objects.variants.Variants.get_connexion_type": {"tf": 3.3166247903554}, "howard.objects.variants.Variants.get_connexion": {"tf": 3.3166247903554}, "howard.objects.variants.Variants.close_connexion": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.get_header": {"tf": 4.69041575982343}, "howard.objects.variants.Variants.get_header_infos_list": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.get_header_length": {"tf": 5.196152422706632}, "howard.objects.variants.Variants.get_header_columns": {"tf": 3.3166247903554}, "howard.objects.variants.Variants.get_header_columns_as_list": {"tf": 3.3166247903554}, "howard.objects.variants.Variants.get_header_columns_as_sql": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 7.3484692283495345}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 6.164414002968976}, "howard.objects.variants.Variants.get_verbose": {"tf": 3.3166247903554}, "howard.objects.variants.Variants.get_connexion_format": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 7.14142842854285}, "howard.objects.variants.Variants.load_data": {"tf": 5.744562646538029}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 3.7416573867739413}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 6.4031242374328485}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 5.916079783099616}, "howard.objects.variants.Variants.add_column": {"tf": 7.3484692283495345}, "howard.objects.variants.Variants.drop_column": {"tf": 6.164414002968976}, "howard.objects.variants.Variants.explode_infos": {"tf": 9.591663046625438}, "howard.objects.variants.Variants.create_indexes": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.drop_indexes": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.read_vcf_header": {"tf": 4.58257569495584}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 5.477225575051661}, "howard.objects.variants.Variants.execute_query": {"tf": 4.58257569495584}, "howard.objects.variants.Variants.export_output": {"tf": 10}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 5.477225575051661}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 4.47213595499958}, "howard.objects.variants.Variants.export_header": {"tf": 8.426149773176359}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 8.94427190999916}, "howard.objects.variants.Variants.run_commands": {"tf": 4.123105625617661}, "howard.objects.variants.Variants.get_threads": {"tf": 5.477225575051661}, "howard.objects.variants.Variants.get_memory": {"tf": 6}, "howard.objects.variants.Variants.update_from_vcf": {"tf": 4}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.drop_variants_table": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.set_variant_id": {"tf": 5.830951894845301}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 5}, "howard.objects.variants.Variants.scan_databases": {"tf": 6.48074069840786}, "howard.objects.variants.Variants.annotation": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation_snpsift": {"tf": 4.58257569495584}, "howard.objects.variants.Variants.annotation_bcftools": {"tf": 4.58257569495584}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 11.357816691600547}, "howard.objects.variants.Variants.annotation_snpeff": {"tf": 4.58257569495584}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 4.58257569495584}, "howard.objects.variants.Variants.annotation_parquet": {"tf": 4.58257569495584}, "howard.objects.variants.Variants.annotation_splice": {"tf": 4.58257569495584}, "howard.objects.variants.Variants.get_config_default": {"tf": 6}, "howard.objects.variants.Variants.get_config_json": {"tf": 6.928203230275509}, "howard.objects.variants.Variants.prioritization": {"tf": 6.708203932499369}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 4.47213595499958}, "howard.objects.variants.Variants.get_operations_help": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation": {"tf": 3.7416573867739413}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 4.795831523312719}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 4.795831523312719}, "howard.objects.variants.Variants.calculation_variant_id": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 5.196152422706632}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 6.782329983125268}, "howard.objects.variants.Variants.calculation_extract_nomen": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 4.123105625617661}, "howard.objects.variants.Variants.calculation_genotype_concordance": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 4.358898943540674}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 4.58257569495584}, "howard.objects.variants.Variants.calculation_trio": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 3.7416573867739413}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 4.123105625617661}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 5.291502622129181}, "howard.objects.variants.Variants.calculation_transcripts_prioritization": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.calculation_transcripts_export": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.transcripts_export": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 6.324555320336759}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 9.848857801796104}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 8.94427190999916}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 7.0710678118654755}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 8.94427190999916}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 8.774964387392123}, "howard.tools": {"tf": 1.7320508075688772}, "howard.tools.annotation": {"tf": 1.7320508075688772}, "howard.tools.annotation.annotation": {"tf": 4.358898943540674}, "howard.tools.calculation": {"tf": 1.7320508075688772}, "howard.tools.calculation.calculation": {"tf": 3.872983346207417}, "howard.tools.databases": {"tf": 1.7320508075688772}, "howard.tools.databases.databases": {"tf": 3.605551275463989}, "howard.tools.gui": {"tf": 1.7320508075688772}, "howard.tools.gui.main_folder": {"tf": 1.7320508075688772}, "howard.tools.gui.image_dir": {"tf": 1.7320508075688772}, "howard.tools.gui.gui": {"tf": 5}, "howard.tools.help": {"tf": 1.7320508075688772}, "howard.tools.help.main_folder": {"tf": 1.7320508075688772}, "howard.tools.help.help": {"tf": 5}, "howard.tools.hgvs": {"tf": 1.7320508075688772}, "howard.tools.hgvs.hgvs": {"tf": 4.358898943540674}, "howard.tools.prioritization": {"tf": 1.7320508075688772}, "howard.tools.prioritization.prioritization": {"tf": 3.605551275463989}, "howard.tools.process": {"tf": 1.7320508075688772}, "howard.tools.process.process": {"tf": 3.605551275463989}, "howard.tools.query": {"tf": 1.7320508075688772}, "howard.tools.query.query": {"tf": 3.605551275463989}, "howard.tools.stats": {"tf": 1.7320508075688772}, "howard.tools.stats.stats": {"tf": 3.605551275463989}, "howard.tools.tools": {"tf": 1.7320508075688772}, "howard.tools.tools.PathType": {"tf": 1.7320508075688772}, "howard.tools.tools.PathType.__init__": {"tf": 1.4142135623730951}, "howard.tools.tools.arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.shared_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.commands_arguments": {"tf": 1.7320508075688772}, "howard.tools.tools.arguments_dict": {"tf": 1.7320508075688772}}, "df": 586, "t": {"docs": {"howard.objects.variants.Variants.get_verbose": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.tools.tools.PathType.__init__": {"tf": 1.4142135623730951}}, "df": 5, "h": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.remove_if_exists": {"tf": 1.4142135623730951}, "howard.functions.commons.set_log_level": {"tf": 1.7320508075688772}, "howard.functions.commons.split_interval": {"tf": 2.449489742783178}, "howard.functions.commons.merge_regions": {"tf": 2.23606797749979}, "howard.functions.commons.create_where_clause": {"tf": 2.6457513110645907}, "howard.functions.commons.command": {"tf": 2.23606797749979}, "howard.functions.commons.run_parallel_commands": {"tf": 1.7320508075688772}, "howard.functions.commons.run_parallel_functions": {"tf": 1.7320508075688772}, "howard.functions.commons.example_function": {"tf": 1.4142135623730951}, "howard.functions.commons.find": {"tf": 3.1622776601683795}, "howard.functions.commons.find_all": {"tf": 3.872983346207417}, "howard.functions.commons.find_genome": {"tf": 4.123105625617661}, "howard.functions.commons.find_file_prefix": {"tf": 3.872983346207417}, "howard.functions.commons.find_nomen": {"tf": 2.6457513110645907}, "howard.functions.commons.explode_annotation_format": {"tf": 5.385164807134504}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 2.6457513110645907}, "howard.functions.commons.explode_snpeff_ann": {"tf": 5.196152422706632}, "howard.functions.commons.get_index": {"tf": 4}, "howard.functions.commons.get_file_format": {"tf": 2.449489742783178}, "howard.functions.commons.findbypipeline": {"tf": 3.872983346207417}, "howard.functions.commons.genotypeconcordance": {"tf": 3.3166247903554}, "howard.functions.commons.genotype_compression": {"tf": 2.6457513110645907}, "howard.functions.commons.genotype_barcode": {"tf": 2.8284271247461903}, "howard.functions.commons.barcode": {"tf": 2.449489742783178}, "howard.functions.commons.trio": {"tf": 2.8284271247461903}, "howard.functions.commons.vaf_normalization": {"tf": 3.7416573867739413}, "howard.functions.commons.genotype_stats": {"tf": 3.1622776601683795}, "howard.functions.commons.extract_file": {"tf": 4}, "howard.functions.commons.download_file": {"tf": 6.164414002968976}, "howard.functions.commons.get_bin": {"tf": 5.5677643628300215}, "howard.functions.commons.get_bin_command": {"tf": 7.280109889280518}, "howard.functions.commons.get_tmp": {"tf": 5.477225575051661}, "howard.functions.commons.get_threads": {"tf": 4}, "howard.functions.commons.get_memory": {"tf": 4.58257569495584}, "howard.functions.commons.extract_float_from_str": {"tf": 2.8284271247461903}, "howard.functions.commons.extract_memory_in_go": {"tf": 4}, "howard.functions.commons.concat_file": {"tf": 3.1622776601683795}, "howard.functions.commons.compress_file": {"tf": 2.6457513110645907}, "howard.functions.commons.get_compression_type": {"tf": 3.872983346207417}, "howard.functions.commons.get_file_compressed": {"tf": 1.7320508075688772}, "howard.functions.commons.concat_into_infile": {"tf": 4.358898943540674}, "howard.functions.commons.concat_and_compress_files": {"tf": 5.916079783099616}, "howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 2.6457513110645907}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 3.3166247903554}, "howard.functions.commons.load_duckdb_extension": {"tf": 1.7320508075688772}, "howard.functions.commons.duckdb_execute": {"tf": 3.3166247903554}, "howard.functions.commons.genome_build_switch": {"tf": 2.23606797749979}, "howard.functions.commons.get_argument": {"tf": 4.898979485566356}, "howard.functions.commons.get_argument_gooey": {"tf": 2.6457513110645907}, "howard.functions.commons.get_argument_to_mk": {"tf": 4.69041575982343}, "howard.functions.commons.help_generation_from_dict": {"tf": 8.48528137423857}, "howard.functions.commons.help_generation_from_json": {"tf": 5.656854249492381}, "howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"tf": 1.7320508075688772}, "howard.functions.commons.help_generation": {"tf": 4.123105625617661}, "howard.functions.commons.format_arg_help": {"tf": 3.605551275463989}, "howard.functions.commons.bed_sort": {"tf": 3.3166247903554}, "howard.functions.commons.full_path": {"tf": 3.4641016151377544}, "howard.functions.commons.get_default_argument": {"tf": 3.4641016151377544}, "howard.functions.commons.set_param": {"tf": 5.744562646538029}, "howard.functions.commons.add_value_into_dict": {"tf": 4.69041575982343}, "howard.functions.commons.load_param": {"tf": 2}, "howard.functions.commons.load_config_args": {"tf": 2.23606797749979}, "howard.functions.commons.load_args": {"tf": 5.916079783099616}, "howard.functions.commons.get_random": {"tf": 2.23606797749979}, "howard.functions.commons.transcripts_file_to_df": {"tf": 3.3166247903554}, "howard.functions.commons.identical": {"tf": 4.58257569495584}, "howard.functions.commons.check_docker_image_exists": {"tf": 1.4142135623730951}, "howard.functions.commons.params_string_to_dict": {"tf": 5.916079783099616}, "howard.functions.commons.determine_value_type": {"tf": 4.898979485566356}, "howard.functions.commons.determine_column_types": {"tf": 3.872983346207417}, "howard.functions.commons.detect_column_type": {"tf": 3.1622776601683795}, "howard.functions.commons.clean_annotation_field": {"tf": 3.3166247903554}, "howard.functions.databases.generate_databases_param": {"tf": 3.1622776601683795}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 2.8284271247461903}, "howard.functions.databases.databases_infos": {"tf": 5.0990195135927845}, "howard.functions.databases.databases_param": {"tf": 4.58257569495584}, "howard.functions.databases.databases_download_annovar": {"tf": 2.6457513110645907}, "howard.functions.databases.databases_download_snpeff": {"tf": 4.69041575982343}, "howard.functions.databases.databases_download_genomes": {"tf": 4.242640687119285}, "howard.functions.databases.databases_download_refseq": {"tf": 7.937253933193772}, "howard.functions.databases.databases_format_refseq": {"tf": 7.416198487095663}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 9.055385138137417}, "howard.functions.databases.databases_download_alphamissense": {"tf": 4.123105625617661}, "howard.functions.databases.databases_download_exomiser": {"tf": 8.306623862918075}, "howard.functions.databases.databases_download_dbsnp": {"tf": 5.916079783099616}, "howard.functions.databases.databases_download_hgmd": {"tf": 6.244997998398398}, "howard.functions.from_annovar.from_annovar": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 6}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 4}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 5.477225575051661}, "howard.functions.from_extann.metaheader_rows": {"tf": 1}, "howard.functions.from_extann.extann_to_info": {"tf": 1.4142135623730951}, "howard.functions.from_extann.get_longest_transcript": {"tf": 1.4142135623730951}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1.4142135623730951}, "howard.functions.plugins.plugins_infos": {"tf": 4.358898943540674}, "howard.functions.plugins.plugins_list": {"tf": 4.898979485566356}, "howard.functions.plugins.plugins_to_load": {"tf": 3.7416573867739413}, "howard.functions.utils.read_refgene": {"tf": 3}, "howard.functions.utils.read_genepred": {"tf": 3.872983346207417}, "howard.functions.utils.make_transcript": {"tf": 1.7320508075688772}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 3.7416573867739413}, "howard.functions.utils.read_transcripts": {"tf": 2.449489742783178}, "howard.functions.utils.get_genomic_sequence": {"tf": 4.358898943540674}, "howard.functions.utils.get_vcf_allele": {"tf": 3.872983346207417}, "howard.functions.utils.get_alt_from_sequence": {"tf": 3.4641016151377544}, "howard.functions.utils.matches_ref_allele": {"tf": 4}, "howard.functions.utils.hgvs_justify_dup": {"tf": 4.47213595499958}, "howard.functions.utils.hgvs_justify_indel": {"tf": 6.324555320336759}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 5.0990195135927845}, "howard.functions.utils.parse_hgvs_name": {"tf": 6.244997998398398}, "howard.functions.utils.cdna_to_protein": {"tf": 6.164414002968976}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 7.3484692283495345}, "howard.functions.utils.format_hgvs_name": {"tf": 8.774964387392123}, "howard.functions.utils.create_refseq_table": {"tf": 4.58257569495584}, "howard.functions.utils.get_refseq_table": {"tf": 4.69041575982343}, "howard.functions.utils.get_transcript": {"tf": 3}, "howard.objects.cdna.CDNACoord": {"tf": 3.7416573867739413}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 2}, "howard.objects.database.Database.__init__": {"tf": 6.855654600401044}, "howard.objects.database.Database.set_database": {"tf": 5.0990195135927845}, "howard.objects.database.Database.set_databases_folders": {"tf": 2.6457513110645907}, "howard.objects.database.Database.get_database_folders": {"tf": 1.7320508075688772}, "howard.objects.database.Database.read_header_file": {"tf": 2}, "howard.objects.database.Database.get_header_length": {"tf": 3}, "howard.objects.database.Database.get_header_file_columns": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_header_from_list": {"tf": 2}, "howard.objects.database.Database.get_header_from_file": {"tf": 2.8284271247461903}, "howard.objects.database.Database.find_header_file": {"tf": 3.872983346207417}, "howard.objects.database.Database.get_header": {"tf": 5.5677643628300215}, "howard.objects.database.Database.get_header_from_columns": {"tf": 4.69041575982343}, "howard.objects.database.Database.query": {"tf": 3.3166247903554}, "howard.objects.database.Database.set_header": {"tf": 3.7416573867739413}, "howard.objects.database.Database.set_header_file": {"tf": 2.6457513110645907}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 3.1622776601683795}, "howard.objects.database.Database.get_header_file": {"tf": 5.291502622129181}, "howard.objects.database.Database.set_assembly": {"tf": 3.4641016151377544}, "howard.objects.database.Database.get_assembly": {"tf": 1.4142135623730951}, "howard.objects.database.Database.find_database": {"tf": 5.196152422706632}, "howard.objects.database.Database.get_database": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_database_basename": {"tf": 4}, "howard.objects.database.Database.get_database_dirname": {"tf": 3.1622776601683795}, "howard.objects.database.Database.exists": {"tf": 3.4641016151377544}, "howard.objects.database.Database.set_format": {"tf": 2.8284271247461903}, "howard.objects.database.Database.get_format": {"tf": 3.872983346207417}, "howard.objects.database.Database.get_type": {"tf": 4.58257569495584}, "howard.objects.database.Database.get_database_tables": {"tf": 2.8284271247461903}, "howard.objects.database.Database.get_database_table": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_type_from_columns": {"tf": 2.8284271247461903}, "howard.objects.database.Database.get_needed_columns": {"tf": 3.1622776601683795}, "howard.objects.database.Database.get_sql_from": {"tf": 3.872983346207417}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 3.7416573867739413}, "howard.objects.database.Database.get_sql_database_link": {"tf": 3.7416573867739413}, "howard.objects.database.Database.create_view": {"tf": 3.605551275463989}, "howard.objects.database.Database.get_view": {"tf": 3.7416573867739413}, "howard.objects.database.Database.is_compressed": {"tf": 3.4641016151377544}, "howard.objects.database.Database.get_header_infos_list": {"tf": 3}, "howard.objects.database.Database.find_column": {"tf": 6}, "howard.objects.database.Database.map_columns": {"tf": 4.69041575982343}, "howard.objects.database.Database.get_columns": {"tf": 6.324555320336759}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 2.8284271247461903}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 3.7416573867739413}, "howard.objects.database.Database.get_annotations": {"tf": 3.7416573867739413}, "howard.objects.database.Database.get_extra_columns": {"tf": 4.123105625617661}, "howard.objects.database.Database.is_vcf": {"tf": 4.123105625617661}, "howard.objects.database.Database.get_conn": {"tf": 2.23606797749979}, "howard.objects.database.Database.is_genotype_column": {"tf": 5.291502622129181}, "howard.objects.database.Database.export": {"tf": 10.677078252031311}, "howard.objects.genome.ChromosomeSubset": {"tf": 1}, "howard.objects.genome.GenomeSubset": {"tf": 1.4142135623730951}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.hgvs.get_refseq_type": {"tf": 2.23606797749979}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 3.7416573867739413}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 8.831760866327848}, "howard.objects.hgvs.HGVSName.parse": {"tf": 2.449489742783178}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 3.7416573867739413}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 2.449489742783178}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 2}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 2.8284271247461903}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format": {"tf": 5.5677643628300215}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 5.385164807134504}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 3.1622776601683795}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 3.1622776601683795}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 2}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 2.449489742783178}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 3.605551275463989}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 3.4641016151377544}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 3.4641016151377544}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 3.605551275463989}, "howard.objects.transcript.Transcript.__init__": {"tf": 6.557438524302}, "howard.objects.transcript.Transcript.full_name": {"tf": 2.449489742783178}, "howard.objects.transcript.Transcript.is_coding": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.strand": {"tf": 2.8284271247461903}, "howard.objects.transcript.Transcript.ordered_cdna_match": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.get_cds_start_stop": {"tf": 2.449489742783178}, "howard.objects.transcript.Transcript.start_codon": {"tf": 2.23606797749979}, "howard.objects.transcript.Transcript.stop_codon": {"tf": 2.449489742783178}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 2}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 2.6457513110645907}, "howard.objects.transcript.BED6Interval.distance": {"tf": 4.58257569495584}, "howard.objects.transcript.Exon.__init__": {"tf": 3.3166247903554}, "howard.objects.transcript.Exon.name": {"tf": 2.8284271247461903}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 2.8284271247461903}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 5.477225575051661}, "howard.objects.transcript.CDNA_Match.length": {"tf": 2.8284271247461903}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 4.47213595499958}, "howard.objects.variant.Position": {"tf": 1}, "howard.objects.variant.get_sequence": {"tf": 1}, "howard.objects.variant.get_sequence_from_position": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 2.6457513110645907}, "howard.objects.variant.normalize_variant": {"tf": 1.4142135623730951}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}, "howard.objects.variants.Variants.__init__": {"tf": 3.3166247903554}, "howard.objects.variants.Variants.set_samples": {"tf": 3.1622776601683795}, "howard.objects.variants.Variants.get_samples": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_samples_check": {"tf": 3.3166247903554}, "howard.objects.variants.Variants.set_input": {"tf": 2.8284271247461903}, "howard.objects.variants.Variants.set_config": {"tf": 3.1622776601683795}, "howard.objects.variants.Variants.set_param": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.init_variables": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_indexing": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.get_connexion_config": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.get_duckdb_settings": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_connexion_db": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.set_connexion": {"tf": 2.8284271247461903}, "howard.objects.variants.Variants.set_output": {"tf": 3.7416573867739413}, "howard.objects.variants.Variants.set_header": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 3.605551275463989}, "howard.objects.variants.Variants.get_overview": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_stats": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.stats_to_file": {"tf": 2.8284271247461903}, "howard.objects.variants.Variants.print_stats": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.get_input": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_input_format": {"tf": 3.1622776601683795}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.get_output": {"tf": 2}, "howard.objects.variants.Variants.get_output_format": {"tf": 3.872983346207417}, "howard.objects.variants.Variants.get_config": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_param": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_connexion_db": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_prefix": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_table_variants": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.get_tmp_dir": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.get_connexion_type": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_connexion": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.close_connexion": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_header": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.get_header_infos_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_length": {"tf": 3.872983346207417}, "howard.objects.variants.Variants.get_header_columns": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_header_columns_as_list": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_header_columns_as_sql": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 4.795831523312719}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 3.605551275463989}, "howard.objects.variants.Variants.get_verbose": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.get_connexion_format": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 5.744562646538029}, "howard.objects.variants.Variants.load_data": {"tf": 4}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.add_column": {"tf": 4.898979485566356}, "howard.objects.variants.Variants.drop_column": {"tf": 4.123105625617661}, "howard.objects.variants.Variants.explode_infos": {"tf": 5.656854249492381}, "howard.objects.variants.Variants.create_indexes": {"tf": 1}, "howard.objects.variants.Variants.drop_indexes": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.execute_query": {"tf": 2}, "howard.objects.variants.Variants.export_output": {"tf": 7.14142842854285}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 3.7416573867739413}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.export_header": {"tf": 5.830951894845301}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 6.48074069840786}, "howard.objects.variants.Variants.run_commands": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_threads": {"tf": 3}, "howard.objects.variants.Variants.get_memory": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.update_from_vcf": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 3.1622776601683795}, "howard.objects.variants.Variants.drop_variants_table": {"tf": 1}, "howard.objects.variants.Variants.set_variant_id": {"tf": 3}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 3.1622776601683795}, "howard.objects.variants.Variants.scan_databases": {"tf": 3.7416573867739413}, "howard.objects.variants.Variants.annotation": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation_snpsift": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_bcftools": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.annotation_snpeff": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 2}, "howard.objects.variants.Variants.annotation_parquet": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation_splice": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_config_default": {"tf": 3.3166247903554}, "howard.objects.variants.Variants.get_config_json": {"tf": 4.69041575982343}, "howard.objects.variants.Variants.prioritization": {"tf": 4}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.calculation": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 3.1622776601683795}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 3}, "howard.objects.variants.Variants.calculation_variant_id": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 3.7416573867739413}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 5}, "howard.objects.variants.Variants.calculation_extract_nomen": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 3.3166247903554}, "howard.objects.variants.Variants.calculation_genotype_concordance": {"tf": 2}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 3.1622776601683795}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 3.3166247903554}, "howard.objects.variants.Variants.calculation_trio": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 2}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 3.605551275463989}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 3.872983346207417}, "howard.objects.variants.Variants.calculation_transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 4.123105625617661}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 6.557438524302}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 6.782329983125268}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 4.795831523312719}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 6.782329983125268}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 6.48074069840786}, "howard.tools.annotation.annotation": {"tf": 2.23606797749979}, "howard.tools.calculation.calculation": {"tf": 2}, "howard.tools.databases.databases": {"tf": 2.449489742783178}, "howard.tools.gui.gui": {"tf": 2.6457513110645907}, "howard.tools.help.help": {"tf": 2.8284271247461903}, "howard.tools.hgvs.hgvs": {"tf": 2.23606797749979}, "howard.tools.prioritization.prioritization": {"tf": 2.8284271247461903}, "howard.tools.process.process": {"tf": 2}, "howard.tools.query.query": {"tf": 1.7320508075688772}, "howard.tools.stats.stats": {"tf": 2.449489742783178}}, "df": 334, "y": {"docs": {"howard.functions.commons.remove_if_exists": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}}, "df": 5}, "i": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1.4142135623730951}, "howard.functions.commons.load_args": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_infos": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.functions.plugins.plugins_infos": {"tf": 1}, "howard.functions.plugins.plugins_to_load": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.functions.utils.read_transcripts": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.map_columns": {"tf": 1.7320508075688772}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.transcript.Transcript.ordered_cdna_match": {"tf": 1}, "howard.objects.variants.Variants.set_input": {"tf": 1}}, "df": 20}}, "m": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_config_args": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1}, "howard.functions.utils.read_transcripts": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}, "howard.objects.variants.Variants.run_commands": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}}, "df": 16}, "n": {"docs": {"howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.genotype_barcode": {"tf": 1}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.database.Database.get_assembly": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse": {"tf": 1}, "howard.objects.transcript.Transcript.strand": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 1}, "howard.objects.variants.Variants.calculation": {"tf": 1}}, "df": 17}, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.genotypeconcordance": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1.4142135623730951}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.from_annovar.from_annovar": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.objects.cdna.CDNACoord": {"tf": 1}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.database.Database.set_database": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1.4142135623730951}, "howard.tools.databases.databases": {"tf": 1}, "howard.tools.process.process": {"tf": 1}}, "df": 21}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.get_default_argument": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.from_extann.get_longest_transcript": {"tf": 1}, "howard.objects.database.Database.get_database_dirname": {"tf": 1}, "howard.objects.database.Database.get_annotations": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}}, "df": 8, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.get_default_argument": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.remove_if_exists": {"tf": 1}, "howard.functions.commons.split_interval": {"tf": 1}, "howard.functions.commons.create_where_clause": {"tf": 1}, "howard.functions.commons.find_all": {"tf": 1.7320508075688772}, "howard.functions.commons.find_genome": {"tf": 1.4142135623730951}, "howard.functions.commons.find_file_prefix": {"tf": 1.7320508075688772}, "howard.functions.commons.find_nomen": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_annotation_format": {"tf": 2}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1.7320508075688772}, "howard.functions.commons.explode_snpeff_ann": {"tf": 2}, "howard.functions.commons.findbypipeline": {"tf": 1.4142135623730951}, "howard.functions.commons.genotypeconcordance": {"tf": 1.7320508075688772}, "howard.functions.commons.genotype_compression": {"tf": 1}, "howard.functions.commons.genotype_barcode": {"tf": 1}, "howard.functions.commons.trio": {"tf": 1}, "howard.functions.commons.vaf_normalization": {"tf": 2}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 2}, "howard.functions.commons.download_file": {"tf": 3}, "howard.functions.commons.get_bin": {"tf": 2.449489742783178}, "howard.functions.commons.get_bin_command": {"tf": 2.449489742783178}, "howard.functions.commons.get_tmp": {"tf": 1.7320508075688772}, "howard.functions.commons.get_threads": {"tf": 1.4142135623730951}, "howard.functions.commons.get_memory": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_file": {"tf": 1.7320508075688772}, "howard.functions.commons.compress_file": {"tf": 1.4142135623730951}, "howard.functions.commons.get_compression_type": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 2}, "howard.functions.commons.concat_and_compress_files": {"tf": 2.23606797749979}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1.4142135623730951}, "howard.functions.commons.duckdb_execute": {"tf": 1.4142135623730951}, "howard.functions.commons.genome_build_switch": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 2.449489742783178}, "howard.functions.commons.get_argument_gooey": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1.7320508075688772}, "howard.functions.commons.help_generation_from_dict": {"tf": 3.3166247903554}, "howard.functions.commons.help_generation_from_json": {"tf": 2.449489742783178}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.format_arg_help": {"tf": 1.7320508075688772}, "howard.functions.commons.bed_sort": {"tf": 1.4142135623730951}, "howard.functions.commons.get_default_argument": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 2.23606797749979}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.load_config_args": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 2.8284271247461903}, "howard.functions.commons.get_random": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1.7320508075688772}, "howard.functions.commons.identical": {"tf": 1.7320508075688772}, "howard.functions.commons.params_string_to_dict": {"tf": 2.6457513110645907}, "howard.functions.commons.determine_value_type": {"tf": 2}, "howard.functions.commons.determine_column_types": {"tf": 1.4142135623730951}, "howard.functions.commons.clean_annotation_field": {"tf": 2.6457513110645907}, "howard.functions.databases.databases_infos": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_param": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_snpeff": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 3.7416573867739413}, "howard.functions.databases.databases_format_refseq": {"tf": 2.6457513110645907}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 3.3166247903554}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_exomiser": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbsnp": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_hgmd": {"tf": 2.449489742783178}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 2.6457513110645907}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 2.6457513110645907}, "howard.functions.plugins.plugins_infos": {"tf": 1.7320508075688772}, "howard.functions.plugins.plugins_list": {"tf": 1.7320508075688772}, "howard.functions.plugins.plugins_to_load": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1.4142135623730951}, "howard.functions.utils.make_transcript": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1.7320508075688772}, "howard.functions.utils.matches_ref_allele": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1.7320508075688772}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1.7320508075688772}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1.4142135623730951}, "howard.functions.utils.parse_hgvs_name": {"tf": 2.449489742783178}, "howard.functions.utils.cdna_to_protein": {"tf": 2.8284271247461903}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 2}, "howard.functions.utils.format_hgvs_name": {"tf": 3.1622776601683795}, "howard.functions.utils.create_refseq_table": {"tf": 2.23606797749979}, "howard.functions.utils.get_refseq_table": {"tf": 1.7320508075688772}, "howard.functions.utils.get_transcript": {"tf": 1.7320508075688772}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 2.6457513110645907}, "howard.objects.database.Database.set_databases_folders": {"tf": 1}, "howard.objects.database.Database.read_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_length": {"tf": 1}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1}, "howard.objects.database.Database.find_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_from_columns": {"tf": 2}, "howard.objects.database.Database.query": {"tf": 1.7320508075688772}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.objects.database.Database.set_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 2.23606797749979}, "howard.objects.database.Database.set_assembly": {"tf": 1.7320508075688772}, "howard.objects.database.Database.find_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_basename": {"tf": 1}, "howard.objects.database.Database.get_database_dirname": {"tf": 1.4142135623730951}, "howard.objects.database.Database.exists": {"tf": 1}, "howard.objects.database.Database.set_format": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_format": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.get_database_table": {"tf": 1}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1.4142135623730951}, "howard.objects.database.Database.create_view": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_view": {"tf": 1.7320508075688772}, "howard.objects.database.Database.is_compressed": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 2.23606797749979}, "howard.objects.database.Database.map_columns": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_annotations": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 2}, "howard.objects.database.Database.is_vcf": {"tf": 2}, "howard.objects.database.Database.is_genotype_column": {"tf": 1.7320508075688772}, "howard.objects.database.Database.export": {"tf": 4}, "howard.objects.genome.MockGenome.__init__": {"tf": 1.4142135623730951}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 2.23606797749979}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 3.605551275463989}, "howard.objects.hgvs.HGVSName.parse": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 2}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.__init__": {"tf": 2.8284271247461903}, "howard.objects.transcript.Transcript.strand": {"tf": 1}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 1}, "howard.objects.transcript.BED6Interval.distance": {"tf": 1}, "howard.objects.transcript.Exon.__init__": {"tf": 1.7320508075688772}, "howard.objects.transcript.Exon.name": {"tf": 1.4142135623730951}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 2}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_samples": {"tf": 1}, "howard.objects.variants.Variants.set_config": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.init_variables": {"tf": 1}, "howard.objects.variants.Variants.set_output": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.print_stats": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1}, "howard.objects.variants.Variants.get_output_format": {"tf": 1}, "howard.objects.variants.Variants.get_header_length": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 2}, "howard.objects.variants.Variants.load_data": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 2}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.drop_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.explode_infos": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_output": {"tf": 3.1622776601683795}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.export_header": {"tf": 2}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.get_memory": {"tf": 1}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1}, "howard.objects.variants.Variants.scan_databases": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.get_config_json": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.prioritization": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 3}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 2}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 2.8284271247461903}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 2.449489742783178}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.gui.gui": {"tf": 1.7320508075688772}, "howard.tools.prioritization.prioritization": {"tf": 1}, "howard.tools.process.process": {"tf": 1}, "howard.tools.query.query": {"tf": 1}, "howard.tools.stats.stats": {"tf": 2.23606797749979}, "howard.tools.tools.PathType.__init__": {"tf": 1.4142135623730951}}, "df": 212}, "n": {"docs": {"howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}}, "df": 2}}, "r": {"docs": {"howard.objects.hgvs": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}}, "df": 3, "s": {"docs": {"howard.functions.commons.run_parallel_commands": {"tf": 1.7320508075688772}, "howard.functions.commons.run_parallel_functions": {"tf": 2}, "howard.functions.commons.extract_file": {"tf": 1.7320508075688772}, "howard.functions.commons.download_file": {"tf": 1.7320508075688772}, "howard.functions.commons.get_threads": {"tf": 3}, "howard.functions.commons.concat_into_infile": {"tf": 1.7320508075688772}, "howard.functions.commons.concat_and_compress_files": {"tf": 2.23606797749979}, "howard.functions.commons.duckdb_execute": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_annovar": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_snpeff": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_genomes": {"tf": 2}, "howard.functions.databases.databases_download_refseq": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 2}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_exomiser": {"tf": 2}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_hgmd": {"tf": 1.7320508075688772}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1.4142135623730951}, "howard.objects.database.Database.export": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_connexion_config": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 2}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.run_commands": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_threads": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.annotation_snpsift": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_bcftools": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_snpeff": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_parquet": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_splice": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 2.23606797749979}}, "df": 33}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.concat_into_infile": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}}, "df": 6}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.find_nomen": {"tf": 1.7320508075688772}, "howard.functions.commons.explode_annotation_format": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.findbypipeline": {"tf": 1}, "howard.functions.commons.genotype_barcode": {"tf": 1}, "howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.functions.commons.genotype_stats": {"tf": 1.4142135623730951}, "howard.functions.commons.download_file": {"tf": 1.4142135623730951}, "howard.functions.commons.get_bin": {"tf": 1.4142135623730951}, "howard.functions.commons.get_bin_command": {"tf": 1.4142135623730951}, "howard.functions.commons.get_tmp": {"tf": 1.4142135623730951}, "howard.functions.commons.get_threads": {"tf": 1}, "howard.functions.commons.get_memory": {"tf": 1}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.compress_file": {"tf": 1}, "howard.functions.commons.get_file_compressed": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1}, "howard.functions.commons.load_duckdb_extension": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 2}, "howard.functions.commons.help_generation_from_json": {"tf": 1.4142135623730951}, "howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.bed_sort": {"tf": 1}, "howard.functions.commons.full_path": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.load_config_args": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 2}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1.7320508075688772}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1.4142135623730951}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_refseq": {"tf": 2.23606797749979}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 2.6457513110645907}, "howard.functions.databases.databases_download_exomiser": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.from_annovar": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 2.449489742783178}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1.4142135623730951}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.functions.plugins.plugins_infos": {"tf": 1.4142135623730951}, "howard.functions.plugins.plugins_list": {"tf": 1.4142135623730951}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.functions.utils.read_transcripts": {"tf": 1.4142135623730951}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.create_refseq_table": {"tf": 1.4142135623730951}, "howard.functions.utils.get_refseq_table": {"tf": 1.4142135623730951}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1.7320508075688772}, "howard.objects.database.Database.set_database": {"tf": 1}, "howard.objects.database.Database.set_databases_folders": {"tf": 1}, "howard.objects.database.Database.get_database_folders": {"tf": 1}, "howard.objects.database.Database.read_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.find_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.query": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_assembly": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_assembly": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database": {"tf": 1}, "howard.objects.database.Database.get_database_basename": {"tf": 1}, "howard.objects.database.Database.get_database_dirname": {"tf": 1}, "howard.objects.database.Database.exists": {"tf": 1}, "howard.objects.database.Database.set_format": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 2}, "howard.objects.database.Database.get_database_tables": {"tf": 1}, "howard.objects.database.Database.get_database_table": {"tf": 1}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1}, "howard.objects.database.Database.get_view": {"tf": 1}, "howard.objects.database.Database.is_compressed": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_annotations": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 2.449489742783178}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1.7320508075688772}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}, "howard.objects.variants.Variants.get_samples": {"tf": 1}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1}, "howard.objects.variants.Variants.set_param": {"tf": 1}, "howard.objects.variants.Variants.init_variables": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_table_variants": {"tf": 1}, "howard.objects.variants.Variants.close_connexion": {"tf": 1}, "howard.objects.variants.Variants.get_header": {"tf": 1}, "howard.objects.variants.Variants.get_header_infos_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_length": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_sql": {"tf": 1}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 2}, "howard.objects.variants.Variants.load_data": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.export_header": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_threads": {"tf": 1}, "howard.objects.variants.Variants.get_memory": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.drop_variants_table": {"tf": 1}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1}, "howard.objects.variants.Variants.scan_databases": {"tf": 1}, "howard.objects.variants.Variants.annotation_snpsift": {"tf": 1}, "howard.objects.variants.Variants.annotation_bcftools": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_snpeff": {"tf": 1}, "howard.objects.variants.Variants.annotation_splice": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_extract_nomen": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 2}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 2}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 2.449489742783178}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.gui.gui": {"tf": 1}, "howard.tools.query.query": {"tf": 1}}, "df": 147}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.databases.databases": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.help_generation": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}}, "df": 3}}}}, "o": {"docs": {"howard.functions.commons.remove_if_exists": {"tf": 1}, "howard.functions.commons.split_interval": {"tf": 1}, "howard.functions.commons.create_where_clause": {"tf": 1.7320508075688772}, "howard.functions.commons.command": {"tf": 1.4142135623730951}, "howard.functions.commons.run_parallel_commands": {"tf": 1.4142135623730951}, "howard.functions.commons.run_parallel_functions": {"tf": 1.4142135623730951}, "howard.functions.commons.find": {"tf": 1.4142135623730951}, "howard.functions.commons.find_all": {"tf": 1.4142135623730951}, "howard.functions.commons.find_genome": {"tf": 2.23606797749979}, "howard.functions.commons.find_file_prefix": {"tf": 1.7320508075688772}, "howard.functions.commons.find_nomen": {"tf": 2.23606797749979}, "howard.functions.commons.explode_annotation_format": {"tf": 3.7416573867739413}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1.7320508075688772}, "howard.functions.commons.explode_snpeff_ann": {"tf": 2.8284271247461903}, "howard.functions.commons.get_index": {"tf": 1.4142135623730951}, "howard.functions.commons.get_file_format": {"tf": 1}, "howard.functions.commons.findbypipeline": {"tf": 1}, "howard.functions.commons.genotypeconcordance": {"tf": 1}, "howard.functions.commons.barcode": {"tf": 1}, "howard.functions.commons.trio": {"tf": 1}, "howard.functions.commons.vaf_normalization": {"tf": 1.7320508075688772}, "howard.functions.commons.genotype_stats": {"tf": 2}, "howard.functions.commons.extract_file": {"tf": 2.23606797749979}, "howard.functions.commons.download_file": {"tf": 4.898979485566356}, "howard.functions.commons.get_bin": {"tf": 2.8284271247461903}, "howard.functions.commons.get_bin_command": {"tf": 3.872983346207417}, "howard.functions.commons.get_tmp": {"tf": 2.23606797749979}, "howard.functions.commons.get_threads": {"tf": 2.23606797749979}, "howard.functions.commons.get_memory": {"tf": 2.449489742783178}, "howard.functions.commons.extract_float_from_str": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_memory_in_go": {"tf": 1.7320508075688772}, "howard.functions.commons.concat_file": {"tf": 1.4142135623730951}, "howard.functions.commons.compress_file": {"tf": 1}, "howard.functions.commons.get_compression_type": {"tf": 1.4142135623730951}, "howard.functions.commons.get_file_compressed": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 2.8284271247461903}, "howard.functions.commons.concat_and_compress_files": {"tf": 4.242640687119285}, "howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1}, "howard.functions.commons.load_duckdb_extension": {"tf": 1.4142135623730951}, "howard.functions.commons.duckdb_execute": {"tf": 2}, "howard.functions.commons.get_argument": {"tf": 3}, "howard.functions.commons.get_argument_gooey": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 2.23606797749979}, "howard.functions.commons.help_generation_from_dict": {"tf": 4.358898943540674}, "howard.functions.commons.help_generation_from_json": {"tf": 3.605551275463989}, "howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1.7320508075688772}, "howard.functions.commons.format_arg_help": {"tf": 1}, "howard.functions.commons.bed_sort": {"tf": 1.7320508075688772}, "howard.functions.commons.full_path": {"tf": 1}, "howard.functions.commons.get_default_argument": {"tf": 1.4142135623730951}, "howard.functions.commons.set_param": {"tf": 2.8284271247461903}, "howard.functions.commons.add_value_into_dict": {"tf": 2}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.load_config_args": {"tf": 1.4142135623730951}, "howard.functions.commons.load_args": {"tf": 3.1622776601683795}, "howard.functions.commons.get_random": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 2}, "howard.functions.commons.identical": {"tf": 2.6457513110645907}, "howard.functions.commons.params_string_to_dict": {"tf": 4.242640687119285}, "howard.functions.commons.determine_value_type": {"tf": 2.449489742783178}, "howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.commons.clean_annotation_field": {"tf": 1.7320508075688772}, "howard.functions.databases.generate_databases_param": {"tf": 1.7320508075688772}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_infos": {"tf": 2.6457513110645907}, "howard.functions.databases.databases_param": {"tf": 2.6457513110645907}, "howard.functions.databases.databases_download_annovar": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_snpeff": {"tf": 3}, "howard.functions.databases.databases_download_genomes": {"tf": 3.1622776601683795}, "howard.functions.databases.databases_download_refseq": {"tf": 6.082762530298219}, "howard.functions.databases.databases_format_refseq": {"tf": 6.082762530298219}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 6.48074069840786}, "howard.functions.databases.databases_download_alphamissense": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_exomiser": {"tf": 5}, "howard.functions.databases.databases_download_dbsnp": {"tf": 4.898979485566356}, "howard.functions.databases.databases_download_hgmd": {"tf": 4.358898943540674}, "howard.functions.from_annovar.from_annovar": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 5}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 3.1622776601683795}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 3.605551275463989}, "howard.functions.from_extann.create_metaheader": {"tf": 1}, "howard.functions.from_extann.read_json": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}, "howard.functions.plugins.plugins_infos": {"tf": 2}, "howard.functions.plugins.plugins_list": {"tf": 2}, "howard.functions.plugins.plugins_to_load": {"tf": 1.7320508075688772}, "howard.functions.utils.read_refgene": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 2}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 2.23606797749979}, "howard.functions.utils.read_transcripts": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1.4142135623730951}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1.7320508075688772}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 2}, "howard.functions.utils.parse_hgvs_name": {"tf": 4.58257569495584}, "howard.functions.utils.cdna_to_protein": {"tf": 2.8284271247461903}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 4.242640687119285}, "howard.functions.utils.format_hgvs_name": {"tf": 6.324555320336759}, "howard.functions.utils.create_refseq_table": {"tf": 2.23606797749979}, "howard.functions.utils.get_refseq_table": {"tf": 2}, "howard.functions.utils.get_transcript": {"tf": 1}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 3}, "howard.objects.database.Database.set_database": {"tf": 2}, "howard.objects.database.Database.set_databases_folders": {"tf": 1}, "howard.objects.database.Database.read_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.find_header_file": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_header": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_header_from_columns": {"tf": 3}, "howard.objects.database.Database.query": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 2}, "howard.objects.database.Database.set_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_file": {"tf": 3.605551275463989}, "howard.objects.database.Database.set_assembly": {"tf": 1.7320508075688772}, "howard.objects.database.Database.find_database": {"tf": 2}, "howard.objects.database.Database.get_database_basename": {"tf": 1}, "howard.objects.database.Database.get_database_dirname": {"tf": 1.7320508075688772}, "howard.objects.database.Database.exists": {"tf": 1}, "howard.objects.database.Database.set_format": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_type": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_database_tables": {"tf": 1}, "howard.objects.database.Database.get_database_table": {"tf": 1}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_needed_columns": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_sql_from": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 2.6457513110645907}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1.4142135623730951}, "howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.database.Database.get_view": {"tf": 1.7320508075688772}, "howard.objects.database.Database.is_compressed": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 3.3166247903554}, "howard.objects.database.Database.map_columns": {"tf": 2.8284271247461903}, "howard.objects.database.Database.get_columns": {"tf": 3.3166247903554}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1}, "howard.objects.database.Database.get_annotations": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 2.6457513110645907}, "howard.objects.database.Database.is_vcf": {"tf": 2}, "howard.objects.database.Database.is_genotype_column": {"tf": 3.3166247903554}, "howard.objects.database.Database.export": {"tf": 6.164414002968976}, "howard.objects.genome.ChromosomeSubset": {"tf": 1}, "howard.objects.genome.MockGenome.__init__": {"tf": 1.4142135623730951}, "howard.objects.genome.MockGenome.write": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 2}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 4.242640687119285}, "howard.objects.hgvs.HGVSName.parse": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 2}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 4.69041575982343}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 4.47213595499958}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 2.23606797749979}, "howard.objects.transcript.Transcript.__init__": {"tf": 3.1622776601683795}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 2}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1.4142135623730951}, "howard.objects.transcript.BED6Interval.distance": {"tf": 1.4142135623730951}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1.7320508075688772}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1.7320508075688772}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 2}, "howard.objects.variant.justify_indel": {"tf": 1.4142135623730951}, "howard.objects.variant.normalize_variant": {"tf": 1}, "howard.objects.variant.NormalizedVariant": {"tf": 1}, "howard.objects.variants.Variants.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_samples": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.set_input": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_connexion": {"tf": 2}, "howard.objects.variants.Variants.set_output": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 3}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.print_stats": {"tf": 1}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_output_format": {"tf": 1}, "howard.objects.variants.Variants.get_table_variants": {"tf": 1}, "howard.objects.variants.Variants.close_connexion": {"tf": 1}, "howard.objects.variants.Variants.get_header": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_length": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 2.8284271247461903}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 3.872983346207417}, "howard.objects.variants.Variants.load_data": {"tf": 2.8284271247461903}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 3}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 3.605551275463989}, "howard.objects.variants.Variants.drop_column": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.explode_infos": {"tf": 4.123105625617661}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.execute_query": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 3.7416573867739413}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 4}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 3.872983346207417}, "howard.objects.variants.Variants.run_commands": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_threads": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.get_memory": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.scan_databases": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation_snpsift": {"tf": 1}, "howard.objects.variants.Variants.annotation_bcftools": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.annotation_snpeff": {"tf": 1}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 1}, "howard.objects.variants.Variants.annotation_parquet": {"tf": 1}, "howard.objects.variants.Variants.annotation_splice": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_config_json": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.prioritization": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_variant_id": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 2}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 2}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_trio": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 3.872983346207417}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 3.7416573867739413}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 5.196152422706632}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 4.123105625617661}, "howard.tools.annotation.annotation": {"tf": 1}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1.7320508075688772}, "howard.tools.gui.gui": {"tf": 1.4142135623730951}, "howard.tools.help.help": {"tf": 1.7320508075688772}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1.7320508075688772}, "howard.tools.process.process": {"tf": 1.7320508075688772}, "howard.tools.query.query": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1.4142135623730951}, "howard.tools.tools.PathType.__init__": {"tf": 1}}, "df": 254, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 2}}, "df": 3}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.findbypipeline": {"tf": 1}, "howard.functions.commons.get_memory": {"tf": 1.7320508075688772}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.get_bin": {"tf": 2.449489742783178}, "howard.functions.commons.get_bin_command": {"tf": 3.872983346207417}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}}, "df": 4, "s": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}}, "df": 2}}}, "c": {"docs": {"howard.functions.commons.help_generation_from_json": {"tf": 2}}, "df": 1}}, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1}, "howard.objects.cdna.CDNACoord": {"tf": 1}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 6, "s": {"docs": {"howard.functions.commons.split_interval": {"tf": 1}, "howard.functions.commons.merge_regions": {"tf": 1}, "howard.functions.commons.create_where_clause": {"tf": 1}, "howard.functions.commons.run_parallel_commands": {"tf": 1}, "howard.functions.commons.run_parallel_functions": {"tf": 1}, "howard.functions.commons.example_function": {"tf": 1}, "howard.functions.commons.find_nomen": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.get_file_format": {"tf": 1}, "howard.functions.commons.findbypipeline": {"tf": 1}, "howard.functions.commons.genotype_compression": {"tf": 1}, "howard.functions.commons.genotype_barcode": {"tf": 1}, "howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.functions.commons.get_file_compressed": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.genome_build_switch": {"tf": 1}, "howard.functions.commons.get_argument_gooey": {"tf": 1}, "howard.functions.commons.full_path": {"tf": 1.4142135623730951}, "howard.functions.commons.get_default_argument": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_param": {"tf": 1.4142135623730951}, "howard.functions.commons.load_config_args": {"tf": 1.4142135623730951}, "howard.functions.commons.detect_column_type": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.utils.make_transcript": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.get_transcript": {"tf": 1}, "howard.objects.database.Database.query": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_samples": {"tf": 1}, "howard.objects.variants.Variants.set_input": {"tf": 1}, "howard.objects.variants.Variants.set_config": {"tf": 1}, "howard.objects.variants.Variants.set_param": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}, "howard.objects.variants.Variants.execute_query": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.objects.variants.Variants.run_commands": {"tf": 1}, "howard.objects.variants.Variants.get_memory": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 1}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 1}, "howard.objects.variants.Variants.annotation_parquet": {"tf": 1}, "howard.objects.variants.Variants.calculation": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}}, "df": 56}, "n": {"docs": {"howard.functions.commons.determine_value_type": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.transcript.Transcript.get_cds_start_stop": {"tf": 1}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1}}, "df": 3}}}}, "b": {"docs": {"howard.functions.commons.bed_sort": {"tf": 1.7320508075688772}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}}, "df": 4, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.create_where_clause": {"tf": 1.7320508075688772}, "howard.functions.commons.help_generation_from_dict": {"tf": 3}, "howard.functions.commons.help_generation_from_json": {"tf": 1.4142135623730951}, "howard.functions.utils.create_refseq_table": {"tf": 2.8284271247461903}, "howard.functions.utils.get_refseq_table": {"tf": 3.3166247903554}, "howard.objects.database.Database.__init__": {"tf": 2.6457513110645907}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1}, "howard.objects.database.Database.get_database_table": {"tf": 2}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 2.449489742783178}, "howard.objects.database.Database.map_columns": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_columns": {"tf": 3}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 2}, "howard.objects.database.Database.get_extra_columns": {"tf": 1.7320508075688772}, "howard.objects.database.Database.is_genotype_column": {"tf": 1.7320508075688772}, "howard.objects.database.Database.export": {"tf": 1.7320508075688772}, "howard.objects.genome.MockGenome.__init__": {"tf": 1.7320508075688772}, "howard.objects.genome.MockGenome.read": {"tf": 1}, "howard.objects.genome.MockGenome.write": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_table_variants": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.load_data": {"tf": 2.8284271247461903}, "howard.objects.variants.Variants.add_column": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.drop_column": {"tf": 2.8284271247461903}, "howard.objects.variants.Variants.explode_infos": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.create_indexes": {"tf": 1}, "howard.objects.variants.Variants.drop_indexes": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 2}, "howard.objects.variants.Variants.drop_variants_table": {"tf": 1}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.prioritization": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_variant_id": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 2.8284271247461903}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 3.605551275463989}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 3}}, "df": 52, "s": {"docs": {"howard.objects.database.Database.get_database_tables": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 2}}, "df": 3}}}, "i": {"docs": {}, "df": 0, "x": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}}, "df": 2}}}, "g": {"docs": {"howard.functions.commons.check_docker_image_exists": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 2}}, "df": 4, "s": {"docs": {"howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}}, "df": 3}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.find_all": {"tf": 1}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.transcript.Transcript.get_cds_start_stop": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}}, "df": 9, "s": {"docs": {"howard.functions.commons.merge_regions": {"tf": 1.4142135623730951}, "howard.functions.commons.create_where_clause": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}}, "df": 3}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.find": {"tf": 1}, "howard.functions.commons.find_all": {"tf": 1}, "howard.functions.commons.add_value_into_dict": {"tf": 2.6457513110645907}}, "df": 3}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.find_genome": {"tf": 1}, "howard.objects.variants.Variants.set_samples": {"tf": 1}}, "df": 2}}, "o": {"docs": {"howard.functions.commons.trio": {"tf": 2}, "howard.objects.variants.Variants.calculation_trio": {"tf": 1.7320508075688772}}, "df": 2}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_refseq": {"tf": 2.23606797749979}, "howard.functions.databases.databases_format_refseq": {"tf": 2.23606797749979}, "howard.functions.from_extann.get_longest_transcript": {"tf": 1.4142135623730951}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1.4142135623730951}, "howard.functions.utils.read_genepred": {"tf": 1.4142135623730951}, "howard.functions.utils.make_transcript": {"tf": 2.6457513110645907}, "howard.functions.utils.get_vcf_allele": {"tf": 2.23606797749979}, "howard.functions.utils.get_alt_from_sequence": {"tf": 2.23606797749979}, "howard.functions.utils.matches_ref_allele": {"tf": 2}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 2}, "howard.functions.utils.parse_hgvs_name": {"tf": 3.3166247903554}, "howard.functions.utils.cdna_to_protein": {"tf": 2}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 2.8284271247461903}, "howard.functions.utils.format_hgvs_name": {"tf": 3.1622776601683795}, "howard.functions.utils.get_transcript": {"tf": 1.7320508075688772}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.hgvs": {"tf": 2.6457513110645907}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 2.8284271247461903}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 2.449489742783178}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 2.23606797749979}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.__init__": {"tf": 3.605551275463989}, "howard.objects.transcript.Transcript.is_coding": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.start_codon": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.stop_codon": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1}, "howard.objects.transcript.Exon.__init__": {"tf": 2.8284271247461903}, "howard.objects.transcript.Exon.name": {"tf": 1.7320508075688772}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 2.8284271247461903}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 3.605551275463989}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 3.7416573867739413}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 3}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 2.23606797749979}}, "df": 39, "s": {"docs": {"howard.functions.commons.find_nomen": {"tf": 1.7320508075688772}, "howard.functions.commons.transcripts_file_to_df": {"tf": 2}, "howard.functions.databases.databases_download_refseq": {"tf": 2.23606797749979}, "howard.functions.databases.databases_format_refseq": {"tf": 2.8284271247461903}, "howard.functions.utils.read_transcripts": {"tf": 2.449489742783178}, "howard.functions.utils.get_transcript": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 2.8284271247461903}, "howard.objects.variants.Variants.calculation_transcripts_prioritization": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 3.1622776601683795}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 3.1622776601683795}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 3.1622776601683795}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 4.795831523312719}}, "df": 14}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.utils.read_genepred": {"tf": 1.4142135623730951}, "howard.objects.cdna.CDNACoord": {"tf": 1}}, "df": 2}}}, "/": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.HGVSName.format_prefix": {"tf": 2}}, "df": 1, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.utils.format_hgvs_name": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.objects.cdna.CDNACoord": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 3, "s": {"docs": {"howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 2}}}}}}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.load_args": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}}, "df": 3}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.add_value_into_dict": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.identical": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.from_extann.get_all_transcript": {"tf": 1}}, "df": 1}}}}}}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.genotypeconcordance": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 2.449489742783178}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.get_file_compressed": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1.4142135623730951}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 2}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1.7320508075688772}, "howard.functions.commons.check_docker_image_exists": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1.4142135623730951}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 3.4641016151377544}, "howard.functions.databases.databases_format_refseq": {"tf": 4.123105625617661}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 2.6457513110645907}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_hgmd": {"tf": 2}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.utils.read_refgene": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 2.23606797749979}, "howard.functions.utils.format_hgvs_name": {"tf": 2.8284271247461903}, "howard.objects.database.Database.get_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.is_genotype_column": {"tf": 1.7320508075688772}, "howard.objects.database.Database.export": {"tf": 2.449489742783178}, "howard.objects.hgvs.HGVSName.format": {"tf": 3.1622776601683795}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 2.6457513110645907}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.transcript.Transcript.strand": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.load_data": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.drop_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.explode_infos": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.export_output": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.export_header": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}, "howard.tools.tools.PathType.__init__": {"tf": 1.4142135623730951}}, "df": 61}}, "y": {"docs": {"howard.functions.commons.download_file": {"tf": 1.4142135623730951}, "howard.functions.commons.get_memory": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}}, "df": 4}, "p": {"docs": {"howard.objects.hgvs": {"tf": 1}}, "df": 1}}, "v": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.find_nomen": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.find_nomen": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.find_nomen": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.find_nomen": {"tf": 1}}, "df": 1}}}}}}, "w": {"docs": {}, "df": 0, "o": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.get_argument_gooey": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.get_default_argument": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.objects.variants.Variants.drop_column": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}}, "df": 10}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.trio": {"tf": 1.4142135623730951}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.commons.get_bin": {"tf": 1.7320508075688772}, "howard.functions.commons.get_bin_command": {"tf": 2.6457513110645907}, "howard.functions.commons.get_compression_type": {"tf": 2.449489742783178}, "howard.functions.commons.concat_into_infile": {"tf": 1.7320508075688772}, "howard.functions.commons.concat_and_compress_files": {"tf": 2}, "howard.functions.commons.help_generation_from_dict": {"tf": 2.8284271247461903}, "howard.functions.commons.help_generation_from_json": {"tf": 2.23606797749979}, "howard.functions.commons.help_generation": {"tf": 2}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 3.1622776601683795}, "howard.functions.commons.determine_column_types": {"tf": 1.7320508075688772}, "howard.functions.commons.detect_column_type": {"tf": 2.449489742783178}, "howard.functions.from_extann.metaheader_rows": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1.4142135623730951}, "howard.functions.utils.cdna_to_protein": {"tf": 2.449489742783178}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 2.449489742783178}, "howard.functions.utils.format_hgvs_name": {"tf": 1.7320508075688772}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.objects.database.Database.set_assembly": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 1}, "howard.objects.database.Database.get_database": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_type": {"tf": 2.6457513110645907}, "howard.objects.database.Database.get_type_from_columns": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_needed_columns": {"tf": 2.8284271247461903}, "howard.objects.database.Database.get_extra_columns": {"tf": 2.449489742783178}, "howard.objects.database.Database.is_vcf": {"tf": 1.7320508075688772}, "howard.objects.database.Database.export": {"tf": 2}, "howard.objects.hgvs.get_refseq_type": {"tf": 2}, "howard.objects.hgvs.InvalidHGVSName": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 2.449489742783178}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1}, "howard.objects.transcript.Exon.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1}, "howard.objects.variants.Variants.get_table_variants": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_type": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.add_column": {"tf": 2}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.tools.gui.gui": {"tf": 1}, "howard.tools.help.help": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.tools.PathType.__init__": {"tf": 1}}, "df": 59, "s": {"docs": {"howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.determine_column_types": {"tf": 1.7320508075688772}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_type": {"tf": 1}}, "df": 9}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.clean_annotation_field": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.4142135623730951}}, "df": 4}}}}}}}, "r": {"docs": {"howard.objects.hgvs": {"tf": 1}}, "df": 1}}, "x": {"docs": {"howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.strand": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.ordered_cdna_match": {"tf": 1}, "howard.objects.transcript.Exon.__init__": {"tf": 1.4142135623730951}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1.4142135623730951}}, "df": 6, "t": {"docs": {"howard.functions.commons.download_file": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_refseq": {"tf": 2}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}}, "df": 4}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.utils.read_genepred": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.utils.read_genepred": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.download_file": {"tf": 1.7320508075688772}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}}, "df": 7}}, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.help_generation_from_json": {"tf": 2.23606797749979}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.commons.get_tmp": {"tf": 4.123105625617661}, "howard.objects.variants.Variants.get_tmp_dir": {"tf": 1.7320508075688772}}, "df": 2}}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.get_tmp": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.print_stats": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_tmp_dir": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_header": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 2.8284271247461903}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.4142135623730951}}, "df": 8}}}}}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.extract_float_from_str": {"tf": 1.7320508075688772}, "howard.functions.commons.get_argument_to_mk": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.clean_annotation_field": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.add_column": {"tf": 1}}, "df": 5}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.determine_column_types": {"tf": 1}}, "df": 1}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.from_annovar.parquet_info_explode": {"tf": 1}}, "df": 1}}}}}}}}}, "s": {"docs": {}, "df": 0, "v": {"docs": {"howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_hgmd": {"tf": 2.449489742783178}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 3.3166247903554}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.4142135623730951}}, "df": 9}}}, "f": {"docs": {"howard.objects.variants.Variants.read_vcf_header": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.remove_if_exists": {"tf": 1}, "howard.functions.commons.example_function": {"tf": 1}, "howard.functions.commons.find_all": {"tf": 1}, "howard.functions.commons.find_genome": {"tf": 1}, "howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.functions.commons.find_nomen": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 2.8284271247461903}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 2.8284271247461903}, "howard.functions.commons.get_index": {"tf": 1.7320508075688772}, "howard.functions.commons.findbypipeline": {"tf": 1.4142135623730951}, "howard.functions.commons.genotypeconcordance": {"tf": 1}, "howard.functions.commons.genotype_compression": {"tf": 1.4142135623730951}, "howard.functions.commons.genotype_barcode": {"tf": 1.4142135623730951}, "howard.functions.commons.trio": {"tf": 1.4142135623730951}, "howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.functions.commons.genotype_stats": {"tf": 1.7320508075688772}, "howard.functions.commons.extract_file": {"tf": 1.7320508075688772}, "howard.functions.commons.download_file": {"tf": 2}, "howard.functions.commons.get_bin": {"tf": 1.7320508075688772}, "howard.functions.commons.get_bin_command": {"tf": 3.605551275463989}, "howard.functions.commons.get_tmp": {"tf": 2.8284271247461903}, "howard.functions.commons.get_threads": {"tf": 2.23606797749979}, "howard.functions.commons.get_memory": {"tf": 2.449489742783178}, "howard.functions.commons.extract_float_from_str": {"tf": 2}, "howard.functions.commons.extract_memory_in_go": {"tf": 2}, "howard.functions.commons.concat_file": {"tf": 1.7320508075688772}, "howard.functions.commons.compress_file": {"tf": 1}, "howard.functions.commons.get_compression_type": {"tf": 1.4142135623730951}, "howard.functions.commons.get_file_compressed": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1.4142135623730951}, "howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1.7320508075688772}, "howard.functions.commons.load_duckdb_extension": {"tf": 1}, "howard.functions.commons.duckdb_execute": {"tf": 1.4142135623730951}, "howard.functions.commons.genome_build_switch": {"tf": 1.4142135623730951}, "howard.functions.commons.get_argument": {"tf": 2.23606797749979}, "howard.functions.commons.get_argument_gooey": {"tf": 1.4142135623730951}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 4.358898943540674}, "howard.functions.commons.help_generation_from_json": {"tf": 2.449489742783178}, "howard.functions.commons.help_generation": {"tf": 1.7320508075688772}, "howard.functions.commons.format_arg_help": {"tf": 2.23606797749979}, "howard.functions.commons.bed_sort": {"tf": 1}, "howard.functions.commons.full_path": {"tf": 2}, "howard.functions.commons.get_default_argument": {"tf": 2}, "howard.functions.commons.set_param": {"tf": 2.6457513110645907}, "howard.functions.commons.add_value_into_dict": {"tf": 2}, "howard.functions.commons.load_param": {"tf": 1.7320508075688772}, "howard.functions.commons.load_config_args": {"tf": 2}, "howard.functions.commons.load_args": {"tf": 3.1622776601683795}, "howard.functions.commons.get_random": {"tf": 1.4142135623730951}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1.4142135623730951}, "howard.functions.commons.identical": {"tf": 2.23606797749979}, "howard.functions.commons.params_string_to_dict": {"tf": 3.3166247903554}, "howard.functions.commons.determine_value_type": {"tf": 2.23606797749979}, "howard.functions.commons.determine_column_types": {"tf": 2}, "howard.functions.commons.detect_column_type": {"tf": 2}, "howard.functions.commons.clean_annotation_field": {"tf": 1.4142135623730951}, "howard.functions.databases.generate_databases_param": {"tf": 1.7320508075688772}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_param": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 2}, "howard.functions.databases.databases_format_refseq": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 4.358898943540674}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_exomiser": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_hgmd": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.from_annovar": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 2.6457513110645907}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1.7320508075688772}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1.4142135623730951}, "howard.functions.from_extann.from_extann": {"tf": 1.4142135623730951}, "howard.functions.plugins.plugins_infos": {"tf": 2}, "howard.functions.plugins.plugins_list": {"tf": 2}, "howard.functions.plugins.plugins_to_load": {"tf": 1.4142135623730951}, "howard.functions.utils.read_refgene": {"tf": 1.4142135623730951}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.make_transcript": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1.4142135623730951}, "howard.functions.utils.read_transcripts": {"tf": 1.4142135623730951}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1.4142135623730951}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 2.23606797749979}, "howard.functions.utils.cdna_to_protein": {"tf": 1.4142135623730951}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 2}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.functions.utils.create_refseq_table": {"tf": 1.7320508075688772}, "howard.functions.utils.get_refseq_table": {"tf": 2}, "howard.functions.utils.get_transcript": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.database.Database.set_database": {"tf": 1}, "howard.objects.database.Database.set_databases_folders": {"tf": 1}, "howard.objects.database.Database.get_database_folders": {"tf": 1}, "howard.objects.database.Database.read_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_length": {"tf": 1}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_from_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.find_header_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 3.4641016151377544}, "howard.objects.database.Database.get_header_from_columns": {"tf": 2}, "howard.objects.database.Database.query": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 2.449489742783178}, "howard.objects.database.Database.set_assembly": {"tf": 1}, "howard.objects.database.Database.get_assembly": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 2.6457513110645907}, "howard.objects.database.Database.get_database": {"tf": 1}, "howard.objects.database.Database.get_database_basename": {"tf": 1}, "howard.objects.database.Database.get_database_dirname": {"tf": 1}, "howard.objects.database.Database.exists": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_format": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_type": {"tf": 2.6457513110645907}, "howard.objects.database.Database.get_database_tables": {"tf": 1}, "howard.objects.database.Database.get_database_table": {"tf": 1}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_needed_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_from": {"tf": 2}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1}, "howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.database.Database.get_view": {"tf": 1}, "howard.objects.database.Database.is_compressed": {"tf": 2}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1.7320508075688772}, "howard.objects.database.Database.map_columns": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 3}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1}, "howard.objects.database.Database.get_annotations": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_extra_columns": {"tf": 1.7320508075688772}, "howard.objects.database.Database.is_vcf": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_conn": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1.7320508075688772}, "howard.objects.database.Database.export": {"tf": 4}, "howard.objects.hgvs.get_refseq_type": {"tf": 1.4142135623730951}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.transcript.Transcript.full_name": {"tf": 1}, "howard.objects.transcript.Transcript.is_coding": {"tf": 1}, "howard.objects.transcript.Transcript.strand": {"tf": 1}, "howard.objects.transcript.Transcript.ordered_cdna_match": {"tf": 1}, "howard.objects.transcript.Transcript.get_cds_start_stop": {"tf": 1}, "howard.objects.transcript.Transcript.start_codon": {"tf": 1}, "howard.objects.transcript.Transcript.stop_codon": {"tf": 1}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 1}, "howard.objects.transcript.BED6Interval.distance": {"tf": 1}, "howard.objects.transcript.Exon.__init__": {"tf": 1}, "howard.objects.transcript.Exon.name": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1.7320508075688772}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}, "howard.objects.transcript.CDNA_Match.length": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_samples": {"tf": 1}, "howard.objects.variants.Variants.get_samples": {"tf": 1}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1}, "howard.objects.variants.Variants.set_input": {"tf": 1}, "howard.objects.variants.Variants.set_config": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.set_param": {"tf": 1}, "howard.objects.variants.Variants.init_variables": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_config": {"tf": 1}, "howard.objects.variants.Variants.get_duckdb_settings": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.set_output": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.get_overview": {"tf": 1}, "howard.objects.variants.Variants.get_stats": {"tf": 1}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_output_format": {"tf": 1}, "howard.objects.variants.Variants.get_table_variants": {"tf": 1}, "howard.objects.variants.Variants.get_tmp_dir": {"tf": 1}, "howard.objects.variants.Variants.close_connexion": {"tf": 1}, "howard.objects.variants.Variants.get_header": {"tf": 1}, "howard.objects.variants.Variants.get_header_infos_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_length": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_columns": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_sql": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 3.1622776601683795}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 2}, "howard.objects.variants.Variants.load_data": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.drop_column": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_output": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.export_header": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.get_threads": {"tf": 1}, "howard.objects.variants.Variants.get_memory": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.drop_variants_table": {"tf": 1}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1}, "howard.objects.variants.Variants.scan_databases": {"tf": 2}, "howard.objects.variants.Variants.annotation_snpsift": {"tf": 1}, "howard.objects.variants.Variants.annotation_bcftools": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_snpeff": {"tf": 1}, "howard.objects.variants.Variants.annotation_splice": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 2}, "howard.objects.variants.Variants.get_config_json": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.prioritization": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_variant_id": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_extract_nomen": {"tf": 1}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_concordance": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_trio": {"tf": 1}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 2.8284271247461903}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 2.8284271247461903}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1.7320508075688772}, "howard.tools.annotation.annotation": {"tf": 1.4142135623730951}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1.4142135623730951}, "howard.tools.gui.gui": {"tf": 1}, "howard.tools.help.help": {"tf": 1.4142135623730951}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}, "howard.tools.process.process": {"tf": 1.4142135623730951}, "howard.tools.query.query": {"tf": 1.4142135623730951}, "howard.tools.stats.stats": {"tf": 1.7320508075688772}, "howard.tools.tools.PathType.__init__": {"tf": 1}}, "df": 281, "s": {"docs": {"howard.functions.commons.run_parallel_functions": {"tf": 2}, "howard.functions.plugins.plugins_infos": {"tf": 1}, "howard.functions.utils": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1}}, "df": 4}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.find_all": {"tf": 1}, "howard.functions.commons.full_path": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.4142135623730951}, "howard.functions.utils.read_transcripts": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.full_name": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.4142135623730951}}, "df": 10}}, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 2}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.remove_if_exists": {"tf": 1.4142135623730951}, "howard.functions.commons.find": {"tf": 2}, "howard.functions.commons.find_all": {"tf": 1.4142135623730951}, "howard.functions.commons.find_genome": {"tf": 3}, "howard.functions.commons.find_file_prefix": {"tf": 3.3166247903554}, "howard.functions.commons.get_file_format": {"tf": 2}, "howard.functions.commons.extract_file": {"tf": 2.6457513110645907}, "howard.functions.commons.download_file": {"tf": 4.123105625617661}, "howard.functions.commons.get_bin": {"tf": 3.3166247903554}, "howard.functions.commons.get_bin_command": {"tf": 2}, "howard.functions.commons.concat_file": {"tf": 2.6457513110645907}, "howard.functions.commons.compress_file": {"tf": 2.449489742783178}, "howard.functions.commons.get_compression_type": {"tf": 2.449489742783178}, "howard.functions.commons.get_file_compressed": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_into_infile": {"tf": 3}, "howard.functions.commons.concat_and_compress_files": {"tf": 3.7416573867739413}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 2.23606797749979}, "howard.functions.commons.help_generation_from_json": {"tf": 2.6457513110645907}, "howard.functions.commons.help_generation": {"tf": 1.4142135623730951}, "howard.functions.commons.bed_sort": {"tf": 2.23606797749979}, "howard.functions.commons.load_param": {"tf": 1.4142135623730951}, "howard.functions.commons.transcripts_file_to_df": {"tf": 3.1622776601683795}, "howard.functions.commons.identical": {"tf": 1.4142135623730951}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 2.23606797749979}, "howard.functions.databases.databases_param": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_refseq": {"tf": 3}, "howard.functions.databases.databases_format_refseq": {"tf": 4.58257569495584}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 3.3166247903554}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_exomiser": {"tf": 3.3166247903554}, "howard.functions.databases.databases_download_dbsnp": {"tf": 3.4641016151377544}, "howard.functions.databases.databases_download_hgmd": {"tf": 2.6457513110645907}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 4.123105625617661}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 3}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 3.872983346207417}, "howard.functions.from_extann.create_metaheader": {"tf": 1.4142135623730951}, "howard.functions.from_extann.read_json": {"tf": 1}, "howard.functions.from_extann.write_extann": {"tf": 1}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}, "howard.functions.utils.read_refgene": {"tf": 1.4142135623730951}, "howard.functions.utils.read_genepred": {"tf": 2}, "howard.functions.utils.read_transcripts": {"tf": 2.6457513110645907}, "howard.functions.utils.create_refseq_table": {"tf": 2.449489742783178}, "howard.functions.utils.get_refseq_table": {"tf": 2}, "howard.main.main": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 2.8284271247461903}, "howard.objects.database.Database.read_header_file": {"tf": 2}, "howard.objects.database.Database.get_header_length": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_header_file_columns": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 2.449489742783178}, "howard.objects.database.Database.find_header_file": {"tf": 2.8284271247461903}, "howard.objects.database.Database.get_header": {"tf": 3.3166247903554}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 2.6457513110645907}, "howard.objects.database.Database.set_header_file": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_header_file": {"tf": 4.358898943540674}, "howard.objects.database.Database.find_database": {"tf": 2.8284271247461903}, "howard.objects.database.Database.get_database_basename": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_database_dirname": {"tf": 2.23606797749979}, "howard.objects.database.Database.exists": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_from": {"tf": 1.4142135623730951}, "howard.objects.database.Database.is_compressed": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_columns": {"tf": 2}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 3.1622776601683795}, "howard.objects.database.Database.is_vcf": {"tf": 1.4142135623730951}, "howard.objects.database.Database.export": {"tf": 4.898979485566356}, "howard.objects.genome.MockGenome.__init__": {"tf": 1.4142135623730951}, "howard.objects.genome.MockGenome.read": {"tf": 1.4142135623730951}, "howard.objects.genome.MockGenome.write": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.__init__": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_input": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_duckdb_settings": {"tf": 1}, "howard.objects.variants.Variants.set_output": {"tf": 2}, "howard.objects.variants.Variants.set_header": {"tf": 1}, "howard.objects.variants.Variants.get_stats": {"tf": 1}, "howard.objects.variants.Variants.stats_to_file": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.print_stats": {"tf": 3.3166247903554}, "howard.objects.variants.Variants.get_input_format": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.get_output_format": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.get_header": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_length": {"tf": 2}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 3.605551275463989}, "howard.objects.variants.Variants.load_data": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.export_output": {"tf": 4.47213595499958}, "howard.objects.variants.Variants.export_header": {"tf": 3.7416573867739413}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 3.605551275463989}, "howard.objects.variants.Variants.update_from_vcf": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 2}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 1}, "howard.objects.variants.Variants.annotation_parquet": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_config_json": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.prioritization": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_variant_id": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_trio": {"tf": 1}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.4142135623730951}, "howard.tools.annotation.annotation": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1.4142135623730951}, "howard.tools.query.query": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1.4142135623730951}, "howard.tools.tools.PathType.__init__": {"tf": 1}}, "df": 119, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"howard.functions.commons.remove_if_exists": {"tf": 1}, "howard.functions.commons.get_compression_type": {"tf": 1.7320508075688772}}, "df": 2, "s": {"docs": {"howard.functions.commons.remove_if_exists": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {"howard.functions.commons.find_all": {"tf": 1.7320508075688772}, "howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.get_tmp": {"tf": 1}, "howard.functions.commons.concat_file": {"tf": 2}, "howard.functions.commons.concat_into_infile": {"tf": 2.6457513110645907}, "howard.functions.commons.concat_and_compress_files": {"tf": 2.23606797749979}, "howard.functions.commons.identical": {"tf": 2.449489742783178}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.databases.databases_download_annovar": {"tf": 2.6457513110645907}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 4.242640687119285}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 3.7416573867739413}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_exomiser": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_dbsnp": {"tf": 3.7416573867739413}, "howard.functions.databases.databases_download_hgmd": {"tf": 1.7320508075688772}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_concordance": {"tf": 1}}, "df": 26}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.functions.commons.get_file_format": {"tf": 1.4142135623730951}, "howard.functions.commons.get_file_compressed": {"tf": 1.4142135623730951}, "howard.functions.commons.bed_sort": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.genome.MockGenome.__init__": {"tf": 1.7320508075688772}, "howard.objects.genome.MockGenome.read": {"tf": 1.4142135623730951}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.print_stats": {"tf": 1}}, "df": 11, "s": {"docs": {"howard.functions.databases.databases_download_refseq": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.create_where_clause": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.map_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}}, "df": 8, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.transcripts_file_to_df": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1}}, "df": 2}}}, "s": {"docs": {"howard.functions.plugins.plugins_to_load": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {"howard.functions.commons.command": {"tf": 1}}, "df": 1}}}, "d": {"docs": {"howard.functions.commons.find_genome": {"tf": 1.7320508075688772}, "howard.functions.commons.find_file_prefix": {"tf": 1.7320508075688772}, "howard.functions.commons.get_index": {"tf": 1}, "howard.functions.commons.findbypipeline": {"tf": 1}, "howard.functions.commons.extract_float_from_str": {"tf": 1}, "howard.objects.database.Database.set_database": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_needed_columns": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 1}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1.4142135623730951}}, "df": 11, "s": {"docs": {"howard.functions.commons.find": {"tf": 1}, "howard.objects.database.Database.find_header_file": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 1}}, "df": 3}, "/": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "b": {"docs": {"howard.functions.commons.findbypipeline": {"tf": 1}}, "df": 1}}}, "b": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}}, "df": 8}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.find": {"tf": 1}, "howard.functions.commons.get_index": {"tf": 1}, "howard.functions.commons.get_memory": {"tf": 1}, "howard.functions.commons.extract_float_from_str": {"tf": 1}, "howard.functions.commons.get_compression_type": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.utils.read_refgene": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 2}, "howard.objects.database.Database.get_header_length": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 11}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 2}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1.7320508075688772}, "howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.functions.commons.genotype_stats": {"tf": 1.4142135623730951}, "howard.functions.commons.clean_annotation_field": {"tf": 1.4142135623730951}, "howard.functions.from_extann.metaheader_rows": {"tf": 1}, "howard.functions.from_extann.extann_to_info": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom_start": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom_end": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.name": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.score": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.strand": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 2}, "howard.objects.variants.Variants.calculation": {"tf": 1}, "howard.objects.variants.Variants.calculation_variant_id": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1}, "howard.objects.variants.Variants.calculation_trio": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 2}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 3.1622776601683795}}, "df": 28, "s": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 2}, "howard.functions.commons.explode_snpeff_ann": {"tf": 2}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.functions.from_extann.metaheader_rows": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.variants.Variants.get_stats": {"tf": 1}, "howard.objects.variants.Variants.get_header_infos_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 3.872983346207417}, "howard.objects.variants.Variants.explode_infos": {"tf": 3.605551275463989}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 2.6457513110645907}}, "df": 16}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.remove_if_exists": {"tf": 1}, "howard.functions.commons.command": {"tf": 1}, "howard.functions.commons.find": {"tf": 1.4142135623730951}, "howard.functions.commons.find_all": {"tf": 1.4142135623730951}, "howard.functions.commons.find_genome": {"tf": 1}, "howard.functions.commons.find_file_prefix": {"tf": 1.7320508075688772}, "howard.functions.commons.find_nomen": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_annotation_format": {"tf": 1.7320508075688772}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_snpeff_ann": {"tf": 2}, "howard.functions.commons.get_index": {"tf": 1}, "howard.functions.commons.findbypipeline": {"tf": 1}, "howard.functions.commons.genotypeconcordance": {"tf": 1}, "howard.functions.commons.genotype_barcode": {"tf": 1}, "howard.functions.commons.barcode": {"tf": 1}, "howard.functions.commons.vaf_normalization": {"tf": 2}, "howard.functions.commons.genotype_stats": {"tf": 1.7320508075688772}, "howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1.7320508075688772}, "howard.functions.commons.get_bin": {"tf": 2.449489742783178}, "howard.functions.commons.get_bin_command": {"tf": 2.8284271247461903}, "howard.functions.commons.get_tmp": {"tf": 1.7320508075688772}, "howard.functions.commons.get_threads": {"tf": 1.7320508075688772}, "howard.functions.commons.get_memory": {"tf": 1.7320508075688772}, "howard.functions.commons.extract_memory_in_go": {"tf": 1}, "howard.functions.commons.get_compression_type": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1.7320508075688772}, "howard.functions.commons.concat_and_compress_files": {"tf": 2.23606797749979}, "howard.functions.commons.TimeoutException": {"tf": 1}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.get_argument_gooey": {"tf": 1.4142135623730951}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 3.1622776601683795}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1.7320508075688772}, "howard.functions.commons.format_arg_help": {"tf": 2}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.get_random": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_annovar": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_snpeff": {"tf": 2.449489742783178}, "howard.functions.databases.databases_download_genomes": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_refseq": {"tf": 3.605551275463989}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 3.3166247903554}, "howard.functions.databases.databases_download_alphamissense": {"tf": 2}, "howard.functions.databases.databases_download_exomiser": {"tf": 2.8284271247461903}, "howard.functions.databases.databases_download_dbsnp": {"tf": 2.8284271247461903}, "howard.functions.databases.databases_download_hgmd": {"tf": 2}, "howard.functions.from_annovar.from_annovar": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 2.8284271247461903}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1.4142135623730951}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1.4142135623730951}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1.4142135623730951}, "howard.functions.utils.get_genomic_sequence": {"tf": 1.7320508075688772}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1.4142135623730951}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.functions.utils.create_refseq_table": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1.4142135623730951}, "howard.objects.database.Database.__init__": {"tf": 2.8284271247461903}, "howard.objects.database.Database.set_database": {"tf": 2.449489742783178}, "howard.objects.database.Database.find_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 2.449489742783178}, "howard.objects.database.Database.set_format": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.get_database_tables": {"tf": 1}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_needed_columns": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.is_compressed": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 2.8284271247461903}, "howard.objects.database.Database.map_columns": {"tf": 2}, "howard.objects.database.Database.get_columns": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1.4142135623730951}, "howard.objects.database.Database.export": {"tf": 2.23606797749979}, "howard.objects.genome.MockGenomeError": {"tf": 1}, "howard.objects.genome.MockGenome.__init__": {"tf": 1.4142135623730951}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex": {"tf": 1}, "howard.objects.hgvs.get_refseq_type": {"tf": 1.4142135623730951}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.transcript": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 1.4142135623730951}, "howard.objects.transcript.BED6Interval_base.chrom": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom_start": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom_end": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.name": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.score": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.strand": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1.7320508075688772}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1.4142135623730951}, "howard.objects.variant": {"tf": 1}, "howard.objects.variant.get_sequence": {"tf": 1}, "howard.objects.variant.get_sequence_from_position": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_config": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.set_param": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_config": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.explode_infos": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_output": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_threads": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.scan_databases": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.annotation_parquet": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_genotype_concordance": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 2}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 2}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1.4142135623730951}, "howard.tools.gui.gui": {"tf": 1.4142135623730951}, "howard.tools.prioritization.prioritization": {"tf": 1}, "howard.tools.tools.PathType.__init__": {"tf": 1}}, "df": 159, "m": {"docs": {"howard.objects.database.Database.get_sql_from": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 3.4641016151377544}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 2.449489742783178}, "howard.functions.commons.get_file_format": {"tf": 1.7320508075688772}, "howard.functions.commons.findbypipeline": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.extract_memory_in_go": {"tf": 1.4142135623730951}, "howard.functions.commons.get_argument_to_mk": {"tf": 1.7320508075688772}, "howard.functions.commons.help_generation_from_dict": {"tf": 2}, "howard.functions.commons.help_generation_from_json": {"tf": 1.7320508075688772}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.format_arg_help": {"tf": 1.7320508075688772}, "howard.functions.commons.bed_sort": {"tf": 1}, "howard.functions.commons.load_config_args": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_param": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_refseq": {"tf": 2.449489742783178}, "howard.functions.databases.databases_format_refseq": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 2}, "howard.functions.from_annovar.from_annovar": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 2.6457513110645907}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.functions.from_extann.metaheader_rows": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 2}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1.7320508075688772}, "howard.main.main": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_database": {"tf": 2}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.find_header_file": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 2}, "howard.objects.database.Database.set_format": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_format": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.get_database_tables": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_table": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}, "howard.objects.database.Database.is_compressed": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1.4142135623730951}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 2}, "howard.objects.database.Database.export": {"tf": 2}, "howard.objects.hgvs.HGVSName.format": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 2}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1}, "howard.objects.transcript.Transcript.full_name": {"tf": 1}, "howard.objects.transcript.Exon.name": {"tf": 1}, "howard.objects.variants.Variants.set_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.set_output": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1}, "howard.objects.variants.Variants.get_input_format": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_output_format": {"tf": 2}, "howard.objects.variants.Variants.get_connexion_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.scan_databases": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 2}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 3}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 3}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 3.1622776601683795}, "howard.tools.process.process": {"tf": 1}}, "df": 83, "s": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.format_arg_help": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 2}, "howard.functions.databases.databases_param": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.objects.database.Database.set_database": {"tf": 1}, "howard.objects.database.Database.find_header_file": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.scan_databases": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.tools.help.help": {"tf": 1}}, "df": 17}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1.7320508075688772}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1.4142135623730951}, "howard.functions.commons.get_argument_to_mk": {"tf": 2.449489742783178}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.format_arg_help": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_refseq": {"tf": 2}, "howard.functions.databases.databases_format_refseq": {"tf": 1.4142135623730951}, "howard.functions.utils.format_hgvs_name": {"tf": 1.4142135623730951}, "howard.objects.cdna.CDNACoord.parse": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 15}, "r": {"docs": {"howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1.4142135623730951}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 4}}}}}}, "s": {"docs": {"howard.objects.cdna.CDNACoord": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}}, "df": 2}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 2.23606797749979}, "howard.objects.transcript.Transcript.strand": {"tf": 1.4142135623730951}}, "df": 4}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.database.Database.get_header_file": {"tf": 2}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 2}, "howard.objects.variants.Variants.explode_infos": {"tf": 2}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1.4142135623730951}}, "df": 5}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.find_genome": {"tf": 1}, "howard.functions.commons.get_index": {"tf": 1}, "howard.functions.commons.findbypipeline": {"tf": 1}, "howard.functions.commons.get_bin": {"tf": 1.4142135623730951}, "howard.functions.commons.get_tmp": {"tf": 1.7320508075688772}, "howard.functions.commons.extract_float_from_str": {"tf": 1.4142135623730951}, "howard.functions.commons.get_argument": {"tf": 1.7320508075688772}, "howard.functions.commons.load_args": {"tf": 1.4142135623730951}, "howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1.4142135623730951}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.database.Database.set_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.find_database": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.get_database_table": {"tf": 1}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1.7320508075688772}, "howard.objects.database.Database.map_columns": {"tf": 1}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1}, "howard.objects.variants.Variants.get_memory": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}}, "df": 24}}}, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.find_file_prefix": {"tf": 1.7320508075688772}, "howard.functions.commons.get_bin": {"tf": 2}, "howard.functions.commons.get_bin_command": {"tf": 2.23606797749979}, "howard.functions.databases.databases_infos": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_annovar": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_snpeff": {"tf": 2}, "howard.functions.databases.databases_download_genomes": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_refseq": {"tf": 2}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 3}, "howard.functions.databases.databases_download_alphamissense": {"tf": 2}, "howard.functions.databases.databases_download_exomiser": {"tf": 2}, "howard.functions.databases.databases_download_dbsnp": {"tf": 2.449489742783178}, "howard.functions.databases.databases_download_hgmd": {"tf": 2.8284271247461903}, "howard.objects.database.Database.find_database": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 15, "s": {"docs": {"howard.functions.databases.databases_infos": {"tf": 2.23606797749979}, "howard.objects.database.Database.__init__": {"tf": 2}, "howard.objects.database.Database.set_database": {"tf": 2.23606797749979}, "howard.objects.database.Database.set_databases_folders": {"tf": 2}, "howard.objects.database.Database.get_database_folders": {"tf": 2}, "howard.objects.database.Database.find_database": {"tf": 1.7320508075688772}}, "df": 6, "/": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.database.Database.set_database": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "/": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 1}}, "df": 1}}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.find_nomen": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1.4142135623730951}, "howard.functions.utils.make_transcript": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1.4142135623730951}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.variants.Variants.get_stats": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1}}, "df": 16}}}, "s": {"docs": {"howard.functions.commons.detect_column_type": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.database.Database.export": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 1}}, "df": 2}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.commons.run_parallel_commands": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 2}, "howard.functions.commons.trio": {"tf": 1}, "howard.functions.commons.vaf_normalization": {"tf": 1.4142135623730951}, "howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.commons.get_tmp": {"tf": 1.7320508075688772}, "howard.functions.commons.get_memory": {"tf": 1}, "howard.functions.commons.extract_float_from_str": {"tf": 2.449489742783178}, "howard.functions.commons.extract_memory_in_go": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 2}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1.4142135623730951}, "howard.functions.commons.get_argument": {"tf": 1.7320508075688772}, "howard.functions.commons.help_generation_from_dict": {"tf": 3.605551275463989}, "howard.functions.commons.help_generation_from_json": {"tf": 2.8284271247461903}, "howard.functions.commons.get_default_argument": {"tf": 1.4142135623730951}, "howard.functions.commons.load_param": {"tf": 1.4142135623730951}, "howard.functions.commons.load_config_args": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 2}, "howard.functions.commons.clean_annotation_field": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 2}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_exomiser": {"tf": 2.6457513110645907}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.4142135623730951}, "howard.functions.from_extann.create_metaheader": {"tf": 1.4142135623730951}, "howard.functions.from_extann.read_json": {"tf": 1}, "howard.functions.from_extann.extann_to_info": {"tf": 1.4142135623730951}, "howard.functions.from_extann.get_longest_transcript": {"tf": 1}, "howard.functions.from_extann.get_all_transcript": {"tf": 1.4142135623730951}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1.4142135623730951}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.functions.plugins.plugins_infos": {"tf": 1.4142135623730951}, "howard.functions.plugins.plugins_list": {"tf": 1.4142135623730951}, "howard.functions.utils.read_genepred": {"tf": 1.4142135623730951}, "howard.functions.utils.make_transcript": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1.4142135623730951}, "howard.functions.utils.get_alt_from_sequence": {"tf": 2}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.format_hgvs_name": {"tf": 2}, "howard.functions.utils.create_refseq_table": {"tf": 1}, "howard.functions.utils.get_transcript": {"tf": 1}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_from_list": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_from_file": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_header_from_columns": {"tf": 2.23606797749979}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 2}, "howard.objects.database.Database.get_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_table": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_columns": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_annotations": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_extra_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1.4142135623730951}, "howard.objects.database.Database.export": {"tf": 2.449489742783178}, "howard.objects.genome.MockGenome.read": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.transcript.CDNA_Match.length": {"tf": 1.4142135623730951}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 1}, "howard.objects.variants.Variants.set_samples": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1}, "howard.objects.variants.Variants.get_duckdb_settings": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_output_format": {"tf": 1}, "howard.objects.variants.Variants.get_table_variants": {"tf": 1}, "howard.objects.variants.Variants.get_header_infos_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_length": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.load_data": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.drop_column": {"tf": 2}, "howard.objects.variants.Variants.export_output": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.get_memory": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_nomen": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 3.1622776601683795}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1.4142135623730951}, "howard.tools.annotation.annotation": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.query.query": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}}, "df": 116}, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.utils.read_refgene": {"tf": 1.4142135623730951}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.vaf_normalization": {"tf": 1.7320508075688772}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1}}, "df": 3}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1.4142135623730951}}, "df": 3, "s": {"docs": {"howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}}, "df": 1}}}}}}}}, "g": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.variant.justify_indel": {"tf": 1}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.7320508075688772}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 2.449489742783178}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variants.Variants.load_data": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.export_output": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.export_header": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 2}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.4142135623730951}}, "df": 34, "s": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}}, "df": 2}}, "n": {"docs": {}, "df": 0, "k": {"docs": {"howard.functions.utils.parse_hgvs_name": {"tf": 1.4142135623730951}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.extract_float_from_str": {"tf": 3}, "howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.from_extann.metaheader_rows": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.extract_float_from_str": {"tf": 1.4142135623730951}, "howard.functions.commons.determine_value_type": {"tf": 1}}, "df": 2}}}, "[": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.extract_memory_in_go": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"howard.objects.variants.Variants.create_transcript_view": {"tf": 1}}, "df": 1}}}}}}}}}}, "a": {"docs": {"howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}}, "df": 1, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.genotypeconcordance": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 2}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.get_file_compressed": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1.7320508075688772}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.commons.check_docker_image_exists": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 2.449489742783178}, "howard.functions.databases.databases_format_refseq": {"tf": 3.605551275463989}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 3}, "howard.functions.databases.databases_download_dbsnp": {"tf": 2}, "howard.functions.databases.databases_download_hgmd": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.7320508075688772}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1.4142135623730951}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1.4142135623730951}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.7320508075688772}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 3.1622776601683795}, "howard.objects.database.Database.get_header_file": {"tf": 1.7320508075688772}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 2.449489742783178}, "howard.objects.hgvs.HGVSName.format": {"tf": 3}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 3.1622776601683795}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.__init__": {"tf": 1.4142135623730951}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1}, "howard.objects.variants.Variants.get_indexing": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.get_verbose": {"tf": 1}, "howard.objects.variants.Variants.load_data": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.drop_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.explode_infos": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.export_output": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 2}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}, "howard.tools.tools.PathType.__init__": {"tf": 1}}, "df": 58}}, "l": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}}, "df": 1}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"howard.objects.variants.Variants.get_memory": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.extract_memory_in_go": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}}, "df": 2}}, "a": {"docs": {"howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}}, "df": 2}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.7320508075688772}}, "df": 2, "s": {"docs": {"howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.7320508075688772}}, "df": 1}}}}}}, "w": {"docs": {"howard.functions.commons.get_compression_type": {"tf": 1}}, "df": 1}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1.4142135623730951}}, "df": 4}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {"howard.objects.hgvs": {"tf": 1.4142135623730951}}, "df": 1, "e": {"docs": {"howard.functions.commons.find": {"tf": 1}, "howard.functions.commons.find_all": {"tf": 1}}, "df": 2, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.remove_if_exists": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 2}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_file": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.export_header": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 2}}, "df": 7, "s": {"docs": {"howard.functions.commons.remove_if_exists": {"tf": 1}, "howard.functions.commons.genotype_compression": {"tf": 1.4142135623730951}, "howard.functions.commons.clean_annotation_field": {"tf": 1}}, "df": 3}, "d": {"docs": {"howard.functions.commons.genotype_compression": {"tf": 1.4142135623730951}, "howard.functions.commons.clean_annotation_field": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}}, "df": 8}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 3}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.clean_annotation_field": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}}, "df": 3, "s": {"docs": {"howard.objects.database.Database.set_header_file": {"tf": 1}, "howard.objects.database.Database.set_assembly": {"tf": 1}}, "df": 2}}}}, "m": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 2.6457513110645907}}, "df": 1}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.command": {"tf": 1}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.commons.get_tmp": {"tf": 1}, "howard.functions.commons.extract_memory_in_go": {"tf": 1}, "howard.functions.commons.get_compression_type": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1.4142135623730951}, "howard.functions.commons.get_default_argument": {"tf": 1.7320508075688772}, "howard.functions.commons.load_config_args": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.commons.detect_column_type": {"tf": 1}, "howard.functions.from_extann.get_longest_transcript": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.objects.database.Database.get_database": {"tf": 1}, "howard.objects.database.Database.get_database_dirname": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.genome.MockGenome.get_seq": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.get_seq": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1}, "howard.objects.variant.get_sequence": {"tf": 1}, "howard.objects.variant.get_sequence_from_position": {"tf": 1}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_length": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 1}, "howard.objects.variants.Variants.get_memory": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_snpsift": {"tf": 1}, "howard.objects.variants.Variants.annotation_bcftools": {"tf": 1}, "howard.objects.variants.Variants.annotation_snpeff": {"tf": 1}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 1}, "howard.objects.variants.Variants.annotation_splice": {"tf": 1}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1}}, "df": 35, "s": {"docs": {"howard.functions.commons.split_interval": {"tf": 1.4142135623730951}, "howard.functions.commons.merge_regions": {"tf": 1.4142135623730951}, "howard.functions.commons.create_where_clause": {"tf": 1.4142135623730951}, "howard.functions.commons.command": {"tf": 1}, "howard.functions.commons.run_parallel_commands": {"tf": 1}, "howard.functions.commons.run_parallel_functions": {"tf": 1}, "howard.functions.commons.example_function": {"tf": 1.4142135623730951}, "howard.functions.commons.find": {"tf": 1.4142135623730951}, "howard.functions.commons.find_all": {"tf": 1}, "howard.functions.commons.find_genome": {"tf": 1}, "howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.functions.commons.find_nomen": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_annotation_format": {"tf": 2}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1.7320508075688772}, "howard.functions.commons.get_index": {"tf": 2}, "howard.functions.commons.get_file_format": {"tf": 1.4142135623730951}, "howard.functions.commons.findbypipeline": {"tf": 1.7320508075688772}, "howard.functions.commons.genotypeconcordance": {"tf": 1}, "howard.functions.commons.genotype_compression": {"tf": 1.7320508075688772}, "howard.functions.commons.genotype_barcode": {"tf": 1.7320508075688772}, "howard.functions.commons.barcode": {"tf": 1}, "howard.functions.commons.trio": {"tf": 1.4142135623730951}, "howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.get_bin": {"tf": 1.4142135623730951}, "howard.functions.commons.get_bin_command": {"tf": 1.7320508075688772}, "howard.functions.commons.get_tmp": {"tf": 2.23606797749979}, "howard.functions.commons.get_threads": {"tf": 1.4142135623730951}, "howard.functions.commons.get_memory": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_float_from_str": {"tf": 2}, "howard.functions.commons.extract_memory_in_go": {"tf": 1}, "howard.functions.commons.concat_file": {"tf": 1.4142135623730951}, "howard.functions.commons.get_compression_type": {"tf": 1.4142135623730951}, "howard.functions.commons.get_file_compressed": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1.4142135623730951}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1.4142135623730951}, "howard.functions.commons.load_duckdb_extension": {"tf": 1.4142135623730951}, "howard.functions.commons.duckdb_execute": {"tf": 2}, "howard.functions.commons.genome_build_switch": {"tf": 2}, "howard.functions.commons.get_argument": {"tf": 1.4142135623730951}, "howard.functions.commons.get_argument_gooey": {"tf": 1.7320508075688772}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation_from_json": {"tf": 1.7320508075688772}, "howard.functions.commons.help_generation": {"tf": 1.4142135623730951}, "howard.functions.commons.format_arg_help": {"tf": 1.4142135623730951}, "howard.functions.commons.full_path": {"tf": 1.7320508075688772}, "howard.functions.commons.get_default_argument": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.add_value_into_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.load_param": {"tf": 1.7320508075688772}, "howard.functions.commons.load_config_args": {"tf": 1.4142135623730951}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.get_random": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1.4142135623730951}, "howard.functions.commons.check_docker_image_exists": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.determine_value_type": {"tf": 1.4142135623730951}, "howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.commons.detect_column_type": {"tf": 1.4142135623730951}, "howard.functions.commons.clean_annotation_field": {"tf": 1.4142135623730951}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_param": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_format_refseq": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.plugins.plugins_infos": {"tf": 1.7320508075688772}, "howard.functions.plugins.plugins_list": {"tf": 1.4142135623730951}, "howard.functions.plugins.plugins_to_load": {"tf": 1.4142135623730951}, "howard.functions.utils.read_refgene": {"tf": 1.4142135623730951}, "howard.functions.utils.make_transcript": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.functions.utils.read_transcripts": {"tf": 1.7320508075688772}, "howard.functions.utils.get_genomic_sequence": {"tf": 1.4142135623730951}, "howard.functions.utils.get_vcf_allele": {"tf": 1.4142135623730951}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1.7320508075688772}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 2}, "howard.functions.utils.cdna_to_protein": {"tf": 1.4142135623730951}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.functions.utils.create_refseq_table": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.functions.utils.get_transcript": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_folders": {"tf": 1.4142135623730951}, "howard.objects.database.Database.read_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_length": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_from_list": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_from_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.find_header_file": {"tf": 2}, "howard.objects.database.Database.get_header": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.query": {"tf": 2}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_assembly": {"tf": 1}, "howard.objects.database.Database.get_assembly": {"tf": 2.23606797749979}, "howard.objects.database.Database.find_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_basename": {"tf": 2}, "howard.objects.database.Database.get_database_dirname": {"tf": 1.4142135623730951}, "howard.objects.database.Database.exists": {"tf": 1}, "howard.objects.database.Database.set_format": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_type": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_database_tables": {"tf": 1}, "howard.objects.database.Database.get_database_table": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_needed_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_from": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1.4142135623730951}, "howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.database.Database.get_view": {"tf": 1.7320508075688772}, "howard.objects.database.Database.is_compressed": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1.4142135623730951}, "howard.objects.database.Database.find_column": {"tf": 1.7320508075688772}, "howard.objects.database.Database.map_columns": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1}, "howard.objects.database.Database.get_annotations": {"tf": 2}, "howard.objects.database.Database.get_extra_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.is_vcf": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_conn": {"tf": 1.4142135623730951}, "howard.objects.database.Database.is_genotype_column": {"tf": 2}, "howard.objects.database.Database.export": {"tf": 1.7320508075688772}, "howard.objects.hgvs.get_refseq_type": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.full_name": {"tf": 2}, "howard.objects.transcript.Transcript.is_coding": {"tf": 1}, "howard.objects.transcript.Transcript.strand": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.ordered_cdna_match": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.get_cds_start_stop": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.start_codon": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.stop_codon": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 1.4142135623730951}, "howard.objects.transcript.BED6Interval.distance": {"tf": 1}, "howard.objects.transcript.Exon.name": {"tf": 1.4142135623730951}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1.7320508075688772}, "howard.objects.transcript.CDNA_Match.length": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variants.Variants.set_samples": {"tf": 1}, "howard.objects.variants.Variants.get_samples": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_indexing": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_connexion_config": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_duckdb_settings": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_connexion_db": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_stats": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1}, "howard.objects.variants.Variants.get_input": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_input_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_output": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_output_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_config": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_param": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_connexion_db": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_prefix": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_table_variants": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_tmp_dir": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_connexion_type": {"tf": 1}, "howard.objects.variants.Variants.get_connexion": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.close_connexion": {"tf": 1}, "howard.objects.variants.Variants.get_header": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_infos_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_length": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_columns": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_columns_as_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_columns_as_sql": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_verbose": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_connexion_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.drop_column": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.explode_infos": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.read_vcf_header": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.execute_query": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_output": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_header": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_threads": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_memory": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.scan_databases": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_snpsift": {"tf": 1}, "howard.objects.variants.Variants.annotation_bcftools": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.annotation_snpeff": {"tf": 1}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 1}, "howard.objects.variants.Variants.annotation_parquet": {"tf": 1}, "howard.objects.variants.Variants.annotation_splice": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 2}, "howard.objects.variants.Variants.get_config_json": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1.7320508075688772}}, "df": 243}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.find_genome": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.genotype_compression": {"tf": 1}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.extract_float_from_str": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.plugins.plugins_infos": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.objects.database.Database.get_database_folders": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1}, "howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.strand": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_samples": {"tf": 1}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_input": {"tf": 1}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_output_format": {"tf": 1}, "howard.objects.variants.Variants.get_config": {"tf": 1}, "howard.objects.variants.Variants.get_param": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.get_prefix": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_type": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_format": {"tf": 1}, "howard.objects.variants.Variants.execute_query": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.prioritization": {"tf": 1}}, "df": 37}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.functions.commons.extract_memory_in_go": {"tf": 1}, "howard.functions.commons.full_path": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.objects.database.Database.get_database_folders": {"tf": 1}, "howard.objects.database.Database.get_database": {"tf": 1}, "howard.objects.database.Database.get_conn": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 1}, "howard.objects.transcript.BED6Interval.distance": {"tf": 1}, "howard.objects.variants.Variants.get_samples": {"tf": 1}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1}, "howard.objects.variants.Variants.get_tmp_dir": {"tf": 1}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}, "howard.tools.tools.PathType.__init__": {"tf": 1}}, "df": 19}}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.get_bin": {"tf": 1.4142135623730951}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.get_memory": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.get_argument_gooey": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1.7320508075688772}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.functions.utils.get_transcript": {"tf": 1}, "howard.objects.database.Database.find_header_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.get_database_basename": {"tf": 1}, "howard.objects.database.Database.get_database_dirname": {"tf": 1}, "howard.objects.database.Database.exists": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.get_database_tables": {"tf": 1}, "howard.objects.database.Database.get_database_table": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1}, "howard.objects.database.Database.get_view": {"tf": 1}, "howard.objects.database.Database.is_compressed": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 2}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1}, "howard.objects.database.Database.get_annotations": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1.7320508075688772}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 42, "s": {"docs": {"howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.commons.get_threads": {"tf": 1}, "howard.functions.commons.get_memory": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.get_default_argument": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1}, "howard.objects.database.Database.get_database_tables": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1}, "howard.objects.variants.Variants.set_samples": {"tf": 1}, "howard.objects.variants.Variants.get_duckdb_settings": {"tf": 1}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1}, "howard.objects.variants.Variants.get_header_infos_list": {"tf": 1}, "howard.objects.variants.Variants.get_memory": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}}, "df": 16}, "d": {"docs": {"howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1}}, "df": 5}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.variants.Variants.get_header_columns_as_sql": {"tf": 1}}, "df": 1}}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.databases.databases_download_refseq": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_format_refseq": {"tf": 1.4142135623730951}, "howard.functions.utils.read_genepred": {"tf": 1.4142135623730951}, "howard.functions.utils.get_genomic_sequence": {"tf": 2.23606797749979}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenome.get_seq": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.get_seq": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1.7320508075688772}, "howard.objects.variant.get_sequence": {"tf": 1}, "howard.objects.variant.get_sequence_from_position": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 1}}, "df": 14, "s": {"docs": {"howard.functions.commons.merge_regions": {"tf": 2.449489742783178}, "howard.functions.commons.create_where_clause": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_type": {"tf": 1.4142135623730951}}, "df": 3}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.find_all": {"tf": 1}, "howard.functions.commons.extract_float_from_str": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex": {"tf": 1}}, "df": 5}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {"howard.functions.databases.databases_download_genomes": {"tf": 2}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.merge_regions": {"tf": 1.4142135623730951}, "howard.functions.commons.create_where_clause": {"tf": 1}, "howard.functions.commons.findbypipeline": {"tf": 1}, "howard.functions.commons.genotype_barcode": {"tf": 1}, "howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.get_memory": {"tf": 1}, "howard.functions.commons.extract_memory_in_go": {"tf": 1.4142135623730951}, "howard.functions.commons.load_duckdb_extension": {"tf": 1.4142135623730951}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.from_annovar": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.functions.utils.make_transcript": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1.4142135623730951}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1.7320508075688772}, "howard.objects.database.Database.set_database": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_header": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.hgvs.get_refseq_type": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1}, "howard.objects.transcript": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variants.Variants.get_memory": {"tf": 1}}, "df": 37}}}, "s": {"docs": {"howard.functions.commons.find_genome": {"tf": 1}, "howard.functions.commons.find_file_prefix": {"tf": 1.4142135623730951}, "howard.functions.commons.genotype_barcode": {"tf": 1}, "howard.functions.commons.trio": {"tf": 1}, "howard.functions.commons.vaf_normalization": {"tf": 1.4142135623730951}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1.4142135623730951}, "howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.get_bin": {"tf": 1.7320508075688772}, "howard.functions.commons.get_bin_command": {"tf": 1.4142135623730951}, "howard.functions.commons.get_tmp": {"tf": 1}, "howard.functions.commons.get_memory": {"tf": 1}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.compress_file": {"tf": 1}, "howard.functions.commons.get_compression_type": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.commons.genome_build_switch": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.get_argument_gooey": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.add_value_into_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.get_random": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.commons.clean_annotation_field": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_hgmd": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.functions.plugins.plugins_infos": {"tf": 1.7320508075688772}, "howard.functions.plugins.plugins_list": {"tf": 1.7320508075688772}, "howard.functions.plugins.plugins_to_load": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_justify_dup": {"tf": 2}, "howard.functions.utils.hgvs_justify_indel": {"tf": 2}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 2.23606797749979}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.cdna_to_protein": {"tf": 2.8284271247461903}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 2.23606797749979}, "howard.functions.utils.format_hgvs_name": {"tf": 2.23606797749979}, "howard.functions.utils.create_refseq_table": {"tf": 1}, "howard.functions.utils.get_transcript": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 2}, "howard.objects.database.Database.get_header_length": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1}, "howard.objects.database.Database.find_header_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.query": {"tf": 1}, "howard.objects.database.Database.set_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1}, "howard.objects.database.Database.set_assembly": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_basename": {"tf": 1}, "howard.objects.database.Database.get_database_dirname": {"tf": 1.4142135623730951}, "howard.objects.database.Database.exists": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.get_database_table": {"tf": 1}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1}, "howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.database.Database.get_view": {"tf": 1.4142135623730951}, "howard.objects.database.Database.is_compressed": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_annotations": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 2.449489742783178}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 3.605551275463989}, "howard.objects.hgvs.HGVSName.parse": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 2.449489742783178}, "howard.objects.transcript.Transcript.strand": {"tf": 1}, "howard.objects.transcript.Transcript.stop_codon": {"tf": 1}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 1.4142135623730951}, "howard.objects.transcript.BED6Interval.distance": {"tf": 1.4142135623730951}, "howard.objects.transcript.Exon.__init__": {"tf": 1.7320508075688772}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 2.449489742783178}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1}, "howard.objects.variants.Variants.get_output_format": {"tf": 1}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}}, "df": 134}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}}, "df": 3}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.hgvs.HGVSName.format_coords": {"tf": 1}, "howard.objects.variant.NormalizedVariant": {"tf": 1}}, "df": 2}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.database.Database.get_header_file": {"tf": 2}}, "df": 1, "s": {"docs": {"howard.functions.commons.genotype_compression": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}}, "df": 2}, "d": {"docs": {"howard.functions.commons.genotype_compression": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.check_docker_image_exists": {"tf": 1}}, "df": 1}}}}}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.find_all": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.utils.read_refgene": {"tf": 1}, "howard.objects.database.Database.query": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.execute_query": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.annotation_parquet": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}}, "df": 13, "s": {"docs": {"howard.functions.commons.run_parallel_commands": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.variants.Variants.execute_query": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}, "howard.tools.query.query": {"tf": 1}}, "df": 9}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1.7320508075688772}, "howard.functions.utils.format_hgvs_name": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.4142135623730951}}, "df": 6}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.download_file": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.plugins.plugins_infos": {"tf": 1}}, "df": 1, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}}, "df": 1}}}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}}, "df": 1}}}}}}}}, "t": {"docs": {"howard.objects.variants.Variants.init_variables": {"tf": 1}}, "df": 1}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.find": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.trio": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}}, "df": 2}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.explode_infos": {"tf": 1}}, "df": 1, "d": {"docs": {"howard.objects.variants.Variants.explode_infos": {"tf": 1}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_input": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}}, "df": 11}}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.cdna.CDNACoord.__init__": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.databases.databases_infos": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_exomiser": {"tf": 3.1622776601683795}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.7320508075688772}}, "df": 5, "s": {"docs": {"howard.functions.databases.databases_infos": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.scan_databases": {"tf": 2.449489742783178}}, "df": 3}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.utils.read_transcripts": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1.4142135623730951}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.utils.read_refgene": {"tf": 1.4142135623730951}, "howard.functions.utils.read_genepred": {"tf": 1.4142135623730951}, "howard.functions.utils.read_transcripts": {"tf": 1.4142135623730951}, "howard.objects.database.Database.read_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 2.23606797749979}, "howard.objects.genome.MockGenome.read": {"tf": 1}, "howard.objects.variants.Variants.get_header_length": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}}, "df": 15, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}}, "df": 4}}}, "s": {"docs": {"howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.bed_sort": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.utils.read_refgene": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.read_transcripts": {"tf": 1.4142135623730951}, "howard.objects.database.Database.read_header_file": {"tf": 1}, "howard.objects.variants.Variants.set_header": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.load_data": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}}, "df": 13}, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.objects.database.Database.get_header_from_list": {"tf": 1.4142135623730951}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1.7320508075688772}}, "df": 1}}}, "l": {"docs": {"howard.objects.variants.Variants.add_column": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 4}}}, "e": {"docs": {"howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.7320508075688772}}, "df": 3, "d": {"docs": {"howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}}, "df": 1}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.get_duckdb_extension_file": {"tf": 1}}, "df": 1}}, "s": {"docs": {"howard.objects.genome.MockGenome.__init__": {"tf": 1.7320508075688772}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1.7320508075688772}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.get_argument": {"tf": 2.449489742783178}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}, "howard.tools.annotation.annotation": {"tf": 1}}, "df": 5}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {"howard.objects.database.Database.get_columns": {"tf": 1}}, "df": 1}}}}}}, "f": {"2": {"docs": {"howard.objects.hgvs.HGVSName.__init__": {"tf": 1.7320508075688772}}, "df": 1}, "docs": {"howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_justify_indel": {"tf": 2}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1.7320508075688772}, "howard.functions.utils.cdna_to_protein": {"tf": 1.4142135623730951}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1.4142135623730951}, "howard.objects.variant.normalize_variant": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1}}, "df": 14, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 5}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1.4142135623730951}, "howard.functions.utils.matches_ref_allele": {"tf": 2}, "howard.functions.utils.hgvs_justify_dup": {"tf": 2.23606797749979}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1.7320508075688772}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1.7320508075688772}, "howard.functions.utils.parse_hgvs_name": {"tf": 2.23606797749979}, "howard.functions.utils.cdna_to_protein": {"tf": 1.4142135623730951}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 2}, "howard.functions.utils.format_hgvs_name": {"tf": 2}, "howard.objects.cdna.CDNACoord": {"tf": 1.4142135623730951}, "howard.objects.hgvs": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 2}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1.7320508075688772}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1.4142135623730951}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1.4142135623730951}, "howard.objects.variant.normalize_variant": {"tf": 1.4142135623730951}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}}, "df": 20}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.cdna.CDNACoord.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {"howard.functions.databases.databases_download_refseq": {"tf": 6.082762530298219}, "howard.functions.databases.databases_format_refseq": {"tf": 2.449489742783178}, "howard.functions.utils.create_refseq_table": {"tf": 2.6457513110645907}, "howard.functions.utils.get_refseq_table": {"tf": 3}, "howard.objects.hgvs.get_refseq_type": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.4142135623730951}}, "df": 6}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.from_extann.create_metaheader": {"tf": 1}, "howard.functions.from_extann.get_all_transcript": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1.7320508075688772}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.functions.utils.read_refgene": {"tf": 1.7320508075688772}, "howard.functions.utils.read_transcripts": {"tf": 2}, "howard.functions.utils.create_refseq_table": {"tf": 1.7320508075688772}, "howard.functions.utils.get_refseq_table": {"tf": 1.7320508075688772}}, "df": 8}}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.from_annovar.annovar_to_vcf": {"tf": 2}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1.7320508075688772}}, "df": 2}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.from_annovar.parquet_info_explode": {"tf": 1}}, "df": 1}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.transcript.Transcript.strand": {"tf": 1}, "howard.objects.variant.revcomp": {"tf": 1}}, "df": 5}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.command": {"tf": 1}, "howard.functions.commons.run_parallel_commands": {"tf": 1}, "howard.functions.commons.run_parallel_functions": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.run_commands": {"tf": 1}}, "df": 5, "s": {"docs": {"howard.functions.commons.command": {"tf": 1}, "howard.functions.commons.run_parallel_commands": {"tf": 1}, "howard.functions.commons.run_parallel_functions": {"tf": 1}, "howard.objects.variants.Variants.run_commands": {"tf": 1}}, "df": 4}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 1.4142135623730951}, "howard.functions.databases.generate_databases_param": {"tf": 1}}, "df": 2}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.utils.variant_to_hgvs_name": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.find_nomen": {"tf": 1}}, "df": 1}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"howard.objects.database.Database.export": {"tf": 1}, "howard.objects.hgvs": {"tf": 3.605551275463989}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1}}, "df": 4}}, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.commons.get_random": {"tf": 2.449489742783178}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.load_args": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_type": {"tf": 1}}, "df": 2, "d": {"docs": {"howard.functions.commons.load_args": {"tf": 1.4142135623730951}, "howard.objects.database.Database.__init__": {"tf": 1}}, "df": 2}}}}, "w": {"docs": {"howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1.7320508075688772}}, "df": 3}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.find_nomen": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {"howard.objects.hgvs": {"tf": 2}}, "df": 1}}, "o": {"docs": {}, "df": 0, "w": {"docs": {"howard.functions.commons.vaf_normalization": {"tf": 2}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 2}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.functions.from_extann.extann_to_info": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1.4142135623730951}}, "df": 5, "s": {"docs": {"howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.load_data": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}}, "df": 6}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.variant.justify_indel": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "a": {"docs": {"howard.functions.commons.remove_if_exists": {"tf": 1.4142135623730951}, "howard.functions.commons.split_interval": {"tf": 2.23606797749979}, "howard.functions.commons.merge_regions": {"tf": 2}, "howard.functions.commons.create_where_clause": {"tf": 2.23606797749979}, "howard.functions.commons.command": {"tf": 1}, "howard.functions.commons.run_parallel_commands": {"tf": 2}, "howard.functions.commons.run_parallel_functions": {"tf": 2}, "howard.functions.commons.example_function": {"tf": 2.23606797749979}, "howard.functions.commons.find_all": {"tf": 2.6457513110645907}, "howard.functions.commons.find_genome": {"tf": 1.7320508075688772}, "howard.functions.commons.find_file_prefix": {"tf": 2}, "howard.functions.commons.find_nomen": {"tf": 2}, "howard.functions.commons.explode_annotation_format": {"tf": 3.1622776601683795}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 2.6457513110645907}, "howard.functions.commons.explode_snpeff_ann": {"tf": 2.449489742783178}, "howard.functions.commons.get_index": {"tf": 2.23606797749979}, "howard.functions.commons.get_file_format": {"tf": 1}, "howard.functions.commons.findbypipeline": {"tf": 2.449489742783178}, "howard.functions.commons.genotypeconcordance": {"tf": 2}, "howard.functions.commons.genotype_compression": {"tf": 2.23606797749979}, "howard.functions.commons.genotype_barcode": {"tf": 2.449489742783178}, "howard.functions.commons.barcode": {"tf": 2}, "howard.functions.commons.trio": {"tf": 2}, "howard.functions.commons.vaf_normalization": {"tf": 2.6457513110645907}, "howard.functions.commons.genotype_stats": {"tf": 3}, "howard.functions.commons.extract_file": {"tf": 2.23606797749979}, "howard.functions.commons.download_file": {"tf": 3.605551275463989}, "howard.functions.commons.get_bin": {"tf": 3.1622776601683795}, "howard.functions.commons.get_bin_command": {"tf": 3.3166247903554}, "howard.functions.commons.get_tmp": {"tf": 2.23606797749979}, "howard.functions.commons.get_threads": {"tf": 1.4142135623730951}, "howard.functions.commons.get_memory": {"tf": 3}, "howard.functions.commons.extract_float_from_str": {"tf": 3.1622776601683795}, "howard.functions.commons.extract_memory_in_go": {"tf": 2.23606797749979}, "howard.functions.commons.concat_file": {"tf": 2}, "howard.functions.commons.compress_file": {"tf": 1.4142135623730951}, "howard.functions.commons.get_compression_type": {"tf": 1.7320508075688772}, "howard.functions.commons.get_file_compressed": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_into_infile": {"tf": 2.23606797749979}, "howard.functions.commons.concat_and_compress_files": {"tf": 2.6457513110645907}, "howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1.7320508075688772}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1.7320508075688772}, "howard.functions.commons.load_duckdb_extension": {"tf": 2.449489742783178}, "howard.functions.commons.duckdb_execute": {"tf": 2.23606797749979}, "howard.functions.commons.genome_build_switch": {"tf": 2.23606797749979}, "howard.functions.commons.get_argument": {"tf": 3.1622776601683795}, "howard.functions.commons.get_argument_gooey": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 2.6457513110645907}, "howard.functions.commons.help_generation_from_dict": {"tf": 3.3166247903554}, "howard.functions.commons.help_generation_from_json": {"tf": 2.8284271247461903}, "howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 2.23606797749979}, "howard.functions.commons.format_arg_help": {"tf": 3}, "howard.functions.commons.bed_sort": {"tf": 2}, "howard.functions.commons.full_path": {"tf": 1.4142135623730951}, "howard.functions.commons.get_default_argument": {"tf": 2.449489742783178}, "howard.functions.commons.set_param": {"tf": 2.449489742783178}, "howard.functions.commons.add_value_into_dict": {"tf": 2.6457513110645907}, "howard.functions.commons.load_param": {"tf": 2.6457513110645907}, "howard.functions.commons.load_args": {"tf": 2.8284271247461903}, "howard.functions.commons.get_random": {"tf": 2}, "howard.functions.commons.transcripts_file_to_df": {"tf": 2.6457513110645907}, "howard.functions.commons.identical": {"tf": 2.449489742783178}, "howard.functions.commons.check_docker_image_exists": {"tf": 1.4142135623730951}, "howard.functions.commons.params_string_to_dict": {"tf": 2.8284271247461903}, "howard.functions.commons.determine_value_type": {"tf": 2.8284271247461903}, "howard.functions.commons.determine_column_types": {"tf": 1.7320508075688772}, "howard.functions.commons.detect_column_type": {"tf": 2}, "howard.functions.commons.clean_annotation_field": {"tf": 2.23606797749979}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 2.449489742783178}, "howard.functions.databases.databases_param": {"tf": 3.3166247903554}, "howard.functions.databases.databases_download_annovar": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_snpeff": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_genomes": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_refseq": {"tf": 4.242640687119285}, "howard.functions.databases.databases_format_refseq": {"tf": 3.1622776601683795}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 3.872983346207417}, "howard.functions.databases.databases_download_alphamissense": {"tf": 2.6457513110645907}, "howard.functions.databases.databases_download_exomiser": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_dbsnp": {"tf": 3.7416573867739413}, "howard.functions.databases.databases_download_hgmd": {"tf": 3.1622776601683795}, "howard.functions.from_annovar.from_annovar": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 3.605551275463989}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1.7320508075688772}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 2}, "howard.functions.from_extann.write_extann": {"tf": 1}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1.4142135623730951}, "howard.functions.plugins.plugins_infos": {"tf": 2.8284271247461903}, "howard.functions.plugins.plugins_list": {"tf": 2.8284271247461903}, "howard.functions.plugins.plugins_to_load": {"tf": 2}, "howard.functions.utils.read_refgene": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 2}, "howard.functions.utils.make_transcript": {"tf": 2.449489742783178}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 3.4641016151377544}, "howard.functions.utils.read_transcripts": {"tf": 2.23606797749979}, "howard.functions.utils.get_genomic_sequence": {"tf": 2.23606797749979}, "howard.functions.utils.get_vcf_allele": {"tf": 2.6457513110645907}, "howard.functions.utils.get_alt_from_sequence": {"tf": 2.23606797749979}, "howard.functions.utils.matches_ref_allele": {"tf": 2}, "howard.functions.utils.hgvs_justify_dup": {"tf": 2.23606797749979}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 2.23606797749979}, "howard.functions.utils.parse_hgvs_name": {"tf": 2.8284271247461903}, "howard.functions.utils.cdna_to_protein": {"tf": 3.1622776601683795}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 2.449489742783178}, "howard.functions.utils.format_hgvs_name": {"tf": 4.58257569495584}, "howard.functions.utils.create_refseq_table": {"tf": 3.1622776601683795}, "howard.functions.utils.get_refseq_table": {"tf": 2.449489742783178}, "howard.functions.utils.get_transcript": {"tf": 2}, "howard.main.main": {"tf": 1}, "howard.objects.cdna.CDNACoord": {"tf": 1.4142135623730951}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.cdna.CDNACoord.parse": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 3.3166247903554}, "howard.objects.database.Database.set_database": {"tf": 2}, "howard.objects.database.Database.set_databases_folders": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_database_folders": {"tf": 1.4142135623730951}, "howard.objects.database.Database.read_header_file": {"tf": 2}, "howard.objects.database.Database.get_header_length": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header_from_list": {"tf": 2.8284271247461903}, "howard.objects.database.Database.get_header_from_file": {"tf": 2.8284271247461903}, "howard.objects.database.Database.find_header_file": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_header": {"tf": 3.7416573867739413}, "howard.objects.database.Database.get_header_from_columns": {"tf": 3}, "howard.objects.database.Database.query": {"tf": 2}, "howard.objects.database.Database.set_header": {"tf": 2.8284271247461903}, "howard.objects.database.Database.set_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header_file": {"tf": 3.4641016151377544}, "howard.objects.database.Database.set_assembly": {"tf": 1.7320508075688772}, "howard.objects.database.Database.find_database": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_basename": {"tf": 2}, "howard.objects.database.Database.get_database_dirname": {"tf": 2}, "howard.objects.database.Database.exists": {"tf": 2}, "howard.objects.database.Database.set_format": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_format": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_type": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_database_tables": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_database_table": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_type_from_columns": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_needed_columns": {"tf": 3}, "howard.objects.database.Database.get_sql_from": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 2.8284271247461903}, "howard.objects.database.Database.get_sql_database_link": {"tf": 2.449489742783178}, "howard.objects.database.Database.create_view": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_view": {"tf": 2.449489742783178}, "howard.objects.database.Database.is_compressed": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header_infos_list": {"tf": 2.23606797749979}, "howard.objects.database.Database.find_column": {"tf": 3.7416573867739413}, "howard.objects.database.Database.map_columns": {"tf": 2}, "howard.objects.database.Database.get_columns": {"tf": 3.1622776601683795}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 2}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_annotations": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_extra_columns": {"tf": 2.23606797749979}, "howard.objects.database.Database.is_vcf": {"tf": 2}, "howard.objects.database.Database.is_genotype_column": {"tf": 3.3166247903554}, "howard.objects.database.Database.export": {"tf": 4.47213595499958}, "howard.objects.genome.ChromosomeSubset": {"tf": 1}, "howard.objects.genome.GenomeSubset": {"tf": 1}, "howard.objects.genome.MockGenome.__init__": {"tf": 2.8284271247461903}, "howard.objects.genome.MockGenome.get_seq": {"tf": 1}, "howard.objects.genome.MockGenome.read": {"tf": 1.7320508075688772}, "howard.objects.genome.MockGenome.write": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 2.8284271247461903}, "howard.objects.genome.MockGenomeTestFile.get_seq": {"tf": 1}, "howard.objects.hgvs": {"tf": 1.7320508075688772}, "howard.objects.hgvs.get_refseq_type": {"tf": 2}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 4.358898943540674}, "howard.objects.hgvs.HGVSName.parse": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 2}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 2.23606797749979}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 2}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 2.23606797749979}, "howard.objects.hgvs.HGVSName.format": {"tf": 3.3166247903554}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 2.6457513110645907}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 2}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 2}, "howard.objects.transcript.Transcript.__init__": {"tf": 2.6457513110645907}, "howard.objects.transcript.Transcript.full_name": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.is_coding": {"tf": 2.23606797749979}, "howard.objects.transcript.Transcript.strand": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.ordered_cdna_match": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.get_cds_start_stop": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 2.23606797749979}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 1.7320508075688772}, "howard.objects.transcript.BED6Interval.distance": {"tf": 1.7320508075688772}, "howard.objects.transcript.Exon.__init__": {"tf": 3}, "howard.objects.transcript.Exon.name": {"tf": 1.7320508075688772}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 2}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}, "howard.objects.transcript.CDNA_Match.length": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 2.6457513110645907}, "howard.objects.variant.Position": {"tf": 1}, "howard.objects.variant.get_sequence": {"tf": 1}, "howard.objects.variant.get_sequence_from_position": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 1.7320508075688772}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.__init__": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_samples": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.get_samples": {"tf": 1}, "howard.objects.variants.Variants.set_input": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_config": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.set_param": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_connexion_config": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_duckdb_settings": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.set_connexion": {"tf": 2}, "howard.objects.variants.Variants.set_output": {"tf": 1}, "howard.objects.variants.Variants.set_header": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 2.8284271247461903}, "howard.objects.variants.Variants.get_stats": {"tf": 1}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.print_stats": {"tf": 3.1622776601683795}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1}, "howard.objects.variants.Variants.get_output_format": {"tf": 1}, "howard.objects.variants.Variants.get_tmp_dir": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_connexion_type": {"tf": 1}, "howard.objects.variants.Variants.get_header": {"tf": 1}, "howard.objects.variants.Variants.get_header_infos_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_length": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 3.1622776601683795}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 2.8284271247461903}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.load_data": {"tf": 2}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.add_column": {"tf": 3}, "howard.objects.variants.Variants.drop_column": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.explode_infos": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.read_vcf_header": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 2}, "howard.objects.variants.Variants.execute_query": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 4}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_header": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.run_commands": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_threads": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_memory": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.scan_databases": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 1}, "howard.objects.variants.Variants.annotation_parquet": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_config_default": {"tf": 2}, "howard.objects.variants.Variants.get_config_json": {"tf": 3}, "howard.objects.variants.Variants.prioritization": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 2}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_variant_id": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 2}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 2}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1}, "howard.objects.variants.Variants.calculation_trio": {"tf": 1}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 4}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 3.7416573867739413}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 2.8284271247461903}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 3}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 2.23606797749979}, "howard.tools.annotation.annotation": {"tf": 1}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.gui.gui": {"tf": 1.7320508075688772}, "howard.tools.help.help": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}, "howard.tools.process.process": {"tf": 1.4142135623730951}, "howard.tools.query.query": {"tf": 1.4142135623730951}, "howard.tools.stats.stats": {"tf": 1.4142135623730951}, "howard.tools.tools.PathType.__init__": {"tf": 2}}, "df": 302, "t": {"docs": {"howard.functions.commons.remove_if_exists": {"tf": 1}, "howard.functions.commons.find": {"tf": 1}, "howard.functions.commons.find_all": {"tf": 1}, "howard.functions.commons.find_genome": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1.7320508075688772}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.format_arg_help": {"tf": 1}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.functions.utils.read_refgene": {"tf": 1.4142135623730951}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1.7320508075688772}, "howard.functions.utils.format_hgvs_name": {"tf": 2}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1.4142135623730951}}, "df": 22, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 11, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.get_default_argument": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.utils.variant_to_hgvs_name": {"tf": 1.4142135623730951}, "howard.objects.database.Database.__init__": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_database": {"tf": 1}, "howard.objects.database.Database.set_databases_folders": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_header_file": {"tf": 1.7320508075688772}, "howard.objects.database.Database.set_assembly": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_assembly": {"tf": 1}, "howard.objects.database.Database.get_database": {"tf": 1}, "howard.objects.database.Database.set_format": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_annotations": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1}, "howard.objects.transcript.Transcript.full_name": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.ordered_cdna_match": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 2}, "howard.objects.variants.Variants.set_samples": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_samples": {"tf": 1}, "howard.objects.variants.Variants.set_param": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.get_table_variants": {"tf": 1.4142135623730951}}, "df": 20, "s": {"docs": {"howard.functions.from_annovar.from_annovar": {"tf": 1.4142135623730951}, "howard.functions.from_extann.from_extann": {"tf": 1.4142135623730951}, "howard.functions.plugins.plugins_infos": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 2}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_input": {"tf": 1.4142135623730951}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.process.process": {"tf": 1.4142135623730951}}, "df": 12}}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"howard.objects.database.Database.get_sql_database_attach": {"tf": 2.449489742783178}}, "df": 1}}}}, "g": {"docs": {"howard.objects.cdna.CDNACoord": {"tf": 1}}, "df": 1}}, "n": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1.4142135623730951}, "howard.functions.commons.get_index": {"tf": 1.4142135623730951}, "howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.functions.commons.genotype_stats": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_file": {"tf": 1.4142135623730951}, "howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.commons.get_tmp": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_memory_in_go": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1.4142135623730951}, "howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1}, "howard.functions.commons.genome_build_switch": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1.7320508075688772}, "howard.functions.commons.get_argument_gooey": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.format_arg_help": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.load_config_args": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 2.23606797749979}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.from_annovar.from_annovar": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1.4142135623730951}, "howard.functions.from_extann.from_extann": {"tf": 1.4142135623730951}, "howard.functions.utils.read_refgene": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1.7320508075688772}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1.4142135623730951}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.7320508075688772}, "howard.functions.utils.cdna_to_protein": {"tf": 1.4142135623730951}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1.7320508075688772}, "howard.functions.utils.format_hgvs_name": {"tf": 2}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.objects.cdna.CDNACoord": {"tf": 1.4142135623730951}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1.4142135623730951}, "howard.objects.database.Database.__init__": {"tf": 2.23606797749979}, "howard.objects.database.Database.set_database": {"tf": 1.7320508075688772}, "howard.objects.database.Database.set_databases_folders": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_length": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_from_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.objects.database.Database.set_header_file": {"tf": 2}, "howard.objects.database.Database.set_assembly": {"tf": 1}, "howard.objects.database.Database.get_assembly": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_format": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1}, "howard.objects.database.Database.get_view": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1.4142135623730951}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 2.6457513110645907}, "howard.objects.hgvs.HGVSName.parse": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.__init__": {"tf": 2.6457513110645907}, "howard.objects.transcript.Transcript.full_name": {"tf": 1}, "howard.objects.transcript.Transcript.stop_codon": {"tf": 1}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 1.4142135623730951}, "howard.objects.transcript.BED6Interval.distance": {"tf": 2}, "howard.objects.transcript.Exon.__init__": {"tf": 1.7320508075688772}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 2}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1.7320508075688772}, "howard.objects.variant.justify_indel": {"tf": 1}, "howard.objects.variants.Variants.set_samples": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.set_output": {"tf": 1}, "howard.objects.variants.Variants.get_header_length": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}, "howard.objects.variants.Variants.execute_query": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 2}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.get_memory": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1.7320508075688772}, "howard.tools.annotation.annotation": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}, "howard.tools.gui.gui": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}, "howard.tools.process.process": {"tf": 1}, "howard.tools.query.query": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1.4142135623730951}}, "df": 123, "d": {"docs": {"howard.functions.commons.remove_if_exists": {"tf": 1}, "howard.functions.commons.split_interval": {"tf": 1.7320508075688772}, "howard.functions.commons.merge_regions": {"tf": 1.7320508075688772}, "howard.functions.commons.create_where_clause": {"tf": 1.7320508075688772}, "howard.functions.commons.command": {"tf": 1}, "howard.functions.commons.run_parallel_commands": {"tf": 1.4142135623730951}, "howard.functions.commons.run_parallel_functions": {"tf": 1.4142135623730951}, "howard.functions.commons.example_function": {"tf": 1.7320508075688772}, "howard.functions.commons.find": {"tf": 1}, "howard.functions.commons.find_all": {"tf": 2}, "howard.functions.commons.find_genome": {"tf": 1}, "howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.functions.commons.find_nomen": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_annotation_format": {"tf": 2}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 2.449489742783178}, "howard.functions.commons.get_file_format": {"tf": 1}, "howard.functions.commons.findbypipeline": {"tf": 1.7320508075688772}, "howard.functions.commons.genotype_compression": {"tf": 2}, "howard.functions.commons.genotype_barcode": {"tf": 1.7320508075688772}, "howard.functions.commons.vaf_normalization": {"tf": 1.4142135623730951}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1.7320508075688772}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.get_threads": {"tf": 1}, "howard.functions.commons.get_memory": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_float_from_str": {"tf": 1}, "howard.functions.commons.concat_file": {"tf": 1.7320508075688772}, "howard.functions.commons.compress_file": {"tf": 1.4142135623730951}, "howard.functions.commons.get_compression_type": {"tf": 1}, "howard.functions.commons.get_file_compressed": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_into_infile": {"tf": 1.7320508075688772}, "howard.functions.commons.concat_and_compress_files": {"tf": 3.4641016151377544}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1.4142135623730951}, "howard.functions.commons.load_duckdb_extension": {"tf": 1}, "howard.functions.commons.duckdb_execute": {"tf": 1.4142135623730951}, "howard.functions.commons.genome_build_switch": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1.4142135623730951}, "howard.functions.commons.get_argument_gooey": {"tf": 1.7320508075688772}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 2.8284271247461903}, "howard.functions.commons.help_generation_from_json": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation": {"tf": 1.4142135623730951}, "howard.functions.commons.bed_sort": {"tf": 1.7320508075688772}, "howard.functions.commons.full_path": {"tf": 1.4142135623730951}, "howard.functions.commons.set_param": {"tf": 2}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.load_param": {"tf": 1.4142135623730951}, "howard.functions.commons.load_config_args": {"tf": 1.7320508075688772}, "howard.functions.commons.load_args": {"tf": 2.23606797749979}, "howard.functions.commons.get_random": {"tf": 1.7320508075688772}, "howard.functions.commons.transcripts_file_to_df": {"tf": 2}, "howard.functions.commons.identical": {"tf": 2}, "howard.functions.commons.params_string_to_dict": {"tf": 1.7320508075688772}, "howard.functions.commons.determine_value_type": {"tf": 1.4142135623730951}, "howard.functions.commons.determine_column_types": {"tf": 1.7320508075688772}, "howard.functions.commons.detect_column_type": {"tf": 1}, "howard.functions.commons.clean_annotation_field": {"tf": 1.4142135623730951}, "howard.functions.databases.generate_databases_param": {"tf": 2}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 2}, "howard.functions.databases.databases_param": {"tf": 2.6457513110645907}, "howard.functions.databases.databases_download_annovar": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_snpeff": {"tf": 2}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 2.6457513110645907}, "howard.functions.databases.databases_format_refseq": {"tf": 2}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 3.1622776601683795}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_exomiser": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_hgmd": {"tf": 2}, "howard.functions.from_annovar.from_annovar": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 2}, "howard.functions.from_extann.write_extann": {"tf": 1}, "howard.functions.from_extann.get_longest_transcript": {"tf": 1.4142135623730951}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.functions.plugins.plugins_infos": {"tf": 2}, "howard.functions.plugins.plugins_list": {"tf": 1.7320508075688772}, "howard.functions.plugins.plugins_to_load": {"tf": 2}, "howard.functions.utils.read_refgene": {"tf": 1.7320508075688772}, "howard.functions.utils.read_genepred": {"tf": 1.4142135623730951}, "howard.functions.utils.make_transcript": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 2.6457513110645907}, "howard.functions.utils.read_transcripts": {"tf": 1.7320508075688772}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 2.8284271247461903}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1.7320508075688772}, "howard.functions.utils.matches_ref_allele": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1.7320508075688772}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1.7320508075688772}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 2.23606797749979}, "howard.functions.utils.parse_hgvs_name": {"tf": 2.8284271247461903}, "howard.functions.utils.cdna_to_protein": {"tf": 1.7320508075688772}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1.7320508075688772}, "howard.functions.utils.format_hgvs_name": {"tf": 2.23606797749979}, "howard.functions.utils.create_refseq_table": {"tf": 1.4142135623730951}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.functions.utils.get_transcript": {"tf": 1.4142135623730951}, "howard.main.main": {"tf": 1}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.database.Database.read_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 2}, "howard.objects.database.Database.query": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.find_database": {"tf": 1}, "howard.objects.database.Database.get_database_dirname": {"tf": 1}, "howard.objects.database.Database.exists": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.get_database_table": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_view": {"tf": 1.7320508075688772}, "howard.objects.database.Database.is_compressed": {"tf": 1}, "howard.objects.database.Database.map_columns": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_extra_columns": {"tf": 1.7320508075688772}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1.4142135623730951}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenome.get_seq": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.get_seq": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 2}, "howard.objects.hgvs.HGVSName.parse": {"tf": 2}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.__init__": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.strand": {"tf": 1}, "howard.objects.transcript.Transcript.ordered_cdna_match": {"tf": 1}, "howard.objects.transcript.Transcript.get_cds_start_stop": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1.4142135623730951}, "howard.objects.transcript.BED6Interval.distance": {"tf": 1.4142135623730951}, "howard.objects.transcript.Exon.__init__": {"tf": 1}, "howard.objects.transcript.Exon.name": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}, "howard.objects.transcript.CDNA_Match.length": {"tf": 1.4142135623730951}, "howard.objects.variant.justify_indel": {"tf": 1}, "howard.objects.variants.Variants.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_samples": {"tf": 1}, "howard.objects.variants.Variants.set_input": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.set_config": {"tf": 1}, "howard.objects.variants.Variants.set_param": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_config": {"tf": 1}, "howard.objects.variants.Variants.set_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.set_output": {"tf": 1}, "howard.objects.variants.Variants.set_header": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_overview": {"tf": 1}, "howard.objects.variants.Variants.get_stats": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 2}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1}, "howard.objects.variants.Variants.get_tmp_dir": {"tf": 1}, "howard.objects.variants.Variants.get_header_length": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.load_data": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.drop_column": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.explode_infos": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.read_vcf_header": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}, "howard.objects.variants.Variants.execute_query": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 2}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 2}, "howard.objects.variants.Variants.run_commands": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 1}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.scan_databases": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 1}, "howard.objects.variants.Variants.annotation_parquet": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_config_json": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.prioritization": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}, "howard.objects.variants.Variants.calculation_variant_id": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_genotype_concordance": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 2}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 2}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}, "howard.tools.annotation.annotation": {"tf": 1}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1.4142135623730951}, "howard.tools.gui.gui": {"tf": 1.4142135623730951}, "howard.tools.help.help": {"tf": 1.4142135623730951}, "howard.tools.hgvs.hgvs": {"tf": 1.7320508075688772}, "howard.tools.prioritization.prioritization": {"tf": 1.7320508075688772}, "howard.tools.process.process": {"tf": 1.7320508075688772}, "howard.tools.query.query": {"tf": 1.4142135623730951}, "howard.tools.stats.stats": {"tf": 1.4142135623730951}}, "df": 235}, "n": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_snpeff_ann": {"tf": 3}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.4142135623730951}}, "df": 5, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 4}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_snpeff_ann": {"tf": 2.6457513110645907}, "howard.functions.commons.clean_annotation_field": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_exomiser": {"tf": 1.7320508075688772}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.4142135623730951}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.annotation_parquet": {"tf": 1}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_variant_id": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 2}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 4.795831523312719}, "howard.tools.annotation.annotation": {"tf": 1.7320508075688772}, "howard.tools.hgvs.hgvs": {"tf": 1}}, "df": 21, "s": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1.7320508075688772}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 2}, "howard.functions.commons.explode_snpeff_ann": {"tf": 2.23606797749979}, "howard.functions.commons.clean_annotation_field": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 2.6457513110645907}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.get_annotations": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation": {"tf": 1}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 2.6457513110645907}, "howard.tools.process.process": {"tf": 1.4142135623730951}}, "df": 18}}}}, "e": {"docs": {"howard.objects.variants.Variants.annotation_snpsift": {"tf": 1}, "howard.objects.variants.Variants.annotation_bcftools": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.annotation_snpeff": {"tf": 1}, "howard.objects.variants.Variants.annotation_splice": {"tf": 1}}, "df": 5, "s": {"docs": {"howard.objects.variants.Variants.annotation": {"tf": 1}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 1}, "howard.objects.variants.Variants.annotation_parquet": {"tf": 1}}, "df": 3}, "d": {"docs": {"howard.tools.annotation.annotation": {"tf": 1}}, "df": 1}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.databases.databases_download_annovar": {"tf": 2.449489742783178}, "howard.functions.from_annovar.from_annovar": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 1}}, "df": 4}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.trio": {"tf": 1.4142135623730951}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.4142135623730951}}, "df": 4}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.genotype_stats": {"tf": 1}}, "df": 1}, "s": {"docs": {"howard.functions.commons.determine_column_types": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.database.Database.get_extra_columns": {"tf": 1}}, "df": 1}}}}}}}, "y": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 1.4142135623730951}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.commons.determine_column_types": {"tf": 1.7320508075688772}, "howard.functions.commons.clean_annotation_field": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.database.Database.set_database": {"tf": 1}, "howard.objects.database.Database.query": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 21, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1}}, "df": 2}}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.databases.databases_param": {"tf": 1}, "howard.functions.plugins.plugins_to_load": {"tf": 1}, "howard.objects.database.Database.is_compressed": {"tf": 1}}, "df": 3}}}}}}, "s": {"docs": {"howard.functions.commons.create_where_clause": {"tf": 1.4142135623730951}, "howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1.4142135623730951}, "howard.functions.commons.genotype_compression": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.extract_float_from_str": {"tf": 1.4142135623730951}, "howard.functions.commons.get_file_compressed": {"tf": 1}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.commons.genome_build_switch": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1.7320508075688772}, "howard.functions.commons.full_path": {"tf": 1.4142135623730951}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.load_config_args": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.commons.detect_column_type": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_param": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_format_refseq": {"tf": 2}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1.4142135623730951}, "howard.functions.plugins.plugins_list": {"tf": 1.4142135623730951}, "howard.functions.plugins.plugins_to_load": {"tf": 1}, "howard.functions.utils.read_transcripts": {"tf": 1.4142135623730951}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1.7320508075688772}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.functions.utils.get_transcript": {"tf": 1.7320508075688772}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.database.Database.set_database": {"tf": 1}, "howard.objects.database.Database.set_databases_folders": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.query": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.objects.database.Database.set_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.set_assembly": {"tf": 1}, "howard.objects.database.Database.get_database": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 2}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1.4142135623730951}, "howard.objects.transcript.Exon.__init__": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 2}, "howard.objects.variants.Variants.set_samples": {"tf": 1}, "howard.objects.variants.Variants.set_input": {"tf": 1}, "howard.objects.variants.Variants.set_config": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.set_param": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_header": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1}, "howard.objects.variants.Variants.get_header": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 2}, "howard.objects.variants.Variants.execute_query": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.get_memory": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1.7320508075688772}, "howard.tools.prioritization.prioritization": {"tf": 1.4142135623730951}, "howard.tools.tools.PathType.__init__": {"tf": 1}}, "df": 98, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.find_genome": {"tf": 2.449489742783178}, "howard.functions.commons.find_file_prefix": {"tf": 2.23606797749979}, "howard.functions.commons.genome_build_switch": {"tf": 2.23606797749979}, "howard.functions.databases.databases_infos": {"tf": 2.449489742783178}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_refseq": {"tf": 2.6457513110645907}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_exomiser": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbsnp": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_hgmd": {"tf": 1.4142135623730951}, "howard.objects.database.Database.__init__": {"tf": 2.449489742783178}, "howard.objects.database.Database.set_database": {"tf": 2}, "howard.objects.database.Database.set_assembly": {"tf": 2.6457513110645907}, "howard.objects.database.Database.get_assembly": {"tf": 1.7320508075688772}, "howard.objects.database.Database.find_database": {"tf": 1.4142135623730951}}, "df": 17}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.databases.generate_databases_param": {"tf": 2}, "howard.functions.databases.databases_download_annovar": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_snpeff": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_genomes": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_refseq": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 2.6457513110645907}, "howard.functions.databases.databases_download_alphamissense": {"tf": 2}, "howard.functions.databases.databases_download_exomiser": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_dbsnp": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_hgmd": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_database": {"tf": 1}}, "df": 11}}}}}}}, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.get_transcript": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}}, "df": 5}}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"howard.objects.variants.Variants.set_config": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.variants.Variants.add_column": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.tools.process.process": {"tf": 1}}, "df": 1}}}}}, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"howard.functions.commons.download_file": {"tf": 1.4142135623730951}}, "df": 1, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.download_file": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}, "c": {"docs": {"howard.objects.database.Database.export": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.bed_sort": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}}, "df": 3}}}}}}}, "n": {"docs": {"howard.objects.hgvs": {"tf": 1}}, "df": 1}, "p": {"docs": {"howard.objects.hgvs": {"tf": 1}}, "df": 1}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.run_parallel_functions": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 6}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.4142135623730951}}, "df": 2}}}}, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}}, "df": 2}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.find_all": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.format_arg_help": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1}}, "df": 3}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.set_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.calculation": {"tf": 1}}, "df": 2}}}}}}}}}, "i": {"docs": {"howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.find_all": {"tf": 1}, "howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.functions.commons.genotypeconcordance": {"tf": 1.4142135623730951}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.get_compression_type": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"tf": 1}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1.7320508075688772}, "howard.functions.commons.determine_value_type": {"tf": 1.7320508075688772}, "howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.commons.detect_column_type": {"tf": 1.4142135623730951}, "howard.functions.commons.clean_annotation_field": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_infos": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_refseq": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.from_extann.get_longest_transcript": {"tf": 1}, "howard.functions.plugins.plugins_infos": {"tf": 1.4142135623730951}, "howard.functions.plugins.plugins_list": {"tf": 1.7320508075688772}, "howard.functions.plugins.plugins_to_load": {"tf": 1.4142135623730951}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.functions.utils.read_transcripts": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1.4142135623730951}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.database.Database.set_databases_folders": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1.7320508075688772}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.database.Database.map_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 2}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenome.get_seq": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.get_seq": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}, "howard.objects.variant.get_sequence": {"tf": 1}, "howard.objects.variants.Variants.set_samples": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.scan_databases": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 2}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1.4142135623730951}, "howard.tools.annotation.annotation": {"tf": 1}, "howard.tools.process.process": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1.7320508075688772}}, "df": 68}, "i": {"docs": {}, "df": 0, "a": {"2": {"docs": {}, "df": 0, "c": {"docs": {"howard.functions.commons.download_file": {"tf": 2.23606797749979}}, "df": 1}}, "docs": {"howard.functions.commons.download_file": {"tf": 2}}, "df": 1}}, "g": {"docs": {"howard.functions.commons.get_argument": {"tf": 2}, "howard.functions.commons.get_argument_gooey": {"tf": 1.4142135623730951}, "howard.functions.commons.get_argument_to_mk": {"tf": 1.4142135623730951}, "howard.functions.commons.format_arg_help": {"tf": 1.7320508075688772}, "howard.objects.hgvs": {"tf": 1}}, "df": 5, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.get_duckdb_extension_file": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 3.4641016151377544}, "howard.functions.commons.get_argument_gooey": {"tf": 2}, "howard.functions.commons.get_argument_to_mk": {"tf": 3}, "howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"tf": 1}, "howard.functions.commons.format_arg_help": {"tf": 2.23606797749979}, "howard.functions.commons.get_default_argument": {"tf": 2.8284271247461903}, "howard.functions.commons.set_param": {"tf": 2.6457513110645907}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 2.6457513110645907}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.utils.read_refgene": {"tf": 1.4142135623730951}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.objects.database.Database.set_header_file": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_format": {"tf": 1}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_config": {"tf": 1}, "howard.objects.variants.Variants.get_header_length": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.execute_query": {"tf": 1}, "howard.objects.variants.Variants.get_memory": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}, "howard.tools.calculation.calculation": {"tf": 1}}, "df": 31, "s": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 2}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 2.23606797749979}, "howard.functions.commons.get_default_argument": {"tf": 2.449489742783178}, "howard.functions.commons.set_param": {"tf": 2.6457513110645907}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.load_config_args": {"tf": 1.4142135623730951}, "howard.functions.commons.load_args": {"tf": 4}, "howard.functions.databases.generate_databases_param": {"tf": 2}, "howard.tools.annotation.annotation": {"tf": 1.4142135623730951}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1.4142135623730951}, "howard.tools.gui.gui": {"tf": 1.4142135623730951}, "howard.tools.help.help": {"tf": 2}, "howard.tools.hgvs.hgvs": {"tf": 1.4142135623730951}, "howard.tools.prioritization.prioritization": {"tf": 1}, "howard.tools.process.process": {"tf": 1.4142135623730951}, "howard.tools.query.query": {"tf": 1.4142135623730951}, "howard.tools.stats.stats": {"tf": 1.7320508075688772}}, "df": 20}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.help_generation": {"tf": 1.4142135623730951}, "howard.functions.commons.load_args": {"tf": 1}}, "df": 2}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.help_generation": {"tf": 1.4142135623730951}, "howard.functions.commons.set_param": {"tf": 1.4142135623730951}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1.4142135623730951}, "howard.functions.databases.generate_databases_param": {"tf": 1.4142135623730951}, "howard.tools.gui.gui": {"tf": 1.4142135623730951}, "howard.tools.help.help": {"tf": 1.4142135623730951}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.query.query": {"tf": 1}}, "df": 9}}}}}, "s": {"docs": {"howard.functions.commons.set_param": {"tf": 1.4142135623730951}, "howard.functions.commons.load_param": {"tf": 1.4142135623730951}, "howard.functions.commons.load_config_args": {"tf": 2.449489742783178}, "howard.functions.commons.load_args": {"tf": 3.7416573867739413}, "howard.functions.databases.generate_databases_param": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.from_annovar": {"tf": 1.4142135623730951}, "howard.functions.from_extann.from_extann": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.tools.annotation.annotation": {"tf": 1.4142135623730951}, "howard.tools.calculation.calculation": {"tf": 1.4142135623730951}, "howard.tools.databases.databases": {"tf": 1.4142135623730951}, "howard.tools.gui.gui": {"tf": 1.7320508075688772}, "howard.tools.help.help": {"tf": 1.4142135623730951}, "howard.tools.hgvs.hgvs": {"tf": 1.4142135623730951}, "howard.tools.prioritization.prioritization": {"tf": 1.4142135623730951}, "howard.tools.process.process": {"tf": 1.4142135623730951}, "howard.tools.query.query": {"tf": 1.4142135623730951}, "howard.tools.stats.stats": {"tf": 1.7320508075688772}}, "df": 18}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.utils.hgvs_justify_indel": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"howard.objects.transcript.Exon.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.find_all": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.genotypeconcordance": {"tf": 1}, "howard.functions.commons.genotype_compression": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.load_duckdb_extension": {"tf": 1.4142135623730951}, "howard.functions.commons.TimeoutException": {"tf": 1}, "howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_annovar": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1.4142135623730951}, "howard.functions.from_extann.get_all_transcript": {"tf": 1}, "howard.functions.utils.read_transcripts": {"tf": 1}, "howard.objects.database.Database.set_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.genome.MockGenomeError": {"tf": 1}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSRegex": {"tf": 1}, "howard.objects.variant.normalize_variant": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.explode_infos": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}}, "df": 26, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.vaf_normalization": {"tf": 1.7320508075688772}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 2.449489742783178}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 2.449489742783178}, "howard.functions.utils.hgvs_justify_dup": {"tf": 3}, "howard.functions.utils.hgvs_justify_indel": {"tf": 2}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1.4142135623730951}, "howard.functions.utils.parse_hgvs_name": {"tf": 3.1622776601683795}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 3.3166247903554}, "howard.functions.utils.format_hgvs_name": {"tf": 4.123105625617661}, "howard.objects.hgvs": {"tf": 4}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 3.872983346207417}, "howard.objects.hgvs.HGVSName.parse": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 2.449489742783178}, "howard.objects.hgvs.HGVSName.format": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 2}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.variant.normalize_variant": {"tf": 1.4142135623730951}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1}}, "df": 26, "s": {"docs": {"howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 2.6457513110645907}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}}, "df": 11}}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {"howard.objects.database.Database.get_table_columns_from_file": {"tf": 1}, "howard.objects.genome.ChromosomeSubset": {"tf": 1}, "howard.objects.genome.GenomeSubset": {"tf": 1}, "howard.tools.tools.PathType.__init__": {"tf": 1}}, "df": 4, "s": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 18}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.clean_annotation_field": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.get_connexion_type": {"tf": 1}}, "df": 2}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 1}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}}, "df": 7, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.help_generation_from_json": {"tf": 1}}, "df": 1}}}}}}}, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.commons.compress_file": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.7320508075688772}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}}, "df": 4}}}}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {"howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}}, "df": 5}}, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"howard.functions.commons.clean_annotation_field": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}}, "df": 2}}}}}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.databases.databases_download_alphamissense": {"tf": 3.4641016151377544}}, "df": 1}}}}}}}}}}}, "t": {"docs": {"howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1.7320508075688772}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1.7320508075688772}, "howard.functions.utils.cdna_to_protein": {"tf": 1.4142135623730951}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1.7320508075688772}, "howard.functions.utils.format_hgvs_name": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1.4142135623730951}, "howard.objects.variant.normalize_variant": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1}}, "df": 13, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1.4142135623730951}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.format_hgvs_name": {"tf": 2}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1.4142135623730951}, "howard.objects.variant.normalize_variant": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}}, "df": 13}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}}, "df": 4}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1.4142135623730951}}, "df": 6}}}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {"howard.objects.hgvs": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.transcript.BED6Interval_base.chrom": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom_start": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom_end": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.name": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.score": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.strand": {"tf": 1}}, "df": 6}}, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "|": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "|": {"docs": {}, "df": 0, "c": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 1.4142135623730951}, "howard.functions.commons.add_value_into_dict": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.add_column": {"tf": 2}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1}}, "df": 7, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.explode_infos": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 2}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1.4142135623730951}}, "df": 13}}, "s": {"docs": {"howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.calculation_variant_id": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}}, "df": 12}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.cdna.CDNACoord": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 1.7320508075688772}, "howard.functions.commons.get_tmp": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}}, "df": 14}}}}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.add_value_into_dict": {"tf": 1.4142135623730951}, "howard.objects.transcript.CDNA_Match.length": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.calculation_trio": {"tf": 1}}, "df": 4}}}}, "j": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.download_file": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.utils.hgvs_normalize_variant": {"tf": 1}}, "df": 1}}}}}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 2}, "howard.functions.commons.get_argument_to_mk": {"tf": 1.7320508075688772}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.format_arg_help": {"tf": 1}, "howard.functions.commons.get_default_argument": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_infos": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_param": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.plugins.plugins_infos": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 2}, "howard.functions.plugins.plugins_to_load": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.make_transcript": {"tf": 1}, "howard.functions.utils.read_transcripts": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1.4142135623730951}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}, "howard.objects.transcript.Exon.__init__": {"tf": 1}, "howard.objects.variants.Variants.get_stats": {"tf": 1}, "howard.objects.variants.Variants.drop_column": {"tf": 1}, "howard.objects.variants.Variants.scan_databases": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 2}, "howard.tools.gui.gui": {"tf": 1}}, "df": 38}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.database.Database.map_columns": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.download_file": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.variant.normalize_variant": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1}}, "df": 7, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.extract_file": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.variants.Variants.set_input": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1}}, "df": 5}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.determine_value_type": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.transcript.Transcript.get_cds_start_stop": {"tf": 1}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1}}, "df": 4}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.get_default_argument": {"tf": 1}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.genome.ChromosomeSubset": {"tf": 1}, "howard.objects.genome.GenomeSubset": {"tf": 1}}, "df": 6}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.variants.Variants.scan_databases": {"tf": 1}}, "df": 1}}, "s": {"docs": {"howard.tools.gui.gui": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.load_args": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}}, "df": 7}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}}, "df": 2}}, "g": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.hgvs": {"tf": 1}}, "df": 1}}}, "m": {"docs": {"howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}}, "df": 1, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.get_memory": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}}, "df": 7}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"1": {"docs": {"howard.objects.hgvs": {"tf": 3}}, "df": 1}, "3": {"docs": {"howard.objects.hgvs": {"tf": 3}}, "df": 1}, "docs": {"howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}}, "df": 2}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.get_memory": {"tf": 1}, "howard.functions.commons.genome_build_switch": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1.4142135623730951}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}, "howard.objects.variants.Variants.scan_databases": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1}}, "df": 14}}}}}}}}, "f": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1.4142135623730951}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.commons.clean_annotation_field": {"tf": 1}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.utils.read_refgene": {"tf": 1}, "howard.objects.cdna.CDNACoord": {"tf": 1}, "howard.objects.transcript.BED6Interval.distance": {"tf": 1.4142135623730951}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.create_indexes": {"tf": 1}, "howard.objects.variants.Variants.drop_indexes": {"tf": 1}}, "df": 15}}}, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.hgvs.HGVSName.__init__": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_exomiser": {"tf": 1.7320508075688772}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.4142135623730951}}, "df": 3, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 5}}}}}}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.tools.databases.databases": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}}, "df": 1}}}, "i": {"3": {"docs": {"howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}}, "df": 1}, "docs": {"howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}}, "df": 4, "f": {"docs": {"howard.functions.commons.remove_if_exists": {"tf": 1.4142135623730951}, "howard.functions.commons.find_genome": {"tf": 1.7320508075688772}, "howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 2.23606797749979}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1.7320508075688772}, "howard.functions.commons.get_index": {"tf": 1.4142135623730951}, "howard.functions.commons.findbypipeline": {"tf": 1}, "howard.functions.commons.genotype_stats": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_file": {"tf": 1.4142135623730951}, "howard.functions.commons.download_file": {"tf": 2.6457513110645907}, "howard.functions.commons.get_bin": {"tf": 2}, "howard.functions.commons.get_bin_command": {"tf": 1.7320508075688772}, "howard.functions.commons.get_tmp": {"tf": 2.23606797749979}, "howard.functions.commons.get_threads": {"tf": 1.4142135623730951}, "howard.functions.commons.get_memory": {"tf": 1.7320508075688772}, "howard.functions.commons.extract_float_from_str": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_memory_in_go": {"tf": 1.7320508075688772}, "howard.functions.commons.concat_file": {"tf": 1.4142135623730951}, "howard.functions.commons.get_compression_type": {"tf": 2}, "howard.functions.commons.get_file_compressed": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_and_compress_files": {"tf": 1.7320508075688772}, "howard.functions.commons.duckdb_execute": {"tf": 1.4142135623730951}, "howard.functions.commons.genome_build_switch": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 2.449489742783178}, "howard.functions.commons.get_argument_to_mk": {"tf": 1.7320508075688772}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.format_arg_help": {"tf": 1.7320508075688772}, "howard.functions.commons.full_path": {"tf": 1}, "howard.functions.commons.get_default_argument": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1.4142135623730951}, "howard.functions.commons.load_args": {"tf": 1.7320508075688772}, "howard.functions.commons.get_random": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.commons.identical": {"tf": 2.23606797749979}, "howard.functions.commons.check_docker_image_exists": {"tf": 1.4142135623730951}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 2.23606797749979}, "howard.functions.commons.determine_column_types": {"tf": 2.23606797749979}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_param": {"tf": 2}, "howard.functions.databases.databases_download_annovar": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_snpeff": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_genomes": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_refseq": {"tf": 4.123105625617661}, "howard.functions.databases.databases_format_refseq": {"tf": 4.242640687119285}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 3.4641016151377544}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 2.8284271247461903}, "howard.functions.databases.databases_download_dbsnp": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_hgmd": {"tf": 2.6457513110645907}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 3}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 2.449489742783178}, "howard.functions.from_extann.get_longest_transcript": {"tf": 1}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1.4142135623730951}, "howard.functions.utils.get_vcf_allele": {"tf": 1.4142135623730951}, "howard.functions.utils.matches_ref_allele": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 2.8284271247461903}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1.7320508075688772}, "howard.functions.utils.format_hgvs_name": {"tf": 4.123105625617661}, "howard.functions.utils.create_refseq_table": {"tf": 1.4142135623730951}, "howard.functions.utils.get_refseq_table": {"tf": 2}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 2.6457513110645907}, "howard.objects.database.Database.set_database": {"tf": 2.6457513110645907}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.find_header_file": {"tf": 2}, "howard.objects.database.Database.get_header": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1.7320508075688772}, "howard.objects.database.Database.query": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_header": {"tf": 1.7320508075688772}, "howard.objects.database.Database.set_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 2.8284271247461903}, "howard.objects.database.Database.set_assembly": {"tf": 1}, "howard.objects.database.Database.get_assembly": {"tf": 1.4142135623730951}, "howard.objects.database.Database.find_database": {"tf": 2.6457513110645907}, "howard.objects.database.Database.get_database_basename": {"tf": 2}, "howard.objects.database.Database.get_database_dirname": {"tf": 2}, "howard.objects.database.Database.exists": {"tf": 2}, "howard.objects.database.Database.set_format": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_type": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_database_tables": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_table": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1.7320508075688772}, "howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.database.Database.get_view": {"tf": 1.7320508075688772}, "howard.objects.database.Database.is_compressed": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1.7320508075688772}, "howard.objects.database.Database.find_column": {"tf": 2.449489742783178}, "howard.objects.database.Database.map_columns": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 2.6457513110645907}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_annotations": {"tf": 2}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 2}, "howard.objects.database.Database.is_genotype_column": {"tf": 2.8284271247461903}, "howard.objects.database.Database.export": {"tf": 4.242640687119285}, "howard.objects.genome.MockGenome.__init__": {"tf": 1.4142135623730951}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.format": {"tf": 3.4641016151377544}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 3.3166247903554}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.__init__": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.full_name": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.is_coding": {"tf": 1}, "howard.objects.transcript.Transcript.strand": {"tf": 1.7320508075688772}, "howard.objects.transcript.BED6Interval.distance": {"tf": 2.449489742783178}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1.4142135623730951}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 2}, "howard.objects.variants.Variants.set_samples": {"tf": 1}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1}, "howard.objects.variants.Variants.get_indexing": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.set_output": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.print_stats": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1}, "howard.objects.variants.Variants.get_output_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_connexion_type": {"tf": 1}, "howard.objects.variants.Variants.get_header_length": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 2.8284271247461903}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.get_verbose": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.load_data": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 2}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.drop_column": {"tf": 2}, "howard.objects.variants.Variants.explode_infos": {"tf": 3.3166247903554}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 2.8284271247461903}, "howard.objects.variants.Variants.get_threads": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_memory": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.update_from_vcf": {"tf": 1}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 2}, "howard.objects.variants.Variants.get_config_default": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 2}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 2}}, "df": 176}, "t": {"docs": {"howard.functions.commons.remove_if_exists": {"tf": 1}, "howard.functions.commons.set_log_level": {"tf": 1}, "howard.functions.commons.split_interval": {"tf": 1}, "howard.functions.commons.merge_regions": {"tf": 1}, "howard.functions.commons.create_where_clause": {"tf": 1}, "howard.functions.commons.command": {"tf": 1.4142135623730951}, "howard.functions.commons.run_parallel_commands": {"tf": 1}, "howard.functions.commons.run_parallel_functions": {"tf": 1}, "howard.functions.commons.find": {"tf": 1.4142135623730951}, "howard.functions.commons.find_genome": {"tf": 1.7320508075688772}, "howard.functions.commons.find_file_prefix": {"tf": 1.7320508075688772}, "howard.functions.commons.explode_annotation_format": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1.4142135623730951}, "howard.functions.commons.get_index": {"tf": 1}, "howard.functions.commons.get_file_format": {"tf": 1}, "howard.functions.commons.genotype_compression": {"tf": 1}, "howard.functions.commons.genotype_barcode": {"tf": 1}, "howard.functions.commons.vaf_normalization": {"tf": 1.4142135623730951}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1.4142135623730951}, "howard.functions.commons.download_file": {"tf": 2.449489742783178}, "howard.functions.commons.get_bin": {"tf": 2.23606797749979}, "howard.functions.commons.get_bin_command": {"tf": 2.449489742783178}, "howard.functions.commons.get_tmp": {"tf": 2.449489742783178}, "howard.functions.commons.get_threads": {"tf": 1}, "howard.functions.commons.get_memory": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_float_from_str": {"tf": 1.7320508075688772}, "howard.functions.commons.extract_memory_in_go": {"tf": 1}, "howard.functions.commons.concat_file": {"tf": 1.4142135623730951}, "howard.functions.commons.get_file_compressed": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1.7320508075688772}, "howard.functions.commons.concat_and_compress_files": {"tf": 2.23606797749979}, "howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1}, "howard.functions.commons.duckdb_execute": {"tf": 2}, "howard.functions.commons.genome_build_switch": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1.7320508075688772}, "howard.functions.commons.help_generation_from_dict": {"tf": 2.449489742783178}, "howard.functions.commons.help_generation_from_json": {"tf": 2}, "howard.functions.commons.help_generation": {"tf": 1.7320508075688772}, "howard.functions.commons.format_arg_help": {"tf": 1.4142135623730951}, "howard.functions.commons.full_path": {"tf": 1}, "howard.functions.commons.get_default_argument": {"tf": 1.4142135623730951}, "howard.functions.commons.set_param": {"tf": 1.7320508075688772}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 2}, "howard.functions.commons.get_random": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1.4142135623730951}, "howard.functions.commons.identical": {"tf": 1.4142135623730951}, "howard.functions.commons.params_string_to_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.determine_value_type": {"tf": 1.4142135623730951}, "howard.functions.commons.determine_column_types": {"tf": 2.23606797749979}, "howard.functions.commons.clean_annotation_field": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_snpeff": {"tf": 2}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 2}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_exomiser": {"tf": 3.1622776601683795}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_hgmd": {"tf": 2}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1.4142135623730951}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1.4142135623730951}, "howard.functions.utils.make_transcript": {"tf": 1.4142135623730951}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 2}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1.7320508075688772}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1.7320508075688772}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 2}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 2.6457513110645907}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 2.449489742783178}, "howard.functions.utils.format_hgvs_name": {"tf": 3}, "howard.functions.utils.create_refseq_table": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1.4142135623730951}, "howard.main.main": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 2.449489742783178}, "howard.objects.database.Database.set_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_length": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1.4142135623730951}, "howard.objects.database.Database.find_header_file": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.query": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.get_assembly": {"tf": 2}, "howard.objects.database.Database.find_database": {"tf": 2}, "howard.objects.database.Database.get_database_basename": {"tf": 2}, "howard.objects.database.Database.get_database_dirname": {"tf": 1.7320508075688772}, "howard.objects.database.Database.exists": {"tf": 1.7320508075688772}, "howard.objects.database.Database.set_format": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_format": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.get_database_tables": {"tf": 1}, "howard.objects.database.Database.get_database_table": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1.7320508075688772}, "howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.database.Database.get_view": {"tf": 1.4142135623730951}, "howard.objects.database.Database.find_column": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_columns": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_annotations": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 2}, "howard.objects.database.Database.export": {"tf": 3}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 4.123105625617661}, "howard.objects.hgvs.HGVSName.parse": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 3}, "howard.objects.transcript.Transcript.full_name": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.strand": {"tf": 1}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 1}, "howard.objects.transcript.BED6Interval.distance": {"tf": 1}, "howard.objects.transcript.Exon.__init__": {"tf": 1.7320508075688772}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 2.449489742783178}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variants.Variants.set_samples": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1}, "howard.objects.variants.Variants.set_config": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_param": {"tf": 1}, "howard.objects.variants.Variants.get_indexing": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_output": {"tf": 1}, "howard.objects.variants.Variants.set_header": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1}, "howard.objects.variants.Variants.get_input": {"tf": 1}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_output": {"tf": 1}, "howard.objects.variants.Variants.get_output_format": {"tf": 1}, "howard.objects.variants.Variants.get_config": {"tf": 1}, "howard.objects.variants.Variants.get_param": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.get_prefix": {"tf": 1}, "howard.objects.variants.Variants.get_connexion": {"tf": 1}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_verbose": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_format": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.load_data": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.add_column": {"tf": 2}, "howard.objects.variants.Variants.drop_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.execute_query": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_output": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 2}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.run_commands": {"tf": 1}, "howard.objects.variants.Variants.get_memory": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation": {"tf": 1}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_parquet": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 2}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1.7320508075688772}, "howard.tools.annotation.annotation": {"tf": 1}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}, "howard.tools.gui.gui": {"tf": 1.4142135623730951}, "howard.tools.help.help": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}, "howard.tools.process.process": {"tf": 1}, "howard.tools.query.query": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}}, "df": 215, "s": {"docs": {"howard.functions.commons.find_all": {"tf": 1.4142135623730951}, "howard.functions.commons.find_genome": {"tf": 1}, "howard.functions.commons.get_compression_type": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.detect_column_type": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1}, "howard.objects.database.Database.find_header_file": {"tf": 1}, "howard.objects.database.Database.get_database_dirname": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1.4142135623730951}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.transcript.Transcript.full_name": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}}, "df": 16, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {"howard.objects.database.Database.find_header_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}}, "df": 2}}}}}, "n": {"docs": {"howard.functions.commons.create_where_clause": {"tf": 1}, "howard.functions.commons.command": {"tf": 1}, "howard.functions.commons.run_parallel_commands": {"tf": 1}, "howard.functions.commons.run_parallel_functions": {"tf": 1.4142135623730951}, "howard.functions.commons.example_function": {"tf": 1}, "howard.functions.commons.find_all": {"tf": 1.7320508075688772}, "howard.functions.commons.find_genome": {"tf": 1}, "howard.functions.commons.find_file_prefix": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_annotation_format": {"tf": 2.6457513110645907}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 2.8284271247461903}, "howard.functions.commons.get_index": {"tf": 2.449489742783178}, "howard.functions.commons.findbypipeline": {"tf": 2.449489742783178}, "howard.functions.commons.genotypeconcordance": {"tf": 1.7320508075688772}, "howard.functions.commons.trio": {"tf": 1.7320508075688772}, "howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.functions.commons.genotype_stats": {"tf": 2}, "howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 2}, "howard.functions.commons.get_bin": {"tf": 2.6457513110645907}, "howard.functions.commons.get_bin_command": {"tf": 2.8284271247461903}, "howard.functions.commons.get_tmp": {"tf": 2.23606797749979}, "howard.functions.commons.get_threads": {"tf": 1.7320508075688772}, "howard.functions.commons.get_memory": {"tf": 1.7320508075688772}, "howard.functions.commons.extract_float_from_str": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_memory_in_go": {"tf": 2.8284271247461903}, "howard.functions.commons.get_file_compressed": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1.4142135623730951}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1.7320508075688772}, "howard.functions.commons.get_argument_gooey": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 5.196152422706632}, "howard.functions.commons.help_generation_from_json": {"tf": 2.8284271247461903}, "howard.functions.commons.format_arg_help": {"tf": 1.7320508075688772}, "howard.functions.commons.bed_sort": {"tf": 1.4142135623730951}, "howard.functions.commons.full_path": {"tf": 1.4142135623730951}, "howard.functions.commons.get_default_argument": {"tf": 1.4142135623730951}, "howard.functions.commons.set_param": {"tf": 3.3166247903554}, "howard.functions.commons.add_value_into_dict": {"tf": 2.23606797749979}, "howard.functions.commons.load_config_args": {"tf": 1.7320508075688772}, "howard.functions.commons.load_args": {"tf": 3.3166247903554}, "howard.functions.commons.get_random": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1.4142135623730951}, "howard.functions.commons.identical": {"tf": 2.6457513110645907}, "howard.functions.commons.check_docker_image_exists": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 3.4641016151377544}, "howard.functions.commons.determine_value_type": {"tf": 2}, "howard.functions.commons.determine_column_types": {"tf": 1.4142135623730951}, "howard.functions.commons.detect_column_type": {"tf": 1.7320508075688772}, "howard.functions.commons.clean_annotation_field": {"tf": 2}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_param": {"tf": 2}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 2.8284271247461903}, "howard.functions.databases.databases_format_refseq": {"tf": 3.1622776601683795}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 4.123105625617661}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_hgmd": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 2.449489742783178}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 2.6457513110645907}, "howard.functions.from_extann.create_metaheader": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.functions.plugins.plugins_infos": {"tf": 2}, "howard.functions.plugins.plugins_list": {"tf": 2.23606797749979}, "howard.functions.plugins.plugins_to_load": {"tf": 1.4142135623730951}, "howard.functions.utils.read_genepred": {"tf": 1.7320508075688772}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1.4142135623730951}, "howard.functions.utils.read_transcripts": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 2.23606797749979}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.cdna_to_protein": {"tf": 2.449489742783178}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 2.8284271247461903}, "howard.functions.utils.format_hgvs_name": {"tf": 3.605551275463989}, "howard.functions.utils.create_refseq_table": {"tf": 1.7320508075688772}, "howard.functions.utils.get_refseq_table": {"tf": 2}, "howard.functions.utils.get_transcript": {"tf": 1}, "howard.main.main": {"tf": 1}, "howard.objects.cdna.CDNACoord": {"tf": 3.3166247903554}, "howard.objects.database.Database.__init__": {"tf": 3.3166247903554}, "howard.objects.database.Database.set_database": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_database_folders": {"tf": 1}, "howard.objects.database.Database.find_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header": {"tf": 2.8284271247461903}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.query": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 2.23606797749979}, "howard.objects.database.Database.set_assembly": {"tf": 1.4142135623730951}, "howard.objects.database.Database.find_database": {"tf": 1.7320508075688772}, "howard.objects.database.Database.exists": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_format": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_tables": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_table": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_needed_columns": {"tf": 2}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.create_view": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_view": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 3}, "howard.objects.database.Database.map_columns": {"tf": 2.8284271247461903}, "howard.objects.database.Database.get_columns": {"tf": 2.8284271247461903}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 2.23606797749979}, "howard.objects.database.Database.is_vcf": {"tf": 1.4142135623730951}, "howard.objects.database.Database.is_genotype_column": {"tf": 3.1622776601683795}, "howard.objects.database.Database.export": {"tf": 4.898979485566356}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 3.605551275463989}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 3.3166247903554}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 2.8284271247461903}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.transcript.Transcript.full_name": {"tf": 1}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 1}, "howard.objects.transcript.BED6Interval.distance": {"tf": 1}, "howard.objects.transcript.Exon.__init__": {"tf": 2}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 2}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1.7320508075688772}, "howard.objects.variant.Position": {"tf": 1}, "howard.objects.variant.normalize_variant": {"tf": 1}, "howard.objects.variants.Variants.set_input": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.set_config": {"tf": 1}, "howard.objects.variants.Variants.init_variables": {"tf": 1}, "howard.objects.variants.Variants.get_indexing": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_output": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.print_stats": {"tf": 2}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1}, "howard.objects.variants.Variants.get_output_format": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_type": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 2.8284271247461903}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 2}, "howard.objects.variants.Variants.get_verbose": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 2}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.drop_column": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.explode_infos": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.export_output": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.export_header": {"tf": 2}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.run_commands": {"tf": 1}, "howard.objects.variants.Variants.get_threads": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_memory": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1}, "howard.objects.variants.Variants.scan_databases": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.get_config_default": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 2}, "howard.objects.variants.Variants.prioritization": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 3}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 2}, "howard.objects.variants.Variants.calculation_genotype_concordance": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 2}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 2}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 3.1622776601683795}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 3}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 3.872983346207417}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 3.4641016151377544}, "howard.tools.gui.gui": {"tf": 1.4142135623730951}, "howard.tools.help.help": {"tf": 1}, "howard.tools.process.process": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1.4142135623730951}, "howard.tools.tools.PathType.__init__": {"tf": 1}}, "df": 194, "t": {"docs": {"howard.functions.commons.add_value_into_dict": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.split_interval": {"tf": 1.7320508075688772}, "howard.objects.transcript.BED6Interval.distance": {"tf": 2.23606797749979}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1.4142135623730951}}, "df": 3}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.help_generation": {"tf": 1}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.tools.gui.gui": {"tf": 1}}, "df": 4}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.cdna.CDNACoord.__init__": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.utils.create_refseq_table": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.transcript.Transcript.find_exon_number": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}}, "df": 1}}}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.extract_memory_in_go": {"tf": 1.7320508075688772}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.objects.database.Database.get_header_length": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.__init__": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.stop_codon": {"tf": 1}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 1.4142135623730951}, "howard.objects.transcript.BED6Interval.distance": {"tf": 1.4142135623730951}, "howard.objects.transcript.Exon.__init__": {"tf": 1.4142135623730951}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1.7320508075688772}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}}, "df": 22, "s": {"docs": {"howard.functions.commons.determine_value_type": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.load_param": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {"howard.functions.commons.split_interval": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1.7320508075688772}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.load_duckdb_extension": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.add_value_into_dict": {"tf": 2.449489742783178}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1.4142135623730951}, "howard.functions.commons.params_string_to_dict": {"tf": 1.7320508075688772}, "howard.functions.commons.determine_value_type": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.from_extann.write_extann": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.transcript.Transcript.get_cds_start_stop": {"tf": 1}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.load_data": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.explode_infos": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 29}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.objects.cdna.CDNACoord": {"tf": 2}}, "df": 2, "s": {"docs": {"howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1.4142135623730951}}, "df": 1}, "i": {"docs": {}, "df": 0, "c": {"docs": {"howard.objects.cdna.CDNACoord.__init__": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.find_file_prefix": {"tf": 2}, "howard.functions.commons.explode_annotation_format": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1.7320508075688772}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.findbypipeline": {"tf": 2.449489742783178}, "howard.functions.commons.genotypeconcordance": {"tf": 1.7320508075688772}, "howard.functions.commons.genotype_compression": {"tf": 1.4142135623730951}, "howard.functions.commons.trio": {"tf": 1}, "howard.functions.commons.vaf_normalization": {"tf": 1.4142135623730951}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.commons.get_threads": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_float_from_str": {"tf": 2}, "howard.functions.commons.extract_memory_in_go": {"tf": 1.7320508075688772}, "howard.functions.commons.concat_file": {"tf": 2}, "howard.functions.commons.compress_file": {"tf": 1.4142135623730951}, "howard.functions.commons.get_file_compressed": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 2.449489742783178}, "howard.functions.commons.concat_and_compress_files": {"tf": 2.23606797749979}, "howard.functions.commons.genome_build_switch": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.bed_sort": {"tf": 2}, "howard.functions.commons.full_path": {"tf": 1.7320508075688772}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_config_args": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1.7320508075688772}, "howard.functions.commons.params_string_to_dict": {"tf": 2.23606797749979}, "howard.functions.commons.determine_value_type": {"tf": 1.4142135623730951}, "howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.commons.detect_column_type": {"tf": 1.4142135623730951}, "howard.functions.commons.clean_annotation_field": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.from_annovar.from_annovar": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.7320508075688772}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1.7320508075688772}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1.4142135623730951}, "howard.functions.from_extann.create_metaheader": {"tf": 1.4142135623730951}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.functions.plugins.plugins_to_load": {"tf": 1.4142135623730951}, "howard.functions.utils.read_refgene": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1.4142135623730951}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.get_transcript": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.is_compressed": {"tf": 1.4142135623730951}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.database.Database.map_columns": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.variants.Variants.__init__": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.set_samples": {"tf": 1}, "howard.objects.variants.Variants.set_input": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.set_param": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.set_output": {"tf": 1}, "howard.objects.variants.Variants.get_overview": {"tf": 1}, "howard.objects.variants.Variants.get_stats": {"tf": 1}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1}, "howard.objects.variants.Variants.get_input": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_input_format": {"tf": 3}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 3.1622776601683795}, "howard.objects.variants.Variants.get_output_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.load_data": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.get_threads": {"tf": 1}, "howard.objects.variants.Variants.get_memory": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}, "howard.tools.process.process": {"tf": 1.4142135623730951}, "howard.tools.query.query": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1.4142135623730951}}, "df": 81, "s": {"docs": {"howard.functions.databases.generate_databases_param": {"tf": 1}}, "df": 1}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {"howard.functions.commons.genotype_stats": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 3}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.from_extann.metaheader_rows": {"tf": 1.4142135623730951}, "howard.functions.from_extann.extann_to_info": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 2}, "howard.objects.database.Database.map_columns": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 3.1622776601683795}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.prioritization": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_variant_id": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1}, "howard.objects.variants.Variants.calculation_trio": {"tf": 1}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 2}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 3.1622776601683795}}, "df": 23, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.findbypipeline": {"tf": 1}, "howard.functions.commons.genotypeconcordance": {"tf": 1.7320508075688772}, "howard.functions.commons.genotype_compression": {"tf": 1}, "howard.functions.commons.trio": {"tf": 1}, "howard.functions.commons.vaf_normalization": {"tf": 2.449489742783178}, "howard.functions.commons.genotype_stats": {"tf": 2}, "howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.commons.get_memory": {"tf": 1}, "howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1.4142135623730951}, "howard.functions.commons.get_argument": {"tf": 2.8284271247461903}, "howard.functions.commons.get_argument_gooey": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1.7320508075688772}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation_from_json": {"tf": 2}, "howard.functions.commons.format_arg_help": {"tf": 1}, "howard.functions.commons.get_default_argument": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1.4142135623730951}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1.4142135623730951}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_param": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.functions.plugins.plugins_infos": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 2.23606797749979}, "howard.functions.plugins.plugins_to_load": {"tf": 1.7320508075688772}, "howard.functions.utils.read_genepred": {"tf": 1.4142135623730951}, "howard.functions.utils.make_transcript": {"tf": 1}, "howard.functions.utils.read_transcripts": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1.4142135623730951}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.7320508075688772}, "howard.functions.utils.cdna_to_protein": {"tf": 1.4142135623730951}, "howard.functions.utils.format_hgvs_name": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 2}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1}, "howard.objects.transcript.Exon.__init__": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.variants.Variants.get_stats": {"tf": 1}, "howard.objects.variants.Variants.get_header_infos_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 2}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1}, "howard.objects.variants.Variants.drop_column": {"tf": 1}, "howard.objects.variants.Variants.scan_databases": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_genotype_concordance": {"tf": 1}, "howard.objects.variants.Variants.calculation_trio": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 2}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 2}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 2.6457513110645907}, "howard.tools.gui.gui": {"tf": 1}}, "df": 81}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.help_generation_from_json": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {"howard.functions.commons.get_argument": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_infos": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_param": {"tf": 1}, "howard.functions.plugins.plugins_infos": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_annotations": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.explode_infos": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1.7320508075688772}}, "df": 13}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.utils.read_refgene": {"tf": 1.4142135623730951}, "howard.functions.utils.read_genepred": {"tf": 1.4142135623730951}}, "df": 3}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {"howard.objects.cdna.CDNACoord": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1.4142135623730951}, "howard.functions.commons.get_tmp": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation_from_json": {"tf": 1.7320508075688772}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 4}, "howard.functions.databases.databases_format_refseq": {"tf": 4.242640687119285}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.from_annovar": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 2.23606797749979}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 2.23606797749979}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}}, "df": 31, "s": {"docs": {"howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}}, "df": 9}, "d": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.help_generation_from_json": {"tf": 1.4142135623730951}, "howard.functions.commons.format_arg_help": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_refseq": {"tf": 2.6457513110645907}, "howard.functions.databases.databases_format_refseq": {"tf": 3.3166247903554}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 2.23606797749979}, "howard.objects.database.Database.export": {"tf": 2.8284271247461903}, "howard.objects.hgvs.HGVSName.format": {"tf": 3.1622776601683795}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1.7320508075688772}, "howard.tools.stats.stats": {"tf": 1}}, "df": 21}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.genotypeconcordance": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1.4142135623730951}, "howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.commons.format_arg_help": {"tf": 1}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.objects.cdna.CDNACoord": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.transcript.Transcript.full_name": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_config": {"tf": 1}, "howard.objects.variants.Variants.get_stats": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.tools.process.process": {"tf": 1}}, "df": 16}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.utils.get_genomic_sequence": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.download_file": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}}, "df": 3}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.utils.parse_hgvs_name": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"howard.functions.commons.get_index": {"tf": 2}, "howard.functions.commons.concat_and_compress_files": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 2.23606797749979}, "howard.objects.transcript.Exon.__init__": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_output": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 2.449489742783178}}, "df": 10, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.objects.variants.Variants.get_indexing": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}}, "df": 3}, "s": {"docs": {"howard.objects.variants.Variants.explode_infos": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.create_indexes": {"tf": 1}, "howard.objects.variants.Variants.drop_indexes": {"tf": 1}}, "df": 3}}}, "l": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1.7320508075688772}, "howard.functions.utils.hgvs_justify_indel": {"tf": 2.6457513110645907}, "howard.objects.hgvs": {"tf": 2.8284271247461903}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 2.449489742783178}, "howard.objects.variant.justify_genomic_indel": {"tf": 1}}, "df": 11, "s": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.7320508075688772}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}}, "df": 7}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.format_arg_help": {"tf": 1}, "howard.functions.plugins.plugins_to_load": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 1}}, "df": 5, "s": {"docs": {"howard.functions.commons.genotypeconcordance": {"tf": 1}, "howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1.4142135623730951}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 2}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 1}, "howard.objects.transcript.BED6Interval.distance": {"tf": 1}, "howard.objects.transcript.Exon.__init__": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}}, "df": 13}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.get_compression_type": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.load_duckdb_extension": {"tf": 1.4142135623730951}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.commons.detect_column_type": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.database.Database.exists": {"tf": 1}, "howard.objects.database.Database.set_format": {"tf": 1}, "howard.objects.database.Database.is_compressed": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format": {"tf": 2}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}, "howard.objects.transcript.Transcript.is_coding": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}}, "df": 24}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.determine_value_type": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1.7320508075688772}}, "df": 2, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.objects.variants.Variants.explode_infos": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}, "s": {"docs": {"howard.objects.hgvs": {"tf": 2.23606797749979}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}}, "df": 2, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1.4142135623730951}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.objects.database.Database.get_database_folders": {"tf": 1}, "howard.objects.database.Database.get_conn": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1.4142135623730951}, "howard.objects.transcript.BED6Interval_base.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval.__init__": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_param": {"tf": 1}, "howard.objects.variants.Variants.get_output_format": {"tf": 1}}, "df": 15}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.databases.databases_download_refseq": {"tf": 1.7320508075688772}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.get_default_argument": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}}, "df": 7}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.objects.database.Database.query": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1.7320508075688772}}, "df": 4, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1.4142135623730951}, "howard.objects.hgvs": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.7320508075688772}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_indexes": {"tf": 1}, "howard.objects.variants.Variants.drop_indexes": {"tf": 1}}, "df": 8, "s": {"docs": {"howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {"howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.load_data": {"tf": 1}}, "df": 4}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.transcript.BED6Interval.distance": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1.4142135623730951}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.variants.Variants.__init__": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.database.Database.__init__": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.transcript.Exon.__init__": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}, "howard.objects.variants.Variants.__init__": {"tf": 1}, "howard.objects.variants.Variants.init_variables": {"tf": 1}}, "df": 7}, "d": {"docs": {"howard.objects.hgvs.HGVSName.__init__": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.cdna.CDNACoord": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1.4142135623730951}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.InvalidHGVSName": {"tf": 1}}, "df": 1}}}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 2}}, "df": 1, "h": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 1, "d": {"docs": {"howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {"howard.functions.commons.command": {"tf": 1}, "howard.functions.commons.find_all": {"tf": 1.4142135623730951}, "howard.functions.commons.find_genome": {"tf": 2.23606797749979}, "howard.functions.commons.find_file_prefix": {"tf": 2.6457513110645907}, "howard.functions.commons.find_nomen": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_annotation_format": {"tf": 2.449489742783178}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 2}, "howard.functions.commons.explode_snpeff_ann": {"tf": 2.6457513110645907}, "howard.functions.commons.get_index": {"tf": 2}, "howard.functions.commons.findbypipeline": {"tf": 2}, "howard.functions.commons.genotypeconcordance": {"tf": 1.4142135623730951}, "howard.functions.commons.genotype_compression": {"tf": 1.4142135623730951}, "howard.functions.commons.genotype_barcode": {"tf": 1}, "howard.functions.commons.vaf_normalization": {"tf": 1.4142135623730951}, "howard.functions.commons.genotype_stats": {"tf": 2}, "howard.functions.commons.extract_file": {"tf": 2.23606797749979}, "howard.functions.commons.download_file": {"tf": 3.1622776601683795}, "howard.functions.commons.get_bin": {"tf": 3.4641016151377544}, "howard.functions.commons.get_bin_command": {"tf": 3}, "howard.functions.commons.get_tmp": {"tf": 2.8284271247461903}, "howard.functions.commons.get_threads": {"tf": 1.7320508075688772}, "howard.functions.commons.get_memory": {"tf": 2.449489742783178}, "howard.functions.commons.extract_float_from_str": {"tf": 2}, "howard.functions.commons.extract_memory_in_go": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.compress_file": {"tf": 1}, "howard.functions.commons.get_compression_type": {"tf": 2.23606797749979}, "howard.functions.commons.get_file_compressed": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_into_infile": {"tf": 2.449489742783178}, "howard.functions.commons.concat_and_compress_files": {"tf": 3}, "howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1.4142135623730951}, "howard.functions.commons.duckdb_execute": {"tf": 2}, "howard.functions.commons.genome_build_switch": {"tf": 1.4142135623730951}, "howard.functions.commons.get_argument": {"tf": 3.4641016151377544}, "howard.functions.commons.get_argument_gooey": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 3}, "howard.functions.commons.help_generation_from_dict": {"tf": 3.7416573867739413}, "howard.functions.commons.help_generation_from_json": {"tf": 2.8284271247461903}, "howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 2}, "howard.functions.commons.format_arg_help": {"tf": 1.7320508075688772}, "howard.functions.commons.bed_sort": {"tf": 1.4142135623730951}, "howard.functions.commons.full_path": {"tf": 1.4142135623730951}, "howard.functions.commons.get_default_argument": {"tf": 1.7320508075688772}, "howard.functions.commons.set_param": {"tf": 2.8284271247461903}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.load_param": {"tf": 1.7320508075688772}, "howard.functions.commons.load_args": {"tf": 3.872983346207417}, "howard.functions.commons.get_random": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 2.449489742783178}, "howard.functions.commons.identical": {"tf": 2.23606797749979}, "howard.functions.commons.params_string_to_dict": {"tf": 2.8284271247461903}, "howard.functions.commons.determine_value_type": {"tf": 2.6457513110645907}, "howard.functions.commons.clean_annotation_field": {"tf": 1.7320508075688772}, "howard.functions.databases.generate_databases_param": {"tf": 2.23606797749979}, "howard.functions.databases.databases_infos": {"tf": 2.6457513110645907}, "howard.functions.databases.databases_param": {"tf": 3}, "howard.functions.databases.databases_download_annovar": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_snpeff": {"tf": 2}, "howard.functions.databases.databases_download_genomes": {"tf": 2.449489742783178}, "howard.functions.databases.databases_download_refseq": {"tf": 4.47213595499958}, "howard.functions.databases.databases_format_refseq": {"tf": 3}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 4}, "howard.functions.databases.databases_download_alphamissense": {"tf": 2.6457513110645907}, "howard.functions.databases.databases_download_exomiser": {"tf": 4.47213595499958}, "howard.functions.databases.databases_download_dbsnp": {"tf": 3.3166247903554}, "howard.functions.databases.databases_download_hgmd": {"tf": 2.8284271247461903}, "howard.functions.from_annovar.from_annovar": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 2.23606797749979}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 3.1622776601683795}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.functions.plugins.plugins_infos": {"tf": 2.449489742783178}, "howard.functions.plugins.plugins_list": {"tf": 3}, "howard.functions.plugins.plugins_to_load": {"tf": 1.4142135623730951}, "howard.functions.utils.read_genepred": {"tf": 2}, "howard.functions.utils.make_transcript": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 2}, "howard.functions.utils.read_transcripts": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 2}, "howard.functions.utils.get_vcf_allele": {"tf": 2.449489742783178}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1.4142135623730951}, "howard.functions.utils.matches_ref_allele": {"tf": 2.23606797749979}, "howard.functions.utils.hgvs_justify_dup": {"tf": 2.8284271247461903}, "howard.functions.utils.hgvs_justify_indel": {"tf": 2.23606797749979}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 3}, "howard.functions.utils.parse_hgvs_name": {"tf": 3.3166247903554}, "howard.functions.utils.cdna_to_protein": {"tf": 3.3166247903554}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 3.872983346207417}, "howard.functions.utils.format_hgvs_name": {"tf": 4}, "howard.functions.utils.create_refseq_table": {"tf": 2.449489742783178}, "howard.functions.utils.get_refseq_table": {"tf": 2}, "howard.functions.utils.get_transcript": {"tf": 1}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1.4142135623730951}, "howard.objects.database.Database.__init__": {"tf": 4}, "howard.objects.database.Database.set_database": {"tf": 2.23606797749979}, "howard.objects.database.Database.set_databases_folders": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_database_folders": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_length": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header_from_list": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header_from_file": {"tf": 2}, "howard.objects.database.Database.find_header_file": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_header": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_header_from_columns": {"tf": 2.449489742783178}, "howard.objects.database.Database.query": {"tf": 2}, "howard.objects.database.Database.set_header": {"tf": 1.7320508075688772}, "howard.objects.database.Database.set_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_file": {"tf": 2.8284271247461903}, "howard.objects.database.Database.set_assembly": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_assembly": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_basename": {"tf": 2}, "howard.objects.database.Database.get_database_dirname": {"tf": 2.23606797749979}, "howard.objects.database.Database.exists": {"tf": 1.7320508075688772}, "howard.objects.database.Database.set_format": {"tf": 2}, "howard.objects.database.Database.get_format": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_type": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_database_tables": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_table": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_needed_columns": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_database_link": {"tf": 2.23606797749979}, "howard.objects.database.Database.create_view": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_view": {"tf": 2.23606797749979}, "howard.objects.database.Database.is_compressed": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_header_infos_list": {"tf": 2.23606797749979}, "howard.objects.database.Database.find_column": {"tf": 3.3166247903554}, "howard.objects.database.Database.map_columns": {"tf": 2}, "howard.objects.database.Database.get_columns": {"tf": 3.4641016151377544}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 2}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 2}, "howard.objects.database.Database.get_annotations": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_extra_columns": {"tf": 1.7320508075688772}, "howard.objects.database.Database.is_vcf": {"tf": 3.3166247903554}, "howard.objects.database.Database.get_conn": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 3.7416573867739413}, "howard.objects.database.Database.export": {"tf": 5.196152422706632}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.hgvs.get_refseq_type": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 2.6457513110645907}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 5.0990195135927845}, "howard.objects.hgvs.HGVSName.parse": {"tf": 2}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 3.3166247903554}, "howard.objects.transcript.Transcript.__init__": {"tf": 4.123105625617661}, "howard.objects.transcript.Transcript.full_name": {"tf": 1}, "howard.objects.transcript.Transcript.strand": {"tf": 2.449489742783178}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 1}, "howard.objects.transcript.BED6Interval.distance": {"tf": 2.6457513110645907}, "howard.objects.transcript.Exon.__init__": {"tf": 2}, "howard.objects.transcript.Exon.name": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1.7320508075688772}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 2.23606797749979}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 2.449489742783178}, "howard.objects.variant.get_sequence_from_position": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_samples": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_samples": {"tf": 1}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.set_input": {"tf": 1}, "howard.objects.variants.Variants.set_config": {"tf": 1}, "howard.objects.variants.Variants.get_indexing": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.set_output": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 2}, "howard.objects.variants.Variants.get_input": {"tf": 1}, "howard.objects.variants.Variants.get_input_format": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_output_format": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_config": {"tf": 1}, "howard.objects.variants.Variants.get_param": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.get_prefix": {"tf": 1}, "howard.objects.variants.Variants.get_tmp_dir": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_type": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.close_connexion": {"tf": 1}, "howard.objects.variants.Variants.get_header_length": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 2.8284271247461903}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 3.3166247903554}, "howard.objects.variants.Variants.get_connexion_format": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.load_data": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 2}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 3}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.add_column": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.drop_column": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.explode_infos": {"tf": 3.872983346207417}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.execute_query": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 4.69041575982343}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_header": {"tf": 3.1622776601683795}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 3}, "howard.objects.variants.Variants.get_threads": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_memory": {"tf": 2}, "howard.objects.variants.Variants.update_from_vcf": {"tf": 1}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.scan_databases": {"tf": 2}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_config_json": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.prioritization": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 2.8284271247461903}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 3.1622776601683795}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 2.8284271247461903}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 3.3166247903554}, "howard.tools.annotation.annotation": {"tf": 1.4142135623730951}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}, "howard.tools.gui.gui": {"tf": 2}, "howard.tools.help.help": {"tf": 1.4142135623730951}, "howard.tools.hgvs.hgvs": {"tf": 1.4142135623730951}, "howard.tools.prioritization.prioritization": {"tf": 1.4142135623730951}, "howard.tools.process.process": {"tf": 1.4142135623730951}, "howard.tools.query.query": {"tf": 1.4142135623730951}, "howard.tools.stats.stats": {"tf": 1.7320508075688772}}, "df": 249, "o": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"howard.objects.hgvs.HGVSName.__init__": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "m": {"3": {"2": {"2": {"0": {"1": {"7": {"docs": {"howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {"howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 2}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.set_variant_id": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 2.8284271247461903}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 2}, "howard.objects.variants.Variants.calculation_variant_id": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1.4142135623730951}}, "df": 14, "s": {"docs": {"howard.functions.commons.trio": {"tf": 1}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}}, "df": 4}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}}, "df": 7, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.genome_build_switch": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1.4142135623730951}}, "df": 7}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.identical": {"tf": 2.6457513110645907}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.identical": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {"howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1.4142135623730951}}, "df": 4}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.hgvs": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.check_docker_image_exists": {"tf": 2.23606797749979}}, "df": 1, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.from_extann.metaheader_rows": {"tf": 1}}, "df": 1}}}}}, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.utils.read_refgene": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1}}, "df": 2}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.get_bin": {"tf": 1.4142135623730951}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.check_docker_image_exists": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.objects.cdna.CDNACoord": {"tf": 2.6457513110645907}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 14, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.remove_if_exists": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.objects.database.Database.get_database_basename": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.get_database_tables": {"tf": 1}, "howard.objects.variants.Variants.get_verbose": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.drop_column": {"tf": 1.4142135623730951}, "howard.tools.tools.PathType.__init__": {"tf": 1.4142135623730951}}, "df": 11, "s": {"docs": {"howard.functions.commons.remove_if_exists": {"tf": 1}, "howard.functions.commons.find_genome": {"tf": 1}, "howard.functions.commons.get_tmp": {"tf": 1}, "howard.functions.commons.concat_file": {"tf": 1.7320508075688772}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.get_default_argument": {"tf": 1}, "howard.functions.commons.check_docker_image_exists": {"tf": 1.4142135623730951}, "howard.functions.utils.format_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.get_refseq_table": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_database": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.get_assembly": {"tf": 1}, "howard.objects.database.Database.get_database_basename": {"tf": 1}, "howard.objects.database.Database.exists": {"tf": 2}, "howard.objects.database.Database.get_database_table": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.transcript.Transcript.full_name": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.tools.tools.PathType.__init__": {"tf": 1}}, "df": 25}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.remove_if_exists": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1.7320508075688772}, "howard.objects.database.Database.export": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.add_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1.4142135623730951}}, "df": 9}}}}}, "t": {"docs": {"howard.functions.commons.command": {"tf": 1}, "howard.functions.commons.TimeoutException": {"tf": 1}, "howard.objects.genome.MockGenomeError": {"tf": 1}}, "df": 3}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.example_function": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1.4142135623730951}, "howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.extract_memory_in_go": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation": {"tf": 1}}, "df": 15, "s": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 2.6457513110645907}, "howard.functions.commons.help_generation_from_json": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1}}, "df": 9}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.database.Database.is_vcf": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.tools.databases.databases": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 2.23606797749979}, "howard.functions.commons.explode_snpeff_ann": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 2.8284271247461903}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.explode_infos": {"tf": 2.8284271247461903}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 2.449489742783178}}, "df": 7, "d": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.explode_infos": {"tf": 2}}, "df": 5}, "s": {"docs": {"howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}}, "df": 4}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.extract_float_from_str": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex": {"tf": 1}}, "df": 4}}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1.4142135623730951}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1.4142135623730951}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.tools.annotation.annotation": {"tf": 1}}, "df": 6}}, "s": {"docs": {"howard.functions.commons.params_string_to_dict": {"tf": 1.4142135623730951}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.full_path": {"tf": 1.4142135623730951}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.full_path": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.full_path": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {"howard.functions.commons.full_path": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"howard.main.main": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 5}, "howard.objects.variants.Variants.export_output": {"tf": 2.8284271247461903}, "howard.objects.variants.Variants.export_header": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 3.1622776601683795}}, "df": 5, "s": {"docs": {"howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.tools.annotation.annotation": {"tf": 1}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}, "howard.tools.process.process": {"tf": 1}, "howard.tools.query.query": {"tf": 1}}, "df": 9}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.database.Database.export": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.export_output": {"tf": 2.449489742783178}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}, "t": {"docs": {"howard.objects.variants.Variants.export_header": {"tf": 1.4142135623730951}}, "df": 1, "r": {"docs": {}, "df": 0, "a": {"docs": {"howard.functions.from_extann.create_metaheader": {"tf": 1}, "howard.functions.utils.read_refgene": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_extra_columns": {"tf": 2.449489742783178}, "howard.objects.hgvs": {"tf": 2.449489742783178}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 2}}, "df": 7, "c": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.extract_snpeff_hgvs": {"tf": 1.4142135623730951}, "howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.functions.commons.extract_float_from_str": {"tf": 2}, "howard.functions.commons.extract_memory_in_go": {"tf": 1.7320508075688772}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 2}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 12, "s": {"docs": {"howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_float_from_str": {"tf": 1}, "howard.functions.commons.load_config_args": {"tf": 1}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.objects.variants.Variants.set_input": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_nomen": {"tf": 1}}, "df": 11}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_float_from_str": {"tf": 1}, "howard.functions.commons.extract_memory_in_go": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation_from_json": {"tf": 1.4142135623730951}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.4142135623730951}}, "df": 13}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.extract_file": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_refseq": {"tf": 1.4142135623730951}}, "df": 2}}, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.objects.variants.Variants.set_output": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}}, "df": 3}}}, "/": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.databases.databases_download_annovar": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 2.6457513110645907}, "howard.functions.utils.read_genepred": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_input": {"tf": 1}, "howard.objects.variants.Variants.set_output": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1.4142135623730951}}, "df": 8, "s": {"docs": {"howard.functions.commons.load_duckdb_extension": {"tf": 2.23606797749979}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.from_extann.create_metaheader": {"tf": 1.4142135623730951}, "howard.functions.from_extann.write_extann": {"tf": 1}, "howard.functions.from_extann.extann_to_info": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1.4142135623730951}}, "df": 4}}}}, "o": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 1, "r": {"docs": {"howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 5.744562646538029}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 3.3166247903554}}, "df": 3}}}}, "e": {"docs": {"howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 1}}, "n": {"docs": {"howard.functions.utils.read_genepred": {"tf": 1.4142135623730951}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1.4142135623730951}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 2}, "howard.functions.utils.format_hgvs_name": {"tf": 2}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.format": {"tf": 2}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 2}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 1.7320508075688772}, "howard.objects.transcript.BED6Interval.distance": {"tf": 1.7320508075688772}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1.7320508075688772}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}}, "df": 11, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.utils.read_genepred": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {"howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 2.6457513110645907}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}}, "df": 4, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.utils.read_genepred": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.utils.read_genepred": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.duckdb_execute": {"tf": 1.7320508075688772}, "howard.functions.utils.create_refseq_table": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}}, "df": 5, "d": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.query": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.execute_query": {"tf": 1}, "howard.tools.calculation.calculation": {"tf": 1}}, "df": 10}, "s": {"docs": {"howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.variants.Variants.execute_query": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}}, "df": 8}}, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.duckdb_execute": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.TimeoutException": {"tf": 1}, "howard.objects.genome.MockGenomeError": {"tf": 1}}, "df": 2}}}}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.get_header_length": {"tf": 1}}, "df": 1, "d": {"docs": {"howard.functions.databases.databases_download_refseq": {"tf": 2.23606797749979}, "howard.functions.databases.databases_format_refseq": {"tf": 2}, "howard.functions.utils.format_hgvs_name": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.format": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}}, "df": 5}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.database.Database.get_header_length": {"tf": 1}, "howard.objects.variants.Variants.get_header_length": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}}, "df": 3}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.genome.MockGenome.get_seq": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.get_seq": {"tf": 1}, "howard.objects.variant.get_sequence": {"tf": 1}, "howard.objects.variant.get_sequence_from_position": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 1}, "howard.objects.variant.justify_genomic_indel": {"tf": 1}}, "df": 6}}}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.split_interval": {"tf": 1.7320508075688772}, "howard.functions.commons.merge_regions": {"tf": 1.4142135623730951}, "howard.functions.commons.create_where_clause": {"tf": 1}, "howard.functions.commons.format_arg_help": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1.7320508075688772}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 2.23606797749979}, "howard.functions.utils.get_genomic_sequence": {"tf": 2.23606797749979}, "howard.functions.utils.get_vcf_allele": {"tf": 1.4142135623730951}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenome.get_seq": {"tf": 1.4142135623730951}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.get_seq": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 2.6457513110645907}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 2}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.transcript.BED6Interval_base": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval": {"tf": 1}, "howard.objects.transcript.BED6Interval.__init__": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1.7320508075688772}, "howard.objects.transcript.CDNA_Match.length": {"tf": 1.4142135623730951}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variant.get_sequence": {"tf": 1}, "howard.objects.variant.get_sequence_from_position": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 2}, "howard.objects.variant.justify_genomic_indel": {"tf": 1.4142135623730951}, "howard.tools.databases.databases": {"tf": 1}}, "df": 34}, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.find_nomen": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 1}}, "df": 1}}}}}}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}}, "df": 3}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 2, "s": {"docs": {"howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 1.4142135623730951}, "howard.functions.utils.get_vcf_allele": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}}, "df": 1}}}, "y": {"docs": {"howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 3}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.plugins.plugins_list": {"tf": 1.7320508075688772}, "howard.functions.plugins.plugins_to_load": {"tf": 2.6457513110645907}}, "df": 2}, "s": {"docs": {"howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.split_interval": {"tf": 1}, "howard.functions.commons.genotypeconcordance": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.get_tmp": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.detect_column_type": {"tf": 1}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.create_refseq_table": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_format": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 1}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_table_variants": {"tf": 1}, "howard.objects.variants.Variants.get_memory": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 21}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.split_interval": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"howard.functions.commons.split_interval": {"tf": 1}, "howard.functions.commons.find_all": {"tf": 1}, "howard.functions.commons.find_nomen": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 2.23606797749979}, "howard.functions.commons.explode_snpeff_ann": {"tf": 2}, "howard.functions.commons.genotypeconcordance": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1.4142135623730951}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 2.449489742783178}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1.4142135623730951}, "howard.functions.plugins.plugins_infos": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1.7320508075688772}, "howard.functions.plugins.plugins_to_load": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1.7320508075688772}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 2}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation": {"tf": 1}, "howard.objects.variants.Variants.calculation_trio": {"tf": 1}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 39}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 2.6457513110645907}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.objects.database.Database.set_databases_folders": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}}, "df": 5, "s": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 2.6457513110645907}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.transcript": {"tf": 1}}, "df": 5}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.get_index": {"tf": 1}, "howard.functions.commons.findbypipeline": {"tf": 1}, "howard.functions.commons.genotype_stats": {"tf": 1.7320508075688772}, "howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.commons.get_tmp": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1.7320508075688772}, "howard.functions.commons.determine_value_type": {"tf": 1.4142135623730951}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_config_default": {"tf": 1}}, "df": 14}}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.objects.database.Database.query": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}}, "df": 11}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.load_args": {"tf": 1.7320508075688772}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}}, "df": 4}}}}, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 3}}}}}}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.4142135623730951}}, "df": 1, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 1}}, "df": 1}}}}}}}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.utils.read_genepred": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.transcript.BED6Interval.distance": {"tf": 1}}, "df": 1}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {"howard.functions.commons.remove_if_exists": {"tf": 1}, "howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.full_path": {"tf": 1.4142135623730951}, "howard.functions.commons.get_default_argument": {"tf": 1}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1.4142135623730951}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.variants.Variants.set_samples": {"tf": 1}, "howard.objects.variants.Variants.set_input": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.calculation": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}}, "df": 16, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.remove_if_exists": {"tf": 1}, "howard.functions.commons.run_parallel_functions": {"tf": 1}, "howard.functions.commons.find_genome": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1.7320508075688772}, "howard.functions.commons.genotypeconcordance": {"tf": 1.4142135623730951}, "howard.functions.commons.barcode": {"tf": 1.4142135623730951}, "howard.functions.commons.genotype_stats": {"tf": 1.7320508075688772}, "howard.functions.commons.download_file": {"tf": 1.4142135623730951}, "howard.functions.commons.get_bin": {"tf": 1.4142135623730951}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.get_compression_type": {"tf": 1}, "howard.functions.commons.load_duckdb_extension": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.get_default_argument": {"tf": 1.4142135623730951}, "howard.functions.commons.set_param": {"tf": 1.4142135623730951}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 2}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1.4142135623730951}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1.7320508075688772}, "howard.functions.commons.clean_annotation_field": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 2.449489742783178}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1.7320508075688772}, "howard.functions.plugins.plugins_infos": {"tf": 1.4142135623730951}, "howard.functions.plugins.plugins_list": {"tf": 1.7320508075688772}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.functions.utils.create_refseq_table": {"tf": 1}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.database.Database.set_database": {"tf": 2}, "howard.objects.database.Database.get_header": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_database_dirname": {"tf": 1.7320508075688772}, "howard.objects.database.Database.exists": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_format": {"tf": 1}, "howard.objects.database.Database.get_database_tables": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_table": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1.4142135623730951}, "howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.database.Database.get_view": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.database.Database.map_columns": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_columns": {"tf": 2}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_annotations": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 2.23606797749979}, "howard.objects.database.Database.export": {"tf": 1.7320508075688772}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.set_output": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1}, "howard.objects.variants.Variants.get_header_length": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.drop_column": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_header": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.run_commands": {"tf": 1}, "howard.objects.variants.Variants.get_threads": {"tf": 1}, "howard.objects.variants.Variants.scan_databases": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1.4142135623730951}, "howard.tools.annotation.annotation": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}}, "df": 95}, "s": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.get_threads": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_and_compress_files": {"tf": 2.23606797749979}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.format_arg_help": {"tf": 1}, "howard.functions.commons.bed_sort": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_param": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_genomes": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_refseq": {"tf": 2.8284271247461903}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 2.6457513110645907}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_exomiser": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_hgmd": {"tf": 2.449489742783178}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1.4142135623730951}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 2}, "howard.functions.utils.create_refseq_table": {"tf": 1.4142135623730951}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.set_format": {"tf": 1}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}, "howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 3.605551275463989}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.print_stats": {"tf": 1}, "howard.objects.variants.Variants.get_header_length": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.scan_databases": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1.4142135623730951}}, "df": 57}}, "c": {"docs": {"howard.functions.commons.find_file_prefix": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_annotation_format": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.get_index": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 2}, "howard.functions.commons.get_memory": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 2}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.get_default_argument": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1.4142135623730951}, "howard.functions.commons.load_config_args": {"tf": 1.4142135623730951}, "howard.functions.commons.load_args": {"tf": 1.4142135623730951}, "howard.functions.commons.check_docker_image_exists": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.7320508075688772}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.format_hgvs_name": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_database_folders": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.transcript.Exon.__init__": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.objects.variants.Variants.get_threads": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}, "howard.tools.annotation.annotation": {"tf": 1}}, "df": 53, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.get_tmp": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}}, "df": 3}}}}}}, "y": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1.4142135623730951}, "howard.functions.commons.get_memory": {"tf": 1}, "howard.functions.commons.extract_memory_in_go": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.help_generation_from_json": {"tf": 1.4142135623730951}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 2}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1.4142135623730951}, "howard.functions.plugins.plugins_infos": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1.7320508075688772}, "howard.objects.database.Database.is_genotype_column": {"tf": 1.4142135623730951}, "howard.objects.database.Database.export": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 2.449489742783178}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1}, "howard.objects.variants.Variants.set_output": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.load_data": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.objects.variants.Variants.get_threads": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 2}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 2.449489742783178}}, "df": 53}}}, "s": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "v": {"4": {"docs": {"howard.functions.from_extann.metaheader_rows": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}}, "df": 6}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.split_interval": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse": {"tf": 1}}, "df": 4, "s": {"docs": {"howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}}, "df": 2}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.hgvs.HGVSName.parse": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}}, "df": 2}}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 2}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1.4142135623730951}, "howard.functions.commons.genotype_stats": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 3.1622776601683795}, "howard.functions.commons.get_memory": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 2}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1.7320508075688772}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 2}, "howard.functions.commons.help_generation_from_json": {"tf": 1.7320508075688772}, "howard.functions.commons.set_param": {"tf": 2.6457513110645907}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1.7320508075688772}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 4}, "howard.functions.databases.databases_format_refseq": {"tf": 4.242640687119285}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 3.4641016151377544}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_dbsnp": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_hgmd": {"tf": 2.23606797749979}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 2.23606797749979}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1.4142135623730951}, "howard.functions.plugins.plugins_infos": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1}, "howard.functions.utils.read_refgene": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1.4142135623730951}, "howard.functions.utils.parse_hgvs_name": {"tf": 2.23606797749979}, "howard.functions.utils.format_hgvs_name": {"tf": 3.4641016151377544}, "howard.objects.database.Database.__init__": {"tf": 3}, "howard.objects.database.Database.set_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_header": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header_file": {"tf": 2}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.database.Database.map_columns": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 3.1622776601683795}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 3.3166247903554}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 3.1622776601683795}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1.7320508075688772}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_samples": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_input": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.set_config": {"tf": 2}, "howard.objects.variants.Variants.set_param": {"tf": 1}, "howard.objects.variants.Variants.set_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.set_output": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.load_data": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 2}, "howard.objects.variants.Variants.add_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.explode_infos": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 2}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.scan_databases": {"tf": 1}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 2}}, "df": 81, "s": {"docs": {"howard.functions.commons.set_log_level": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.database.Database.set_database": {"tf": 1}, "howard.objects.database.Database.set_databases_folders": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.objects.database.Database.set_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_assembly": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_format": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1}, "howard.objects.variants.Variants.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_samples": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_input": {"tf": 1}, "howard.objects.variants.Variants.set_param": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_output": {"tf": 1.7320508075688772}, "howard.tools.hgvs.hgvs": {"tf": 1}}, "df": 16}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.set_param": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}}, "df": 2, "s": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 1.7320508075688772}, "howard.functions.commons.get_tmp": {"tf": 1.4142135623730951}, "howard.functions.commons.get_threads": {"tf": 1}, "howard.functions.commons.get_memory": {"tf": 1.4142135623730951}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.objects.variants.Variants.set_config": {"tf": 1}, "howard.objects.variants.Variants.get_duckdb_settings": {"tf": 2}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_config_json": {"tf": 2}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}}, "df": 16}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.commons.help_generation": {"tf": 1.4142135623730951}, "howard.functions.commons.load_config_args": {"tf": 1}, "howard.tools.help.help": {"tf": 1}}, "df": 3}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"howard.functions.commons.find": {"tf": 1}, "howard.functions.commons.find_all": {"tf": 1}, "howard.functions.commons.find_genome": {"tf": 1}, "howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.functions.commons.get_index": {"tf": 1}, "howard.functions.commons.get_bin": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.database.Database.set_database": {"tf": 2.23606797749979}, "howard.objects.database.Database.find_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.find_column": {"tf": 2.449489742783178}, "howard.objects.database.Database.map_columns": {"tf": 1}}, "df": 12, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.findbypipeline": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.objects.database.Database.set_database": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 1}, "howard.objects.database.Database.map_columns": {"tf": 1}}, "df": 5}, "s": {"docs": {"howard.functions.commons.get_bin": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.get_bin": {"tf": 1}}, "df": 1}}}}}}}, "p": {"docs": {"howard.functions.commons.params_string_to_dict": {"tf": 2.23606797749979}, "howard.functions.commons.determine_value_type": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1.4142135623730951}}, "df": 3, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.objects.database.Database.find_header_file": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}}, "df": 4, "d": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1.7320508075688772}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1.4142135623730951}, "howard.functions.commons.bed_sort": {"tf": 1.7320508075688772}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1.4142135623730951}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1}}, "df": 10}, "s": {"docs": {"howard.functions.commons.params_string_to_dict": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.params_string_to_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.determine_value_type": {"tf": 2}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1.7320508075688772}}, "df": 3, "s": {"docs": {"howard.functions.commons.params_string_to_dict": {"tf": 1}}, "df": 1}}}}}}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}}, "df": 1}}}}}}}}, "q": {"docs": {"howard.objects.genome.MockGenome.__init__": {"tf": 1.4142135623730951}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1.4142135623730951}, "howard.objects.variant.justify_indel": {"tf": 1.7320508075688772}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1.4142135623730951}}, "df": 4, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.genotype_compression": {"tf": 1}, "howard.functions.commons.genotype_barcode": {"tf": 1}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1.4142135623730951}, "howard.functions.utils.get_genomic_sequence": {"tf": 2.23606797749979}, "howard.functions.utils.get_vcf_allele": {"tf": 1.4142135623730951}, "howard.functions.utils.get_alt_from_sequence": {"tf": 2.23606797749979}, "howard.functions.utils.matches_ref_allele": {"tf": 1.7320508075688772}, "howard.functions.utils.hgvs_justify_indel": {"tf": 2.8284271247461903}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1.4142135623730951}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.cdna_to_protein": {"tf": 2.449489742783178}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 2.23606797749979}, "howard.functions.utils.format_hgvs_name": {"tf": 1.7320508075688772}, "howard.objects.cdna.CDNACoord": {"tf": 1.7320508075688772}, "howard.objects.genome.MockGenome.__init__": {"tf": 1.4142135623730951}, "howard.objects.genome.MockGenome.get_seq": {"tf": 1}, "howard.objects.genome.MockGenome.read": {"tf": 1}, "howard.objects.genome.MockGenome.write": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1.4142135623730951}, "howard.objects.genome.MockGenomeTestFile.get_seq": {"tf": 1}, "howard.objects.hgvs": {"tf": 2}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 2.449489742783178}, "howard.objects.transcript.Transcript.__init__": {"tf": 2}, "howard.objects.transcript.Transcript.is_coding": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.get_cds_start_stop": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1}, "howard.objects.transcript.BED6Interval.distance": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1.7320508075688772}, "howard.objects.transcript.CDNA_Match.length": {"tf": 1.4142135623730951}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 2.23606797749979}, "howard.objects.variant.get_sequence": {"tf": 1}, "howard.objects.variant.get_sequence_from_position": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 2}, "howard.objects.variant.normalize_variant": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1.7320508075688772}}, "df": 37, "s": {"docs": {"howard.functions.utils.get_genomic_sequence": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.variant.normalize_variant": {"tf": 1.4142135623730951}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}}, "df": 8}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.databases.databases_download_refseq": {"tf": 1}}, "df": 1}}}}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.objects.database.Database.query": {"tf": 1}, "howard.objects.variants.Variants.get_table_variants": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_output": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.plugins.plugins_to_load": {"tf": 1}}, "df": 1}}}}}, "f": {"docs": {"howard.objects.database.Database.get_assembly": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_dirname": {"tf": 1}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1}, "howard.objects.database.Database.get_conn": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.transcript.Transcript.strand": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}}, "df": 9}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.7320508075688772}}, "df": 3, "s": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 3}, "howard.functions.commons.add_value_into_dict": {"tf": 3}, "howard.functions.commons.load_args": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 4}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.params_string_to_dict": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {"howard.functions.commons.determine_column_types": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 2.23606797749979}}, "df": 4, "m": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.load_config_args": {"tf": 1}, "howard.functions.commons.determine_column_types": {"tf": 1}, "howard.tools.gui.gui": {"tf": 1}}, "df": 5}}}, "r": {"1": {"1": {"6": {"4": {"docs": {}, "df": 0, "?": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1}}, "df": 3}}}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"howard.objects.hgvs": {"tf": 1}}, "df": 1, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.add_value_into_dict": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.from_extann.extann_to_info": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}}, "df": 2}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.variants.Variants.stats_to_file": {"tf": 1}}, "df": 1}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.from_annovar.from_annovar": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.tools.process.process": {"tf": 1}}, "df": 3}}}}}, "x": {"docs": {"howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.7320508075688772}}, "df": 1}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.split_interval": {"tf": 1.7320508075688772}, "howard.functions.commons.merge_regions": {"tf": 1.4142135623730951}, "howard.functions.commons.create_where_clause": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1.4142135623730951}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1.7320508075688772}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 2.23606797749979}, "howard.functions.utils.get_genomic_sequence": {"tf": 1.4142135623730951}, "howard.functions.utils.get_vcf_allele": {"tf": 1.4142135623730951}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 2}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.database.Database.map_columns": {"tf": 1}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenome.get_seq": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.get_seq": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 2.23606797749979}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 2.449489742783178}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 2}, "howard.objects.transcript.Transcript.ordered_cdna_match": {"tf": 1}, "howard.objects.transcript.Transcript.get_cds_start_stop": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.start_codon": {"tf": 1.4142135623730951}, "howard.objects.transcript.BED6Interval_base": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval": {"tf": 1}, "howard.objects.transcript.BED6Interval.__init__": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1.4142135623730951}, "howard.objects.transcript.CDNA_Match.length": {"tf": 1.4142135623730951}, "howard.objects.variant.justify_indel": {"tf": 1.7320508075688772}, "howard.objects.variant.justify_genomic_indel": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}}, "df": 40, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.find": {"tf": 1}, "howard.functions.commons.find_all": {"tf": 1}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}}, "df": 7}}}, "s": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1}}, "df": 2}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.command": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.genotype_stats": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.get_stats": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 2}, "howard.tools.stats.stats": {"tf": 1}}, "df": 6}}}}}}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.objects.database.Database.query": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {"howard.functions.databases.databases_param": {"tf": 1}, "howard.objects.variants.Variants.get_stats": {"tf": 1}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1.4142135623730951}}, "df": 6}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.4142135623730951}, "howard.objects.variant.normalize_variant": {"tf": 1}}, "df": 4}}}}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.commons.split_interval": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 3}}, "r": {"docs": {"howard.functions.commons.extract_float_from_str": {"tf": 1.7320508075688772}, "howard.functions.commons.extract_memory_in_go": {"tf": 1.4142135623730951}, "howard.functions.commons.add_value_into_dict": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.example_function": {"tf": 1}, "howard.functions.commons.find_all": {"tf": 1}, "howard.functions.commons.find_genome": {"tf": 1}, "howard.functions.commons.find_file_prefix": {"tf": 1.4142135623730951}, "howard.functions.commons.find_nomen": {"tf": 1.7320508075688772}, "howard.functions.commons.explode_annotation_format": {"tf": 3.1622776601683795}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 2.449489742783178}, "howard.functions.commons.explode_snpeff_ann": {"tf": 2}, "howard.functions.commons.findbypipeline": {"tf": 1}, "howard.functions.commons.genotypeconcordance": {"tf": 1.4142135623730951}, "howard.functions.commons.genotype_compression": {"tf": 2.6457513110645907}, "howard.functions.commons.genotype_barcode": {"tf": 2.23606797749979}, "howard.functions.commons.barcode": {"tf": 1}, "howard.functions.commons.trio": {"tf": 1}, "howard.functions.commons.vaf_normalization": {"tf": 1.4142135623730951}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1.4142135623730951}, "howard.functions.commons.download_file": {"tf": 1.4142135623730951}, "howard.functions.commons.get_bin": {"tf": 2}, "howard.functions.commons.get_bin_command": {"tf": 1.4142135623730951}, "howard.functions.commons.get_tmp": {"tf": 1}, "howard.functions.commons.get_memory": {"tf": 1}, "howard.functions.commons.extract_float_from_str": {"tf": 2}, "howard.functions.commons.extract_memory_in_go": {"tf": 2.449489742783178}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.compress_file": {"tf": 1}, "howard.functions.commons.get_compression_type": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.commons.genome_build_switch": {"tf": 1.4142135623730951}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.get_argument_gooey": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 2.6457513110645907}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.7320508075688772}, "howard.functions.commons.help_generation_from_json": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.format_arg_help": {"tf": 1}, "howard.functions.commons.bed_sort": {"tf": 1}, "howard.functions.commons.full_path": {"tf": 1.4142135623730951}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.get_random": {"tf": 2}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1.4142135623730951}, "howard.functions.commons.params_string_to_dict": {"tf": 3.605551275463989}, "howard.functions.commons.determine_value_type": {"tf": 2}, "howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.commons.detect_column_type": {"tf": 1}, "howard.functions.commons.clean_annotation_field": {"tf": 2.23606797749979}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 2.449489742783178}, "howard.functions.databases.databases_format_refseq": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_exomiser": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_hgmd": {"tf": 2}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.functions.from_extann.metaheader_rows": {"tf": 1}, "howard.functions.plugins.plugins_infos": {"tf": 1.4142135623730951}, "howard.functions.plugins.plugins_list": {"tf": 1.4142135623730951}, "howard.functions.utils.read_genepred": {"tf": 1.7320508075688772}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 2.23606797749979}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.create_refseq_table": {"tf": 1.4142135623730951}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.functions.utils.get_transcript": {"tf": 1}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 2.23606797749979}, "howard.objects.database.Database.set_database": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header_length": {"tf": 1}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.find_header_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.query": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_header": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_assembly": {"tf": 1.4142135623730951}, "howard.objects.database.Database.find_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_basename": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_dirname": {"tf": 1.4142135623730951}, "howard.objects.database.Database.exists": {"tf": 1}, "howard.objects.database.Database.set_format": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_format": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_type": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_database_table": {"tf": 1}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1.7320508075688772}, "howard.objects.database.Database.create_view": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_view": {"tf": 1.7320508075688772}, "howard.objects.database.Database.is_compressed": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_annotations": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 1.4142135623730951}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1.7320508075688772}, "howard.objects.genome.MockGenome.read": {"tf": 1}, "howard.objects.hgvs.get_refseq_type": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 2.449489742783178}, "howard.objects.hgvs.HGVSName.parse": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 2}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.full_name": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.strand": {"tf": 2}, "howard.objects.transcript.Exon.name": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_duckdb_settings": {"tf": 1}, "howard.objects.variants.Variants.set_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1}, "howard.objects.variants.Variants.get_output_format": {"tf": 1}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.objects.variants.Variants.get_memory": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 2}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}}, "df": 168, "s": {"docs": {"howard.functions.commons.find_all": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1.4142135623730951}, "howard.functions.commons.findbypipeline": {"tf": 1}, "howard.functions.commons.load_duckdb_extension": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.database.Database.map_columns": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.variants.Variants.set_header": {"tf": 1}, "howard.objects.variants.Variants.get_header": {"tf": 1}}, "df": 10}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.load_args": {"tf": 1.7320508075688772}}, "df": 1}}, "p": {"docs": {"howard.functions.commons.identical": {"tf": 2}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}}, "df": 2, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.identical": {"tf": 1.4142135623730951}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.utils.create_refseq_table": {"tf": 1}, "howard.objects.variants.Variants.get_stats": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}}, "df": 7, "d": {"docs": {"howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 3}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.objects.variants.Variants.create_transcript_view": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1.4142135623730951}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 2.6457513110645907}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 2.449489742783178}, "howard.objects.transcript.Transcript.strand": {"tf": 2}, "howard.objects.transcript.Transcript.get_cds_start_stop": {"tf": 1}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1}, "howard.objects.transcript.BED6Interval_base": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval": {"tf": 1}, "howard.objects.transcript.BED6Interval.__init__": {"tf": 1}}, "df": 14}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenome.read": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}}, "df": 3}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.get_argument": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1}}, "df": 2}}}, "e": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1.7320508075688772}, "howard.functions.utils.create_refseq_table": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.__init__": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 9, "d": {"docs": {"howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.objects.database.Database.set_databases_folders": {"tf": 1}, "howard.objects.database.Database.get_database_folders": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1.4142135623730951}}, "df": 16}, "s": {"docs": {"howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.objects.variants.Variants.set_header": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1.4142135623730951}}, "df": 5}}}, "p": {"docs": {"howard.functions.from_extann.get_gene_coordinate": {"tf": 1}, "howard.objects.cdna.CDNACoord": {"tf": 1}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 2}, "howard.objects.transcript.Transcript.get_cds_start_stop": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.stop_codon": {"tf": 1.7320508075688772}}, "df": 6}}, "y": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.utils.get_vcf_allele": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1.4142135623730951}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1.4142135623730951}}, "df": 4}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.PathType.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.split_interval": {"tf": 1.4142135623730951}, "howard.functions.commons.download_file": {"tf": 1.7320508075688772}, "howard.functions.commons.extract_memory_in_go": {"tf": 1.7320508075688772}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 3}, "howard.functions.from_extann.get_longest_transcript": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.load_data": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.export_output": {"tf": 1.4142135623730951}}, "df": 10, "d": {"docs": {"howard.functions.commons.split_interval": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 2.8284271247461903}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.objects.database.Database.set_databases_folders": {"tf": 1}, "howard.objects.hgvs": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}}, "df": 10}}}}, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.download_file": {"tf": 1}}, "df": 1, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}}, "df": 4}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.cdna.CDNACoord": {"tf": 1.4142135623730951}}, "df": 1}}}, "q": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.create_where_clause": {"tf": 1.4142135623730951}, "howard.functions.commons.duckdb_execute": {"tf": 1.4142135623730951}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1}, "howard.functions.utils.create_refseq_table": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1.7320508075688772}, "howard.objects.database.Database.query": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_file": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_type": {"tf": 2}, "howard.objects.database.Database.get_sql_from": {"tf": 2}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_sql_database_link": {"tf": 2}, "howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 2.6457513110645907}, "howard.objects.database.Database.get_extra_columns": {"tf": 1.7320508075688772}, "howard.objects.database.Database.is_vcf": {"tf": 1.7320508075688772}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.calculation": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}}, "df": 21, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.database.Database.get_format": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1}}, "df": 6}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.command": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.download_file": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_memory_in_go": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.7320508075688772}, "howard.functions.commons.help_generation_from_json": {"tf": 1.4142135623730951}, "howard.functions.commons.bed_sort": {"tf": 1}, "howard.functions.commons.get_default_argument": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1.4142135623730951}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1.7320508075688772}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_hgmd": {"tf": 1.7320508075688772}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.functions.utils.make_transcript": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 2.23606797749979}, "howard.objects.hgvs.HGVSName.format": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.load_data": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.export_header": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 41}}}, "w": {"docs": {"howard.functions.databases.databases_param": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "b": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 2}}, "df": 2, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.find_all": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.databases.databases_infos": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.objects.genome.ChromosomeSubset": {"tf": 1}, "howard.objects.genome.GenomeSubset": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1}}, "df": 4}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.objects.hgvs": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1}}, "df": 8, "s": {"docs": {"howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.plugins.plugins_infos": {"tf": 2.23606797749979}, "howard.functions.plugins.plugins_list": {"tf": 2.23606797749979}, "howard.objects.database.Database.find_database": {"tf": 1.4142135623730951}}, "df": 3}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.transcript.CDNA_Match.length": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.variants.Variants.annotation_exomiser": {"tf": 2.23606797749979}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.plugins.plugins_to_load": {"tf": 1}, "howard.functions.utils.read_transcripts": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.objects.database.Database.query": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}}, "df": 32}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.duckdb_execute": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 5, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.load_duckdb_extension": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.drop_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}}, "df": 6}}}}}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.add_value_into_dict": {"tf": 1}}, "df": 1}}}}}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.concat_into_infile": {"tf": 1}}, "df": 1, "s": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}}, "df": 2}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.database.Database.get_database_tables": {"tf": 1}, "howard.objects.database.Database.get_database_table": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.download_file": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.download_file": {"tf": 1}}, "df": 1}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.database.Database.get_database_table": {"tf": 1}}, "df": 1}}}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"howard.functions.commons.extract_memory_in_go": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 2}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1}}, "df": 1}}}}}}}}}, "y": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.from_extann.from_extann": {"tf": 1}}, "df": 1, "s": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1.4142135623730951}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {"howard.tools.tools.PathType.__init__": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.download_file": {"tf": 1}}, "df": 1}}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {"howard.functions.commons.get_argument_to_mk": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation_from_json": {"tf": 1}}, "df": 2}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 1}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.commons.get_bin": {"tf": 1.4142135623730951}, "howard.functions.commons.get_threads": {"tf": 1}, "howard.functions.commons.get_memory": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}}, "df": 4}}}}}, "n": {"docs": {}, "df": 0, "p": {"docs": {"howard.objects.hgvs.HGVSName.__init__": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {"howard.functions.commons.extract_snpeff_hgvs": {"tf": 2.449489742783178}, "howard.functions.commons.explode_snpeff_ann": {"tf": 3.1622776601683795}, "howard.functions.commons.get_bin": {"tf": 2}, "howard.functions.databases.databases_download_snpeff": {"tf": 2.8284271247461903}, "howard.objects.variants.Variants.annotation_snpeff": {"tf": 1}, "howard.objects.variants.Variants.annotation_splice": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 3}}, "df": 8}}}}, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.determine_column_types": {"tf": 1}, "howard.objects.variants.Variants.set_input": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.tools.annotation.annotation": {"tf": 1}}, "df": 5}}}}}, "v": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1.7320508075688772}}, "df": 1, "s": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1}}, "df": 1, "/": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.variants.Variants.get_stats": {"tf": 1}}, "df": 1}}}}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.barcode": {"tf": 1}, "howard.functions.commons.trio": {"tf": 1}, "howard.functions.commons.vaf_normalization": {"tf": 2.6457513110645907}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 3.3166247903554}, "howard.objects.variants.Variants.load_data": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1}}, "df": 9, "s": {"docs": {"howard.functions.commons.findbypipeline": {"tf": 2.6457513110645907}, "howard.functions.commons.genotypeconcordance": {"tf": 2.23606797749979}, "howard.functions.commons.barcode": {"tf": 1.7320508075688772}, "howard.functions.commons.trio": {"tf": 1.4142135623730951}, "howard.functions.commons.genotype_stats": {"tf": 2}, "howard.objects.database.Database.export": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.set_samples": {"tf": 3}, "howard.objects.variants.Variants.get_samples": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_stats": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 3.1622776601683795}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 3.605551275463989}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 13, "/": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.findbypipeline": {"tf": 1}, "howard.functions.commons.genotypeconcordance": {"tf": 1}}, "df": 2}}}}}}}}}}, ":": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.trio": {"tf": 1}}, "df": 1}}}}}}, "/": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.genotypeconcordance": {"tf": 1.4142135623730951}, "howard.functions.commons.genotype_stats": {"tf": 1}}, "df": 2}}}}}}}}}, "d": {"docs": {"howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.load_data": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {"howard.functions.commons.genotypeconcordance": {"tf": 1}, "howard.functions.commons.genome_build_switch": {"tf": 1}, "howard.functions.from_extann.get_longest_transcript": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.4142135623730951}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}}, "df": 10}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.download_file": {"tf": 1}}, "df": 1, "d": {"docs": {"howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1.4142135623730951}, "howard.functions.commons.bed_sort": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_output": {"tf": 1}}, "df": 8}, "s": {"docs": {"howard.functions.commons.download_file": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"howard.functions.databases.databases_download_genomes": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}}, "df": 1}}}}, "y": {"docs": {"howard.tools.databases.databases": {"tf": 1}}, "df": 1}}, "o": {"docs": {"howard.objects.cdna.CDNACoord": {"tf": 1.4142135623730951}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}}, "df": 3, "r": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 2.23606797749979}, "howard.functions.commons.bed_sort": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1.7320508075688772}, "howard.objects.database.Database.export": {"tf": 2}, "howard.objects.variants.Variants.export_output": {"tf": 2}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}}, "df": 6, "s": {"docs": {"howard.functions.commons.genotype_compression": {"tf": 1}, "howard.functions.commons.bed_sort": {"tf": 1}, "howard.objects.transcript.Transcript.ordered_cdna_match": {"tf": 1}}, "df": 3}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.genotype_compression": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1.7320508075688772}, "howard.functions.commons.bed_sort": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_format_refseq": {"tf": 1.4142135623730951}, "howard.objects.database.Database.export": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.ordered_cdna_match": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_output": {"tf": 1.4142135623730951}}, "df": 7}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}}, "df": 6}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.4142135623730951}}, "df": 3}}}}, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1}}, "df": 4}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}}, "df": 8}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1}}, "df": 1}}}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"howard.functions.commons.genome_build_switch": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 2}}}}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1.4142135623730951}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.gui.gui": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1.7320508075688772}}, "df": 6}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.variants.Variants.scan_databases": {"tf": 1.7320508075688772}}, "df": 1, "s": {"docs": {"howard.functions.databases.databases_infos": {"tf": 1}, "howard.objects.variants.Variants.scan_databases": {"tf": 1}}, "df": 2}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.variants.Variants.scan_databases": {"tf": 1.4142135623730951}}, "df": 1}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.databases.databases_download_genomes": {"tf": 1}}, "df": 1}}}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {"howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.hgvs.HGVSName.format_protein": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.transcript.BED6Interval_base": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval": {"tf": 1}, "howard.objects.transcript.BED6Interval.__init__": {"tf": 1}}, "df": 4, "s": {"docs": {"howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.variants.Variants.prioritization": {"tf": 1}}, "df": 1}}}}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.commons.determine_value_type": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 2}, "howard.functions.utils.read_refgene": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1.4142135623730951}}, "df": 6, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.identical": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}}, "df": 4}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.determine_value_type": {"tf": 1}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}}, "df": 2}}}}}}, "p": {"docs": {"howard.objects.hgvs": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 2}, "howard.objects.hgvs.HGVSName.format": {"tf": 1}}, "df": 3, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 1.7320508075688772}, "howard.functions.commons.get_tmp": {"tf": 2.8284271247461903}, "howard.functions.commons.get_threads": {"tf": 1.7320508075688772}, "howard.functions.commons.get_memory": {"tf": 2}, "howard.functions.commons.set_param": {"tf": 3.605551275463989}, "howard.functions.commons.load_param": {"tf": 1.4142135623730951}, "howard.functions.commons.load_config_args": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1.7320508075688772}, "howard.functions.commons.params_string_to_dict": {"tf": 1.7320508075688772}, "howard.functions.databases.generate_databases_param": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_param": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.__init__": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_samples": {"tf": 1}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1}, "howard.objects.variants.Variants.set_param": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_param": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1}, "howard.objects.variants.Variants.get_memory": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 2}, "howard.tools.process.process": {"tf": 1}}, "df": 24, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.find_genome": {"tf": 1.4142135623730951}, "howard.functions.commons.find_file_prefix": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_annotation_format": {"tf": 2.449489742783178}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_snpeff_ann": {"tf": 2.23606797749979}, "howard.functions.commons.get_index": {"tf": 2}, "howard.functions.commons.findbypipeline": {"tf": 1}, "howard.functions.commons.genotypeconcordance": {"tf": 1}, "howard.functions.commons.genotype_barcode": {"tf": 1}, "howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 2}, "howard.functions.commons.download_file": {"tf": 2.8284271247461903}, "howard.functions.commons.get_bin": {"tf": 2}, "howard.functions.commons.get_bin_command": {"tf": 3}, "howard.functions.commons.get_tmp": {"tf": 2}, "howard.functions.commons.get_threads": {"tf": 1.4142135623730951}, "howard.functions.commons.get_memory": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_memory_in_go": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.compress_file": {"tf": 1}, "howard.functions.commons.get_compression_type": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_into_infile": {"tf": 2.23606797749979}, "howard.functions.commons.concat_and_compress_files": {"tf": 2.8284271247461903}, "howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1}, "howard.functions.commons.duckdb_execute": {"tf": 1.4142135623730951}, "howard.functions.commons.genome_build_switch": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 2.23606797749979}, "howard.functions.commons.get_argument_gooey": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 2}, "howard.functions.commons.help_generation_from_dict": {"tf": 3.4641016151377544}, "howard.functions.commons.help_generation_from_json": {"tf": 2.449489742783178}, "howard.functions.commons.help_generation": {"tf": 2}, "howard.functions.commons.format_arg_help": {"tf": 1.7320508075688772}, "howard.functions.commons.bed_sort": {"tf": 1.4142135623730951}, "howard.functions.commons.get_default_argument": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 2.23606797749979}, "howard.functions.commons.add_value_into_dict": {"tf": 1.7320508075688772}, "howard.functions.commons.load_args": {"tf": 2.6457513110645907}, "howard.functions.commons.get_random": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1.4142135623730951}, "howard.functions.commons.identical": {"tf": 1.7320508075688772}, "howard.functions.commons.params_string_to_dict": {"tf": 2.8284271247461903}, "howard.functions.commons.determine_value_type": {"tf": 1.7320508075688772}, "howard.functions.commons.clean_annotation_field": {"tf": 1.4142135623730951}, "howard.functions.databases.generate_databases_param": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_infos": {"tf": 2}, "howard.functions.databases.databases_param": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_annovar": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_snpeff": {"tf": 2}, "howard.functions.databases.databases_download_genomes": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_refseq": {"tf": 4}, "howard.functions.databases.databases_format_refseq": {"tf": 3.3166247903554}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 4.47213595499958}, "howard.functions.databases.databases_download_alphamissense": {"tf": 2}, "howard.functions.databases.databases_download_exomiser": {"tf": 3.605551275463989}, "howard.functions.databases.databases_download_dbsnp": {"tf": 2.6457513110645907}, "howard.functions.databases.databases_download_hgmd": {"tf": 3}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 2.6457513110645907}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 2.6457513110645907}, "howard.functions.plugins.plugins_infos": {"tf": 1.7320508075688772}, "howard.functions.plugins.plugins_list": {"tf": 2.23606797749979}, "howard.functions.plugins.plugins_to_load": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1.4142135623730951}, "howard.functions.utils.make_transcript": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.functions.utils.read_transcripts": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1.7320508075688772}, "howard.functions.utils.get_vcf_allele": {"tf": 1.7320508075688772}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1.7320508075688772}, "howard.functions.utils.matches_ref_allele": {"tf": 1.7320508075688772}, "howard.functions.utils.hgvs_justify_dup": {"tf": 2}, "howard.functions.utils.hgvs_justify_indel": {"tf": 2.23606797749979}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 2.23606797749979}, "howard.functions.utils.parse_hgvs_name": {"tf": 2.23606797749979}, "howard.functions.utils.cdna_to_protein": {"tf": 2.8284271247461903}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 2.6457513110645907}, "howard.functions.utils.format_hgvs_name": {"tf": 4.242640687119285}, "howard.functions.utils.create_refseq_table": {"tf": 2.23606797749979}, "howard.functions.utils.get_refseq_table": {"tf": 1.7320508075688772}, "howard.functions.utils.get_transcript": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 3.3166247903554}, "howard.objects.database.Database.set_database": {"tf": 1.7320508075688772}, "howard.objects.database.Database.set_databases_folders": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_length": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_from_list": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.find_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_header_from_columns": {"tf": 2.23606797749979}, "howard.objects.database.Database.query": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.objects.database.Database.set_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 2.8284271247461903}, "howard.objects.database.Database.set_assembly": {"tf": 1.4142135623730951}, "howard.objects.database.Database.find_database": {"tf": 2}, "howard.objects.database.Database.get_database_basename": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_dirname": {"tf": 1}, "howard.objects.database.Database.exists": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_format": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_format": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_type": {"tf": 2}, "howard.objects.database.Database.get_sql_from": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1}, "howard.objects.database.Database.create_view": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_view": {"tf": 2}, "howard.objects.database.Database.is_compressed": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 2.23606797749979}, "howard.objects.database.Database.map_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_columns": {"tf": 2.8284271247461903}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_annotations": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_extra_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.is_vcf": {"tf": 1.7320508075688772}, "howard.objects.database.Database.is_genotype_column": {"tf": 2.23606797749979}, "howard.objects.database.Database.export": {"tf": 4.898979485566356}, "howard.objects.hgvs.get_refseq_type": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 4.358898943540674}, "howard.objects.hgvs.HGVSName.parse": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 2}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.__init__": {"tf": 3.1622776601683795}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 1}, "howard.objects.transcript.BED6Interval.distance": {"tf": 1}, "howard.objects.transcript.Exon.__init__": {"tf": 2}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 2.449489742783178}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_samples": {"tf": 1}, "howard.objects.variants.Variants.set_config": {"tf": 1}, "howard.objects.variants.Variants.set_param": {"tf": 1}, "howard.objects.variants.Variants.get_indexing": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.set_output": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1}, "howard.objects.variants.Variants.get_output_format": {"tf": 1}, "howard.objects.variants.Variants.get_header_length": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.load_data": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.add_column": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.drop_column": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.explode_infos": {"tf": 3}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_output": {"tf": 3.872983346207417}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_header": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.get_threads": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_memory": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.scan_databases": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_config_default": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_config_json": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.prioritization": {"tf": 2}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 2}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 2}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 3.1622776601683795}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 3}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 3}, "howard.tools.annotation.annotation": {"tf": 1}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}, "howard.tools.gui.gui": {"tf": 1}, "howard.tools.help.help": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}}, "df": 203, "s": {"docs": {"howard.functions.commons.remove_if_exists": {"tf": 1}, "howard.functions.commons.set_log_level": {"tf": 1}, "howard.functions.commons.split_interval": {"tf": 1}, "howard.functions.commons.merge_regions": {"tf": 1}, "howard.functions.commons.create_where_clause": {"tf": 1}, "howard.functions.commons.command": {"tf": 1}, "howard.functions.commons.run_parallel_commands": {"tf": 1}, "howard.functions.commons.run_parallel_functions": {"tf": 1}, "howard.functions.commons.example_function": {"tf": 1}, "howard.functions.commons.find": {"tf": 1}, "howard.functions.commons.find_all": {"tf": 1}, "howard.functions.commons.find_genome": {"tf": 1}, "howard.functions.commons.find_file_prefix": {"tf": 1.4142135623730951}, "howard.functions.commons.find_nomen": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 2}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 2}, "howard.functions.commons.get_index": {"tf": 1}, "howard.functions.commons.get_file_format": {"tf": 1}, "howard.functions.commons.findbypipeline": {"tf": 1}, "howard.functions.commons.genotypeconcordance": {"tf": 1}, "howard.functions.commons.genotype_compression": {"tf": 1}, "howard.functions.commons.genotype_barcode": {"tf": 1}, "howard.functions.commons.barcode": {"tf": 1}, "howard.functions.commons.trio": {"tf": 1}, "howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 2.449489742783178}, "howard.functions.commons.get_tmp": {"tf": 1.4142135623730951}, "howard.functions.commons.get_threads": {"tf": 1.7320508075688772}, "howard.functions.commons.get_memory": {"tf": 1}, "howard.functions.commons.extract_float_from_str": {"tf": 1}, "howard.functions.commons.extract_memory_in_go": {"tf": 1}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.compress_file": {"tf": 1}, "howard.functions.commons.get_compression_type": {"tf": 1}, "howard.functions.commons.get_file_compressed": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1.4142135623730951}, "howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1}, "howard.functions.commons.load_duckdb_extension": {"tf": 1}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.commons.genome_build_switch": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.get_argument_gooey": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.format_arg_help": {"tf": 1}, "howard.functions.commons.bed_sort": {"tf": 1}, "howard.functions.commons.full_path": {"tf": 1}, "howard.functions.commons.get_default_argument": {"tf": 1.4142135623730951}, "howard.functions.commons.set_param": {"tf": 1.4142135623730951}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.load_param": {"tf": 2}, "howard.functions.commons.load_config_args": {"tf": 1.7320508075688772}, "howard.functions.commons.load_args": {"tf": 2}, "howard.functions.commons.get_random": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.commons.check_docker_image_exists": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 2.8284271247461903}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.commons.detect_column_type": {"tf": 1}, "howard.functions.commons.clean_annotation_field": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1.7320508075688772}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_param": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.from_annovar.from_annovar": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1.4142135623730951}, "howard.functions.plugins.plugins_infos": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1}, "howard.functions.plugins.plugins_to_load": {"tf": 1}, "howard.functions.utils.read_refgene": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.make_transcript": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.functions.utils.read_transcripts": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.cdna_to_protein": {"tf": 1.4142135623730951}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.functions.utils.create_refseq_table": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.functions.utils.get_transcript": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.database.Database.set_database": {"tf": 1}, "howard.objects.database.Database.set_databases_folders": {"tf": 1}, "howard.objects.database.Database.read_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_length": {"tf": 1}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.find_header_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.query": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.objects.database.Database.set_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_assembly": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 1}, "howard.objects.database.Database.get_database_basename": {"tf": 1}, "howard.objects.database.Database.get_database_dirname": {"tf": 1}, "howard.objects.database.Database.exists": {"tf": 1}, "howard.objects.database.Database.set_format": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.get_database_tables": {"tf": 1}, "howard.objects.database.Database.get_database_table": {"tf": 1}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1}, "howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.database.Database.get_view": {"tf": 1.4142135623730951}, "howard.objects.database.Database.is_compressed": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1.4142135623730951}, "howard.objects.database.Database.map_columns": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1}, "howard.objects.database.Database.get_annotations": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.hgvs.get_refseq_type": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 1}, "howard.objects.transcript.BED6Interval.distance": {"tf": 1}, "howard.objects.transcript.Exon.__init__": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variants.Variants.__init__": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_samples": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1}, "howard.objects.variants.Variants.set_input": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_config": {"tf": 1}, "howard.objects.variants.Variants.set_param": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.set_output": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1}, "howard.objects.variants.Variants.get_output_format": {"tf": 1}, "howard.objects.variants.Variants.get_table_variants": {"tf": 1}, "howard.objects.variants.Variants.get_tmp_dir": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header": {"tf": 1}, "howard.objects.variants.Variants.get_header_length": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.load_data": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.drop_column": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}, "howard.objects.variants.Variants.execute_query": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 2}, "howard.objects.variants.Variants.run_commands": {"tf": 1}, "howard.objects.variants.Variants.get_threads": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_memory": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.update_from_vcf": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1}, "howard.objects.variants.Variants.scan_databases": {"tf": 1}, "howard.objects.variants.Variants.annotation_snpsift": {"tf": 1}, "howard.objects.variants.Variants.annotation_bcftools": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 2.8284271247461903}, "howard.objects.variants.Variants.annotation_snpeff": {"tf": 1}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 1}, "howard.objects.variants.Variants.annotation_parquet": {"tf": 1}, "howard.objects.variants.Variants.annotation_splice": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1.4142135623730951}, "howard.tools.annotation.annotation": {"tf": 1.4142135623730951}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}, "howard.tools.gui.gui": {"tf": 1}, "howard.tools.help.help": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1.4142135623730951}, "howard.tools.prioritization.prioritization": {"tf": 1.4142135623730951}, "howard.tools.process.process": {"tf": 1.4142135623730951}, "howard.tools.query.query": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1.7320508075688772}}, "df": 261}}}}}, "s": {"docs": {"howard.functions.commons.params_string_to_dict": {"tf": 3.7416573867739413}}, "df": 1}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.run_parallel_commands": {"tf": 1}, "howard.functions.commons.run_parallel_functions": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.run_commands": {"tf": 1}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}}, "df": 10, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}}, "df": 7}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.find_nomen": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.7320508075688772}, "howard.objects.cdna.CDNACoord.parse": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1.4142135623730951}, "howard.tools.help.help": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1}}, "df": 14, "r": {"docs": {"howard.functions.commons.help_generation": {"tf": 2.23606797749979}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.help.help": {"tf": 1}}, "df": 3}, "d": {"docs": {"howard.functions.commons.set_param": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1.7320508075688772}}, "df": 4}, "s": {"docs": {"howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.load_args": {"tf": 1.7320508075688772}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.tools.gui.gui": {"tf": 1}, "howard.tools.query.query": {"tf": 1}}, "df": 5}}}}, "t": {"docs": {"howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 2}}, "df": 1, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.vaf_normalization": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.database.Database.export": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"howard.objects.database.Database.export": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.export_output": {"tf": 1.4142135623730951}}, "df": 2}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.variants.Variants.export_output": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}}, "s": {"docs": {"howard.objects.database.Database.get_header": {"tf": 1}}, "df": 1}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.databases.query_and_concatenate_columns": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_param": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 3.872983346207417}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 2}, "howard.functions.databases.databases_download_hgmd": {"tf": 2.23606797749979}, "howard.functions.from_annovar.from_annovar": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 2.23606797749979}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 2}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 2.8284271247461903}, "howard.main.main": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 2}, "howard.objects.variants.Variants.export_output": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.update_from_vcf": {"tf": 1}, "howard.objects.variants.Variants.scan_databases": {"tf": 1}, "howard.objects.variants.Variants.annotation_parquet": {"tf": 1}}, "df": 18, "/": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "f": {"docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.tools.PathType.__init__": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"howard.functions.commons.find": {"tf": 2}, "howard.functions.commons.find_all": {"tf": 2}, "howard.functions.commons.find_genome": {"tf": 2.23606797749979}, "howard.functions.commons.find_file_prefix": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_file": {"tf": 2.8284271247461903}, "howard.functions.commons.download_file": {"tf": 2.449489742783178}, "howard.functions.commons.get_bin": {"tf": 2.23606797749979}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.get_tmp": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.compress_file": {"tf": 1.4142135623730951}, "howard.functions.commons.get_compression_type": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1.7320508075688772}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.bed_sort": {"tf": 1.4142135623730951}, "howard.functions.commons.full_path": {"tf": 3.605551275463989}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_param": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_snpeff": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.7320508075688772}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1.4142135623730951}, "howard.functions.from_extann.create_metaheader": {"tf": 1}, "howard.functions.utils.read_transcripts": {"tf": 1}, "howard.functions.utils.create_refseq_table": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.database.Database.read_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_length": {"tf": 1}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.find_header_file": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.find_database": {"tf": 1}, "howard.objects.database.Database.get_database_basename": {"tf": 1}, "howard.objects.database.Database.get_database_dirname": {"tf": 1.4142135623730951}, "howard.objects.database.Database.exists": {"tf": 2}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.is_compressed": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1.7320508075688772}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1}, "howard.objects.variants.Variants.get_output_format": {"tf": 1}, "howard.objects.variants.Variants.get_tmp_dir": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_header_length": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.load_data": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}, "howard.tools.tools.PathType.__init__": {"tf": 1.4142135623730951}}, "df": 69, "s": {"docs": {"howard.functions.commons.remove_if_exists": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.objects.database.Database.set_databases_folders": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}, "howard.tools.tools.PathType.__init__": {"tf": 1}}, "df": 10}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.find_nomen": {"tf": 1.4142135623730951}, "howard.functions.commons.get_bin": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_header": {"tf": 1}}, "df": 4}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.barcode": {"tf": 1}, "howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.functions.commons.genotype_stats": {"tf": 1.4142135623730951}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1.7320508075688772}, "howard.functions.from_extann.extann_to_info": {"tf": 1}, "howard.functions.from_extann.get_longest_transcript": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1.7320508075688772}}, "df": 9}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.get_view": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.tools.help.help": {"tf": 1}}, "df": 9, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.get_tmp": {"tf": 1}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.objects.database.Database.set_header_file": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.set_assembly": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_format": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}, "howard.tools.annotation.annotation": {"tf": 1}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}, "howard.tools.process.process": {"tf": 1}, "howard.tools.query.query": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}}, "df": 15}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.variants.Variants.explode_infos": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.get_tmp": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 4}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.databases.databases_download_genomes": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}}, "df": 1}}}}}}, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.set_log_level": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.get_threads": {"tf": 1}, "howard.functions.commons.get_argument_gooey": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.from_extann.read_json": {"tf": 1}, "howard.functions.plugins.plugins_infos": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.query": {"tf": 1}, "howard.objects.database.Database.set_format": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1}, "howard.objects.database.Database.is_compressed": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.set_output": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.calculation": {"tf": 1}, "howard.tools.gui.gui": {"tf": 1.4142135623730951}, "howard.tools.query.query": {"tf": 1}}, "df": 23}}}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1.4142135623730951}}, "df": 1}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.variant.normalize_variant": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}}, "df": 8}}, "m": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.utils.get_refseq_table": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"howard.objects.database.Database.export": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.transcript.Exon.get_as_interval": {"tf": 1}}, "df": 1}}}}}}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.split_interval": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"howard.functions.commons.explode_snpeff_ann": {"tf": 1}}, "df": 1}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.findbypipeline": {"tf": 2}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}}, "df": 2, "s": {"docs": {"howard.functions.commons.findbypipeline": {"tf": 1.7320508075688772}}, "df": 1}, "/": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {"howard.objects.hgvs": {"tf": 1}}, "df": 1, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.command": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1.4142135623730951}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.commons.clean_annotation_field": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.4142135623730951}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}, "howard.main.main": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.prioritization": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 2}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 2}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}, "howard.tools.process.process": {"tf": 1.4142135623730951}}, "df": 34, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.tools.process.process": {"tf": 1}}, "df": 9}, "d": {"docs": {"howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1.7320508075688772}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.explode_infos": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}}, "df": 7}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 2}}, "df": 12}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}}, "df": 1, "s": {"docs": {"howard.functions.databases.databases_download_genomes": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.database.Database.is_genotype_column": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"howard.objects.variants.Variants.set_connexion": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.variants.Variants.explode_infos": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.get_tmp": {"tf": 1}, "howard.functions.commons.get_threads": {"tf": 1}, "howard.functions.commons.get_memory": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}}, "df": 19, "d": {"docs": {"howard.functions.commons.find_genome": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1.4142135623730951}, "howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1.7320508075688772}, "howard.functions.commons.get_memory": {"tf": 1}, "howard.functions.commons.extract_memory_in_go": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.format_arg_help": {"tf": 1.7320508075688772}, "howard.functions.commons.set_param": {"tf": 1.7320508075688772}, "howard.functions.commons.add_value_into_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.get_random": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.commons.determine_column_types": {"tf": 1.4142135623730951}, "howard.functions.databases.generate_databases_param": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_exomiser": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_hgmd": {"tf": 1.7320508075688772}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.7320508075688772}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.functions.utils.create_refseq_table": {"tf": 1.4142135623730951}, "howard.objects.database.Database.__init__": {"tf": 2.23606797749979}, "howard.objects.database.Database.set_database": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_header_from_list": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.find_header_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1.7320508075688772}, "howard.objects.database.Database.query": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_header": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_database_basename": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_dirname": {"tf": 1}, "howard.objects.database.Database.exists": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_format": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_type": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_tables": {"tf": 1}, "howard.objects.database.Database.get_type_from_columns": {"tf": 2}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1.7320508075688772}, "howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.database.Database.get_view": {"tf": 1.4142135623730951}, "howard.objects.database.Database.is_compressed": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_columns": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_annotations": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1.4142135623730951}, "howard.objects.database.Database.export": {"tf": 3}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_samples": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.set_input": {"tf": 1}, "howard.objects.variants.Variants.set_param": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.set_output": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_input_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1}, "howard.objects.variants.Variants.get_output_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_length": {"tf": 1}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_output": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.get_threads": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_memory": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.scan_databases": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_config_default": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1.4142135623730951}, "howard.tools.help.help": {"tf": 1}}, "df": 112}, "s": {"docs": {"howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.format_arg_help": {"tf": 1}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.tools.help.help": {"tf": 1}}, "df": 12}, "r": {"docs": {"howard.functions.databases.databases_download_genomes": {"tf": 2}}, "df": 1, "s": {"docs": {"howard.functions.databases.databases_download_genomes": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 2}}}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.download_file": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.utils.cdna_to_protein": {"tf": 1.7320508075688772}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 2.449489742783178}, "howard.functions.utils.format_hgvs_name": {"tf": 2.8284271247461903}, "howard.objects.cdna.CDNACoord": {"tf": 1}, "howard.objects.hgvs": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 2.449489742783178}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 2.23606797749979}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 2.23606797749979}, "howard.objects.hgvs.HGVSName.format": {"tf": 2.449489742783178}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 2}}, "df": 11}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1}}, "df": 2}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.4142135623730951}}, "df": 2}}}, "y": {"docs": {"howard.functions.utils.matches_ref_allele": {"tf": 1}}, "df": 1}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.tools.gui.gui": {"tf": 1}}, "df": 4}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.objects.cdna.CDNACoord": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.variants.Variants.get_input_format": {"tf": 1}}, "df": 1}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}}, "df": 1, "s": {"docs": {"howard.objects.variants.Variants.prioritization": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {"howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1.4142135623730951}}, "df": 2, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"howard.functions.commons.find_file_prefix": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_annotation_format": {"tf": 2.23606797749979}, "howard.functions.commons.explode_snpeff_ann": {"tf": 2}, "howard.functions.databases.databases_download_refseq": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.7320508075688772}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.format_hgvs_name": {"tf": 2.23606797749979}, "howard.objects.database.Database.find_column": {"tf": 1.4142135623730951}, "howard.objects.hgvs": {"tf": 2.6457513110645907}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.parse": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 2.8284271247461903}, "howard.objects.hgvs.HGVSName.format": {"tf": 2}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 3.7416573867739413}, "howard.objects.variants.Variants.get_prefix": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 2.8284271247461903}, "howard.objects.variants.Variants.explode_infos": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.prioritization": {"tf": 2}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 2}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}}, "df": 20, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.database.Database.find_column": {"tf": 1.7320508075688772}, "howard.objects.database.Database.map_columns": {"tf": 2.449489742783178}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.databases.databases_param": {"tf": 2}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.genotypeconcordance": {"tf": 1}, "howard.functions.commons.get_threads": {"tf": 1}, "howard.functions.commons.get_memory": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_indexing": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1}}, "df": 14}, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}}, "df": 1}}}, "t": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.4142135623730951}}, "df": 2}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.objects.database.Database.set_header": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}}, "df": 2}}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 2.6457513110645907}}, "df": 1}}}}}, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.determine_column_types": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.databases.databases_download_alphamissense": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}}, "df": 1}}}}}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.databases.databases_param": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}}, "df": 2, "s": {"docs": {"howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}}, "df": 3}, "d": {"docs": {"howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.variants.Variants.prioritization": {"tf": 3}, "howard.objects.variants.Variants.calculation_transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 3}, "howard.tools.prioritization.prioritization": {"tf": 1}}, "df": 4, "s": {"docs": {"howard.objects.variants.Variants.get_config_default": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.tools.process.process": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}}, "y": {"docs": {"howard.functions.databases.databases_param": {"tf": 1}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.hgvs": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {"howard.objects.variant.NormalizedVariant.__init__": {"tf": 1.4142135623730951}}, "df": 1}}, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.variants.Variants.print_stats": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"howard.objects.variants.Variants.get_overview": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1}}, "df": 2}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.variants.Variants.print_stats": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.run_parallel_functions": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.extract_float_from_str": {"tf": 1.4142135623730951}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.objects.transcript.BED6Interval.distance": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 1}}, "df": 5}}}, "s": {"docs": {"howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 2}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1}}, "df": 3, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.get_compression_type": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.commons.detect_column_type": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1}}, "df": 10}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1.4142135623730951}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1.4142135623730951}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1.4142135623730951}, "howard.functions.utils.matches_ref_allele": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1.4142135623730951}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.cdna_to_protein": {"tf": 1.4142135623730951}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1.7320508075688772}, "howard.functions.utils.format_hgvs_name": {"tf": 2.23606797749979}, "howard.objects.cdna.CDNACoord": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 2.449489742783178}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.__init__": {"tf": 3.3166247903554}, "howard.objects.transcript.Transcript.strand": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.ordered_cdna_match": {"tf": 1}, "howard.objects.transcript.Transcript.start_codon": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.stop_codon": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 2}, "howard.objects.transcript.BED6Interval.distance": {"tf": 1.4142135623730951}, "howard.objects.transcript.Exon.__init__": {"tf": 2}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1.4142135623730951}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 2.449489742783178}, "howard.objects.transcript.CDNA_Match.length": {"tf": 1.4142135623730951}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 2.449489742783178}, "howard.objects.variant.Position": {"tf": 1}, "howard.objects.variant.get_sequence_from_position": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1.4142135623730951}}, "df": 37, "s": {"docs": {"howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1.4142135623730951}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 2.23606797749979}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.transcript.Transcript.get_cds_start_stop": {"tf": 1.4142135623730951}}, "df": 8}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.transcript.BED6Interval.distance": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.utils.get_refseq_table": {"tf": 1}}, "df": 1}}}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}}, "df": 4, "s": {"docs": {"howard.objects.variants.Variants.set_variant_id": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}}, "df": 3}}}}}}}}}, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "a": {"docs": {"howard.objects.cdna.CDNACoord": {"tf": 1}}, "df": 1}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "m": {"docs": {"howard.objects.hgvs.HGVSName.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.find_nomen": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.from_extann.extann_to_info": {"tf": 1}}, "df": 1, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.utils.hgvs_normalize_variant": {"tf": 1.4142135623730951}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}}, "df": 3, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1.4142135623730951}}, "df": 7}}}}, "s": {"docs": {"howard.functions.databases.query_and_concatenate_columns": {"tf": 1}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}, "howard.objects.variants.Variants.calculation_trio": {"tf": 1}, "howard.tools.annotation.annotation": {"tf": 1}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}, "howard.tools.process.process": {"tf": 1}}, "df": 11}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1.4142135623730951}}, "df": 4}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.variants.Variants.get_header_sample_list": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}}, "df": 1, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}}, "df": 1}}}}}}}, "p": {"docs": {"howard.objects.hgvs": {"tf": 2.449489742783178}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.4142135623730951}}, "df": 2, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs": {"tf": 2}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}}, "df": 2}}}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.get_memory": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {"howard.functions.from_extann.create_metaheader": {"tf": 1}}, "df": 1}}}}, "y": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "g": {"2": {"docs": {"howard.functions.utils.get_refseq_table": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}}}}, "v": {"docs": {"howard.objects.variants.Variants.export_output": {"tf": 1}}, "df": 1}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1}}, "df": 2}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1.4142135623730951}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.plugins.plugins_infos": {"tf": 1.7320508075688772}, "howard.functions.plugins.plugins_list": {"tf": 2.8284271247461903}, "howard.functions.plugins.plugins_to_load": {"tf": 1.7320508075688772}}, "df": 3, "s": {"docs": {"howard.functions.plugins.plugins_infos": {"tf": 4.123105625617661}, "howard.functions.plugins.plugins_list": {"tf": 4.69041575982343}, "howard.functions.plugins.plugins_to_load": {"tf": 3}}, "df": 3}}}}}}, "u": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.format_arg_help": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}}, "df": 2, "s": {"docs": {"howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}}, "df": 2}}}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs": {"tf": 1}}, "df": 1, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 2}}, "df": 1}, "i": {"docs": {}, "df": 0, "c": {"docs": {"howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.4142135623730951}}, "df": 1, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 1, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {"howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 1}}}}}}}}}}, "d": {"docs": {}, "df": 0, "f": {"docs": {"howard.functions.from_extann.metaheader_rows": {"tf": 1}}, "df": 1}}, "z": {"docs": {"howard.objects.variants.Variants.prioritization": {"tf": 2.23606797749979}}, "df": 1}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.remove_if_exists": {"tf": 1}, "howard.functions.commons.split_interval": {"tf": 1.4142135623730951}, "howard.functions.commons.merge_regions": {"tf": 2}, "howard.functions.commons.create_where_clause": {"tf": 1.4142135623730951}, "howard.functions.commons.run_parallel_commands": {"tf": 1.7320508075688772}, "howard.functions.commons.run_parallel_functions": {"tf": 1.7320508075688772}, "howard.functions.commons.example_function": {"tf": 1}, "howard.functions.commons.find_all": {"tf": 2}, "howard.functions.commons.find_nomen": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_annotation_format": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.get_index": {"tf": 2.6457513110645907}, "howard.functions.commons.findbypipeline": {"tf": 2.23606797749979}, "howard.functions.commons.genotypeconcordance": {"tf": 1.4142135623730951}, "howard.functions.commons.barcode": {"tf": 1}, "howard.functions.commons.trio": {"tf": 1}, "howard.functions.commons.genotype_stats": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1.4142135623730951}, "howard.functions.commons.load_duckdb_extension": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.add_value_into_dict": {"tf": 2}, "howard.functions.commons.load_args": {"tf": 2.23606797749979}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.commons.identical": {"tf": 2}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.commons.determine_column_types": {"tf": 2.6457513110645907}, "howard.functions.commons.clean_annotation_field": {"tf": 2}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_annovar": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 2}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_extann.create_metaheader": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 2.23606797749979}, "howard.functions.plugins.plugins_to_load": {"tf": 1.7320508075688772}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 2.6457513110645907}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.database.Database.set_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_databases_folders": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_database_folders": {"tf": 1.7320508075688772}, "howard.objects.database.Database.read_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_from_list": {"tf": 2.6457513110645907}, "howard.objects.database.Database.get_header_from_file": {"tf": 2.6457513110645907}, "howard.objects.database.Database.get_header": {"tf": 2.6457513110645907}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 1}, "howard.objects.database.Database.get_database_tables": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_type_from_columns": {"tf": 2}, "howard.objects.database.Database.get_needed_columns": {"tf": 2}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1.7320508075688772}, "howard.objects.database.Database.find_column": {"tf": 1.7320508075688772}, "howard.objects.database.Database.map_columns": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_columns": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1.7320508075688772}, "howard.objects.database.Database.export": {"tf": 2.449489742783178}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.ordered_cdna_match": {"tf": 1.7320508075688772}, "howard.objects.transcript.Exon.__init__": {"tf": 1.4142135623730951}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.variant.normalize_variant": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_samples": {"tf": 2}, "howard.objects.variants.Variants.get_samples": {"tf": 1}, "howard.objects.variants.Variants.set_header": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_type": {"tf": 1}, "howard.objects.variants.Variants.get_header": {"tf": 1}, "howard.objects.variants.Variants.get_header_infos_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_length": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_header_columns": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_columns_as_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_columns_as_sql": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 3.605551275463989}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.explode_infos": {"tf": 2}, "howard.objects.variants.Variants.read_vcf_header": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 2}, "howard.objects.variants.Variants.run_commands": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.scan_databases": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 2}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1.7320508075688772}}, "df": 104, "s": {"docs": {"howard.functions.commons.find_all": {"tf": 1.4142135623730951}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}}, "df": 6}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.database.Database.export": {"tf": 1}}, "df": 1}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1.4142135623730951}, "howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.from_extann.write_extann": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 2}, "howard.objects.hgvs": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}}, "df": 14, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1.4142135623730951}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.tools.annotation.annotation": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}, "howard.tools.query.query": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}}, "df": 11}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation": {"tf": 1.7320508075688772}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.identical": {"tf": 2.6457513110645907}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 3.1622776601683795}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.objects.database.Database.get_header_length": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 2.8284271247461903}, "howard.objects.variants.Variants.get_header_length": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_header_columns_as_sql": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 2}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.gui.gui": {"tf": 1}, "howard.tools.help.help": {"tf": 1.7320508075688772}, "howard.tools.hgvs.hgvs": {"tf": 1.4142135623730951}, "howard.tools.prioritization.prioritization": {"tf": 1}, "howard.tools.query.query": {"tf": 1}}, "df": 22, "s": {"docs": {"howard.functions.commons.transcripts_file_to_df": {"tf": 1.4142135623730951}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.objects.database.Database.read_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_from_list": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_header": {"tf": 1}}, "df": 10}}, "k": {"docs": {"howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.objects.database.Database.get_sql_database_link": {"tf": 2.23606797749979}, "howard.objects.database.Database.create_view": {"tf": 1}}, "df": 3, "s": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}}, "df": 1}}}, "b": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.get_argument_gooey": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_config": {"tf": 1}, "howard.tools.gui.gui": {"tf": 1}}, "df": 3}}}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_config": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 2}}, "df": 3}}}}, "o": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.set_log_level": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}}, "df": 2, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.set_log_level": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}}, "df": 3}}}}, "s": {"docs": {"howard.tools.databases.databases": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "k": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.get_threads": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.find": {"tf": 1}, "howard.functions.commons.find_all": {"tf": 1}, "howard.functions.commons.find_file_prefix": {"tf": 1}}, "df": 3}}}, "s": {"docs": {"howard.functions.commons.get_tmp": {"tf": 1}, "howard.functions.commons.get_memory": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}}, "df": 3}, "u": {"docs": {}, "df": 0, "p": {"docs": {"howard.objects.genome.MockGenome.__init__": {"tf": 2}, "howard.objects.genome.MockGenome.read": {"tf": 1}, "howard.objects.genome.MockGenome.write": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 2}}, "df": 4}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1}}, "df": 3, "d": {"docs": {"howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.plugins.plugins_infos": {"tf": 1.4142135623730951}, "howard.functions.plugins.plugins_list": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.objects.cdna.CDNACoord": {"tf": 1.4142135623730951}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.database.Database.set_databases_folders": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1}}, "df": 18}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.add_value_into_dict": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}}, "df": 3, "s": {"docs": {"howard.tools.databases.databases": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {"howard.functions.commons.check_docker_image_exists": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.load_param": {"tf": 1.7320508075688772}, "howard.functions.commons.load_config_args": {"tf": 2}, "howard.functions.commons.load_args": {"tf": 3.1622776601683795}, "howard.functions.plugins.plugins_to_load": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.load_data": {"tf": 1}}, "df": 6, "s": {"docs": {"howard.functions.commons.load_duckdb_extension": {"tf": 1}, "howard.functions.commons.load_config_args": {"tf": 1}, "howard.functions.plugins.plugins_infos": {"tf": 1.4142135623730951}, "howard.functions.plugins.plugins_list": {"tf": 1}, "howard.main.main": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.process.process": {"tf": 1}, "howard.tools.query.query": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}}, "df": 10}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.load_duckdb_extension": {"tf": 1.7320508075688772}, "howard.functions.commons.load_param": {"tf": 1.4142135623730951}, "howard.functions.commons.load_args": {"tf": 1.4142135623730951}, "howard.functions.plugins.plugins_infos": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.load_data": {"tf": 1}}, "df": 5}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.variants.Variants.load_data": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.help_generation": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.from_extann.get_longest_transcript": {"tf": 1}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1}}, "df": 2}}}}}, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}}, "df": 2, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 3}}}}}}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.set_log_level": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_and_compress_files": {"tf": 2.449489742783178}, "howard.functions.commons.help_generation_from_dict": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 2}, "howard.objects.variants.Variants.export_output": {"tf": 1}}, "df": 9}}}, "n": {"docs": {"howard.objects.variants.Variants.insert_file_to_table": {"tf": 1.4142135623730951}}, "df": 1, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"howard.functions.commons.genotype_barcode": {"tf": 1.4142135623730951}, "howard.functions.commons.get_random": {"tf": 2}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.7320508075688772}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 2.449489742783178}, "howard.functions.utils.format_hgvs_name": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_header_length": {"tf": 2}, "howard.objects.transcript.Transcript.is_coding": {"tf": 1.4142135623730951}, "howard.objects.transcript.CDNA_Match.length": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_length": {"tf": 2}, "howard.objects.variants.Variants.get_header_columns": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_sql": {"tf": 1.4142135623730951}}, "df": 12, "s": {"docs": {"howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.get_random": {"tf": 1.7320508075688772}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.from_extann.get_gene_coordinate": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.identical": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.determine_value_type": {"tf": 1.4142135623730951}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.utils.hgvs_justify_indel": {"tf": 1.4142135623730951}}, "df": 1}}}}, "u": {"docs": {"howard.objects.hgvs": {"tf": 1}}, "df": 1}, "f": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 1.4142135623730951}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}}, "df": 3, "r": {"docs": {"howard.objects.variant.justify_indel": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.objects.hgvs": {"tf": 1}}, "df": 2}}}}}, "d": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {"howard.objects.cdna.CDNACoord.__init__": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"howard.objects.cdna.CDNACoord.__init__": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1}}, "df": 1}}}}, "z": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.utils.parse_hgvs_name": {"tf": 2}}, "df": 1}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}}, "df": 1}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.4142135623730951}}, "df": 1}}}}, "t": {"docs": {"howard.functions.commons.get_argument_to_mk": {"tf": 1}}, "df": 1}, "y": {"docs": {}, "df": 0, "s": {"7": {"6": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.hgvs": {"tf": 1}}, "df": 1}}}}, "docs": {}, "df": 0}, "docs": {"howard.objects.hgvs": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "f": {"docs": {"howard.functions.commons.remove_if_exists": {"tf": 1}, "howard.functions.commons.set_log_level": {"tf": 1.4142135623730951}, "howard.functions.commons.split_interval": {"tf": 2.449489742783178}, "howard.functions.commons.merge_regions": {"tf": 2.449489742783178}, "howard.functions.commons.create_where_clause": {"tf": 2}, "howard.functions.commons.command": {"tf": 1}, "howard.functions.commons.run_parallel_commands": {"tf": 2.23606797749979}, "howard.functions.commons.run_parallel_functions": {"tf": 2.449489742783178}, "howard.functions.commons.example_function": {"tf": 1}, "howard.functions.commons.find": {"tf": 1}, "howard.functions.commons.find_all": {"tf": 2.8284271247461903}, "howard.functions.commons.find_genome": {"tf": 1.4142135623730951}, "howard.functions.commons.find_file_prefix": {"tf": 1.4142135623730951}, "howard.functions.commons.find_nomen": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_annotation_format": {"tf": 1.7320508075688772}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1.7320508075688772}, "howard.functions.commons.get_index": {"tf": 2.449489742783178}, "howard.functions.commons.get_file_format": {"tf": 1.7320508075688772}, "howard.functions.commons.findbypipeline": {"tf": 2.6457513110645907}, "howard.functions.commons.genotypeconcordance": {"tf": 2}, "howard.functions.commons.genotype_compression": {"tf": 1}, "howard.functions.commons.genotype_barcode": {"tf": 1.4142135623730951}, "howard.functions.commons.barcode": {"tf": 1.7320508075688772}, "howard.functions.commons.trio": {"tf": 1.7320508075688772}, "howard.functions.commons.vaf_normalization": {"tf": 1.7320508075688772}, "howard.functions.commons.genotype_stats": {"tf": 2.6457513110645907}, "howard.functions.commons.extract_file": {"tf": 1.4142135623730951}, "howard.functions.commons.download_file": {"tf": 2.6457513110645907}, "howard.functions.commons.get_bin": {"tf": 1.7320508075688772}, "howard.functions.commons.get_bin_command": {"tf": 2.449489742783178}, "howard.functions.commons.get_tmp": {"tf": 2}, "howard.functions.commons.get_threads": {"tf": 2}, "howard.functions.commons.get_memory": {"tf": 1.7320508075688772}, "howard.functions.commons.extract_float_from_str": {"tf": 1}, "howard.functions.commons.extract_memory_in_go": {"tf": 1}, "howard.functions.commons.concat_file": {"tf": 1.7320508075688772}, "howard.functions.commons.compress_file": {"tf": 1.4142135623730951}, "howard.functions.commons.get_compression_type": {"tf": 1.4142135623730951}, "howard.functions.commons.get_file_compressed": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 2.23606797749979}, "howard.functions.commons.concat_and_compress_files": {"tf": 3.4641016151377544}, "howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1.7320508075688772}, "howard.functions.commons.load_duckdb_extension": {"tf": 1.4142135623730951}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.commons.genome_build_switch": {"tf": 1.4142135623730951}, "howard.functions.commons.get_argument": {"tf": 1.4142135623730951}, "howard.functions.commons.get_argument_gooey": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 2}, "howard.functions.commons.help_generation_from_dict": {"tf": 3.605551275463989}, "howard.functions.commons.help_generation_from_json": {"tf": 2.23606797749979}, "howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 2.23606797749979}, "howard.functions.commons.format_arg_help": {"tf": 1}, "howard.functions.commons.bed_sort": {"tf": 1}, "howard.functions.commons.full_path": {"tf": 1}, "howard.functions.commons.get_default_argument": {"tf": 2.449489742783178}, "howard.functions.commons.set_param": {"tf": 1.4142135623730951}, "howard.functions.commons.add_value_into_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1.7320508075688772}, "howard.functions.commons.get_random": {"tf": 2.6457513110645907}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.commons.identical": {"tf": 2.23606797749979}, "howard.functions.commons.params_string_to_dict": {"tf": 1.7320508075688772}, "howard.functions.commons.determine_value_type": {"tf": 2.23606797749979}, "howard.functions.commons.determine_column_types": {"tf": 2.23606797749979}, "howard.functions.commons.detect_column_type": {"tf": 1.4142135623730951}, "howard.functions.commons.clean_annotation_field": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 2.449489742783178}, "howard.functions.databases.databases_param": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_annovar": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_snpeff": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_genomes": {"tf": 2.449489742783178}, "howard.functions.databases.databases_download_refseq": {"tf": 3.3166247903554}, "howard.functions.databases.databases_format_refseq": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 3.4641016151377544}, "howard.functions.databases.databases_download_alphamissense": {"tf": 2}, "howard.functions.databases.databases_download_exomiser": {"tf": 3.1622776601683795}, "howard.functions.databases.databases_download_dbsnp": {"tf": 2.6457513110645907}, "howard.functions.databases.databases_download_hgmd": {"tf": 2.23606797749979}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 3.3166247903554}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 2}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 2}, "howard.functions.from_extann.create_metaheader": {"tf": 1.7320508075688772}, "howard.functions.from_extann.metaheader_rows": {"tf": 1}, "howard.functions.from_extann.extann_to_info": {"tf": 1.4142135623730951}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}, "howard.functions.plugins.plugins_infos": {"tf": 1.4142135623730951}, "howard.functions.plugins.plugins_list": {"tf": 2}, "howard.functions.plugins.plugins_to_load": {"tf": 1.7320508075688772}, "howard.functions.utils.read_refgene": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 2}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 3.3166247903554}, "howard.functions.utils.read_transcripts": {"tf": 1.4142135623730951}, "howard.functions.utils.get_genomic_sequence": {"tf": 2}, "howard.functions.utils.get_vcf_allele": {"tf": 1.4142135623730951}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 2.23606797749979}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1.4142135623730951}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.7320508075688772}, "howard.functions.utils.cdna_to_protein": {"tf": 2.23606797749979}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 3.4641016151377544}, "howard.functions.utils.format_hgvs_name": {"tf": 3.1622776601683795}, "howard.functions.utils.create_refseq_table": {"tf": 1.4142135623730951}, "howard.functions.utils.get_refseq_table": {"tf": 2.23606797749979}, "howard.functions.utils.get_transcript": {"tf": 1.4142135623730951}, "howard.objects.cdna.CDNACoord": {"tf": 3}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 3}, "howard.objects.database.Database.set_database": {"tf": 2.6457513110645907}, "howard.objects.database.Database.set_databases_folders": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_database_folders": {"tf": 1.4142135623730951}, "howard.objects.database.Database.read_header_file": {"tf": 2}, "howard.objects.database.Database.get_header_length": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header_from_list": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_header_from_columns": {"tf": 2}, "howard.objects.database.Database.query": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_header": {"tf": 2.449489742783178}, "howard.objects.database.Database.set_header_file": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_file": {"tf": 2}, "howard.objects.database.Database.set_assembly": {"tf": 2}, "howard.objects.database.Database.get_assembly": {"tf": 1.4142135623730951}, "howard.objects.database.Database.find_database": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_database": {"tf": 1}, "howard.objects.database.Database.get_database_basename": {"tf": 2}, "howard.objects.database.Database.get_database_dirname": {"tf": 1.4142135623730951}, "howard.objects.database.Database.exists": {"tf": 1}, "howard.objects.database.Database.set_format": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_format": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_type": {"tf": 2}, "howard.objects.database.Database.get_database_tables": {"tf": 2}, "howard.objects.database.Database.get_database_table": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_type_from_columns": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_needed_columns": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_sql_from": {"tf": 2}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1}, "howard.objects.database.Database.create_view": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_view": {"tf": 1.7320508075688772}, "howard.objects.database.Database.is_compressed": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1.7320508075688772}, "howard.objects.database.Database.find_column": {"tf": 2.449489742783178}, "howard.objects.database.Database.map_columns": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_columns": {"tf": 2}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 2}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 2}, "howard.objects.database.Database.get_annotations": {"tf": 2}, "howard.objects.database.Database.get_extra_columns": {"tf": 2.23606797749979}, "howard.objects.database.Database.is_vcf": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_conn": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 2.23606797749979}, "howard.objects.database.Database.export": {"tf": 4.123105625617661}, "howard.objects.genome.ChromosomeSubset": {"tf": 1}, "howard.objects.genome.GenomeSubset": {"tf": 1.4142135623730951}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 4.69041575982343}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 2}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 2}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 3.605551275463989}, "howard.objects.transcript.Transcript.full_name": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.strand": {"tf": 1}, "howard.objects.transcript.Transcript.ordered_cdna_match": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.get_cds_start_stop": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.start_codon": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.stop_codon": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval.__init__": {"tf": 1}, "howard.objects.transcript.Exon.__init__": {"tf": 2}, "howard.objects.transcript.Exon.name": {"tf": 1.7320508075688772}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 2.8284271247461903}, "howard.objects.transcript.CDNA_Match.length": {"tf": 1.4142135623730951}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1.4142135623730951}, "howard.objects.variant.justify_indel": {"tf": 1}, "howard.objects.variant.justify_genomic_indel": {"tf": 1}, "howard.objects.variant.normalize_variant": {"tf": 1.4142135623730951}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.__init__": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_samples": {"tf": 2}, "howard.objects.variants.Variants.get_samples": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_input": {"tf": 1}, "howard.objects.variants.Variants.set_param": {"tf": 1}, "howard.objects.variants.Variants.init_variables": {"tf": 1}, "howard.objects.variants.Variants.get_indexing": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_connexion_config": {"tf": 1}, "howard.objects.variants.Variants.set_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.set_output": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_header": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_overview": {"tf": 1}, "howard.objects.variants.Variants.get_stats": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_input": {"tf": 1}, "howard.objects.variants.Variants.get_input_format": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_output": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_output_format": {"tf": 2}, "howard.objects.variants.Variants.get_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.get_prefix": {"tf": 1}, "howard.objects.variants.Variants.get_table_variants": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_tmp_dir": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_type": {"tf": 1}, "howard.objects.variants.Variants.get_header": {"tf": 2}, "howard.objects.variants.Variants.get_header_infos_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_length": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_header_columns": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_columns_as_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_columns_as_sql": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 2}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_verbose": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_connexion_format": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.load_data": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.add_column": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.drop_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.explode_infos": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.read_vcf_header": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}, "howard.objects.variants.Variants.execute_query": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 2}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.export_header": {"tf": 2}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.run_commands": {"tf": 2}, "howard.objects.variants.Variants.get_threads": {"tf": 2}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.scan_databases": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_snpsift": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_bcftools": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_snpeff": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_parquet": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_splice": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_config_json": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.prioritization": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}, "howard.objects.variants.Variants.calculation_variant_id": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_nomen": {"tf": 1}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}, "howard.objects.variants.Variants.calculation_trio": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 2}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 2}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 2}, "howard.tools.databases.databases": {"tf": 1.4142135623730951}, "howard.tools.gui.gui": {"tf": 1}, "howard.tools.help.help": {"tf": 1.4142135623730951}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1.4142135623730951}, "howard.tools.stats.stats": {"tf": 1}}, "df": 293, "f": {"docs": {"howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.utils.hgvs_justify_dup": {"tf": 1.7320508075688772}, "howard.functions.utils.hgvs_justify_indel": {"tf": 2.23606797749979}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 2}, "howard.functions.utils.cdna_to_protein": {"tf": 1.4142135623730951}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1.7320508075688772}, "howard.functions.utils.format_hgvs_name": {"tf": 1.7320508075688772}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 2}, "howard.objects.hgvs": {"tf": 2}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 1.4142135623730951}, "howard.objects.transcript.BED6Interval.distance": {"tf": 3}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 2.23606797749979}, "howard.objects.variant.normalize_variant": {"tf": 1}}, "df": 13}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.database.Database.get_columns": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {"howard.functions.commons.split_interval": {"tf": 1}, "howard.functions.commons.find_genome": {"tf": 1}, "howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1.4142135623730951}, "howard.functions.commons.get_index": {"tf": 1}, "howard.functions.commons.genotypeconcordance": {"tf": 1.7320508075688772}, "howard.functions.commons.genotype_barcode": {"tf": 1.4142135623730951}, "howard.functions.commons.trio": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_file": {"tf": 1.4142135623730951}, "howard.functions.commons.get_bin": {"tf": 1.7320508075688772}, "howard.functions.commons.get_bin_command": {"tf": 2.8284271247461903}, "howard.functions.commons.get_tmp": {"tf": 1.7320508075688772}, "howard.functions.commons.get_memory": {"tf": 1}, "howard.functions.commons.extract_memory_in_go": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_and_compress_files": {"tf": 2}, "howard.functions.commons.load_duckdb_extension": {"tf": 1}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.commons.genome_build_switch": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1.7320508075688772}, "howard.functions.commons.get_argument_to_mk": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation_from_dict": {"tf": 2.6457513110645907}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.format_arg_help": {"tf": 1.7320508075688772}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_param": {"tf": 1.4142135623730951}, "howard.functions.commons.load_args": {"tf": 1.4142135623730951}, "howard.functions.commons.determine_value_type": {"tf": 1.7320508075688772}, "howard.functions.commons.detect_column_type": {"tf": 1.4142135623730951}, "howard.functions.commons.clean_annotation_field": {"tf": 1.4142135623730951}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_genomes": {"tf": 2}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_exomiser": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_hgmd": {"tf": 1.7320508075688772}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1.4142135623730951}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 2}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1.4142135623730951}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.7320508075688772}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 2.449489742783178}, "howard.functions.utils.format_hgvs_name": {"tf": 1.7320508075688772}, "howard.functions.utils.create_refseq_table": {"tf": 1.4142135623730951}, "howard.functions.utils.get_refseq_table": {"tf": 1.4142135623730951}, "howard.objects.cdna.CDNACoord": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_database": {"tf": 1}, "howard.objects.database.Database.get_header_length": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1.7320508075688772}, "howard.objects.database.Database.find_header_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_assembly": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_dirname": {"tf": 1}, "howard.objects.database.Database.exists": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_format": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_type": {"tf": 2}, "howard.objects.database.Database.get_database_tables": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_table": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 2}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1}, "howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.database.Database.get_view": {"tf": 1}, "howard.objects.database.Database.is_compressed": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1.4142135623730951}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 2}, "howard.objects.database.Database.get_annotations": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 2.8284271247461903}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenome.read": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 3.4641016151377544}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval.distance": {"tf": 1}, "howard.objects.transcript.Exon.__init__": {"tf": 1.7320508075688772}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1.4142135623730951}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_samples": {"tf": 1}, "howard.objects.variants.Variants.get_duckdb_settings": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.set_output": {"tf": 1}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_output_format": {"tf": 1}, "howard.objects.variants.Variants.get_table_variants": {"tf": 1}, "howard.objects.variants.Variants.get_tmp_dir": {"tf": 1}, "howard.objects.variants.Variants.get_verbose": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_output": {"tf": 2}, "howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_threads": {"tf": 1}, "howard.objects.variants.Variants.get_memory": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 2}, "howard.objects.variants.Variants.get_config_json": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 2}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1.4142135623730951}, "howard.tools.annotation.annotation": {"tf": 1.4142135623730951}, "howard.tools.databases.databases": {"tf": 2}, "howard.tools.stats.stats": {"tf": 1.4142135623730951}, "howard.tools.tools.PathType.__init__": {"tf": 1}}, "df": 144, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}}, "df": 3, "d": {"docs": {"howard.functions.commons.help_generation_from_json": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 1}}, "df": 1}}}}}}}}}, "/": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.databases.databases_download_annovar": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.bed_sort": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_output": {"tf": 1.4142135623730951}}, "df": 5, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1.7320508075688772}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.transcript.Transcript.ordered_cdna_match": {"tf": 1}}, "df": 3}}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.utils.hgvs_justify_indel": {"tf": 1}}, "df": 1}}}}}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}}, "df": 2}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.databases.databases_param": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}}, "df": 2, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.merge_regions": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.get_config_json": {"tf": 1}}, "df": 1, "s": {"docs": {"howard.objects.variants.Variants.get_config_json": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.variants.Variants.get_config_json": {"tf": 1}}, "df": 1}}}}}}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.get_memory": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}}, "df": 3, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.create_where_clause": {"tf": 1}, "howard.functions.commons.find_nomen": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.get_index": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1.4142135623730951}, "howard.functions.commons.get_tmp": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.format_arg_help": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1.4142135623730951}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1.4142135623730951}, "howard.functions.utils.get_vcf_allele": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 2.449489742783178}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 2}, "howard.functions.utils.format_hgvs_name": {"tf": 3}, "howard.objects.database.Database.__init__": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_length": {"tf": 1}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_format": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1}, "howard.objects.database.Database.get_view": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1.4142135623730951}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1.7320508075688772}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}, "howard.objects.variants.Variants.get_table_variants": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header": {"tf": 1}, "howard.objects.variants.Variants.get_header_length": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.run_commands": {"tf": 1}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}}, "df": 47, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 2.23606797749979}, "howard.functions.commons.get_argument_gooey": {"tf": 1.4142135623730951}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.load_data": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}}, "df": 15}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.determine_column_types": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.database.Database.export": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.calculation": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 2.8284271247461903}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 8, "s": {"docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation": {"tf": 1}}, "df": 3}}}}}}}, "n": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.databases.databases_download_annovar": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.concat_into_infile": {"tf": 1.4142135623730951}, "howard.functions.commons.load_duckdb_extension": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.load_config_args": {"tf": 1.4142135623730951}, "howard.functions.commons.load_args": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_param": {"tf": 1.7320508075688772}, "howard.functions.from_annovar.from_annovar": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.make_transcript": {"tf": 2}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1.4142135623730951}, "howard.functions.utils.parse_hgvs_name": {"tf": 2}, "howard.functions.utils.cdna_to_protein": {"tf": 1.7320508075688772}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 2}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.functions.utils.create_refseq_table": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_database": {"tf": 1}, "howard.objects.database.Database.set_databases_folders": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_header": {"tf": 1.7320508075688772}, "howard.objects.database.Database.set_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_assembly": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_assembly": {"tf": 1}, "howard.objects.database.Database.get_database": {"tf": 1}, "howard.objects.database.Database.set_format": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_conn": {"tf": 1}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.full_name": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1}, "howard.objects.transcript.Exon.__init__": {"tf": 1.4142135623730951}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1.4142135623730951}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1.4142135623730951}, "howard.objects.variant.normalize_variant": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_samples": {"tf": 1}, "howard.objects.variants.Variants.get_samples": {"tf": 1}, "howard.objects.variants.Variants.set_config": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.set_param": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_duckdb_settings": {"tf": 1}, "howard.objects.variants.Variants.set_header": {"tf": 1}, "howard.objects.variants.Variants.get_overview": {"tf": 1}, "howard.objects.variants.Variants.get_stats": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.get_prefix": {"tf": 1}, "howard.objects.variants.Variants.get_table_variants": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_connexion": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_connexion_format": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.tools.annotation.annotation": {"tf": 1}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}, "howard.tools.gui.gui": {"tf": 1}, "howard.tools.help.help": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}, "howard.tools.process.process": {"tf": 1.4142135623730951}, "howard.tools.query.query": {"tf": 1.4142135623730951}, "howard.tools.stats.stats": {"tf": 1}}, "df": 79, "s": {"docs": {"howard.functions.commons.run_parallel_functions": {"tf": 1}, "howard.objects.transcript.Transcript.ordered_cdna_match": {"tf": 1.4142135623730951}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}}, "df": 3}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.get_duckdb_extension_file": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_format": {"tf": 1}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.database.Database.get_annotations": {"tf": 1}, "howard.objects.variants.Variants.get_output_format": {"tf": 1}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}}, "df": 10}}}}}}}, "s": {"docs": {"howard.functions.commons.find_all": {"tf": 1}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.full_path": {"tf": 1}, "howard.objects.database.Database.get_database_basename": {"tf": 1}, "howard.objects.database.Database.exists": {"tf": 1}}, "df": 5}, "n": {"docs": {"howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 1.7320508075688772}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1.7320508075688772}, "howard.functions.commons.genotypeconcordance": {"tf": 1}, "howard.functions.commons.genotype_barcode": {"tf": 1.4142135623730951}, "howard.functions.commons.barcode": {"tf": 1.4142135623730951}, "howard.functions.commons.trio": {"tf": 1}, "howard.functions.commons.genotype_stats": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 2.23606797749979}, "howard.functions.commons.get_threads": {"tf": 1.4142135623730951}, "howard.functions.commons.get_memory": {"tf": 1.7320508075688772}, "howard.functions.commons.extract_memory_in_go": {"tf": 1}, "howard.functions.commons.get_compression_type": {"tf": 1}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 2}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.bed_sort": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 2}, "howard.functions.commons.add_value_into_dict": {"tf": 1.7320508075688772}, "howard.functions.commons.load_args": {"tf": 1.4142135623730951}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.commons.determine_column_types": {"tf": 1.4142135623730951}, "howard.functions.commons.detect_column_type": {"tf": 1.4142135623730951}, "howard.functions.databases.generate_databases_param": {"tf": 1.4142135623730951}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 2.449489742783178}, "howard.functions.databases.databases_download_exomiser": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1.4142135623730951}, "howard.functions.plugins.plugins_to_load": {"tf": 1.7320508075688772}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1.4142135623730951}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 2}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header_from_columns": {"tf": 2}, "howard.objects.database.Database.query": {"tf": 1.7320508075688772}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_type": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_from": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 2}, "howard.objects.database.Database.is_genotype_column": {"tf": 1.4142135623730951}, "howard.objects.database.Database.export": {"tf": 2.23606797749979}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.strand": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.ordered_cdna_match": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_param": {"tf": 1}, "howard.objects.variants.Variants.set_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.set_output": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.get_tmp_dir": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}, "howard.objects.variants.Variants.create_indexes": {"tf": 1}, "howard.objects.variants.Variants.drop_indexes": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.scan_databases": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_trio": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.4142135623730951}, "howard.tools.annotation.annotation": {"tf": 1.4142135623730951}, "howard.tools.calculation.calculation": {"tf": 1.4142135623730951}, "howard.tools.help.help": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1.4142135623730951}, "howard.tools.query.query": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}}, "df": 106, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1.4142135623730951}, "howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.commons.clean_annotation_field": {"tf": 1}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.database.Database.set_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.find_database": {"tf": 1}, "howard.objects.database.Database.map_columns": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1.4142135623730951}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 2}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1}}, "df": 21}}, "e": {"docs": {"howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.from_extann.get_longest_transcript": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.cdna.CDNACoord": {"tf": 1}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.map_columns": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}}, "df": 18, "s": {"docs": {"howard.functions.utils.read_refgene": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}}, "df": 2}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.params_string_to_dict": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"3": {"docs": {"howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.transcripts_file_to_df": {"tf": 1.4142135623730951}}, "df": 1, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 2.8284271247461903}, "howard.functions.commons.explode_snpeff_ann": {"tf": 3}, "howard.functions.commons.download_file": {"tf": 1.7320508075688772}, "howard.functions.commons.concat_file": {"tf": 2.23606797749979}, "howard.functions.commons.compress_file": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_into_infile": {"tf": 1.7320508075688772}, "howard.functions.commons.concat_and_compress_files": {"tf": 3.4641016151377544}, "howard.functions.commons.get_argument_to_mk": {"tf": 2}, "howard.functions.commons.help_generation_from_dict": {"tf": 2.8284271247461903}, "howard.functions.commons.help_generation_from_json": {"tf": 2.23606797749979}, "howard.functions.commons.help_generation": {"tf": 2}, "howard.functions.commons.bed_sort": {"tf": 2}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_param": {"tf": 2.6457513110645907}, "howard.functions.databases.databases_download_refseq": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_format_refseq": {"tf": 3.7416573867739413}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1.7320508075688772}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 3}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 2.6457513110645907}, "howard.objects.database.Database.export": {"tf": 5.291502622129181}, "howard.objects.hgvs.HGVSName.format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.__init__": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.set_output": {"tf": 3.3166247903554}, "howard.objects.variants.Variants.get_overview": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 2}, "howard.objects.variants.Variants.get_output": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_output_format": {"tf": 3}, "howard.objects.variants.Variants.export_output": {"tf": 3.7416573867739413}, "howard.objects.variants.Variants.export_header": {"tf": 3}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 3}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 3.1622776601683795}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.4142135623730951}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}, "howard.tools.process.process": {"tf": 1.4142135623730951}}, "df": 42, "s": {"docs": {"howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}}, "df": 2}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 1}}}}}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.transcript.Exon.get_as_interval": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1.4142135623730951}, "howard.functions.commons.get_bin_command": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.clean_annotation_field": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.utils.read_transcripts": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}}, "df": 20, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.genome_build_switch": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.get_default_argument": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.commons.check_docker_image_exists": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.get_assembly": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 1}, "howard.objects.transcript.Transcript.full_name": {"tf": 1}, "howard.objects.transcript.Transcript.strand": {"tf": 1}, "howard.objects.transcript.BED6Interval.distance": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.get_memory": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf": {"tf": 1}}, "df": 20}}}}}}}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1.4142135623730951}}, "df": 2, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.get_index": {"tf": 1}, "howard.functions.commons.extract_float_from_str": {"tf": 1}}, "df": 2, "s": {"docs": {"howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {"howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.7320508075688772}}, "df": 4}}}}}, "w": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.databases.databases_download_refseq": {"tf": 1}}, "df": 1}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.database.Database.get_header_length": {"tf": 1}}, "df": 1}}}}}}, "k": {"docs": {"howard.tools.tools.PathType.__init__": {"tf": 1}}, "df": 1}}, "y": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {"howard.functions.commons.remove_if_exists": {"tf": 1}, "howard.functions.commons.find": {"tf": 1}, "howard.functions.commons.find_all": {"tf": 1}, "howard.functions.commons.find_genome": {"tf": 1}, "howard.functions.commons.find_file_prefix": {"tf": 1.4142135623730951}, "howard.functions.commons.find_nomen": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 2}, "howard.functions.commons.get_file_format": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1.7320508075688772}, "howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 2.23606797749979}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1.4142135623730951}, "howard.functions.commons.get_argument_gooey": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation_from_json": {"tf": 1.4142135623730951}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.determine_value_type": {"tf": 1.4142135623730951}, "howard.functions.commons.determine_column_types": {"tf": 2}, "howard.functions.commons.clean_annotation_field": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_snpeff": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_refseq": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.functions.utils.get_transcript": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.get_database_tables": {"tf": 1}, "howard.objects.database.Database.get_view": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.database.Database.map_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 2}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variants.Variants.set_config": {"tf": 1}, "howard.objects.variants.Variants.set_param": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.get_header": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 2}, "howard.objects.variants.Variants.add_column": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.drop_column": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.explode_infos": {"tf": 2}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 2}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 2}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 65, "r": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}}, "df": 5}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.find_all": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {"howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.4142135623730951}}, "df": 1}}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.remove_if_exists": {"tf": 1}, "howard.functions.commons.find_genome": {"tf": 1}, "howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.functions.commons.find_nomen": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.get_index": {"tf": 1}, "howard.functions.commons.get_file_format": {"tf": 1}, "howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1.4142135623730951}, "howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1.7320508075688772}, "howard.functions.commons.get_compression_type": {"tf": 1}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1.4142135623730951}, "howard.functions.commons.get_argument_gooey": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.commons.clean_annotation_field": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_snpeff": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.get_transcript": {"tf": 1}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1}, "howard.objects.database.Database.get_database_tables": {"tf": 1}, "howard.objects.database.Database.get_view": {"tf": 1}, "howard.objects.database.Database.map_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.get_header": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.drop_column": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.explode_infos": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}}, "df": 47}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.command": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "k": {"docs": {"howard.functions.commons.find_all": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"howard.functions.commons.find": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.utils.create_refseq_table": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.export": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.drop_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.tools.calculation.calculation": {"tf": 1}}, "df": 14}, "y": {"docs": {"howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.tools.help.help": {"tf": 1}}, "df": 2}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.merge_regions": {"tf": 1}, "howard.functions.commons.create_where_clause": {"tf": 1.4142135623730951}, "howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.functions.commons.findbypipeline": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.compress_file": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.bed_sort": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.clean_annotation_field": {"tf": 1}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_annovar": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_exomiser": {"tf": 2}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_hgmd": {"tf": 1.4142135623730951}, "howard.functions.plugins.plugins_infos": {"tf": 1.4142135623730951}, "howard.functions.plugins.plugins_list": {"tf": 1.4142135623730951}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1.4142135623730951}, "howard.functions.utils.read_transcripts": {"tf": 1}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.database.Database.set_database": {"tf": 1}, "howard.objects.database.Database.set_databases_folders": {"tf": 1.4142135623730951}, "howard.objects.database.Database.find_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 56}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.genotypeconcordance": {"tf": 1.4142135623730951}, "howard.functions.commons.download_file": {"tf": 2}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1.7320508075688772}, "howard.functions.commons.load_duckdb_extension": {"tf": 1.4142135623730951}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.7320508075688772}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 2.449489742783178}, "howard.functions.databases.databases_format_refseq": {"tf": 3}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 2.8284271247461903}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_hgmd": {"tf": 1.7320508075688772}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1.4142135623730951}, "howard.functions.plugins.plugins_to_load": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.7320508075688772}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.format_hgvs_name": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.exists": {"tf": 1}, "howard.objects.database.Database.is_compressed": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 2.449489742783178}, "howard.objects.hgvs.HGVSName.format": {"tf": 2.449489742783178}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 2.23606797749979}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.transcript.Transcript.is_coding": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.load_data": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.explode_infos": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.export_output": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.export_header": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.4142135623730951}, "howard.tools.tools.PathType.__init__": {"tf": 1}}, "df": 59}}}}, "n": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1.7320508075688772}, "howard.functions.commons.concat_into_infile": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_and_compress_files": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation_from_dict": {"tf": 2.23606797749979}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.database.Database.get_header_length": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 1.4142135623730951}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.set_config": {"tf": 1}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1}, "howard.objects.variants.Variants.get_output_format": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}, "howard.tools.calculation.calculation": {"tf": 1}}, "df": 33}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.get_index": {"tf": 1}, "howard.functions.commons.trio": {"tf": 1}, "howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1.7320508075688772}, "howard.functions.commons.get_bin_command": {"tf": 1.4142135623730951}, "howard.functions.commons.get_tmp": {"tf": 1}, "howard.functions.commons.get_threads": {"tf": 1}, "howard.functions.commons.get_memory": {"tf": 1}, "howard.functions.commons.get_compression_type": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 2}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.help_generation_from_json": {"tf": 1.7320508075688772}, "howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1.4142135623730951}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1.4142135623730951}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1.7320508075688772}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1.7320508075688772}, "howard.objects.database.Database.set_database": {"tf": 1}, "howard.objects.database.Database.set_databases_folders": {"tf": 1}, "howard.objects.database.Database.get_header_length": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.get_database_basename": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_tables": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.is_genotype_column": {"tf": 1.4142135623730951}, "howard.objects.database.Database.export": {"tf": 2}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.transcript.Transcript.stop_codon": {"tf": 1}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 1}, "howard.objects.transcript.BED6Interval.distance": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 1}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.drop_column": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}, "howard.tools.gui.gui": {"tf": 1}}, "df": 87}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.identical": {"tf": 1}}, "df": 1}}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.database.Database.__init__": {"tf": 1}, "howard.tools.annotation.annotation": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}}, "df": 3}}, "y": {"docs": {"howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"howard.functions.commons.merge_regions": {"tf": 1.4142135623730951}, "howard.functions.commons.create_where_clause": {"tf": 1.4142135623730951}, "howard.functions.commons.find": {"tf": 1}, "howard.functions.commons.find_all": {"tf": 1}, "howard.functions.commons.find_genome": {"tf": 1.4142135623730951}, "howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.functions.commons.find_nomen": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_annotation_format": {"tf": 1.7320508075688772}, "howard.functions.commons.get_index": {"tf": 1}, "howard.functions.commons.genotype_compression": {"tf": 1.4142135623730951}, "howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.get_tmp": {"tf": 1}, "howard.functions.commons.get_memory": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_memory_in_go": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.format_arg_help": {"tf": 1}, "howard.functions.commons.get_random": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.commons.check_docker_image_exists": {"tf": 1.7320508075688772}, "howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.from_annovar.from_annovar": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1.4142135623730951}, "howard.functions.plugins.plugins_to_load": {"tf": 1}, "howard.functions.utils.read_refgene": {"tf": 1.7320508075688772}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.create_refseq_table": {"tf": 1.4142135623730951}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.functions.utils.get_transcript": {"tf": 1.7320508075688772}, "howard.objects.database.Database.__init__": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_databases_folders": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1.7320508075688772}, "howard.objects.database.Database.map_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.is_coding": {"tf": 1}, "howard.objects.transcript.Exon.__init__": {"tf": 1}, "howard.objects.transcript.Exon.name": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_config": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.load_data": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_threads": {"tf": 1}, "howard.objects.variants.Variants.get_memory": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1}, "howard.objects.variants.Variants.annotation": {"tf": 1}, "howard.objects.variants.Variants.annotation_snpsift": {"tf": 1}, "howard.objects.variants.Variants.annotation_bcftools": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_snpeff": {"tf": 1}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_parquet": {"tf": 1}, "howard.objects.variants.Variants.annotation_splice": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}, "howard.objects.variants.Variants.calculation_variant_id": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 2}, "howard.tools.process.process": {"tf": 1}}, "df": 95, "i": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.get_tmp": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.plugins.plugins_infos": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1}, "howard.functions.plugins.plugins_to_load": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.objects.database.Database.find_header_file": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 1}, "howard.objects.transcript.BED6Interval.distance": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 1}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 23}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.utils.create_refseq_table": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_sql": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1.4142135623730951}, "howard.tools.databases.databases": {"tf": 1}}, "df": 7}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.find_nomen": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 2}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 2}, "howard.functions.commons.genotypeconcordance": {"tf": 1}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1.7320508075688772}, "howard.functions.commons.download_file": {"tf": 3.1622776601683795}, "howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1.4142135623730951}, "howard.functions.commons.get_tmp": {"tf": 1}, "howard.functions.commons.get_threads": {"tf": 1}, "howard.functions.commons.get_memory": {"tf": 1}, "howard.functions.commons.extract_memory_in_go": {"tf": 1}, "howard.functions.commons.concat_file": {"tf": 1.4142135623730951}, "howard.functions.commons.compress_file": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_and_compress_files": {"tf": 1.7320508075688772}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1.4142135623730951}, "howard.functions.commons.get_argument_to_mk": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation_from_dict": {"tf": 2.23606797749979}, "howard.functions.commons.help_generation_from_json": {"tf": 2.6457513110645907}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.format_arg_help": {"tf": 1}, "howard.functions.commons.bed_sort": {"tf": 1}, "howard.functions.commons.get_default_argument": {"tf": 1.4142135623730951}, "howard.functions.commons.set_param": {"tf": 1.4142135623730951}, "howard.functions.commons.load_config_args": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.get_random": {"tf": 1.4142135623730951}, "howard.functions.commons.identical": {"tf": 1.4142135623730951}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.commons.determine_column_types": {"tf": 1.4142135623730951}, "howard.functions.commons.clean_annotation_field": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_param": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_annovar": {"tf": 2}, "howard.functions.databases.databases_download_snpeff": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_genomes": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_refseq": {"tf": 4.123105625617661}, "howard.functions.databases.databases_format_refseq": {"tf": 4.242640687119285}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 3}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_exomiser": {"tf": 2.8284271247461903}, "howard.functions.databases.databases_download_dbsnp": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_hgmd": {"tf": 2.8284271247461903}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 3.1622776601683795}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1.4142135623730951}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1.4142135623730951}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1.4142135623730951}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 2.23606797749979}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.format_hgvs_name": {"tf": 3.4641016151377544}, "howard.functions.utils.create_refseq_table": {"tf": 1.7320508075688772}, "howard.functions.utils.get_refseq_table": {"tf": 1.7320508075688772}, "howard.objects.database.Database.__init__": {"tf": 2.6457513110645907}, "howard.objects.database.Database.set_database": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header_from_columns": {"tf": 2}, "howard.objects.database.Database.set_header": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 2.23606797749979}, "howard.objects.database.Database.find_database": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_database_basename": {"tf": 1}, "howard.objects.database.Database.get_database_dirname": {"tf": 1.7320508075688772}, "howard.objects.database.Database.exists": {"tf": 1}, "howard.objects.database.Database.set_format": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_tables": {"tf": 1}, "howard.objects.database.Database.get_database_table": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1.7320508075688772}, "howard.objects.database.Database.create_view": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_view": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1.7320508075688772}, "howard.objects.database.Database.map_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_columns": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_annotations": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 1.4142135623730951}, "howard.objects.database.Database.is_genotype_column": {"tf": 1.7320508075688772}, "howard.objects.database.Database.export": {"tf": 4.358898943540674}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format": {"tf": 3.3166247903554}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 3.1622776601683795}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1}, "howard.objects.variants.Variants.set_config": {"tf": 1}, "howard.objects.variants.Variants.init_variables": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_output_format": {"tf": 1}, "howard.objects.variants.Variants.get_table_variants": {"tf": 1}, "howard.objects.variants.Variants.get_header_length": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.load_data": {"tf": 2}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.explode_infos": {"tf": 3}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 3.1622776601683795}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 3.1622776601683795}, "howard.objects.variants.Variants.get_threads": {"tf": 1}, "howard.objects.variants.Variants.get_memory": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.scan_databases": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 2}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 3}}, "df": 146}}, "d": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.get_argument_gooey": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.example_function": {"tf": 2}}, "df": 1}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {"howard.functions.commons.get_index": {"tf": 1}, "howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.functions.commons.get_compression_type": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}}, "df": 4, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.load_duckdb_extension": {"tf": 1.4142135623730951}}, "df": 1}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}}, "df": 3}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.compress_file": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 2}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_header": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}}, "df": 8}}}, "e": {"docs": {"howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.from_extann.write_extann": {"tf": 1}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenome.write": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}}, "df": 5, "s": {"docs": {"howard.functions.commons.bed_sort": {"tf": 1}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1}}, "df": 3}, "n": {"docs": {"howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1}}, "df": 2}}}}}}}, "c": {"docs": {"howard.objects.hgvs": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 2.23606797749979}}, "df": 2, "h": {"docs": {"howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"howard.functions.commons.remove_if_exists": {"tf": 1}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 2.449489742783178}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.variants.Variants.get_samples_check": {"tf": 2}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 2.23606797749979}}, "df": 8, "s": {"docs": {"howard.functions.commons.find_genome": {"tf": 1}, "howard.functions.commons.genotypeconcordance": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.get_memory": {"tf": 1}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.commons.check_docker_image_exists": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.objects.database.Database.exists": {"tf": 1.4142135623730951}, "howard.objects.database.Database.is_compressed": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.transcript.Transcript.is_coding": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.calculation": {"tf": 1}}, "df": 19}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.get_file_compressed": {"tf": 1}, "howard.functions.commons.detect_column_type": {"tf": 1}, "howard.objects.database.Database.is_compressed": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1.4142135623730951}}, "df": 3}}}}}}, "r": {"1": {"docs": {"howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}}, "df": 2}, "2": {"docs": {"howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}}, "df": 2}, "docs": {"howard.functions.databases.databases_download_refseq": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_format_refseq": {"tf": 1.4142135623730951}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}}, "df": 3, "o": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.commons.merge_regions": {"tf": 1.4142135623730951}, "howard.functions.commons.create_where_clause": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1.7320508075688772}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1.4142135623730951}, "howard.functions.utils.cdna_to_protein": {"tf": 1.4142135623730951}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_file": {"tf": 1.4142135623730951}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1}, "howard.objects.transcript.Transcript.ordered_cdna_match": {"tf": 1}, "howard.objects.transcript.BED6Interval_base": {"tf": 1.7320508075688772}, "howard.objects.transcript.BED6Interval_base.__init__": {"tf": 1.7320508075688772}, "howard.objects.transcript.BED6Interval": {"tf": 1.7320508075688772}, "howard.objects.transcript.BED6Interval.__init__": {"tf": 1.7320508075688772}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1.4142135623730951}, "howard.objects.variant.normalize_variant": {"tf": 1}, "howard.objects.variants.Variants.get_header_length": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_header_columns_as_sql": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 2}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1}}, "df": 26, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.create_where_clause": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 2.23606797749979}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1.4142135623730951}, "howard.functions.utils.get_vcf_allele": {"tf": 1.4142135623730951}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1.7320508075688772}, "howard.functions.utils.hgvs_justify_indel": {"tf": 2.23606797749979}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1.4142135623730951}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.cdna_to_protein": {"tf": 1.4142135623730951}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.format_hgvs_name": {"tf": 2}, "howard.objects.genome.ChromosomeSubset": {"tf": 1}, "howard.objects.genome.MockGenome.get_seq": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.get_seq": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}}, "df": 23, "s": {"docs": {"howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_format_refseq": {"tf": 1.7320508075688772}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}}, "df": 4}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variant.normalize_variant": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {"howard.functions.databases.databases_download_refseq": {"tf": 2}, "howard.functions.databases.databases_format_refseq": {"tf": 1.7320508075688772}}, "df": 2, "t": {"docs": {"howard.functions.databases.databases_format_refseq": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1.4142135623730951}, "howard.objects.database.Database.export": {"tf": 1}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.clean_annotation_field": {"tf": 2}}, "df": 1, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.full_path": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1.7320508075688772}, "howard.functions.commons.clean_annotation_field": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1.7320508075688772}}, "df": 5, "s": {"docs": {"howard.functions.commons.genotype_compression": {"tf": 1.4142135623730951}, "howard.functions.commons.params_string_to_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.clean_annotation_field": {"tf": 2}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 5}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.databases.databases_download_genomes": {"tf": 1}}, "df": 1}}}}}}}}}}}, "[": {"1": {"docs": {"howard.functions.utils.read_genepred": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1.7320508075688772}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.hgvs": {"tf": 3.3166247903554}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.format": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 10, "d": {"docs": {"howard.objects.database.Database.set_format": {"tf": 1}}, "df": 1}, "s": {"docs": {"howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {"howard.functions.commons.download_file": {"tf": 1.7320508075688772}, "howard.objects.database.Database.export": {"tf": 2}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1.4142135623730951}}, "df": 4, "s": {"docs": {"howard.functions.commons.download_file": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1.7320508075688772}}, "df": 2, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.insert_file_to_table": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.split_interval": {"tf": 1}}, "df": 1, "s": {"docs": {"howard.functions.commons.split_interval": {"tf": 1.4142135623730951}}, "df": 1}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_database": {"tf": 1}, "howard.objects.database.Database.set_databases_folders": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_basename": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_dirname": {"tf": 1}, "howard.objects.database.Database.exists": {"tf": 1}, "howard.objects.database.Database.set_format": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_annotations": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.get_overview": {"tf": 1}, "howard.objects.variants.Variants.get_stats": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_threads": {"tf": 1}, "howard.objects.variants.Variants.scan_databases": {"tf": 1.4142135623730951}}, "df": 21, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.objects.hgvs": {"tf": 1}}, "df": 2}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.commons.get_memory": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 7, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}}, "df": 2}}}}, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}}, "df": 5, "d": {"docs": {"howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}}, "df": 2}}}}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 2}, "howard.functions.commons.determine_column_types": {"tf": 1.4142135623730951}, "howard.functions.commons.detect_column_type": {"tf": 2.6457513110645907}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 2.23606797749979}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.functions.from_extann.create_metaheader": {"tf": 1}, "howard.functions.utils.read_refgene": {"tf": 1.7320508075688772}, "howard.functions.utils.read_genepred": {"tf": 2.23606797749979}, "howard.objects.database.Database.__init__": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.find_column": {"tf": 4.242640687119285}, "howard.objects.database.Database.map_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_columns": {"tf": 3}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 3.872983346207417}, "howard.objects.database.Database.export": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 3.872983346207417}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 4}, "howard.objects.variants.Variants.drop_column": {"tf": 3.605551275463989}, "howard.objects.variants.Variants.explode_infos": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_variant_id": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 3.7416573867739413}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 4.898979485566356}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 3}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 2.23606797749979}}, "df": 41, "s": {"docs": {"howard.functions.commons.merge_regions": {"tf": 1.4142135623730951}, "howard.functions.commons.create_where_clause": {"tf": 1}, "howard.functions.commons.bed_sort": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1.4142135623730951}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1.7320508075688772}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 2}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_from_columns": {"tf": 3.4641016151377544}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_type": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_type_from_columns": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_needed_columns": {"tf": 3.1622776601683795}, "howard.objects.database.Database.find_column": {"tf": 2.23606797749979}, "howard.objects.database.Database.map_columns": {"tf": 3.3166247903554}, "howard.objects.database.Database.get_columns": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_extra_columns": {"tf": 3.605551275463989}, "howard.objects.database.Database.is_vcf": {"tf": 1.7320508075688772}, "howard.objects.database.Database.export": {"tf": 3}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 2}, "howard.objects.variants.Variants.explode_infos": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.export_output": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 5.196152422706632}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 3}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.4142135623730951}}, "df": 33}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.set_param": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {"howard.functions.from_extann.create_metaheader": {"tf": 1}}, "df": 1}}, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {"howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}}, "df": 2, "n": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.command": {"tf": 1.7320508075688772}, "howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 4.358898943540674}, "howard.functions.commons.get_argument_to_mk": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation": {"tf": 1.7320508075688772}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 2.23606797749979}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.gui.gui": {"tf": 1}, "howard.tools.help.help": {"tf": 1.7320508075688772}, "howard.tools.hgvs.hgvs": {"tf": 1.4142135623730951}, "howard.tools.prioritization.prioritization": {"tf": 1}, "howard.tools.query.query": {"tf": 1}}, "df": 15, "s": {"docs": {"howard.functions.commons.run_parallel_commands": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.run_commands": {"tf": 1.7320508075688772}}, "df": 2}}}, "s": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1}}, "df": 6}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.TimeoutException": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.4142135623730951}, "howard.objects.genome.MockGenomeError": {"tf": 1}}, "df": 3, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.databases.generate_databases_param": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.transcripts_file_to_df": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"howard.objects.variants.Variants.prioritization": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.genotype_compression": {"tf": 2}, "howard.functions.commons.genotype_barcode": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.compress_file": {"tf": 1.4142135623730951}, "howard.functions.commons.get_compression_type": {"tf": 1.7320508075688772}, "howard.functions.commons.get_file_compressed": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 2.23606797749979}, "howard.functions.commons.concat_and_compress_files": {"tf": 1.4142135623730951}, "howard.objects.database.Database.is_compressed": {"tf": 2}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 2}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}}, "df": 11}, "s": {"docs": {"howard.functions.commons.genotype_barcode": {"tf": 1}, "howard.functions.commons.compress_file": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}}, "df": 4}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.genotype_compression": {"tf": 1}, "howard.functions.commons.compress_file": {"tf": 1}, "howard.functions.commons.get_compression_type": {"tf": 2.449489742783178}, "howard.functions.commons.concat_into_infile": {"tf": 2.449489742783178}, "howard.functions.commons.concat_and_compress_files": {"tf": 3.872983346207417}, "howard.objects.database.Database.is_compressed": {"tf": 1.7320508075688772}, "howard.objects.database.Database.export": {"tf": 3.1622776601683795}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}}, "df": 8}}, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1}}, "df": 2}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"howard.objects.database.Database.export": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.genotype_stats": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"howard.functions.commons.genotype_stats": {"tf": 1}}, "df": 1}, "r": {"docs": {"howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}}, "df": 2}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.download_file": {"tf": 1}}, "df": 1, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.objects.transcript.Exon.get_as_interval": {"tf": 1}}, "df": 1}}, "d": {"docs": {"howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.variant.revcomp": {"tf": 1}}, "df": 3, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"howard.objects.hgvs.HGVSName.__init__": {"tf": 1}}, "df": 1}}}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.identical": {"tf": 1}}, "df": 1, "s": {"docs": {"howard.functions.commons.identical": {"tf": 1}}, "df": 1}, "d": {"docs": {"howard.functions.commons.identical": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.identical": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {"howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}}, "df": 7}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variant.normalize_variant": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.variants.Variants.get_config_json": {"tf": 1}}, "df": 1, "s": {"docs": {"howard.objects.hgvs.HGVSName.parse": {"tf": 1}}, "df": 1}}}}}}}, "/": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.download_file": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1.7320508075688772}}, "df": 1}, "s": {"docs": {"howard.objects.transcript.Exon.name": {"tf": 1.4142135623730951}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.hgvs.HGVSName.format_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.transcript.BED6Interval.distance": {"tf": 2}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.get_threads": {"tf": 1}, "howard.functions.commons.get_memory": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.load_config_args": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.plugins.plugins_to_load": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1.4142135623730951}}, "df": 11, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.find_all": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.findbypipeline": {"tf": 1}, "howard.functions.commons.genotypeconcordance": {"tf": 1}, "howard.functions.commons.barcode": {"tf": 1}, "howard.functions.commons.trio": {"tf": 1}, "howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.functions.commons.genotype_stats": {"tf": 1.4142135623730951}, "howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.commons.get_tmp": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1.7320508075688772}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.load_param": {"tf": 1.4142135623730951}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1.4142135623730951}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_param": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_extann.get_longest_transcript": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.functions.plugins.plugins_infos": {"tf": 1.7320508075688772}, "howard.functions.plugins.plugins_list": {"tf": 1.7320508075688772}, "howard.functions.plugins.plugins_to_load": {"tf": 1.4142135623730951}, "howard.functions.utils.read_refgene": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.create_refseq_table": {"tf": 1}, "howard.functions.utils.get_transcript": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_needed_columns": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.transcript.Transcript.get_cds_start_stop": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 1}, "howard.objects.variant.normalize_variant": {"tf": 1}, "howard.objects.variants.Variants.__init__": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_connexion_config": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_stats": {"tf": 1}, "howard.objects.variants.Variants.scan_databases": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_config_json": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}, "howard.tools.annotation.annotation": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}}, "df": 63}}}, "s": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.genotype_compression": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.get_tmp": {"tf": 1}, "howard.functions.commons.get_threads": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.format_arg_help": {"tf": 1}, "howard.functions.commons.bed_sort": {"tf": 1}, "howard.functions.commons.get_default_argument": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1.4142135623730951}, "howard.functions.commons.load_args": {"tf": 1.7320508075688772}, "howard.functions.commons.params_string_to_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.determine_value_type": {"tf": 2}, "howard.functions.commons.determine_column_types": {"tf": 1.7320508075688772}, "howard.functions.commons.clean_annotation_field": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.make_transcript": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.functions.utils.read_transcripts": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1.4142135623730951}, "howard.functions.utils.cdna_to_protein": {"tf": 1.4142135623730951}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_databases_folders": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 2}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.transcript.Exon.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_config": {"tf": 1}, "howard.objects.variants.Variants.drop_column": {"tf": 1}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1.4142135623730951}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.gui.gui": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}, "howard.tools.process.process": {"tf": 1}, "howard.tools.query.query": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}}, "df": 71}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.variants.Variants.print_stats": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.genotype_barcode": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.help_generation_from_json": {"tf": 2.8284271247461903}, "howard.functions.commons.help_generation": {"tf": 1}}, "df": 4, "s": {"docs": {"howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 2}, "howard.functions.commons.help_generation_from_json": {"tf": 1.4142135623730951}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}}, "df": 6}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.get_tmp": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 2}, "howard.tools.databases.databases": {"tf": 1}}, "df": 5}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.databases.databases_download_genomes": {"tf": 2}}, "df": 1, "s": {"docs": {"howard.functions.databases.databases_download_genomes": {"tf": 1.4142135623730951}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}}, "df": 3}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.find_nomen": {"tf": 1}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.4142135623730951}}, "df": 7, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.find_nomen": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1}}, "df": 4}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"howard.objects.hgvs.HGVSName.__init__": {"tf": null}, "howard.objects.transcript.Exon.__init__": {"tf": null}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.get_duckdb_extension_file": {"tf": 1}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1}}, "df": 4}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}}, "df": 5}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.get_random": {"tf": 1.4142135623730951}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "y": {"docs": {"howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 1}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"tf": 1.4142135623730951}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.objects.database.Database.map_columns": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1.4142135623730951}}, "df": 5}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.4142135623730951}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.genotypeconcordance": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_genotype_concordance": {"tf": 1.4142135623730951}}, "df": 2}}, "t": {"docs": {"howard.functions.commons.genotypeconcordance": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.databases.query_and_concatenate_columns": {"tf": 1}}, "df": 1, "s": {"docs": {"howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1}}, "df": 4}, "d": {"docs": {"howard.functions.commons.concat_file": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_into_infile": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1}}, "df": 4}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1}}, "df": 2}}}}}}}}}}, "n": {"docs": {"howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1.4142135623730951}, "howard.functions.commons.load_duckdb_extension": {"tf": 1}, "howard.functions.utils.create_refseq_table": {"tf": 1.4142135623730951}, "howard.functions.utils.get_refseq_table": {"tf": 1.4142135623730951}, "howard.objects.database.Database.__init__": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_conn": {"tf": 1}, "howard.objects.variants.Variants.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1.4142135623730951}}, "df": 8, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.utils.get_refseq_table": {"tf": 1.4142135623730951}, "howard.objects.database.Database.__init__": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1.7320508075688772}, "howard.functions.commons.load_duckdb_extension": {"tf": 1.4142135623730951}, "howard.functions.utils.create_refseq_table": {"tf": 1.4142135623730951}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}, "howard.objects.database.Database.map_columns": {"tf": 1}, "howard.objects.database.Database.get_conn": {"tf": 1}, "howard.objects.variants.Variants.__init__": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_config": {"tf": 1}, "howard.objects.variants.Variants.set_connexion_db": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_connexion": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.get_connexion": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.close_connexion": {"tf": 1.4142135623730951}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.process.process": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}}, "df": 19, "s": {"docs": {"howard.functions.commons.download_file": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.utils.get_refseq_table": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.database.Database.find_column": {"tf": 1}}, "df": 1}}, "s": {"docs": {"howard.objects.database.Database.get_columns": {"tf": 1}}, "df": 1}}}, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.variants.Variants.__init__": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_config": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_connexion_db": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_connexion": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_connexion_db": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_connexion_type": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_connexion_format": {"tf": 1.4142135623730951}}, "df": 7}}}}}}, "f": {"docs": {"howard.functions.from_extann.metaheader_rows": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.get_bin": {"tf": 1.4142135623730951}, "howard.functions.commons.get_bin_command": {"tf": 1.4142135623730951}, "howard.functions.commons.get_tmp": {"tf": 2.449489742783178}, "howard.functions.commons.get_threads": {"tf": 1.7320508075688772}, "howard.functions.commons.get_memory": {"tf": 2}, "howard.functions.commons.load_config_args": {"tf": 2}, "howard.functions.databases.databases_infos": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_snpeff": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_exomiser": {"tf": 1.7320508075688772}, "howard.functions.from_extann.create_metaheader": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.__init__": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_config": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.get_connexion_config": {"tf": 1}, "howard.objects.variants.Variants.set_output": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_overview": {"tf": 1}, "howard.objects.variants.Variants.get_config": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_verbose": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_memory": {"tf": 1}, "howard.objects.variants.Variants.annotation": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 2}, "howard.objects.variants.Variants.get_config_json": {"tf": 3.1622776601683795}, "howard.tools.process.process": {"tf": 1}}, "df": 24, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.get_bin": {"tf": 2.23606797749979}, "howard.functions.commons.get_bin_command": {"tf": 1.4142135623730951}, "howard.functions.commons.get_tmp": {"tf": 1.4142135623730951}, "howard.functions.commons.get_threads": {"tf": 1.4142135623730951}, "howard.functions.commons.get_memory": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_config_args": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.objects.variants.Variants.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_config": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_connexion_config": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_duckdb_settings": {"tf": 1}, "howard.objects.variants.Variants.get_tmp_dir": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_threads": {"tf": 1}, "howard.objects.variants.Variants.get_memory": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_config_default": {"tf": 2}, "howard.objects.variants.Variants.get_config_json": {"tf": 2.8284271247461903}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}, "howard.tools.help.help": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}}, "df": 25, "s": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}}, "df": 8}}}}}}, "e": {"docs": {"howard.tools.prioritization.prioritization": {"tf": 1}}, "df": 1, "d": {"docs": {"howard.objects.variants.Variants.prioritization": {"tf": 1}}, "df": 1}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}}, "df": 5, "s": {"docs": {"howard.functions.commons.extract_memory_in_go": {"tf": 1}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.from_annovar.from_annovar": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 15}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.databases.databases_download_alphamissense": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.databases.databases_download_hgmd": {"tf": 2}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}}, "df": 4}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.extract_memory_in_go": {"tf": 1}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 2}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 5}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.transcript.Exon.__init__": {"tf": 1}}, "df": 1}}}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.databases.databases_download_dbsnp": {"tf": 1}}, "df": 1}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.set_param": {"tf": 2}, "howard.functions.commons.load_args": {"tf": 1.4142135623730951}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.commons.detect_column_type": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 8}}}}}}}, "j": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.database.Database.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.extract_memory_in_go": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}}, "df": 5}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.utils.variant_to_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.format_hgvs_name": {"tf": 2}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.add_value_into_dict": {"tf": 1}}, "df": 2}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.get_argument_gooey": {"tf": 1}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.4142135623730951}, "howard.functions.plugins.plugins_infos": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1}, "howard.functions.plugins.plugins_to_load": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1.4142135623730951}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.format_hgvs_name": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_needed_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.map_columns": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}}, "df": 23}}}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.get_default_argument": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName": {"tf": 1}}, "df": 3, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}}, "df": 5}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.genotype_barcode": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 2.6457513110645907}, "howard.functions.commons.help_generation_from_json": {"tf": 2}, "howard.functions.commons.get_default_argument": {"tf": 1}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.database.Database.map_columns": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_input": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.tools.annotation.annotation": {"tf": 1}, "howard.tools.gui.gui": {"tf": 1}}, "df": 17, "/": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {"howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.databases.databases_download_refseq": {"tf": 2.23606797749979}, "howard.functions.databases.databases_format_refseq": {"tf": 2.23606797749979}, "howard.functions.utils.read_genepred": {"tf": 1.4142135623730951}, "howard.objects.cdna.CDNACoord": {"tf": 1.7320508075688772}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.is_coding": {"tf": 2}, "howard.objects.transcript.Transcript.get_cds_start_stop": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 2.6457513110645907}}, "df": 11}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.utils.cdna_to_protein": {"tf": 1.7320508075688772}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 2}, "howard.functions.utils.format_hgvs_name": {"tf": 1.7320508075688772}, "howard.objects.cdna.CDNACoord": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.__init__": {"tf": 2.8284271247461903}, "howard.objects.transcript.Transcript.start_codon": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.stop_codon": {"tf": 1.7320508075688772}}, "df": 7, "s": {"docs": {"howard.functions.utils.cdna_to_protein": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.cdna.CDNACoord.__init__": {"tf": 1.7320508075688772}, "howard.objects.hgvs": {"tf": 6.782329983125268}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1.7320508075688772}}, "df": 4, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.from_extann.get_longest_transcript": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1.7320508075688772}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1.4142135623730951}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 2}, "howard.objects.cdna.CDNACoord": {"tf": 1.4142135623730951}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1.7320508075688772}, "howard.objects.cdna.CDNACoord.parse": {"tf": 1}, "howard.objects.hgvs": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 2.23606797749979}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1.7320508075688772}, "howard.objects.variant.normalize_variant": {"tf": 1}}, "df": 16, "s": {"docs": {"howard.functions.from_extann.from_extann": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 2.23606797749979}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.genome.MockGenome.get_seq": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.get_seq": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 2}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 2}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1.7320508075688772}, "howard.objects.variant.get_sequence": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 1}, "howard.objects.variant.justify_genomic_indel": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}}, "df": 22}}}}}}, "s": {"docs": {"howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}}, "df": 6}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.create_where_clause": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_table_variants": {"tf": 1.4142135623730951}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1}, "howard.functions.commons.TimeoutException": {"tf": 1}, "howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 2}, "howard.objects.database.Database.set_format": {"tf": 1}, "howard.objects.genome.MockGenomeError": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.transcript.Exon.__init__": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_samples": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.set_input": {"tf": 1}, "howard.objects.variants.Variants.set_config": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.set_param": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.init_variables": {"tf": 1}, "howard.objects.variants.Variants.get_output_format": {"tf": 1}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1}}, "df": 20}}}, "i": {"docs": {"howard.functions.commons.get_bin": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.params_string_to_dict": {"tf": 1.7320508075688772}, "howard.tools.annotation.annotation": {"tf": 1}}, "df": 2, "s": {"docs": {"howard.functions.commons.params_string_to_dict": {"tf": 1}}, "df": 1}}, "n": {"docs": {"howard.functions.commons.clean_annotation_field": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.export_header": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.7320508075688772}}, "df": 5, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.clean_annotation_field": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.4142135623730951}}, "df": 4}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.clean_annotation_field": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}}, "df": 4}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.variants.Variants.close_connexion": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.process.process": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}}, "df": 4}, "d": {"docs": {"howard.objects.variants.Variants.close_connexion": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.create_where_clause": {"tf": 1}, "howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.genotype_barcode": {"tf": 1}, "howard.functions.commons.trio": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1.7320508075688772}, "howard.functions.commons.get_bin_command": {"tf": 2.23606797749979}, "howard.functions.commons.get_tmp": {"tf": 1.7320508075688772}, "howard.functions.commons.get_threads": {"tf": 1}, "howard.functions.commons.extract_memory_in_go": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1.4142135623730951}, "howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 2.449489742783178}, "howard.functions.databases.databases_download_exomiser": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_hgmd": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.7320508075688772}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1.4142135623730951}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1.7320508075688772}, "howard.objects.cdna.CDNACoord": {"tf": 1}, "howard.objects.database.Database.set_database": {"tf": 1}, "howard.objects.database.Database.get_header_length": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.query": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_format": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1.4142135623730951}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.is_vcf": {"tf": 1.4142135623730951}, "howard.objects.database.Database.export": {"tf": 2}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 2}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1.4142135623730951}}, "df": 68, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.extract_memory_in_go": {"tf": 1}, "howard.objects.database.Database.find_header_file": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.databases.databases_download_refseq": {"tf": 2.23606797749979}, "howard.functions.databases.databases_format_refseq": {"tf": 2.23606797749979}}, "df": 2}}}}}}}, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.genotypeconcordance": {"tf": 1}, "howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}}, "df": 4, "s": {"docs": {"howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.functions.commons.get_memory": {"tf": 1}, "howard.objects.transcript.BED6Interval.distance": {"tf": 1}, "howard.objects.transcript.CDNA_Match.length": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variants.Variants.get_stats": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_concordance": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}}, "df": 11}, "d": {"docs": {"howard.functions.commons.get_memory": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1.4142135623730951}, "howard.objects.transcript.CDNA_Match.length": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1.4142135623730951}}, "df": 6}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variants.Variants.calculation": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}, "howard.objects.variants.Variants.calculation_variant_id": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_genotype_concordance": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_trio": {"tf": 1}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_transcripts_prioritization": {"tf": 1}}, "df": 16, "s": {"docs": {"howard.objects.variants.Variants.get_config_default": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_trio": {"tf": 1}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.process.process": {"tf": 1.4142135623730951}}, "df": 4}, "/": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.variants.Variants.calculation_extract_nomen": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}}, "l": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_dirname": {"tf": 1}, "howard.objects.database.Database.exists": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1}, "howard.objects.database.Database.get_view": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.variants.Variants.set_config": {"tf": 1}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}}, "df": 15, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.utils.read_refgene": {"tf": 1}, "howard.objects.database.Database.get_header_length": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1}, "howard.objects.variants.Variants.get_output_format": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 14}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.objects.database.Database.find_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.get_view": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1}}, "df": 9}, "r": {"docs": {"howard.objects.variants.Variants.calculation_genotype_concordance": {"tf": 1}}, "df": 1}}, "s": {"docs": {"howard.objects.database.Database.is_compressed": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {"howard.functions.databases.databases_download_genomes": {"tf": 1}}, "df": 1}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.get_memory": {"tf": 1}, "howard.objects.variants.Variants.scan_databases": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 2}}, "df": 11, "s": {"docs": {"howard.objects.database.Database.get_columns": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.transcript.Exon.get_as_interval": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.concat_into_infile": {"tf": 1}}, "df": 1}}}}}}}}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 3.605551275463989}}, "df": 1}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.HGVSName.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.tools.tools.PathType.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.find_nomen": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.4142135623730951}, "howard.functions.from_extann.create_metaheader": {"tf": 1}, "howard.functions.from_extann.extann_to_info": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.functions.utils.create_refseq_table": {"tf": 1.4142135623730951}, "howard.functions.utils.get_refseq_table": {"tf": 1.4142135623730951}, "howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.database.Database.get_view": {"tf": 2}, "howard.objects.transcript.BED6Interval_base.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval.__init__": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.create_indexes": {"tf": 1}, "howard.objects.variants.Variants.drop_indexes": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 3}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 2.6457513110645907}}, "df": 23, "d": {"docs": {"howard.functions.commons.concat_file": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.functions.utils.create_refseq_table": {"tf": 1.4142135623730951}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.create_view": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.explode_infos": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_output": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.export_header": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 2}, "howard.tools.query.query": {"tf": 1}}, "df": 21}, "s": {"docs": {"howard.functions.utils.make_transcript": {"tf": 1}, "howard.functions.utils.create_refseq_table": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.database.Database.get_view": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_prioritization": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.process.process": {"tf": 1}}, "df": 11}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 5}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}}, "df": 2}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"howard.tools.databases.databases": {"tf": 1}}, "df": 1}}}}}}}}}, "u": {"docs": {}, "df": 0, "z": {"docs": {"howard.functions.databases.databases_download_genomes": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {"howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_prioritization": {"tf": 1}}, "df": 5}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1.4142135623730951}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.commons.detect_column_type": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1.4142135623730951}}, "df": 11}}}}}}, "f": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.load_config_args": {"tf": 1}}, "df": 1}}, "d": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.transcript.Transcript.__init__": {"tf": 2}, "howard.objects.transcript.Transcript.is_coding": {"tf": 1}, "howard.objects.transcript.Transcript.get_cds_start_stop": {"tf": 1.4142135623730951}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}}, "df": 4, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.utils.read_genepred": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.utils.read_genepred": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {"howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 3}, "howard.functions.utils.cdna_to_protein": {"tf": 1.7320508075688772}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.cdna.CDNACoord": {"tf": 1.4142135623730951}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1.7320508075688772}, "howard.objects.cdna.CDNACoord.parse": {"tf": 1}, "howard.objects.hgvs": {"tf": 4.69041575982343}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 2.449489742783178}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 2}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 2}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.__init__": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.ordered_cdna_match": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 2.23606797749979}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1.4142135623730951}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 3.605551275463989}, "howard.objects.transcript.CDNA_Match.length": {"tf": 1.4142135623730951}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 2}}, "df": 21, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.hgvs.HGVSName.__init__": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 1}}, "df": 2}}}}}}}}, "s": {"docs": {}, "df": 0, "v": {"docs": {"howard.objects.database.Database.get_format": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}}, "df": 3}}, "y": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.hgvs": {"tf": 1}}, "df": 1}}}, "m": {"1": {"8": {"5": {"docs": {"howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "2": {"5": {"0": {"docs": {"howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"howard.objects.cdna.CDNACoord": {"tf": 2.23606797749979}, "howard.objects.hgvs": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}}, "df": 3, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.set_log_level": {"tf": 1}, "howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.tools.gui.gui": {"tf": 1.4142135623730951}, "howard.tools.help.help": {"tf": 1}}, "df": 8, "s": {"docs": {"howard.functions.plugins.plugins_infos": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {"howard.functions.commons.get_argument_to_mk": {"tf": 2}, "howard.objects.database.Database.export": {"tf": 1.7320508075688772}}, "df": 2, "l": {"docs": {"howard.objects.variants.Variants.__init__": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"howard.objects.transcript": {"tf": 1}}, "df": 1}}, "s": {"docs": {"howard.objects.variants.Variants.prioritization": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.variants.Variants.export_header": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.variants.Variants.export_header": {"tf": 1}}, "df": 1}, "d": {"docs": {"howard.objects.variants.Variants.create_transcript_view": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 2}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}}, "df": 8}}, "c": {"docs": {}, "df": 0, "k": {"docs": {"howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.split_interval": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.utils.make_transcript": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 5}}, "x": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1.7320508075688772}, "howard.functions.utils.format_hgvs_name": {"tf": 1.7320508075688772}}, "df": 6, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}}, "df": 7}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.download_file": {"tf": 1.4142135623730951}}, "df": 1}}, "y": {"docs": {"howard.functions.commons.get_threads": {"tf": 1}, "howard.functions.commons.get_memory": {"tf": 1.4142135623730951}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.7320508075688772}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.plugins.plugins_to_load": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}}, "df": 10}, "n": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.from_extann.get_longest_transcript": {"tf": 1.4142135623730951}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}}, "df": 6}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.databases.databases_download_annovar": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {"howard.functions.from_extann.get_longest_transcript": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}}, "df": 2}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.variant": {"tf": 1}}, "df": 1}}}}}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.objects.variants.Variants.print_stats": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.get_argument_to_mk": {"tf": 1.7320508075688772}, "howard.functions.commons.help_generation_from_dict": {"tf": 2.23606797749979}, "howard.functions.commons.help_generation_from_json": {"tf": 1.7320508075688772}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1.4142135623730951}, "howard.tools.help.help": {"tf": 1}}, "df": 6}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.cdna.CDNACoord.__init__": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.4142135623730951}}, "df": 2, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}}, "df": 1}}}}}}}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 2.8284271247461903}, "howard.objects.transcript.Transcript.__init__": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.ordered_cdna_match": {"tf": 1.7320508075688772}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 2.449489742783178}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1.7320508075688772}, "howard.objects.variant.NormalizedVariant": {"tf": 1}, "howard.objects.variants.Variants.scan_databases": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 12, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.from_extann.get_all_transcript": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1.7320508075688772}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1}}, "df": 5}, "d": {"docs": {"howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {"howard.functions.from_extann.write_extann": {"tf": 1}}, "df": 1}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.objects.variants.Variants.calculation_process_sql": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}}, "df": 2}}}}}, "p": {"docs": {"howard.functions.databases.databases_download_dbsnp": {"tf": 1.4142135623730951}, "howard.objects.database.Database.map_columns": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 3.3166247903554}}, "df": 3, "s": {"docs": {"howard.functions.databases.databases_download_dbsnp": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.objects.database.Database.map_columns": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.7320508075688772}}, "df": 4}, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.plugins.plugins_infos": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}}, "df": 4}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {"howard.functions.commons.determine_column_types": {"tf": 1}}, "df": 1, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.merge_regions": {"tf": 1.4142135623730951}, "howard.functions.commons.create_where_clause": {"tf": 1.7320508075688772}}, "df": 2}, "s": {"docs": {"howard.functions.from_annovar.parquet_info_explode": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}}, "df": 2, "s": {"docs": {"howard.functions.commons.find_nomen": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_into_infile": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.objects.database.Database.get_header_length": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}}, "df": 12}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.set_format": {"tf": 1}, "howard.objects.variants.Variants.scan_databases": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}}, "df": 11}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}}, "df": 2}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.get_memory": {"tf": 3.872983346207417}, "howard.functions.commons.extract_memory_in_go": {"tf": 3.3166247903554}, "howard.functions.commons.concat_and_compress_files": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_refseq": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_hgmd": {"tf": 1.7320508075688772}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 3.1622776601683795}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.get_connexion_config": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.get_memory": {"tf": 2.6457513110645907}}, "df": 12}}}}, "t": {"docs": {"howard.objects.hgvs": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 2, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.format_arg_help": {"tf": 1}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 2}, "howard.objects.database.Database.set_database": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_database_folders": {"tf": 1}, "howard.objects.database.Database.get_header_length": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.find_header_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.query": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_header": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_assembly": {"tf": 1.4142135623730951}, "howard.objects.database.Database.find_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database": {"tf": 1}, "howard.objects.database.Database.get_database_basename": {"tf": 2}, "howard.objects.database.Database.get_database_dirname": {"tf": 1}, "howard.objects.database.Database.exists": {"tf": 1.7320508075688772}, "howard.objects.database.Database.set_format": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1.4142135623730951}, "howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.database.Database.get_view": {"tf": 2}, "howard.objects.database.Database.is_compressed": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1.4142135623730951}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.database.Database.map_columns": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1}, "howard.objects.database.Database.get_annotations": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_conn": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 2.23606797749979}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1}, "howard.objects.transcript.Transcript.stop_codon": {"tf": 1}, "howard.objects.variants.Variants.set_samples": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_samples": {"tf": 1}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_input": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_param": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_output": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_input_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_output_format": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_tmp_dir": {"tf": 1}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_threads": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.prioritization": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1.4142135623730951}}, "df": 66, "s": {"docs": {"howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"tf": 1}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.variant": {"tf": 1}}, "df": 8}}}}, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.get_argument_to_mk": {"tf": 1}}, "df": 1}}}}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"howard.functions.commons.help_generation": {"tf": 1}}, "df": 1}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.from_extann.create_metaheader": {"tf": 1}}, "df": 1}}}}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"tf": 1}, "howard.functions.commons.format_arg_help": {"tf": 2.6457513110645907}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1}}, "df": 3, "s": {"docs": {"howard.tools.gui.gui": {"tf": 1}, "howard.tools.help.help": {"tf": 1}}, "df": 2}}}}}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}}, "df": 2}}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {"howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.objects.hgvs": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_genotype_concordance": {"tf": 1}}, "df": 3, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.run_parallel_functions": {"tf": 1}}, "df": 1}}}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.4142135623730951}, "howard.main.main": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}}, "df": 15}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}}, "df": 1}}}}}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"howard.functions.commons.concat_into_infile": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1.4142135623730951}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1.4142135623730951}, "howard.functions.utils.cdna_to_protein": {"tf": 2.6457513110645907}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 4.58257569495584}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}}, "df": 15, "s": {"docs": {"howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}}, "df": 2}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.commons.genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}}, "df": 2}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.variants.Variants.get_header_length": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.get_default_argument": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {"howard.objects.hgvs": {"tf": 1.4142135623730951}}, "df": 1, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1.7320508075688772}, "howard.objects.hgvs": {"tf": 1}}, "df": 3}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.calculation": {"tf": 1}}, "df": 1}}}}, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.databases.databases": {"tf": 1}}, "df": 1}}}}, "y": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.download_file": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.utils.get_refseq_table": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {"howard.functions.commons.download_file": {"tf": 1.4142135623730951}}, "df": 1}, "k": {"docs": {"howard.functions.commons.get_argument_to_mk": {"tf": 2}}, "df": 1}, "d": {"docs": {"howard.objects.variants.Variants.print_stats": {"tf": 1}}, "df": 1, "#": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {"howard.objects.variants.Variants.prioritization": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.databases.databases_download_refseq": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_format_refseq": {"tf": 1.4142135623730951}}, "df": 2, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.set_log_level": {"tf": 1.4142135623730951}}, "df": 1}}}, "e": {"docs": {"howard.objects.variants.Variants.get_verbose": {"tf": 1.4142135623730951}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.find_file_prefix": {"tf": 1.4142135623730951}, "howard.functions.commons.genotype_compression": {"tf": 1}, "howard.functions.commons.genome_build_switch": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.full_path": {"tf": 1}, "howard.functions.commons.check_docker_image_exists": {"tf": 1}, "howard.functions.commons.clean_annotation_field": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_refseq": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_format_refseq": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_exomiser": {"tf": 2.6457513110645907}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.7320508075688772}, "howard.functions.utils.format_hgvs_name": {"tf": 2}, "howard.objects.hgvs": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format": {"tf": 2}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 2}, "howard.objects.transcript.Transcript.__init__": {"tf": 2.23606797749979}, "howard.objects.transcript.Transcript.full_name": {"tf": 1.7320508075688772}}, "df": 20, "s": {"docs": {"howard.functions.databases.databases_download_dbsnp": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.params_string_to_dict": {"tf": 2}, "howard.objects.hgvs": {"tf": 1}}, "df": 2, "u": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.split_interval": {"tf": 1}, "howard.functions.commons.create_where_clause": {"tf": 1}, "howard.functions.commons.command": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 1.4142135623730951}, "howard.functions.commons.get_index": {"tf": 2.8284271247461903}, "howard.functions.commons.findbypipeline": {"tf": 1.4142135623730951}, "howard.functions.commons.genotype_stats": {"tf": 1.4142135623730951}, "howard.functions.commons.download_file": {"tf": 2.449489742783178}, "howard.functions.commons.get_bin": {"tf": 1.4142135623730951}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.get_tmp": {"tf": 3}, "howard.functions.commons.get_memory": {"tf": 2.6457513110645907}, "howard.functions.commons.extract_float_from_str": {"tf": 2}, "howard.functions.commons.extract_memory_in_go": {"tf": 2.449489742783178}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.get_file_compressed": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_and_compress_files": {"tf": 1.7320508075688772}, "howard.functions.commons.load_duckdb_extension": {"tf": 1}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.format_arg_help": {"tf": 2.6457513110645907}, "howard.functions.commons.get_default_argument": {"tf": 2}, "howard.functions.commons.set_param": {"tf": 2}, "howard.functions.commons.add_value_into_dict": {"tf": 3.4641016151377544}, "howard.functions.commons.get_random": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1.7320508075688772}, "howard.functions.commons.determine_value_type": {"tf": 4}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 2.449489742783178}, "howard.functions.databases.databases_format_refseq": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 2}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_exomiser": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 2.449489742783178}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.functions.plugins.plugins_infos": {"tf": 1.4142135623730951}, "howard.functions.plugins.plugins_list": {"tf": 1.4142135623730951}, "howard.functions.plugins.plugins_to_load": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1.4142135623730951}, "howard.functions.utils.cdna_to_protein": {"tf": 1.4142135623730951}, "howard.functions.utils.get_transcript": {"tf": 1}, "howard.objects.database.Database.set_databases_folders": {"tf": 1}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1}, "howard.objects.database.Database.set_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_assembly": {"tf": 2}, "howard.objects.database.Database.get_assembly": {"tf": 1}, "howard.objects.database.Database.exists": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}, "howard.objects.database.Database.create_view": {"tf": 1.4142135623730951}, "howard.objects.database.Database.is_compressed": {"tf": 1.4142135623730951}, "howard.objects.database.Database.map_columns": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1.4142135623730951}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.database.Database.get_conn": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1.4142135623730951}, "howard.objects.database.Database.export": {"tf": 2.23606797749979}, "howard.objects.hgvs.InvalidHGVSName": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.format": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.is_coding": {"tf": 1}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 1.4142135623730951}, "howard.objects.transcript.BED6Interval.distance": {"tf": 2}, "howard.objects.transcript.Exon.__init__": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1.7320508075688772}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_indexing": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.set_output": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_input": {"tf": 1}, "howard.objects.variants.Variants.get_tmp_dir": {"tf": 1}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.get_verbose": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.load_data": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.add_column": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.drop_column": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 2}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.get_threads": {"tf": 2}, "howard.objects.variants.Variants.get_memory": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1}, "howard.objects.variants.Variants.scan_databases": {"tf": 1}, "howard.objects.variants.Variants.annotation_snpsift": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_bcftools": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_snpeff": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_parquet": {"tf": 1}, "howard.objects.variants.Variants.annotation_splice": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1.4142135623730951}}, "df": 119, "s": {"docs": {"howard.functions.commons.split_interval": {"tf": 1}, "howard.functions.commons.merge_regions": {"tf": 1.4142135623730951}, "howard.functions.commons.create_where_clause": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 1.7320508075688772}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1.4142135623730951}, "howard.functions.commons.get_index": {"tf": 2.23606797749979}, "howard.functions.commons.genotype_stats": {"tf": 1.4142135623730951}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.get_threads": {"tf": 1}, "howard.functions.commons.get_memory": {"tf": 1}, "howard.functions.commons.get_compression_type": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.get_argument_gooey": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1.7320508075688772}, "howard.functions.commons.load_config_args": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.determine_value_type": {"tf": 2.8284271247461903}, "howard.functions.commons.determine_column_types": {"tf": 3}, "howard.functions.commons.detect_column_type": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1.7320508075688772}, "howard.functions.plugins.plugins_to_load": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1.4142135623730951}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.functions.utils.get_transcript": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}, "howard.tools.help.help": {"tf": 1}}, "df": 53}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_type": {"tf": 1}}, "df": 2}}}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.extract_memory_in_go": {"tf": 1}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.objects.database.Database.query": {"tf": 1}, "howard.tools.tools.PathType.__init__": {"tf": 1.4142135623730951}}, "df": 4, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.HGVSName.parse": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 2}}, "df": 2}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {"howard.functions.commons.params_string_to_dict": {"tf": 1.4142135623730951}}, "df": 1, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.findbypipeline": {"tf": 1}, "howard.functions.commons.genotypeconcordance": {"tf": 1}, "howard.functions.commons.trio": {"tf": 1.7320508075688772}, "howard.functions.commons.vaf_normalization": {"tf": 2}, "howard.functions.commons.genotype_stats": {"tf": 1.4142135623730951}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 3}, "howard.functions.utils.parse_hgvs_name": {"tf": 2.23606797749979}, "howard.functions.utils.cdna_to_protein": {"tf": 1.4142135623730951}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 2.449489742783178}, "howard.functions.utils.format_hgvs_name": {"tf": 2}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.hgvs.HGVSName": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 3}, "howard.objects.hgvs.HGVSName.format": {"tf": 1.4142135623730951}, "howard.objects.variant.normalize_variant": {"tf": 1.4142135623730951}, "howard.objects.variant.NormalizedVariant": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.set_variant_id": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 3}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.calculation_variant_id": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_genotype_concordance": {"tf": 1}, "howard.objects.variants.Variants.calculation_trio": {"tf": 1}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 36, "s": {"docs": {"howard.functions.commons.create_where_clause": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1.4142135623730951}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1.4142135623730951}, "howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1.7320508075688772}, "howard.objects.variant": {"tf": 1}, "howard.objects.variants.Variants.get_stats": {"tf": 1}, "howard.objects.variants.Variants.get_table_variants": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.load_data": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1}, "howard.objects.variants.Variants.drop_variants_table": {"tf": 1}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.prioritization": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_variant_id": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 3}}, "df": 28}}}, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.objects.database.Database.get_database_folders": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.objects.database.Database.get_conn": {"tf": 1}, "howard.objects.variants.Variants.set_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.get_input": {"tf": 1}, "howard.objects.variants.Variants.get_input_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_output_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_config": {"tf": 1}, "howard.objects.variants.Variants.get_param": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1}, "howard.objects.variants.Variants.annotation_snpsift": {"tf": 1}, "howard.objects.variants.Variants.annotation_bcftools": {"tf": 1}, "howard.objects.variants.Variants.annotation_snpeff": {"tf": 1}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 1}, "howard.objects.variants.Variants.annotation_parquet": {"tf": 1}, "howard.objects.variants.Variants.annotation_splice": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}, "howard.tools.process.process": {"tf": 1}}, "df": 21, "s": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.load_config_args": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.variants.Variants.__init__": {"tf": 1}, "howard.objects.variants.Variants.init_variables": {"tf": 1}}, "df": 6}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1}}, "df": 4}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.get_tmp": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.load_config_args": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1}, "howard.functions.plugins.plugins_to_load": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.objects.database.Database.find_header_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.variants.Variants.get_stats": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}, "howard.tools.annotation.annotation": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}, "howard.tools.help.help": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}}, "df": 29}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.commons.determine_column_types": {"tf": 1.7320508075688772}, "howard.functions.commons.detect_column_type": {"tf": 1.4142135623730951}}, "df": 3}}}}}, "f": {"docs": {"howard.functions.commons.vaf_normalization": {"tf": 2}, "howard.functions.commons.genotype_stats": {"tf": 2}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}}, "df": 4}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.find_nomen": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "f": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1.4142135623730951}, "howard.functions.commons.identical": {"tf": 2.449489742783178}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_dbsnp": {"tf": 2.449489742783178}, "howard.functions.databases.databases_download_hgmd": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.from_annovar": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 2.8284271247461903}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.from_extann.extann_to_info": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 2}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.4142135623730951}, "howard.main.main": {"tf": 1.4142135623730951}, "howard.objects.database.Database.read_header_file": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header_from_file": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_header_from_columns": {"tf": 2.23606797749979}, "howard.objects.database.Database.set_header": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_type": {"tf": 1.4142135623730951}, "howard.objects.database.Database.is_vcf": {"tf": 2.8284271247461903}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.set_header": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_header_length": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns": {"tf": 1}, "howard.objects.variants.Variants.get_header_columns_as_list": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1}, "howard.objects.variants.Variants.load_data": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 2}, "howard.objects.variants.Variants.export_output": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 4.242640687119285}, "howard.objects.variants.Variants.update_from_vcf": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 2}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 1}, "howard.objects.variants.Variants.annotation_parquet": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_variant_id": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_genotype_concordance": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_trio": {"tf": 1}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 2}, "howard.tools.annotation.annotation": {"tf": 1}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}, "howard.tools.process.process": {"tf": 1}, "howard.tools.query.query": {"tf": 1}}, "df": 66}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"howard.objects.database.Database.create_view": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_view": {"tf": 3.1622776601683795}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 4}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 3.7416573867739413}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 3.1622776601683795}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1.7320508075688772}}, "df": 7, "s": {"docs": {"howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 2}}, "df": 1}}}}}, "n": {"docs": {"howard.functions.commons.get_random": {"tf": 2}, "howard.objects.cdna.CDNACoord": {"tf": 3.3166247903554}, "howard.objects.hgvs": {"tf": 1}}, "df": 3, "u": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.commons.example_function": {"tf": 1.4142135623730951}}, "df": 1, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.split_interval": {"tf": 1.4142135623730951}, "howard.functions.commons.run_parallel_commands": {"tf": 1.4142135623730951}, "howard.functions.commons.run_parallel_functions": {"tf": 1.7320508075688772}, "howard.functions.commons.example_function": {"tf": 1.7320508075688772}, "howard.functions.commons.findbypipeline": {"tf": 1.7320508075688772}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1.4142135623730951}, "howard.functions.commons.get_threads": {"tf": 2}, "howard.functions.commons.extract_float_from_str": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1.4142135623730951}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.functions.from_extann.metaheader_rows": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 2.23606797749979}, "howard.objects.database.Database.is_genotype_column": {"tf": 1.4142135623730951}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.hgvs": {"tf": 2}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 1.7320508075688772}, "howard.objects.transcript.BED6Interval_base.chrom": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom_start": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.chrom_end": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.name": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.score": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.strand": {"tf": 1}, "howard.objects.transcript.Exon.__init__": {"tf": 2}, "howard.objects.transcript.Exon.name": {"tf": 1.7320508075688772}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 2}, "howard.objects.variants.Variants.get_connexion_config": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.load_data": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.run_commands": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_threads": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation_snpsift": {"tf": 1}, "howard.objects.variants.Variants.annotation_bcftools": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.annotation_snpeff": {"tf": 1}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 1}, "howard.objects.variants.Variants.annotation_parquet": {"tf": 1}, "howard.objects.variants.Variants.annotation_splice": {"tf": 1}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}}, "df": 64, "s": {"docs": {"howard.functions.commons.split_interval": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.utils.variant_to_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.format_hgvs_name": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"howard.functions.commons.determine_value_type": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.utils.cdna_to_protein": {"tf": 1}}, "df": 1}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.findbypipeline": {"tf": 1.4142135623730951}, "howard.functions.commons.determine_value_type": {"tf": 2}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 2}, "howard.objects.variants.Variants.calculation": {"tf": 1}}, "df": 4, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.from_annovar.tsv_to_parquet": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1.4142135623730951}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.objects.cdna.CDNACoord": {"tf": 2.6457513110645907}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1.4142135623730951}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}}, "df": 9, "s": {"docs": {"howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}, "c": {"docs": {"howard.objects.hgvs": {"tf": 1.4142135623730951}}, "df": 1, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.split_interval": {"tf": 1}}, "df": 1}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {"howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}}, "df": 2, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {"howard.functions.databases.databases_download_refseq": {"tf": 2.23606797749979}}, "df": 1, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {"howard.functions.databases.databases_download_refseq": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"2": {"docs": {"howard.functions.utils.read_genepred": {"tf": 1}}, "df": 1}, "docs": {"howard.functions.commons.create_where_clause": {"tf": 1}, "howard.functions.commons.find": {"tf": 1.7320508075688772}, "howard.functions.commons.find_all": {"tf": 2.8284271247461903}, "howard.functions.commons.find_genome": {"tf": 2.449489742783178}, "howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.get_file_format": {"tf": 1}, "howard.functions.commons.vaf_normalization": {"tf": 1.4142135623730951}, "howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.get_bin": {"tf": 1.4142135623730951}, "howard.functions.commons.get_bin_command": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.compress_file": {"tf": 1.4142135623730951}, "howard.functions.commons.get_file_compressed": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1.4142135623730951}, "howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 2.449489742783178}, "howard.functions.commons.genome_build_switch": {"tf": 1.7320508075688772}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.get_argument_gooey": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1.4142135623730951}, "howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.check_docker_image_exists": {"tf": 1}, "howard.functions.commons.clean_annotation_field": {"tf": 2.23606797749979}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_hgmd": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 2}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1.7320508075688772}, "howard.functions.from_extann.get_all_transcript": {"tf": 1}, "howard.functions.plugins.plugins_infos": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1}, "howard.functions.plugins.plugins_to_load": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 2}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1.4142135623730951}, "howard.functions.utils.parse_hgvs_name": {"tf": 3.1622776601683795}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 2.6457513110645907}, "howard.functions.utils.format_hgvs_name": {"tf": 4.795831523312719}, "howard.functions.utils.create_refseq_table": {"tf": 1.7320508075688772}, "howard.functions.utils.get_refseq_table": {"tf": 2}, "howard.functions.utils.get_transcript": {"tf": 2.449489742783178}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 2}, "howard.objects.database.Database.set_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_length": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_header": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1.7320508075688772}, "howard.objects.database.Database.set_assembly": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_database": {"tf": 1}, "howard.objects.database.Database.get_database_basename": {"tf": 1}, "howard.objects.database.Database.get_database_dirname": {"tf": 1.7320508075688772}, "howard.objects.database.Database.exists": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_tables": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_table": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1.7320508075688772}, "howard.objects.database.Database.create_view": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_view": {"tf": 2.23606797749979}, "howard.objects.database.Database.is_compressed": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1.7320508075688772}, "howard.objects.database.Database.find_column": {"tf": 2.449489742783178}, "howard.objects.database.Database.map_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_columns": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_annotations": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1.4142135623730951}, "howard.objects.database.Database.export": {"tf": 1.4142135623730951}, "howard.objects.genome.MockGenome.get_seq": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.get_seq": {"tf": 1}, "howard.objects.hgvs": {"tf": 2}, "howard.objects.hgvs.get_refseq_type": {"tf": 2.23606797749979}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 3}, "howard.objects.hgvs.HGVSName": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 2.449489742783178}, "howard.objects.hgvs.HGVSName.parse": {"tf": 2.23606797749979}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format": {"tf": 3.7416573867739413}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 2}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.full_name": {"tf": 2}, "howard.objects.transcript.BED6Interval_base": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval": {"tf": 1}, "howard.objects.transcript.BED6Interval.__init__": {"tf": 1}, "howard.objects.transcript.Exon.name": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.set_input": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_output": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.print_stats": {"tf": 1}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.drop_column": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.explode_infos": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_output": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 2}, "howard.objects.variants.Variants.get_config_json": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.prioritization": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 2}}, "df": 137, "s": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.findbypipeline": {"tf": 1}, "howard.functions.commons.genotypeconcordance": {"tf": 1}, "howard.functions.commons.barcode": {"tf": 1}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.commons.load_duckdb_extension": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1.4142135623730951}, "howard.functions.commons.transcripts_file_to_df": {"tf": 2}, "howard.functions.databases.databases_download_genomes": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.functions.plugins.plugins_infos": {"tf": 1}, "howard.functions.utils.read_transcripts": {"tf": 1.4142135623730951}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.functions.utils.get_transcript": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.database.Database.map_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_columns": {"tf": 3}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 2}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.4142135623730951}, "howard.tools.databases.databases": {"tf": 1}}, "df": 38, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.set_param": {"tf": 1}, "howard.tools.help.help": {"tf": 1.4142135623730951}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.query.query": {"tf": 1}}, "df": 4}}}}}, "d": {"docs": {"howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}}, "df": 8}, "/": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"howard.objects.database.Database.exists": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.databases.databases_download_dbsnp": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"howard.objects.database.Database.is_vcf": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {"howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.commons.extract_float_from_str": {"tf": 1}, "howard.functions.commons.extract_memory_in_go": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.get_random": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.query": {"tf": 1}, "howard.objects.database.Database.set_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.set_assembly": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 1}, "howard.objects.database.Database.get_database_dirname": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_tables": {"tf": 1}, "howard.objects.database.Database.get_database_table": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.database.Database.is_compressed": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.database.Database.map_columns": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_annotations": {"tf": 1.4142135623730951}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.hgvs": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1.4142135623730951}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_samples": {"tf": 1}, "howard.objects.variants.Variants.set_output": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1}, "howard.objects.variants.Variants.get_output_format": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.get_threads": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_config_default": {"tf": 1}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1.4142135623730951}}, "df": 60, "t": {"docs": {"howard.functions.commons.find_genome": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.get_index": {"tf": 1.4142135623730951}, "howard.functions.commons.genotypeconcordance": {"tf": 1.4142135623730951}, "howard.functions.commons.get_bin": {"tf": 1.7320508075688772}, "howard.functions.commons.get_bin_command": {"tf": 1.4142135623730951}, "howard.functions.commons.get_tmp": {"tf": 1.4142135623730951}, "howard.functions.commons.get_threads": {"tf": 1}, "howard.functions.commons.get_memory": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.get_compression_type": {"tf": 1}, "howard.functions.commons.get_file_compressed": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1.7320508075688772}, "howard.functions.commons.load_duckdb_extension": {"tf": 1}, "howard.functions.commons.duckdb_execute": {"tf": 1.4142135623730951}, "howard.functions.commons.get_argument": {"tf": 2}, "howard.functions.commons.full_path": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1.4142135623730951}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1.4142135623730951}, "howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.commons.clean_annotation_field": {"tf": 1.7320508075688772}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 2}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_format_refseq": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 2.449489742783178}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 2.23606797749979}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 2.23606797749979}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 2}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1.4142135623730951}, "howard.functions.utils.parse_hgvs_name": {"tf": 2.449489742783178}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.functions.utils.create_refseq_table": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1.4142135623730951}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 2.449489742783178}, "howard.objects.database.Database.set_database": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.find_header_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.objects.database.Database.get_assembly": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_database_basename": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_database_dirname": {"tf": 1}, "howard.objects.database.Database.exists": {"tf": 1.7320508075688772}, "howard.objects.database.Database.set_format": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_format": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_database_tables": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1}, "howard.objects.database.Database.get_view": {"tf": 1}, "howard.objects.database.Database.is_compressed": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_columns": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_annotations": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1.7320508075688772}, "howard.objects.database.Database.is_vcf": {"tf": 1.4142135623730951}, "howard.objects.database.Database.export": {"tf": 3.605551275463989}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 2.23606797749979}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.full_name": {"tf": 1}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1}, "howard.objects.variants.Variants.get_indexing": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_type": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.load_data": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.drop_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.explode_infos": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.export_output": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 2}, "howard.objects.variants.Variants.export_header": {"tf": 2}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_threads": {"tf": 1}, "howard.objects.variants.Variants.get_memory": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1.7320508075688772}, "howard.tools.annotation.annotation": {"tf": 1}, "howard.tools.tools.PathType.__init__": {"tf": 1}}, "df": 114, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1.7320508075688772}, "howard.tools.hgvs.hgvs": {"tf": 1}}, "df": 5}}}}}, "e": {"docs": {"howard.objects.cdna.CDNACoord": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.find_nomen": {"tf": 2}, "howard.objects.variants.Variants.calculation": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_nomen": {"tf": 1}}, "df": 3, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_nomen": {"tf": 1}}, "df": 2, "s": {"docs": {"howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}}}}}, "n": {"docs": {"howard.functions.commons.findbypipeline": {"tf": 1.4142135623730951}, "howard.functions.commons.genotype_compression": {"tf": 1.4142135623730951}, "howard.functions.commons.TimeoutException": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 3.1622776601683795}, "howard.functions.databases.databases_format_refseq": {"tf": 3.1622776601683795}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeError": {"tf": 1}, "howard.objects.hgvs": {"tf": 1}, "howard.objects.transcript.Transcript.is_coding": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}}, "df": 11, "e": {"docs": {"howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.commons.extract_float_from_str": {"tf": 1}, "howard.functions.commons.get_compression_type": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.genome_build_switch": {"tf": 1}, "howard.functions.commons.full_path": {"tf": 1}, "howard.functions.commons.get_default_argument": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_param": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1}, "howard.objects.database.Database.find_header_file": {"tf": 1}, "howard.objects.database.Database.query": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_assembly": {"tf": 1.7320508075688772}, "howard.objects.database.Database.find_database": {"tf": 1}, "howard.objects.database.Database.get_database_basename": {"tf": 1}, "howard.objects.database.Database.get_database_dirname": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_format": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.get_database_tables": {"tf": 1}, "howard.objects.database.Database.get_database_table": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_annotations": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.transcript.Transcript.full_name": {"tf": 1}, "howard.objects.variants.Variants.set_output": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.load_data": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 2.449489742783178}, "howard.tools.tools.PathType.__init__": {"tf": 1.7320508075688772}}, "df": 56}}, "r": {"docs": {"howard.functions.utils.parse_hgvs_name": {"tf": 1}}, "df": 1, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.7320508075688772}, "howard.objects.variant.normalize_variant": {"tf": 1}}, "df": 3, "d": {"docs": {"howard.functions.utils.parse_hgvs_name": {"tf": 1.7320508075688772}}, "df": 1}, "s": {"docs": {"howard.objects.variant.NormalizedVariant": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.utils.parse_hgvs_name": {"tf": 1.4142135623730951}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.find_nomen": {"tf": 1}}, "df": 1}}}}}, "b": {"docs": {"howard.functions.commons.findbypipeline": {"tf": 1.7320508075688772}}, "df": 1}, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1.4142135623730951}}, "df": 6, "s": {"docs": {"howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.compress_file": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.objects.database.Database.read_header_file": {"tf": 1}, "howard.objects.database.Database.query": {"tf": 1}, "howard.objects.database.Database.is_compressed": {"tf": 1}}, "df": 9}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_needed_columns": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_extra_columns": {"tf": 2}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}}, "df": 14}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.get_tmp": {"tf": 1}, "howard.functions.commons.get_threads": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}}, "df": 3}}}}}, "w": {"docs": {"howard.functions.commons.genome_build_switch": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.get_view": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1.4142135623730951}}, "df": 15, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1.4142135623730951}, "howard.functions.plugins.plugins_to_load": {"tf": 1}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1}}, "df": 3}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}}, "df": 4}}}}}}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.transcript.BED6Interval.distance": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.transcript.BED6Interval.distance": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.variants.Variants.get_output": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.objects.variants.Variants.get_output": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {"howard.objects.variants.Variants.get_output": {"tf": 1}}, "df": 1}}}}}}, "+": {"docs": {}, "df": 0, "m": {"docs": {"howard.objects.cdna.CDNACoord": {"tf": 1.7320508075688772}}, "df": 1}}, "m": {"docs": {"howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}}, "df": 1}}, "b": {"1": {"5": {"6": {"docs": {"howard.functions.databases.databases_download_dbsnp": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.create_where_clause": {"tf": 1}, "howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.functions.commons.find_nomen": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 2.23606797749979}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 2}, "howard.functions.commons.findbypipeline": {"tf": 1}, "howard.functions.commons.genotypeconcordance": {"tf": 1}, "howard.functions.commons.genotype_barcode": {"tf": 1}, "howard.functions.commons.trio": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_file": {"tf": 1.7320508075688772}, "howard.functions.commons.download_file": {"tf": 3.1622776601683795}, "howard.functions.commons.get_bin_command": {"tf": 1.7320508075688772}, "howard.functions.commons.get_tmp": {"tf": 1.4142135623730951}, "howard.functions.commons.get_threads": {"tf": 1.4142135623730951}, "howard.functions.commons.get_memory": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_memory_in_go": {"tf": 2}, "howard.functions.commons.concat_file": {"tf": 1.4142135623730951}, "howard.functions.commons.compress_file": {"tf": 1.4142135623730951}, "howard.functions.commons.get_file_compressed": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 2.6457513110645907}, "howard.functions.commons.concat_and_compress_files": {"tf": 2.6457513110645907}, "howard.functions.commons.load_duckdb_extension": {"tf": 1}, "howard.functions.commons.duckdb_execute": {"tf": 1.4142135623730951}, "howard.functions.commons.get_argument_to_mk": {"tf": 1.7320508075688772}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.7320508075688772}, "howard.functions.commons.help_generation_from_json": {"tf": 3}, "howard.functions.commons.help_generation": {"tf": 1.4142135623730951}, "howard.functions.commons.format_arg_help": {"tf": 1}, "howard.functions.commons.bed_sort": {"tf": 1.7320508075688772}, "howard.functions.commons.get_default_argument": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 2.23606797749979}, "howard.functions.commons.add_value_into_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.load_args": {"tf": 2.449489742783178}, "howard.functions.commons.get_random": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1.7320508075688772}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1.4142135623730951}, "howard.functions.commons.clean_annotation_field": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1.4142135623730951}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_param": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_annovar": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_snpeff": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_genomes": {"tf": 2}, "howard.functions.databases.databases_download_refseq": {"tf": 4.58257569495584}, "howard.functions.databases.databases_format_refseq": {"tf": 4.358898943540674}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 3}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_exomiser": {"tf": 2.6457513110645907}, "howard.functions.databases.databases_download_dbsnp": {"tf": 2}, "howard.functions.databases.databases_download_hgmd": {"tf": 3}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 3}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 2.23606797749979}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 2.449489742783178}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1.7320508075688772}, "howard.functions.utils.format_hgvs_name": {"tf": 3.4641016151377544}, "howard.functions.utils.create_refseq_table": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1.7320508075688772}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 2.6457513110645907}, "howard.objects.database.Database.set_database": {"tf": 2}, "howard.objects.database.Database.read_header_file": {"tf": 1}, "howard.objects.database.Database.get_header_length": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1.4142135623730951}, "howard.objects.database.Database.find_header_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_from_columns": {"tf": 2}, "howard.objects.database.Database.query": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 2.449489742783178}, "howard.objects.database.Database.find_database": {"tf": 1}, "howard.objects.database.Database.set_format": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}, "howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.database.Database.is_compressed": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.database.Database.map_columns": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1.7320508075688772}, "howard.objects.database.Database.is_vcf": {"tf": 1.4142135623730951}, "howard.objects.database.Database.is_genotype_column": {"tf": 1.7320508075688772}, "howard.objects.database.Database.export": {"tf": 5}, "howard.objects.genome.MockGenome.__init__": {"tf": 1.4142135623730951}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 2.449489742783178}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 3.4641016151377544}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 3.1622776601683795}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 2}, "howard.objects.transcript.Transcript.__init__": {"tf": 1.4142135623730951}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.init_variables": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.get_table_variants": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 2}, "howard.objects.variants.Variants.load_data": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 2}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.explode_infos": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.execute_query": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 4}, "howard.objects.variants.Variants.export_header": {"tf": 2.8284271247461903}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 3.1622776601683795}, "howard.objects.variants.Variants.get_threads": {"tf": 1}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1}, "howard.objects.variants.Variants.scan_databases": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.prioritization": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 2.6457513110645907}, "howard.tools.databases.databases": {"tf": 1}, "howard.tools.process.process": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}}, "df": 138, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.split_interval": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.objects.transcript.BED6Interval.distance": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}}, "df": 6}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.merge_regions": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}}, "df": 2}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.find_nomen": {"tf": 1}}, "df": 1}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.objects.cdna.CDNACoord": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.transcript.BED6Interval.distance": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.load_data": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 19}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 2.23606797749979}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.format_arg_help": {"tf": 1}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.plugins.plugins_infos": {"tf": 1}, "howard.objects.database.Database.get_database_folders": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_samples": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.get_input": {"tf": 1}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_output_format": {"tf": 1}, "howard.objects.variants.Variants.get_config": {"tf": 1}, "howard.objects.variants.Variants.get_param": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.get_prefix": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_type": {"tf": 1}, "howard.objects.variants.Variants.close_connexion": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_format": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.execute_query": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}}, "df": 32}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}}, "df": 4}}}}}}, "d": {"6": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.objects.transcript.BED6Interval_base": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval": {"tf": 1}, "howard.objects.transcript.BED6Interval.__init__": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1.7320508075688772}}, "df": 5}}}}}}}}}, "docs": {"howard.functions.commons.bed_sort": {"tf": 1}, "howard.functions.from_extann.create_metaheader": {"tf": 1}, "howard.functions.from_extann.write_extann": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1.4142135623730951}}, "df": 5}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.identical": {"tf": 1.7320508075688772}}, "df": 1, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.identical": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}}, "df": 4}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.database.Database.set_database": {"tf": 1}, "howard.objects.database.Database.set_assembly": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}}, "df": 3}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.TimeoutException": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1.4142135623730951}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.objects.genome.MockGenomeError": {"tf": 1}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.hgvs": {"tf": 4.123105625617661}, "howard.objects.transcript.BED6Interval_base": {"tf": 1}, "howard.objects.transcript.BED6Interval_base.__init__": {"tf": 1}, "howard.objects.transcript.BED6Interval": {"tf": 1}, "howard.objects.transcript.BED6Interval.__init__": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}}, "df": 16, "d": {"docs": {"howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1.4142135623730951}, "howard.functions.commons.genotype_barcode": {"tf": 1}, "howard.functions.commons.barcode": {"tf": 1.4142135623730951}, "howard.functions.commons.trio": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 2}, "howard.functions.commons.get_threads": {"tf": 1.4142135623730951}, "howard.functions.commons.get_memory": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_memory_in_go": {"tf": 1}, "howard.functions.commons.get_compression_type": {"tf": 1}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 2}, "howard.functions.commons.help_generation_from_json": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.bed_sort": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 2}, "howard.functions.commons.add_value_into_dict": {"tf": 1.7320508075688772}, "howard.functions.commons.load_args": {"tf": 1.4142135623730951}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.commons.detect_column_type": {"tf": 1.4142135623730951}, "howard.functions.databases.generate_databases_param": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1.4142135623730951}, "howard.functions.plugins.plugins_to_load": {"tf": 1.7320508075688772}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1.4142135623730951}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1.4142135623730951}, "howard.objects.cdna.CDNACoord": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header_from_columns": {"tf": 2}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_type": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 2}, "howard.objects.database.Database.is_genotype_column": {"tf": 1.4142135623730951}, "howard.objects.database.Database.export": {"tf": 2.23606797749979}, "howard.objects.genome.MockGenome.get_seq": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.get_seq": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.ordered_cdna_match": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1.4142135623730951}, "howard.objects.variant.get_sequence": {"tf": 1}, "howard.objects.variant.get_sequence_from_position": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 1}, "howard.objects.variant.justify_genomic_indel": {"tf": 1}, "howard.objects.variant.normalize_variant": {"tf": 1}, "howard.objects.variants.Variants.set_param": {"tf": 1}, "howard.objects.variants.Variants.set_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.set_output": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.get_tmp_dir": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.scan_databases": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.4142135623730951}, "howard.tools.annotation.annotation": {"tf": 1}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.help.help": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}, "howard.tools.query.query": {"tf": 1}}, "df": 92}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.databases.databases_download_hgmd": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_basename": {"tf": 2}}, "df": 2}}}}, "s": {"docs": {"howard.functions.from_extann.from_extann": {"tf": 1}, "howard.objects.hgvs": {"tf": 2.6457513110645907}}, "df": 2}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.genotype_barcode": {"tf": 2}, "howard.functions.commons.barcode": {"tf": 1.7320508075688772}, "howard.functions.commons.trio": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 2.23606797749979}}, "df": 5}}}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {"howard.functions.from_annovar.parquet_info_explode": {"tf": 1}}, "df": 1, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}}, "df": 2}}}}, "y": {"docs": {"howard.functions.commons.find_nomen": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 1.7320508075688772}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.get_compression_type": {"tf": 1}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation_from_json": {"tf": 1.4142135623730951}, "howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"tf": 1}, "howard.functions.commons.full_path": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1.4142135623730951}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1.4142135623730951}, "howard.functions.commons.get_random": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.determine_value_type": {"tf": 1.7320508075688772}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 2}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 2.23606797749979}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.functions.plugins.plugins_infos": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1.4142135623730951}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 3.3166247903554}, "howard.objects.genome.MockGenome.get_seq": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.get_seq": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.transcript.CDNA_Match.length": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 2}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_header": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.scan_databases": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}, "howard.objects.variants.Variants.calculation_trio": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.7320508075688772}, "howard.tools.query.query": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}}, "df": 79, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.get_compression_type": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}}, "df": 4}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 2}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.get_file_compressed": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1.7320508075688772}, "howard.functions.commons.load_duckdb_extension": {"tf": 1.4142135623730951}, "howard.functions.commons.duckdb_execute": {"tf": 1.4142135623730951}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.7320508075688772}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1.4142135623730951}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.commons.detect_column_type": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_param": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_refseq": {"tf": 2.449489742783178}, "howard.functions.databases.databases_format_refseq": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 2.6457513110645907}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_hgmd": {"tf": 1.7320508075688772}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.7320508075688772}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.exists": {"tf": 1}, "howard.objects.database.Database.is_compressed": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1.4142135623730951}, "howard.objects.database.Database.export": {"tf": 2.449489742783178}, "howard.objects.hgvs.HGVSName.format": {"tf": 2.449489742783178}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 2.23606797749979}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.transcript.Transcript.is_coding": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.load_data": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.drop_column": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.export_output": {"tf": 2}, "howard.objects.variants.Variants.export_header": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 63}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.explode_snpeff_ann": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {"howard.functions.commons.get_bin": {"tf": 3}, "howard.functions.commons.get_bin_command": {"tf": 4}}, "df": 2, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.get_bin": {"tf": 2}, "howard.functions.commons.get_bin_command": {"tf": 2}, "howard.functions.databases.databases_download_snpeff": {"tf": 1.4142135623730951}}, "df": 3}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.get_bin": {"tf": 1}}, "df": 1}}}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.commons.determine_column_types": {"tf": 1.4142135623730951}}, "df": 2}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.get_tmp": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}}, "df": 15}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.genome_build_switch": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}}, "df": 2}}}}, "g": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "f": {"docs": {"howard.functions.commons.compress_file": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.commons.get_compression_type": {"tf": 1.4142135623730951}, "howard.functions.commons.get_file_compressed": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_and_compress_files": {"tf": 1.4142135623730951}, "howard.objects.database.Database.export": {"tf": 1.4142135623730951}}, "df": 5}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"howard.functions.commons.concat_into_infile": {"tf": 1.7320508075688772}, "howard.functions.commons.concat_and_compress_files": {"tf": 2}, "howard.functions.commons.get_argument_to_mk": {"tf": 1.4142135623730951}}, "df": 3}}}}, "c": {"docs": {}, "df": 0, "f": {"docs": {"howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1.4142135623730951}}, "df": 1, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 2.8284271247461903}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation_snpsift": {"tf": 1}, "howard.objects.variants.Variants.annotation_bcftools": {"tf": 1}}, "df": 5}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.databases.databases_download_genomes": {"tf": 1}}, "df": 1}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.variants.Variants.set_input": {"tf": 1}}, "df": 1}}}}}}}}}, "g": {"docs": {"howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.get_bin": {"tf": 1.4142135623730951}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.check_docker_image_exists": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.objects.cdna.CDNACoord": {"tf": 2.6457513110645907}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.hgvs": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 16, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"howard.functions.commons.merge_regions": {"tf": 1.7320508075688772}, "howard.functions.utils.get_genomic_sequence": {"tf": 2.8284271247461903}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.get_alt_from_sequence": {"tf": 2}, "howard.functions.utils.matches_ref_allele": {"tf": 2}, "howard.functions.utils.hgvs_justify_dup": {"tf": 2}, "howard.functions.utils.hgvs_justify_indel": {"tf": 2}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1.7320508075688772}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 2.23606797749979}, "howard.functions.utils.format_hgvs_name": {"tf": 2.8284271247461903}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.hgvs": {"tf": 2}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 2}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1.7320508075688772}, "howard.objects.transcript": {"tf": 1}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.genomic_to_cdna_coord": {"tf": 2.23606797749979}, "howard.objects.variant.get_sequence": {"tf": 1}, "howard.objects.variant.get_sequence_from_position": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}}, "df": 29}}, "e": {"docs": {"howard.functions.commons.find_genome": {"tf": 3.1622776601683795}, "howard.functions.commons.genome_build_switch": {"tf": 2}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 2}, "howard.functions.databases.databases_download_genomes": {"tf": 2.6457513110645907}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 2.449489742783178}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_hgmd": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.7320508075688772}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 2.23606797749979}, "howard.functions.utils.get_alt_from_sequence": {"tf": 2.23606797749979}, "howard.functions.utils.matches_ref_allele": {"tf": 2}, "howard.functions.utils.hgvs_justify_dup": {"tf": 2.23606797749979}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 2}, "howard.functions.utils.parse_hgvs_name": {"tf": 2}, "howard.functions.utils.cdna_to_protein": {"tf": 2.23606797749979}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 2.23606797749979}, "howard.functions.utils.format_hgvs_name": {"tf": 2}, "howard.objects.genome.GenomeSubset": {"tf": 1}, "howard.objects.genome.MockGenome.__init__": {"tf": 1.7320508075688772}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1.7320508075688772}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 1.4142135623730951}, "howard.objects.transcript.BED6Interval.distance": {"tf": 1.4142135623730951}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}, "howard.objects.variant.Position": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 1}, "howard.objects.variant.normalize_variant": {"tf": 1.7320508075688772}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 38, "p": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.databases.databases_download_genomes": {"tf": 1}}, "df": 1}}, "s": {"docs": {"howard.functions.databases.databases_download_genomes": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_hgmd": {"tf": 1.4142135623730951}}, "df": 4}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.genotypeconcordance": {"tf": 2.23606797749979}, "howard.functions.commons.genotype_compression": {"tf": 2.449489742783178}, "howard.functions.commons.genotype_barcode": {"tf": 2.6457513110645907}, "howard.functions.commons.barcode": {"tf": 1.4142135623730951}, "howard.functions.commons.vaf_normalization": {"tf": 2.23606797749979}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 3.3166247903554}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.calculation_genotype_concordance": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1.7320508075688772}}, "df": 11, "s": {"docs": {"howard.functions.commons.genotypeconcordance": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {"howard.functions.commons.explode_snpeff_ann": {"tf": 1.4142135623730951}, "howard.functions.commons.transcripts_file_to_df": {"tf": 2}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.from_extann.extann_to_info": {"tf": 1}, "howard.functions.from_extann.get_longest_transcript": {"tf": 1}, "howard.functions.from_extann.get_all_transcript": {"tf": 1}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1.7320508075688772}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1.4142135623730951}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 2}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1.4142135623730951}, "howard.functions.utils.read_transcripts": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1.4142135623730951}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 2.449489742783178}, "howard.objects.cdna.CDNACoord": {"tf": 1.4142135623730951}, "howard.objects.hgvs": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 2.23606797749979}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.format": {"tf": 2}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 2}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}}, "df": 25, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.find_all": {"tf": 1}}, "df": 1}}, "e": {"docs": {"howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 2}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.get_random": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 3.872983346207417}, "howard.functions.databases.databases_download_dbsnp": {"tf": 2}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 2}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.tools.gui.gui": {"tf": 1}, "howard.tools.help.help": {"tf": 1}}, "df": 15, "d": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.trio": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 2.23606797749979}, "howard.functions.commons.help_generation_from_json": {"tf": 2.6457513110645907}, "howard.functions.commons.get_random": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 2}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.4142135623730951}}, "df": 21}, "s": {"docs": {"howard.functions.commons.barcode": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.get_random": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.tools.gui.gui": {"tf": 1}, "howard.tools.help.help": {"tf": 1}}, "df": 25}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.barcode": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}}, "df": 8}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 3.605551275463989}, "howard.functions.commons.help_generation_from_json": {"tf": 2.449489742783178}, "howard.functions.commons.help_generation": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1.4142135623730951}}, "df": 5}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.findbypipeline": {"tf": 1}, "howard.functions.commons.genotypeconcordance": {"tf": 1}, "howard.functions.commons.genotype_compression": {"tf": 1}, "howard.functions.commons.genotype_barcode": {"tf": 1}, "howard.functions.commons.barcode": {"tf": 1}, "howard.functions.commons.trio": {"tf": 1}, "howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.variant": {"tf": 1}}, "df": 15, "s": {"docs": {"howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}}, "df": 3}}}}, "/": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.from_extann.get_gene_coordinate": {"tf": 1}}, "df": 1, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}, "s": {"docs": {"howard.functions.from_extann.from_extann": {"tf": 1.7320508075688772}}, "df": 1}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.utils.read_refgene": {"tf": 2}, "howard.functions.utils.read_genepred": {"tf": 2.23606797749979}}, "df": 2}}}}}}, "t": {"docs": {"howard.functions.commons.get_index": {"tf": 1}, "howard.functions.commons.get_file_format": {"tf": 1}, "howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 3}, "howard.functions.commons.get_tmp": {"tf": 2.23606797749979}, "howard.functions.commons.get_threads": {"tf": 1.4142135623730951}, "howard.functions.commons.get_memory": {"tf": 1.7320508075688772}, "howard.functions.commons.get_compression_type": {"tf": 1.4142135623730951}, "howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.get_argument_gooey": {"tf": 1.4142135623730951}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.get_default_argument": {"tf": 1.4142135623730951}, "howard.functions.commons.get_random": {"tf": 1.4142135623730951}, "howard.functions.from_extann.get_all_transcript": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1.4142135623730951}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1.4142135623730951}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.7320508075688772}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.functions.utils.get_transcript": {"tf": 1}, "howard.objects.database.Database.get_database_folders": {"tf": 1}, "howard.objects.database.Database.get_header_length": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.find_header_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 2.6457513110645907}, "howard.objects.database.Database.get_header_from_columns": {"tf": 2}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_file": {"tf": 2}, "howard.objects.database.Database.find_database": {"tf": 2}, "howard.objects.database.Database.get_database": {"tf": 1}, "howard.objects.database.Database.get_database_basename": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_dirname": {"tf": 1}, "howard.objects.database.Database.exists": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_format": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_type": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_sql_from": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1.4142135623730951}, "howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.database.Database.get_view": {"tf": 2}, "howard.objects.database.Database.is_compressed": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 2.8284271247461903}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_annotations": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_extra_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.hgvs.get_refseq_type": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.get_cds_start_stop": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variants.Variants.set_samples": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_samples": {"tf": 1}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_connexion_config": {"tf": 1}, "howard.objects.variants.Variants.get_duckdb_settings": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 2}, "howard.objects.variants.Variants.get_stats": {"tf": 1}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 2}, "howard.objects.variants.Variants.get_output_format": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_tmp_dir": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header": {"tf": 1}, "howard.objects.variants.Variants.get_header_length": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.get_explode_infos": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1}, "howard.objects.variants.Variants.get_threads": {"tf": 1}, "howard.objects.variants.Variants.get_memory": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_config_default": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_config_json": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}}, "df": 88, "s": {"docs": {"howard.objects.database.Database.get_database_basename": {"tf": 1}, "howard.objects.database.Database.exists": {"tf": 1}, "howard.objects.database.Database.get_annotations": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}}, "df": 4}}}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.find": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.get_index": {"tf": 1}, "howard.functions.commons.genotypeconcordance": {"tf": 1}, "howard.functions.commons.genotype_barcode": {"tf": 1}, "howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.functions.commons.genotype_stats": {"tf": 1.4142135623730951}, "howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.extract_float_from_str": {"tf": 1.4142135623730951}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1.7320508075688772}, "howard.functions.commons.detect_column_type": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.get_transcript": {"tf": 1}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.find_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_assembly": {"tf": 1}, "howard.objects.database.Database.get_database_dirname": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1}, "howard.objects.database.Database.is_compressed": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.hgvs.get_refseq_type": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.transcript.Transcript.strand": {"tf": 1}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1}, "howard.objects.transcript.Transcript.find_exon_number": {"tf": 1.4142135623730951}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 1}, "howard.objects.variants.Variants.drop_column": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}}, "df": 46}}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 1}}, "df": 1, "s": {"docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {"howard.functions.from_extann.metaheader_rows": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.find_nomen": {"tf": 1}}, "df": 1, ":": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.find_nomen": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "t": {"docs": {"howard.functions.commons.findbypipeline": {"tf": 1.4142135623730951}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}}, "df": 2, "f": {"docs": {"howard.functions.utils.read_genepred": {"tf": 1.4142135623730951}}, "df": 1}}, "z": {"docs": {"howard.functions.commons.extract_file": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_exomiser": {"tf": 1.4142135623730951}}, "df": 2, "i": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.commons.get_compression_type": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1.7320508075688772}}, "df": 4}}}, "o": {"docs": {"howard.functions.commons.extract_memory_in_go": {"tf": 2.23606797749979}}, "df": 1, "o": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.get_argument_gooey": {"tf": 1.7320508075688772}, "howard.tools.gui.gui": {"tf": 1}}, "df": 3}}}}, "b": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}}, "df": 4}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 1.7320508075688772}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.4142135623730951}}, "df": 2, "s": {"docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "h": {"3": {"7": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1}}, "df": 1}, "8": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.utils.variant_to_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.tools.gui.gui": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "f": {"docs": {"howard.functions.databases.databases_download_dbsnp": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.plugins.plugins_list": {"tf": 1}}, "df": 1}}}, "k": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "f": {"docs": {"howard.objects.variant.normalize_variant": {"tf": 1}, "howard.objects.variant.NormalizedVariant": {"tf": 1}}, "df": 2}}}}}}, "p": {"docs": {"howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1.4142135623730951}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1.4142135623730951}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 2.6457513110645907}}, "df": 3, "s": {"docs": {"howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}}, "df": 2}}, "v": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "h": {"docs": {"howard.objects.hgvs": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "i": {"docs": {"howard.tools.gui.gui": {"tf": 1.4142135623730951}}, "df": 1, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.utils.format_hgvs_name": {"tf": 1}}, "df": 1}}}}}}}}}, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.objects.hgvs": {"tf": 1}}, "df": 1}, "n": {"docs": {"howard.objects.hgvs": {"tf": 1}}, "df": 1}, "u": {"1": {"1": {"6": {"1": {"docs": {"howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1.4142135623730951}}, "df": 3, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1}}, "df": 3}}}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"howard.objects.hgvs": {"tf": 1}}, "df": 1}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.merge_regions": {"tf": 1}, "howard.functions.commons.find_all": {"tf": 1}, "howard.functions.commons.findbypipeline": {"tf": 1.4142135623730951}, "howard.functions.commons.genotypeconcordance": {"tf": 1.4142135623730951}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.commons.determine_column_types": {"tf": 1.4142135623730951}, "howard.functions.utils.make_transcript": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1.4142135623730951}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}}, "df": 17}}, "s": {"docs": {"howard.functions.commons.genotype_compression": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1.4142135623730951}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.transcript.Transcript.is_coding": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_output": {"tf": 1}, "howard.objects.variants.Variants.get_stats": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1}, "howard.objects.variants.Variants.drop_column": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}}, "df": 20, "h": {"docs": {"howard.objects.variants.Variants.set_variant_id": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.determine_value_type": {"tf": 1}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}}, "df": 3}}}}}}}, "g": {"1": {"9": {"docs": {"howard.functions.databases.databases_infos": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}}, "df": 4}, "docs": {}, "df": 0}, "docs": {"howard.functions.databases.databases_download_snpeff": {"tf": 1}}, "df": 1, "v": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.find_nomen": {"tf": 2}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1.7320508075688772}, "howard.functions.utils.get_vcf_allele": {"tf": 1.7320508075688772}, "howard.functions.utils.get_alt_from_sequence": {"tf": 2}, "howard.functions.utils.matches_ref_allele": {"tf": 2}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1.7320508075688772}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1.4142135623730951}, "howard.functions.utils.parse_hgvs_name": {"tf": 3}, "howard.functions.utils.cdna_to_protein": {"tf": 2.23606797749979}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 2.449489742783178}, "howard.functions.utils.format_hgvs_name": {"tf": 4.795831523312719}, "howard.objects.cdna.CDNACoord": {"tf": 1}, "howard.objects.cdna.CDNACoord.__init__": {"tf": 1}, "howard.objects.cdna.CDNACoord.parse": {"tf": 1}, "howard.objects.hgvs": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSRegex": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format": {"tf": 3.3166247903554}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 3}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_extract_nomen": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1.4142135623730951}}, "df": 42, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.utils.get_vcf_allele": {"tf": 1.4142135623730951}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1.7320508075688772}}, "df": 2}}}}}}, "m": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.databases.databases_download_hgmd": {"tf": 3.872983346207417}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1.7320508075688772}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1.4142135623730951}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 2}, "howard.functions.databases.databases_infos": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_format_refseq": {"tf": 3.1622776601683795}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.7320508075688772}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 3.4641016151377544}, "howard.objects.database.Database.read_header_file": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_header_length": {"tf": 2.6457513110645907}, "howard.objects.database.Database.get_header_file_columns": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_header_from_list": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_header_from_file": {"tf": 3.1622776601683795}, "howard.objects.database.Database.find_header_file": {"tf": 2}, "howard.objects.database.Database.get_header": {"tf": 4.58257569495584}, "howard.objects.database.Database.get_header_from_columns": {"tf": 3.605551275463989}, "howard.objects.database.Database.set_header": {"tf": 3.605551275463989}, "howard.objects.database.Database.set_header_file": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_file": {"tf": 5.0990195135927845}, "howard.objects.database.Database.get_header_infos_list": {"tf": 2}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 2.6457513110645907}, "howard.objects.database.Database.get_annotations": {"tf": 1.4142135623730951}, "howard.objects.database.Database.export": {"tf": 4.58257569495584}, "howard.objects.variants.Variants.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_header": {"tf": 1}, "howard.objects.variants.Variants.get_stats": {"tf": 1}, "howard.objects.variants.Variants.get_header": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_header_infos_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_length": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.get_header_columns": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_columns_as_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_columns_as_sql": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 2.8284271247461903}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 2}, "howard.objects.variants.Variants.read_vcf_header": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 2}, "howard.objects.variants.Variants.export_output": {"tf": 3.3166247903554}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.export_header": {"tf": 4.69041575982343}, "howard.objects.variants.Variants.calculation_variant_id": {"tf": 1}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 2}}, "df": 49, "s": {"docs": {"howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 5.5677643628300215}, "howard.functions.commons.help_generation_from_json": {"tf": 4.69041575982343}, "howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation": {"tf": 1.7320508075688772}, "howard.functions.commons.format_arg_help": {"tf": 3.1622776601683795}, "howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.tools.gui.gui": {"tf": 1}, "howard.tools.help.help": {"tf": 2}}, "df": 12, "s": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 4}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.utils": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.set_input": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.download_file": {"tf": 1}}, "df": 1}}}}}}}, "w": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "w": {"docs": {"howard.functions.databases.databases_download_annovar": {"tf": 1}}, "df": 1}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.utils.read_genepred": {"tf": 1}}, "df": 1}}}}}}}}}, "s": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.from_extann.metaheader_rows": {"tf": 1}}, "df": 1}}}}}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {"howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.get_argument_to_mk": {"tf": 2.449489742783178}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.7320508075688772}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.tools.help.help": {"tf": 1}}, "df": 4, "#": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.utils.read_genepred": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 2, "s": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 1}, "howard.tools.help.help": {"tf": 1}}, "df": 2}}}, "w": {"docs": {"howard.functions.commons.concat_into_infile": {"tf": 1.4142135623730951}, "howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 10, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.get_default_argument": {"tf": 1}}, "df": 2}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.full_path": {"tf": 1.4142135623730951}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 2.23606797749979}}, "df": 1}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"howard.objects.variants.Variants.export_output": {"tf": 1}}, "df": 1}}}}}}}}}}, "s": {"docs": {"howard.functions.from_extann.write_extann": {"tf": 1}, "howard.objects.hgvs": {"tf": 1}}, "df": 2}, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.utils.get_alt_from_sequence": {"tf": 1}, "howard.functions.utils.matches_ref_allele": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1}}, "df": 5}}}}, "d": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.from_extann.write_extann": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1.4142135623730951}}, "df": 2}}, "p": {"docs": {}, "df": 0, ":": {"0": {"0": {"0": {"0": {"4": {"8": {"6": {"docs": {"howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "1": {"1": {"5": {"9": {"docs": {"howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "o": {"docs": {"howard.objects.variants.Variants.annotation_exomiser": {"tf": 2}}, "df": 1}}}, "u": {"docs": {"howard.functions.databases.databases_format_refseq": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.run_parallel_commands": {"tf": 1}, "howard.functions.commons.run_parallel_functions": {"tf": 1}, "howard.functions.commons.find_nomen": {"tf": 1.4142135623730951}, "howard.functions.commons.barcode": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1.4142135623730951}, "howard.functions.commons.download_file": {"tf": 2.23606797749979}, "howard.functions.commons.get_threads": {"tf": 1.7320508075688772}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1.4142135623730951}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.commons.load_config_args": {"tf": 1}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_hgmd": {"tf": 1.7320508075688772}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 2}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1.7320508075688772}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1.7320508075688772}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 2}, "howard.functions.utils.format_hgvs_name": {"tf": 2.8284271247461903}, "howard.objects.database.Database.__init__": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.set_header": {"tf": 1}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1}, "howard.objects.database.Database.get_database_basename": {"tf": 1}, "howard.objects.database.Database.get_database_dirname": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.get_database_tables": {"tf": 1}, "howard.objects.database.Database.get_database_table": {"tf": 1}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1.4142135623730951}, "howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.database.Database.map_columns": {"tf": 1}, "howard.objects.database.Database.get_annotations": {"tf": 1}, "howard.objects.database.Database.is_vcf": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1.4142135623730951}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 2.23606797749979}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.explode_infos": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_output": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.run_commands": {"tf": 1}, "howard.objects.variants.Variants.get_threads": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.update_from_vcf": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_snpsift": {"tf": 1}, "howard.objects.variants.Variants.annotation_bcftools": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.annotation_snpeff": {"tf": 1}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 1}, "howard.objects.variants.Variants.annotation_parquet": {"tf": 1}, "howard.objects.variants.Variants.annotation_splice": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 63, "d": {"docs": {"howard.functions.commons.create_where_clause": {"tf": 1}, "howard.functions.commons.find_genome": {"tf": 1}, "howard.functions.commons.find_file_prefix": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_annotation_format": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1.7320508075688772}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.genotypeconcordance": {"tf": 1}, "howard.functions.commons.trio": {"tf": 1}, "howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.get_bin": {"tf": 1.4142135623730951}, "howard.functions.commons.get_bin_command": {"tf": 2.23606797749979}, "howard.functions.commons.get_tmp": {"tf": 1}, "howard.functions.commons.get_threads": {"tf": 1.4142135623730951}, "howard.functions.commons.get_memory": {"tf": 1.7320508075688772}, "howard.functions.commons.extract_memory_in_go": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_and_compress_files": {"tf": 1.7320508075688772}, "howard.functions.commons.get_argument": {"tf": 1.4142135623730951}, "howard.functions.commons.get_argument_to_mk": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.7320508075688772}, "howard.functions.commons.help_generation_from_json": {"tf": 1.7320508075688772}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 2.23606797749979}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 2.23606797749979}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1.7320508075688772}, "howard.functions.commons.determine_value_type": {"tf": 1.4142135623730951}, "howard.functions.databases.generate_databases_param": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_genomes": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_refseq": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 2.449489742783178}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_exomiser": {"tf": 2.6457513110645907}, "howard.functions.databases.databases_download_dbsnp": {"tf": 2}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 2.449489742783178}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 2.449489742783178}, "howard.functions.plugins.plugins_infos": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1.4142135623730951}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1.4142135623730951}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.7320508075688772}, "howard.functions.utils.cdna_to_protein": {"tf": 2}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 2.8284271247461903}, "howard.functions.utils.format_hgvs_name": {"tf": 3}, "howard.functions.utils.create_refseq_table": {"tf": 1.4142135623730951}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 3.1622776601683795}, "howard.objects.database.Database.get_header_from_list": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 2}, "howard.objects.database.Database.get_header_from_columns": {"tf": 2}, "howard.objects.database.Database.get_header_file": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_type": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_needed_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.find_column": {"tf": 1.4142135623730951}, "howard.objects.database.Database.map_columns": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 2}, "howard.objects.database.Database.get_extra_columns": {"tf": 2}, "howard.objects.database.Database.is_vcf": {"tf": 1.7320508075688772}, "howard.objects.database.Database.is_genotype_column": {"tf": 1.7320508075688772}, "howard.objects.database.Database.export": {"tf": 1.4142135623730951}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 3.4641016151377544}, "howard.objects.hgvs.HGVSName.parse": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_vcf_coords": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1.7320508075688772}, "howard.objects.transcript.Transcript.cdna_to_genomic_coord": {"tf": 1}, "howard.objects.transcript.Exon.__init__": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variants.Variants.set_input": {"tf": 1}, "howard.objects.variants.Variants.init_variables": {"tf": 1}, "howard.objects.variants.Variants.set_output": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.print_stats": {"tf": 1}, "howard.objects.variants.Variants.get_table_variants": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.load_data": {"tf": 1}, "howard.objects.variants.Variants.get_explode_infos_prefix": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_output": {"tf": 2}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.get_threads": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_memory": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.prioritization": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 2}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 2}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 3}, "howard.tools.gui.gui": {"tf": 1.4142135623730951}, "howard.tools.help.help": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}, "howard.tools.process.process": {"tf": 1}}, "df": 124}, "s": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 1.7320508075688772}, "howard.functions.commons.extract_float_from_str": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 5}, "r": {"docs": {"howard.functions.commons.full_path": {"tf": 1.4142135623730951}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.gui.gui": {"tf": 1}, "howard.tools.prioritization.prioritization": {"tf": 1}, "howard.tools.query.query": {"tf": 1}}, "df": 8, "s": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}}, "df": 2}}, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.run_parallel_functions": {"tf": 1}, "howard.functions.commons.find_genome": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.get_memory": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_file": {"tf": 1}, "howard.functions.commons.compress_file": {"tf": 1}, "howard.functions.commons.get_compression_type": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1.4142135623730951}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 1}, "howard.functions.commons.duckdb_execute": {"tf": 1.4142135623730951}, "howard.functions.commons.get_argument_to_mk": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.full_path": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.4142135623730951}, "howard.functions.utils.create_refseq_table": {"tf": 1.4142135623730951}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.objects.database.Database.get_header_from_file": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.get_database_basename": {"tf": 1.4142135623730951}, "howard.objects.database.Database.exists": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.get_database_tables": {"tf": 1}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1}, "howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.database.Database.map_columns": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_annotations": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 1}, "howard.objects.variants.Variants.set_samples": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.run_commands": {"tf": 1}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.tools.gui.gui": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.query.query": {"tf": 1}}, "df": 47}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.format_arg_help": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 2}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_input": {"tf": 1}}, "df": 5}}}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1.7320508075688772}, "howard.functions.commons.explode_snpeff_ann": {"tf": 2}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.4142135623730951}}, "df": 5}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1.4142135623730951}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.4142135623730951}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 7, "l": {"docs": {}, "df": 0, "y": {"docs": {"howard.objects.transcript.CDNA_Match.__init__": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {"howard.functions.commons.extract_memory_in_go": {"tf": 1}}, "df": 1, "s": {"docs": {"howard.functions.commons.extract_memory_in_go": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}}, "df": 2}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.databases.databases_download_genomes": {"tf": 1}}, "df": 1}}}}}}}}, "k": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.trio": {"tf": 1}, "howard.functions.commons.get_compression_type": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}}, "df": 5}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.set_param": {"tf": 1}}, "df": 1, "g": {"docs": {}, "df": 0, "o": {"docs": {"howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.databases.databases_download_refseq": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_format_refseq": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"howard.objects.database.Database.__init__": {"tf": 1}}, "df": 1}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.database.Database.set_header_file": {"tf": 1}, "howard.objects.database.Database.set_assembly": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}}, "df": 3}}}}}}, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}}, "df": 1}}}}}}}}}}, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}}, "df": 2}}}}}}}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.download_file": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_annovar": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_refseq": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_alphamissense": {"tf": 2}, "howard.functions.databases.databases_download_exomiser": {"tf": 3.7416573867739413}, "howard.functions.databases.databases_download_dbsnp": {"tf": 3.4641016151377544}}, "df": 7, "s": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1.4142135623730951}}, "df": 1}}}, "p": {"docs": {"howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}}, "df": 9, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.objects.database.Database.query": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}}, "df": 6, "d": {"docs": {"howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_assembly": {"tf": 1}}, "df": 4}, "s": {"docs": {"howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 1}, "howard.objects.variants.Variants.calculation_variant_id": {"tf": 1}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_concordance": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 14}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}}, "df": 2}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}}, "df": 1, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.get_random": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 4}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"howard.objects.cdna.CDNACoord": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {"howard.functions.databases.databases_download_genomes": {"tf": 1.4142135623730951}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 3}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.databases.databases_download_refseq": {"tf": 2.8284271247461903}, "howard.functions.databases.databases_format_refseq": {"tf": 2.8284271247461903}, "howard.objects.cdna.CDNACoord": {"tf": 2}}, "df": 3}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}}, "df": 1}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.utils.read_genepred": {"tf": 2.449489742783178}}, "df": 1, "[": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.utils.read_genepred": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.create_where_clause": {"tf": 1}, "howard.functions.commons.duckdb_execute": {"tf": 2.8284271247461903}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.4142135623730951}, "howard.main.main": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 2}, "howard.objects.database.Database.get_header_from_columns": {"tf": 2}, "howard.objects.database.Database.query": {"tf": 2.8284271247461903}, "howard.objects.database.Database.get_header_file": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_type": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_sql_from": {"tf": 2}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_columns": {"tf": 2.8284271247461903}, "howard.objects.database.Database.get_extra_columns": {"tf": 2}, "howard.objects.database.Database.is_vcf": {"tf": 2}, "howard.objects.database.Database.is_genotype_column": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 3.1622776601683795}, "howard.objects.variants.Variants.execute_query": {"tf": 2}, "howard.objects.variants.Variants.export_output": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.tools.process.process": {"tf": 1}}, "df": 23, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.utils.create_refseq_table": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.tools.process.process": {"tf": 1}, "howard.tools.query.query": {"tf": 1}}, "df": 4}, "d": {"docs": {"howard.objects.database.Database.is_genotype_column": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.download_file": {"tf": 1.4142135623730951}}, "df": 1}}, "c": {"docs": {}, "df": 0, "k": {"docs": {"howard.tools.process.process": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.from_annovar.tsv_to_parquet": {"tf": 2}}, "df": 1, "s": {"docs": {"howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"howard.objects.variants.Variants.get_stats": {"tf": 1}}, "df": 1}}}}}}}, "d": {"docs": {"howard.objects.hgvs": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.find_nomen": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.get_index": {"tf": 1}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1.7320508075688772}, "howard.functions.commons.get_bin": {"tf": 2.23606797749979}, "howard.functions.commons.get_bin_command": {"tf": 2.449489742783178}, "howard.functions.commons.get_tmp": {"tf": 2.6457513110645907}, "howard.functions.commons.get_threads": {"tf": 1}, "howard.functions.commons.get_memory": {"tf": 2}, "howard.functions.commons.extract_memory_in_go": {"tf": 1.7320508075688772}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 2.449489742783178}, "howard.functions.commons.help_generation_from_json": {"tf": 1.4142135623730951}, "howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"tf": 1}, "howard.functions.commons.format_arg_help": {"tf": 2.6457513110645907}, "howard.functions.commons.get_default_argument": {"tf": 2.449489742783178}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.get_random": {"tf": 1.4142135623730951}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.determine_value_type": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.databases.databases_download_annovar": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_genomes": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_refseq": {"tf": 2.23606797749979}, "howard.functions.databases.databases_format_refseq": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_exomiser": {"tf": 2}, "howard.functions.databases.databases_download_dbsnp": {"tf": 2.6457513110645907}, "howard.functions.databases.databases_download_hgmd": {"tf": 2}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1.4142135623730951}, "howard.functions.plugins.plugins_infos": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1.7320508075688772}, "howard.objects.database.Database.set_databases_folders": {"tf": 1}, "howard.objects.database.Database.get_header_file_columns": {"tf": 1}, "howard.objects.database.Database.get_header_from_list": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_header_from_file": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_database_dirname": {"tf": 1.4142135623730951}, "howard.objects.database.Database.exists": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_tables": {"tf": 1}, "howard.objects.database.Database.get_database_table": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_sql_database_link": {"tf": 1.7320508075688772}, "howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.database.Database.is_compressed": {"tf": 1}, "howard.objects.database.Database.get_header_infos_list": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1.4142135623730951}, "howard.objects.database.Database.map_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 1}, "howard.objects.database.Database.get_annotations": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_extra_columns": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 2.449489742783178}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.transcript.Transcript.__init__": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.print_stats": {"tf": 1}, "howard.objects.variants.Variants.get_input_format": {"tf": 1}, "howard.objects.variants.Variants.get_input_compressed": {"tf": 1}, "howard.objects.variants.Variants.get_output_format": {"tf": 1}, "howard.objects.variants.Variants.get_tmp_dir": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.load_data": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.add_column": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.explode_infos": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_extra_infos": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1}, "howard.objects.variants.Variants.export_header": {"tf": 1}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_threads": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.get_memory": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.scan_databases": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 3.1622776601683795}, "howard.objects.variants.Variants.get_config_default": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.get_config_json": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.annotation_hgvs": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1.4142135623730951}}, "df": 108, "s": {"docs": {"howard.functions.commons.create_where_clause": {"tf": 1}, "howard.functions.commons.find_nomen": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 1.7320508075688772}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1.7320508075688772}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 2}, "howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.get_tmp": {"tf": 1}, "howard.functions.commons.extract_memory_in_go": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_and_compress_files": {"tf": 2.449489742783178}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 2.449489742783178}, "howard.functions.commons.help_generation_from_json": {"tf": 1.7320508075688772}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.get_random": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1.4142135623730951}, "howard.functions.commons.params_string_to_dict": {"tf": 1.7320508075688772}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_refseq": {"tf": 3.1622776601683795}, "howard.functions.databases.databases_format_refseq": {"tf": 3}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 3.3166247903554}, "howard.functions.databases.databases_download_exomiser": {"tf": 2}, "howard.functions.databases.databases_download_dbsnp": {"tf": 2}, "howard.functions.databases.databases_download_hgmd": {"tf": 1.7320508075688772}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 2}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1.7320508075688772}, "howard.functions.plugins.plugins_infos": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 2}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1.7320508075688772}, "howard.functions.utils.format_hgvs_name": {"tf": 2.8284271247461903}, "howard.functions.utils.create_refseq_table": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.objects.database.Database.get_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}, "howard.objects.database.Database.create_view": {"tf": 1}, "howard.objects.database.Database.find_column": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1.4142135623730951}, "howard.objects.database.Database.export": {"tf": 3}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.format": {"tf": 2.449489742783178}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 2.23606797749979}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1.4142135623730951}, "howard.objects.transcript.Transcript.__init__": {"tf": 1.4142135623730951}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variants.Variants.get_table_variants": {"tf": 1}, "howard.objects.variants.Variants.get_header": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.load_data": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.export_output": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.export_header": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.run_commands": {"tf": 1}, "howard.objects.variants.Variants.get_threads": {"tf": 1}, "howard.objects.variants.Variants.set_variant_id": {"tf": 1}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}, "howard.objects.variants.Variants.calculation_extract_snpeff_hgvs": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 2}, "howard.objects.variants.Variants.calculation_find_by_pipeline": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_stats": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 2.23606797749979}}, "df": 91}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.variants.Variants.get_explode_infos": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1.4142135623730951}, "howard.tools.gui.gui": {"tf": 1}}, "df": 8, "d": {"docs": {"howard.functions.plugins.plugins_infos": {"tf": 1}, "howard.objects.database.Database.get_type_from_columns": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}}, "df": 6}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.params_string_to_dict": {"tf": 1}}, "df": 1, "s": {"docs": {"howard.functions.utils.read_genepred": {"tf": 1}}, "df": 1}}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 1}, "howard.functions.commons.get_tmp": {"tf": 1}, "howard.functions.commons.get_compression_type": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 2.449489742783178}, "howard.functions.commons.determine_column_types": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.4142135623730951}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.functions.utils.variant_to_hgvs_name": {"tf": 1.7320508075688772}, "howard.functions.utils.format_hgvs_name": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.get_needed_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.is_compressed": {"tf": 1}, "howard.objects.database.Database.get_extra_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.export": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_prefix": {"tf": 1}}, "df": 19, "s": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.trio": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 2.23606797749979}, "howard.functions.commons.get_compression_type": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1.4142135623730951}, "howard.functions.commons.concat_and_compress_files": {"tf": 2}, "howard.functions.commons.get_argument": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.7320508075688772}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.commons.identical": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.commons.determine_column_types": {"tf": 1.4142135623730951}, "howard.functions.commons.detect_column_type": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_param": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 2.23606797749979}, "howard.functions.databases.databases_format_refseq": {"tf": 3}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1.7320508075688772}, "howard.functions.utils.format_hgvs_name": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_header_file": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.is_genotype_column": {"tf": 1.4142135623730951}, "howard.objects.database.Database.export": {"tf": 2}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.format": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_prefix": {"tf": 2}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}, "howard.objects.transcript.Exon.get_as_interval": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variants.Variants.get_header_sample_list": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.load_data": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_explode_infos_fields": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.explode_infos": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_output": {"tf": 2}, "howard.objects.variants.Variants.export_header": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 2}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.4142135623730951}}, "df": 56}, "d": {"docs": {"howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.objects.database.Database.find_header_file": {"tf": 1}, "howard.objects.database.Database.get_format": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1}}, "df": 4}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.determine_value_type": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1}}, "df": 4}}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.detect_column_type": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.database.Database.export": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"howard.functions.commons.RawTextArgumentDefaultsHelpFormatter": {"tf": 1}}, "df": 1, "s": {"docs": {"howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.utils.read_transcripts": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_cdna": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.parse_genome": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 12}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"howard.objects.database.Database.get_sql_database_attach": {"tf": 1.4142135623730951}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 1}}, "df": 6}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.genotypeconcordance": {"tf": 1}, "howard.functions.commons.genotype_barcode": {"tf": 1}, "howard.functions.commons.get_bin_command": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 5}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1.7320508075688772}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 1}}, "df": 1}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.databases.databases_download_exomiser": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "o": {"docs": {"howard.functions.commons.trio": {"tf": 1.4142135623730951}}, "df": 1}}, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variant.justify_indel": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.genotype_stats": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.download_file": {"tf": 1.7320508075688772}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.extract_float_from_str": {"tf": 1}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.database.Database.set_format": {"tf": 1}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}}, "df": 4}}}}, "c": {"docs": {"howard.objects.database.Database.export": {"tf": 1}}, "df": 1, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.help_generation": {"tf": 1.4142135623730951}, "howard.functions.commons.format_arg_help": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 2}, "howard.functions.from_extann.metaheader_rows": {"tf": 1}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1.4142135623730951}}, "df": 5}}}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.hgvs.HGVSName.__init__": {"tf": 1}}, "df": 1, "d": {"docs": {"howard.functions.commons.format_arg_help": {"tf": 1}, "howard.functions.utils.parse_hgvs_name": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1}}, "df": 3}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.from_extann.metaheader_rows": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.database.Database.export": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}}, "df": 2}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.concat_into_infile": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {"howard.objects.hgvs": {"tf": 2.449489742783178}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.objects.database.Database.query": {"tf": 1}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}}, "df": 3, "d": {"docs": {"howard.objects.variant.justify_indel": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.utils.get_vcf_allele": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1.4142135623730951}, "howard.objects.hgvs": {"tf": 2}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.7320508075688772}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 1}}, "df": 6, "s": {"docs": {"howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1.4142135623730951}, "howard.objects.variant.justify_indel": {"tf": 1}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {"howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.from_annovar.tsv_to_parquet": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.hgvs": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.get_bin": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 4}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.get_default_argument": {"tf": 1.4142135623730951}, "howard.functions.commons.set_param": {"tf": 1.4142135623730951}, "howard.functions.commons.add_value_into_dict": {"tf": 2.6457513110645907}, "howard.functions.commons.load_config_args": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1.4142135623730951}, "howard.functions.commons.params_string_to_dict": {"tf": 2.6457513110645907}, "howard.functions.databases.databases_param": {"tf": 1}, "howard.functions.from_extann.create_metaheader": {"tf": 1}, "howard.functions.from_extann.read_json": {"tf": 1}, "howard.functions.plugins.plugins_to_load": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_duckdb_settings": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.get_config_json": {"tf": 1.4142135623730951}}, "df": 16, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.create_where_clause": {"tf": 1}, "howard.functions.commons.find_nomen": {"tf": 1.4142135623730951}, "howard.functions.commons.genotype_stats": {"tf": 1.7320508075688772}, "howard.functions.commons.get_bin": {"tf": 2}, "howard.functions.commons.get_bin_command": {"tf": 1.7320508075688772}, "howard.functions.commons.get_tmp": {"tf": 3.3166247903554}, "howard.functions.commons.get_threads": {"tf": 2}, "howard.functions.commons.get_memory": {"tf": 2.23606797749979}, "howard.functions.commons.get_argument": {"tf": 3.3166247903554}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 2.8284271247461903}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.get_default_argument": {"tf": 1.7320508075688772}, "howard.functions.commons.set_param": {"tf": 3.1622776601683795}, "howard.functions.commons.add_value_into_dict": {"tf": 2.449489742783178}, "howard.functions.commons.load_param": {"tf": 1.7320508075688772}, "howard.functions.commons.load_args": {"tf": 2.23606797749979}, "howard.functions.commons.params_string_to_dict": {"tf": 2.23606797749979}, "howard.functions.databases.databases_infos": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_param": {"tf": 2.449489742783178}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.functions.plugins.plugins_infos": {"tf": 2.23606797749979}, "howard.functions.plugins.plugins_list": {"tf": 2.449489742783178}, "howard.functions.plugins.plugins_to_load": {"tf": 2.6457513110645907}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.read_transcripts": {"tf": 1.7320508075688772}, "howard.functions.utils.get_genomic_sequence": {"tf": 1.4142135623730951}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1.4142135623730951}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.functions.utils.get_transcript": {"tf": 2}, "howard.objects.database.Database.get_needed_columns": {"tf": 1.7320508075688772}, "howard.objects.database.Database.map_columns": {"tf": 1}, "howard.objects.variants.Variants.__init__": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_samples": {"tf": 1}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.set_config": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.set_param": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_indexing": {"tf": 1}, "howard.objects.variants.Variants.get_connexion_config": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_duckdb_settings": {"tf": 1}, "howard.objects.variants.Variants.get_stats": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_verbose": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.drop_column": {"tf": 1}, "howard.objects.variants.Variants.get_memory": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.scan_databases": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.get_config_json": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 2}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1.7320508075688772}, "howard.tools.annotation.annotation": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1}}, "df": 61}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.plugins.plugins_to_load": {"tf": 1}}, "df": 2}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 1}}}}}}}, "/": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "r": {"docs": {"howard.functions.commons.find_genome": {"tf": 1}, "howard.functions.plugins.plugins_infos": {"tf": 1.7320508075688772}, "howard.functions.plugins.plugins_list": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_tmp_dir": {"tf": 1.4142135623730951}, "howard.tools.tools.PathType.__init__": {"tf": 1}}, "df": 5, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"howard.objects.genome.ChromosomeSubset": {"tf": 1}, "howard.objects.genome.GenomeSubset": {"tf": 1}}, "df": 2, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.find": {"tf": 1}, "howard.functions.commons.find_all": {"tf": 2.23606797749979}, "howard.functions.commons.find_genome": {"tf": 1}, "howard.functions.commons.find_file_prefix": {"tf": 1.4142135623730951}, "howard.functions.commons.extract_file": {"tf": 1.4142135623730951}, "howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.full_path": {"tf": 1.4142135623730951}, "howard.functions.plugins.plugins_infos": {"tf": 1.7320508075688772}, "howard.functions.plugins.plugins_list": {"tf": 2}, "howard.objects.database.Database.set_databases_folders": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_dirname": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.print_stats": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_tmp_dir": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.tools.tools.PathType.__init__": {"tf": 1}}, "df": 16}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.transcript.Transcript.get_cds_start_stop": {"tf": 1}, "howard.objects.variant.justify_indel": {"tf": 1}}, "df": 2}}}}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.genome_build_switch": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_protein": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_coords": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.get_config_default": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1}}, "df": 17, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {"howard.functions.utils.hgvs_justify_dup": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"howard.tools.databases.databases": {"tf": 1}}, "df": 1}}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.explode_snpeff_ann": {"tf": 1}}, "df": 1}}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.genotype_compression": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"howard.functions.commons.get_random": {"tf": 1.7320508075688772}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 3}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.utils.parse_hgvs_name": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.utils.parse_hgvs_name": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.transcript.BED6Interval.distance": {"tf": 2.8284271247461903}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"howard.objects.transcript.Exon.__init__": {"tf": 1}}, "df": 1}}}}}}}, "|": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "|": {"docs": {}, "df": 0, "f": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.barcode": {"tf": 1}, "howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.functions.commons.download_file": {"tf": 1}, "howard.functions.commons.compress_file": {"tf": 1}, "howard.functions.commons.concat_into_infile": {"tf": 1}, "howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.bed_sort": {"tf": 2}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.determine_column_types": {"tf": 1}, "howard.functions.commons.detect_column_type": {"tf": 1.4142135623730951}, "howard.functions.databases.query_and_concatenate_columns": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_format_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 2.449489742783178}, "howard.functions.databases.databases_download_exomiser": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.7320508075688772}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.functions.from_extann.extann_to_info": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1.7320508075688772}, "howard.functions.utils.read_refgene": {"tf": 1.4142135623730951}, "howard.functions.utils.read_genepred": {"tf": 1}, "howard.functions.utils.create_refseq_table": {"tf": 1.7320508075688772}, "howard.functions.utils.get_refseq_table": {"tf": 1.4142135623730951}, "howard.main.main": {"tf": 1}, "howard.objects.database.Database.get_header": {"tf": 1}, "howard.objects.database.Database.get_header_from_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.set_format": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.database.Database.get_columns": {"tf": 1.4142135623730951}, "howard.objects.database.Database.is_genotype_column": {"tf": 1.7320508075688772}, "howard.objects.database.Database.export": {"tf": 3.4641016151377544}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.load_data": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.add_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_output": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.transcripts_prioritization": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}, "howard.tools.annotation.annotation": {"tf": 1}, "howard.tools.calculation.calculation": {"tf": 1}, "howard.tools.hgvs.hgvs": {"tf": 1}, "howard.tools.query.query": {"tf": 1}, "howard.tools.stats.stats": {"tf": 1.4142135623730951}}, "df": 55, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.extract_snpeff_hgvs": {"tf": 1}, "howard.functions.commons.findbypipeline": {"tf": 2}, "howard.functions.commons.genotypeconcordance": {"tf": 2}, "howard.functions.commons.barcode": {"tf": 1}, "howard.functions.commons.trio": {"tf": 1}, "howard.functions.commons.vaf_normalization": {"tf": 1}, "howard.functions.commons.genotype_stats": {"tf": 1.7320508075688772}, "howard.functions.commons.transcripts_file_to_df": {"tf": 1.7320508075688772}, "howard.functions.commons.detect_column_type": {"tf": 1}, "howard.functions.from_extann.create_metaheader": {"tf": 1}, "howard.functions.from_extann.extann_to_info": {"tf": 1}, "howard.functions.from_extann.get_longest_transcript": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 2}, "howard.objects.variants.Variants.get_overview": {"tf": 1}, "howard.objects.variants.Variants.get_variant_id_column": {"tf": 1}}, "df": 17}}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1}, "howard.functions.commons.load_duckdb_extension": {"tf": 1}, "howard.functions.commons.duckdb_execute": {"tf": 1}, "howard.functions.databases.generate_databases_param": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_infos": {"tf": 3}, "howard.functions.databases.databases_param": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 2.8284271247461903}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 3.3166247903554}, "howard.functions.databases.databases_download_hgmd": {"tf": 3.1622776601683795}, "howard.functions.from_annovar.from_annovar": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1.7320508075688772}, "howard.functions.from_extann.from_extann": {"tf": 1}, "howard.functions.utils.create_refseq_table": {"tf": 2.23606797749979}, "howard.functions.utils.get_refseq_table": {"tf": 2.449489742783178}, "howard.objects.database.Database.__init__": {"tf": 3.605551275463989}, "howard.objects.database.Database.set_database": {"tf": 4}, "howard.objects.database.Database.get_database_folders": {"tf": 1.7320508075688772}, "howard.objects.database.Database.find_header_file": {"tf": 3.1622776601683795}, "howard.objects.database.Database.get_header": {"tf": 2}, "howard.objects.database.Database.get_header_from_columns": {"tf": 3.3166247903554}, "howard.objects.database.Database.query": {"tf": 2}, "howard.objects.database.Database.set_header": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_header_columns_from_database": {"tf": 3}, "howard.objects.database.Database.get_header_file": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 3.605551275463989}, "howard.objects.database.Database.get_database": {"tf": 1.7320508075688772}, "howard.objects.database.Database.get_database_basename": {"tf": 3.605551275463989}, "howard.objects.database.Database.get_database_dirname": {"tf": 3.3166247903554}, "howard.objects.database.Database.exists": {"tf": 3.1622776601683795}, "howard.objects.database.Database.get_format": {"tf": 3.605551275463989}, "howard.objects.database.Database.get_type": {"tf": 3.1622776601683795}, "howard.objects.database.Database.get_database_tables": {"tf": 2.6457513110645907}, "howard.objects.database.Database.get_database_table": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_type_from_columns": {"tf": 3}, "howard.objects.database.Database.get_needed_columns": {"tf": 3.605551275463989}, "howard.objects.database.Database.get_sql_from": {"tf": 2.8284271247461903}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 2.6457513110645907}, "howard.objects.database.Database.get_sql_database_link": {"tf": 3.605551275463989}, "howard.objects.database.Database.create_view": {"tf": 2.8284271247461903}, "howard.objects.database.Database.get_view": {"tf": 2.6457513110645907}, "howard.objects.database.Database.is_compressed": {"tf": 2.23606797749979}, "howard.objects.database.Database.get_header_infos_list": {"tf": 3.1622776601683795}, "howard.objects.database.Database.find_column": {"tf": 3.605551275463989}, "howard.objects.database.Database.map_columns": {"tf": 2.8284271247461903}, "howard.objects.database.Database.get_columns": {"tf": 3.7416573867739413}, "howard.objects.database.Database.get_table_columns_from_format": {"tf": 2.6457513110645907}, "howard.objects.database.Database.get_table_columns_from_file": {"tf": 2.449489742783178}, "howard.objects.database.Database.get_annotations": {"tf": 3.4641016151377544}, "howard.objects.database.Database.get_extra_columns": {"tf": 3.605551275463989}, "howard.objects.database.Database.is_vcf": {"tf": 2.8284271247461903}, "howard.objects.database.Database.is_genotype_column": {"tf": 3.1622776601683795}, "howard.objects.database.Database.export": {"tf": 3.1622776601683795}, "howard.objects.variants.Variants.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_connexion_db": {"tf": 1}, "howard.objects.variants.Variants.set_connexion": {"tf": 2}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.close_connexion": {"tf": 1}, "howard.objects.variants.Variants.is_genotype_column": {"tf": 2}, "howard.objects.variants.Variants.insert_file_to_table": {"tf": 1}, "howard.objects.variants.Variants.drop_column": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_duckdb": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf_sqlite": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.scan_databases": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_annovar": {"tf": 1}, "howard.objects.variants.Variants.calculation_genotype_concordance": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 1}}, "df": 71, "s": {"docs": {"howard.functions.databases.generate_databases_param": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_infos": {"tf": 2.8284271247461903}, "howard.functions.databases.databases_param": {"tf": 2.6457513110645907}, "howard.functions.databases.databases_download_annovar": {"tf": 2}, "howard.functions.databases.databases_download_snpeff": {"tf": 2.6457513110645907}, "howard.functions.databases.databases_download_refseq": {"tf": 2}, "howard.functions.databases.databases_format_refseq": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 3.872983346207417}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_exomiser": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1}, "howard.objects.database.Database.set_database": {"tf": 1.7320508075688772}, "howard.objects.database.Database.set_databases_folders": {"tf": 2}, "howard.objects.database.Database.get_database_folders": {"tf": 1}, "howard.objects.database.Database.find_database": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.scan_databases": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.4142135623730951}, "howard.tools.databases.databases": {"tf": 1.7320508075688772}}, "df": 21}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"howard.objects.variants.Variants.export_output": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.detect_column_type": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "h": {"docs": {"howard.tools.tools.PathType.__init__": {"tf": 1}}, "df": 1}}}, "f": {"docs": {"howard.functions.commons.findbypipeline": {"tf": 1.7320508075688772}, "howard.functions.commons.genotypeconcordance": {"tf": 1.4142135623730951}, "howard.functions.commons.barcode": {"tf": 1}, "howard.functions.commons.trio": {"tf": 1.4142135623730951}, "howard.functions.commons.genotype_stats": {"tf": 1}, "howard.functions.from_extann.get_gene_coordinate": {"tf": 1}, "howard.objects.variants.Variants.get_query_to_df": {"tf": 2}}, "df": 7}, "o": {"docs": {"howard.functions.from_extann.get_gene_coordinate": {"tf": 1}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}}, "df": 3, "t": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.genotype_compression": {"tf": 1.4142135623730951}}, "df": 1}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.trio": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "n": {"docs": {"howard.objects.variants.Variants.read_vcf_header_file": {"tf": 1}, "howard.tools.tools.PathType.__init__": {"tf": 1.4142135623730951}}, "df": 2, "e": {"docs": {"howard.functions.commons.extract_file": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}}, "df": 2}}, "w": {"docs": {}, "df": 0, "n": {"docs": {"howard.objects.database.Database.is_vcf": {"tf": 1}}, "df": 1, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.download_file": {"tf": 2.449489742783178}, "howard.functions.databases.databases_download_annovar": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_snpeff": {"tf": 2}, "howard.functions.databases.databases_download_genomes": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_refseq": {"tf": 2}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 3.4641016151377544}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_exomiser": {"tf": 2.8284271247461903}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}}, "df": 12, "s": {"docs": {"howard.functions.commons.download_file": {"tf": 1}, "howard.functions.databases.databases_download_annovar": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1}, "howard.tools.databases.databases": {"tf": 1}}, "df": 9}, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.commons.download_file": {"tf": 2}, "howard.functions.databases.databases_download_annovar": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_snpeff": {"tf": 1.7320508075688772}, "howard.functions.databases.databases_download_genomes": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_refseq": {"tf": 3.4641016151377544}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_alphamissense": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_exomiser": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_dbsnp": {"tf": 2.23606797749979}, "howard.functions.databases.databases_download_hgmd": {"tf": 1}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1}}, "df": 11}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.download_file": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_genomes": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.databases.databases_download_dbsnp": {"tf": 1.4142135623730951}}, "df": 6}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"howard.objects.cdna.CDNACoord": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.database.Database.is_genotype_column": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 2.23606797749979}, "howard.functions.commons.check_docker_image_exists": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.help_generation_from_dict": {"tf": 3.7416573867739413}, "howard.functions.commons.help_generation_from_json": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.tools.help.help": {"tf": 1}}, "df": 4}}}}}}}}}}, "s": {"docs": {"howard.objects.variants.Variants.annotation_exomiser": {"tf": 2.23606797749979}}, "df": 1, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.database.Database.__init__": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.commons.determine_column_types": {"tf": 1.4142135623730951}, "howard.functions.commons.detect_column_type": {"tf": 1.4142135623730951}, "howard.functions.from_annovar.tsv_to_parquet": {"tf": 1}, "howard.objects.variants.Variants.get_extra_infos_sql": {"tf": 1}}, "df": 5}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}, "howard.functions.databases.databases_download_exomiser": {"tf": 1}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1}, "howard.functions.utils.get_refseq_table": {"tf": 1}, "howard.objects.database.Database.get_database_basename": {"tf": 1}, "howard.objects.database.Database.get_type": {"tf": 1}, "howard.objects.database.Database.get_database_tables": {"tf": 1}, "howard.objects.hgvs.InvalidHGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.parse_protein": {"tf": 1}, "howard.objects.variants.Variants.print_stats": {"tf": 1}, "howard.objects.variants.Variants.drop_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_output": {"tf": 1}, "howard.objects.variants.Variants.calculation_vaf_normalization": {"tf": 1}, "howard.tools.tools.PathType.__init__": {"tf": 1.4142135623730951}}, "df": 15, "n": {"docs": {"howard.objects.variants.Variants.get_verbose": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1}}, "df": 3}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.objects.hgvs": {"tf": 2}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1.7320508075688772}}, "df": 3, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"howard.functions.from_extann.get_gene_coordinate": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}}, "df": 2, "s": {"docs": {"howard.functions.commons.genotype_compression": {"tf": 1.4142135623730951}}, "df": 1}, "d": {"docs": {"howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.objects.hgvs": {"tf": 2}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}}, "df": 3, "s": {"docs": {"howard.functions.utils.hgvs_normalize_variant": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_ref_alt": {"tf": 1}}, "df": 2}}}}}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.concat_and_compress_files": {"tf": 1}, "howard.functions.commons.load_args": {"tf": 1.7320508075688772}, "howard.functions.commons.determine_value_type": {"tf": 1}, "howard.functions.commons.clean_annotation_field": {"tf": 1}, "howard.functions.databases.databases_download_dbnsfp": {"tf": 1}, "howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}, "howard.functions.from_annovar.parquet_info_explode": {"tf": 1.4142135623730951}, "howard.objects.database.Database.export": {"tf": 1.4142135623730951}, "howard.objects.transcript.CDNA_Match.get_offset": {"tf": 1}, "howard.objects.variants.Variants.export_output": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.export_variant_vcf": {"tf": 1}, "howard.objects.variants.Variants.prioritization": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1}, "howard.objects.variants.Variants.calculation_barcode_family": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view_from_columns_map": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.create_transcript_view_from_column_format": {"tf": 2}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 1}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 18}}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "b": {"docs": {"howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 2.23606797749979}, "howard.functions.commons.get_duckdb_extension_file": {"tf": 2.23606797749979}, "howard.functions.commons.load_duckdb_extension": {"tf": 2.449489742783178}, "howard.functions.commons.duckdb_execute": {"tf": 2}, "howard.objects.database.Database.__init__": {"tf": 2}, "howard.objects.database.Database.get_format": {"tf": 1.4142135623730951}, "howard.objects.database.Database.get_database_tables": {"tf": 1}, "howard.objects.database.Database.get_sql_database_attach": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}, "howard.objects.variants.Variants.get_duckdb_settings": {"tf": 2}, "howard.objects.variants.Variants.set_connexion": {"tf": 1}, "howard.objects.variants.Variants.add_column": {"tf": 1}, "howard.objects.variants.Variants.update_from_vcf": {"tf": 1}}, "df": 13, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.get_plateform_name_from_duckdb": {"tf": 1}, "howard.functions.commons.load_duckdb_extension": {"tf": 1}, "howard.objects.database.Database.__init__": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {"howard.functions.commons.genotype_compression": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1.4142135623730951}, "howard.objects.cdna.CDNACoord": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.__init__": {"tf": 1.4142135623730951}, "howard.objects.hgvs.HGVSName.format_dna_allele": {"tf": 2}, "howard.objects.hgvs.HGVSName.format_cdna": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_genome": {"tf": 1}}, "df": 8}, "s": {"docs": {"howard.functions.commons.download_file": {"tf": 2}}, "df": 1}}, "b": {"docs": {"howard.main.main": {"tf": 1}, "howard.objects.genome.MockGenome.__init__": {"tf": 1}, "howard.objects.genome.MockGenomeTestFile.__init__": {"tf": 1}, "howard.objects.variants.Variants.set_connexion_db": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_connexion_db": {"tf": 1.4142135623730951}}, "df": 5, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.databases.databases_download_dbnsfp": {"tf": 4.795831523312719}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.databases.databases_download_dbsnp": {"tf": 5.477225575051661}}, "df": 1, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.databases.databases_download_dbsnp": {"tf": 1}}, "df": 1}}}}}}}}}}}, "p": {"docs": {"howard.objects.database.Database.find_column": {"tf": 1}}, "df": 1, "/": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {"howard.objects.database.Database.find_column": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {}, "df": 0, "l": {"docs": {"howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"howard.objects.variants.Variants.load_data": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.add_column": {"tf": 2.449489742783178}, "howard.objects.variants.Variants.drop_column": {"tf": 2}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}, "howard.objects.variants.Variants.create_transcript_view": {"tf": 2.23606797749979}}, "df": 5, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.variants.Variants.load_data": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.drop_column": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.explode_infos": {"tf": 1}}, "df": 3}}}, "s": {"docs": {"howard.objects.variants.Variants.drop_column": {"tf": 1}, "howard.objects.variants.Variants.drop_variants_table": {"tf": 1}}, "df": 2}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.commons.create_where_clause": {"tf": 1}, "howard.functions.commons.get_tmp": {"tf": 2.6457513110645907}, "howard.functions.commons.get_threads": {"tf": 1.7320508075688772}, "howard.functions.commons.get_memory": {"tf": 1.7320508075688772}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.get_default_argument": {"tf": 1}, "howard.functions.commons.set_param": {"tf": 1}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.params_string_to_dict": {"tf": 1.4142135623730951}, "howard.functions.databases.databases_param": {"tf": 1}, "howard.functions.plugins.plugins_infos": {"tf": 1}, "howard.functions.plugins.plugins_list": {"tf": 1}, "howard.functions.plugins.plugins_to_load": {"tf": 1}, "howard.functions.utils.cdna_to_protein": {"tf": 1}, "howard.functions.utils.get_transcript": {"tf": 1}, "howard.objects.variants.Variants.get_samples_check": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_indexing": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.set_output": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_verbose": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.get_config_default": {"tf": 1}, "howard.objects.variants.Variants.get_config_json": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.annotation_format_to_table": {"tf": 1}}, "df": 22, "s": {"docs": {"howard.functions.commons.find_nomen": {"tf": 1}, "howard.functions.commons.get_argument_to_mk": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1}, "howard.functions.commons.help_generation": {"tf": 1}, "howard.functions.commons.add_value_into_dict": {"tf": 1}, "howard.functions.commons.load_config_args": {"tf": 1}, "howard.functions.databases.databases_infos": {"tf": 1}, "howard.functions.databases.databases_download_refseq": {"tf": 1}, "howard.functions.plugins.plugins_to_load": {"tf": 1.7320508075688772}, "howard.functions.utils.make_transcript": {"tf": 1}, "howard.functions.utils.read_transcripts": {"tf": 1}, "howard.functions.utils.get_genomic_sequence": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.functions.utils.get_transcript": {"tf": 1}, "howard.objects.variants.Variants.drop_column": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_sql": {"tf": 1}, "howard.objects.variants.Variants.calculation_process_function": {"tf": 1}}, "df": 17}, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"howard.functions.utils.read_refgene": {"tf": 1}, "howard.objects.database.Database.export": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 1}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.load_args": {"tf": 1}, "howard.functions.from_extann.create_metaheader": {"tf": 1}, "howard.functions.from_extann.get_longest_transcript": {"tf": 1}, "howard.functions.from_extann.get_chosen_transcript": {"tf": 1}}, "df": 7, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.objects.variant.NormalizedVariant.__init__": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.clean_annotation_field": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.from_annovar.annovar_to_vcf": {"tf": 1}}, "df": 1}}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"howard.objects.hgvs.HGVSName.__init__": {"tf": 1.7320508075688772}, "howard.objects.hgvs.HGVSName.parse_allele": {"tf": 1}, "howard.objects.hgvs.HGVSName.get_raw_coords": {"tf": 1}}, "df": 3}}}}, "j": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"howard.functions.commons.find_file_prefix": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_cdna_coords": {"tf": 1}, "howard.objects.hgvs.HGVSName.format_coords": {"tf": 1}, "howard.objects.transcript.Transcript.full_name": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1.4142135623730951}, "howard.objects.variant.justify_indel": {"tf": 1.7320508075688772}}, "df": 3, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.utils.hgvs_justify_indel": {"tf": 1}, "howard.functions.utils.hgvs_normalize_variant": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"howard.functions.utils.hgvs_justify_dup": {"tf": 1}, "howard.functions.utils.hgvs_justify_indel": {"tf": 1}}, "df": 2}}}}}}}}, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"howard.functions.commons.find_nomen": {"tf": 1}, "howard.functions.commons.explode_annotation_format": {"tf": 1}}, "df": 2}}}}}, "b": {"docs": {"howard.objects.variants.Variants.get_threads": {"tf": 1.4142135623730951}}, "df": 1}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"howard.functions.commons.explode_annotation_format": {"tf": 2}, "howard.functions.commons.explode_snpeff_ann": {"tf": 1}, "howard.functions.commons.help_generation_from_dict": {"tf": 1.4142135623730951}, "howard.functions.commons.help_generation_from_json": {"tf": 3.605551275463989}, "howard.functions.commons.load_param": {"tf": 1}, "howard.functions.commons.load_config_args": {"tf": 1}, "howard.functions.databases.databases_param": {"tf": 1.4142135623730951}, "howard.functions.from_extann.read_json": {"tf": 1}, "howard.functions.utils.make_transcript": {"tf": 2}, "howard.functions.utils.json_perfect_exons_to_cdna_match": {"tf": 1}, "howard.objects.database.Database.get_sql_from": {"tf": 1}, "howard.objects.variants.Variants.stats_to_file": {"tf": 1.7320508075688772}, "howard.objects.variants.Variants.print_stats": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.annotation_exomiser": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.get_config_json": {"tf": 2.6457513110645907}, "howard.objects.variants.Variants.calculation": {"tf": 1}, "howard.objects.variants.Variants.calculation_snpeff_ann_explode": {"tf": 1.4142135623730951}, "howard.objects.variants.Variants.calculation_transcripts_annotation": {"tf": 2.23606797749979}, "howard.objects.variants.Variants.transcript_view_to_variants": {"tf": 2.8284271247461903}, "howard.tools.process.process": {"tf": 1}}, "df": 20}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {"howard.functions.commons.get_bin": {"tf": 2.6457513110645907}, "howard.functions.commons.get_bin_command": {"tf": 1.7320508075688772}}, "df": 2}, "v": {"docs": {}, "df": 0, "a": {"docs": {"howard.functions.commons.get_bin_command": {"tf": 2}, "howard.functions.databases.databases_download_snpeff": {"tf": 1}}, "df": 2}}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {"howard.objects.transcript.Transcript.is_coding": {"tf": 1.4142135623730951}, "howard.objects.transcript.BED6Interval.distance": {"tf": 1.4142135623730951}}, "df": 2, "s": {"docs": {"howard.functions.commons.genotype_compression": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "p": {"docs": {"howard.functions.commons.extract_file": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "pipeline": ["trimmer"], "_isPrebuiltIndex": true};

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();